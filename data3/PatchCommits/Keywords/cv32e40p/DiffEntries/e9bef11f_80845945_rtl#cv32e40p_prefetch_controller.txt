e9bef11ff391a593dd32012bb5e6fe7795ac9d0e
Merge pull request #475 from davideschiavone/fix_debug_ss
diff --git a/rtl/cv32e40p_prefetch_controller.sv b/rtl/cv32e40p_prefetch_controller.sv
index 6bb56b4..1dec8d9 100644
--- a/rtl/cv32e40p_prefetch_controller.sv
+++ b/rtl/cv32e40p_prefetch_controller.sv
@@ -68,6 +68,7 @@ module cv32e40p_prefetch_controller
   // Fetch interface is ready/valid
   input  logic                     fetch_ready_i,
   output logic                     fetch_valid_o,
+
   // FIFO interface
   output logic                     fifo_push_o,             // PUSH an instruction into the FIFO
   output logic                     fifo_pop_o,              // POP an instruction from the FIFO
@@ -164,7 +165,7 @@ module cv32e40p_prefetch_controller
     next_state = state_q;
     trans_addr_o = trans_addr_q;
 
-    unique case(state_q)
+    case(state_q)
       // Default state (pass on branch target address or transaction with incremented address)
       IDLE:
       begin
@@ -363,71 +364,4 @@ module cv32e40p_prefetch_controller
     end
   end
 
-  //----------------------------------------------------------------------------
-  // Assertions
-  //----------------------------------------------------------------------------
-
-`ifdef CV32E40P_ASSERT_ON
-
-  // Check that outstanding transaction count will not overflow DEPTH
-  property p_no_transaction_count_overflow_0;
-     @(posedge clk) (1'b1) |-> (cnt_q <= DEPTH);
-  endproperty
-
-  a_no_transaction_count_overflow_0 : assert property(p_no_transaction_count_overflow_0);
-
-  property p_no_transaction_count_overflow_1;
-     @(posedge clk) (cnt_q == DEPTH) |-> (!count_up || count_down);
-  endproperty
-
-  a_no_transaction_count_overflow_1 : assert property(p_no_transaction_count_overflow_1);
-
-  generate
-  if (PULP_XPULP) begin
-    // When HWLP_END-4 is in ID and we are hwlp branching,
-    // HWLP_END should at least have already been granted
-    // by the OBI interface
-    property p_hwlp_end_already_gnt_when_hwlp_branch;
-       @(posedge clk) (hwlp_jump_i) |-> (cnt_q > 0 || !fifo_empty_i || resp_valid_i);
-    endproperty
-
-    a_hwlp_end_already_gnt_when_hwlp_branch : assert property(p_hwlp_end_already_gnt_when_hwlp_branch);
-
-  end else begin
-
-    property p_hwlp_not_used;
-       @(posedge clk) (1'b1) |-> ((hwlp_jump_i == 1'b0) && (hwlp_target_i == 32'b0) && (hwlp_wait_resp_flush == 1'b0) &&
-                                  (hwlp_flush_after_resp == 1'b0) && (hwlp_flush_resp_delayed == 1'b0) && (hwlp_flush_cnt_delayed_q == 0) &&
-                                  (hwlp_flush_resp == 1'b0));
-    endproperty
-
-    a_hwlp_not_used : assert property(p_hwlp_not_used);
-
-  end
-  endgenerate
-
-
- // Check that a taken branch can only occur if fetching is requested
-  property p_branch_implies_req;
-     @(posedge clk) (branch_i) |-> (req_i);
-  endproperty
-
-  a_branch_implies_req : assert property(p_branch_implies_req);
-
-  // Check that after a taken branch the initial FIFO output is not accepted
-  property p_branch_invalidates_fifo;
-     @(posedge clk) (branch_i) |-> (!(fetch_valid_o && fetch_ready_i));
-  endproperty
-
-  a_branch_invalidates_fifo : assert property(p_branch_invalidates_fifo);
-
-  // Check that hwlp_branch and branch_i cannot happen at the same moment
-  property p_jump_hwlpBranch_not_together;
-     @(posedge clk) (branch_i || hwlp_jump_i) |-> (!hwlp_jump_i || !branch_i);
-  endproperty
-
-  a_jump_hwlpBranch_not_together : assert property(p_jump_hwlpBranch_not_together);
-
-`endif
-
 endmodule // cv32e40p_prefetch_controller