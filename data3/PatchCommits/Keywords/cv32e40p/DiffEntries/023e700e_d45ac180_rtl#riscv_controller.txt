023e700e19d69d9db3a8bd5b798c49054c7b14fd
add wake_from_sleep signal. Optimize decoder to perform NOP from WFI when in single step, debug, trigger
diff --git a/rtl/riscv_controller.sv b/rtl/riscv_controller.sv
index 20f8ab3..12b5f5d 100644
--- a/rtl/riscv_controller.sv
+++ b/rtl/riscv_controller.sv
@@ -119,6 +119,7 @@ module riscv_controller
 
   // Debug Signal
   output logic         debug_mode_o,
+  output logic         debug_req_pending_o,
   output logic [2:0]   debug_cause_o,
   output logic         debug_csr_save_o,
   input  logic         debug_req_i,
@@ -127,6 +128,9 @@ module riscv_controller
   input  logic         debug_ebreaku_i,
   input  logic         trigger_match_i,
 
+  // Wakeup Signal
+  output logic        wake_from_sleep_o,
+
   output logic        csr_save_if_o,
   output logic        csr_save_id_o,
   output logic        csr_save_ex_o,
@@ -202,7 +206,7 @@ module riscv_controller
 
   logic instr_valid_irq_flush_n, instr_valid_irq_flush_q;
 
-  logic debug_req_q, debug_req_int;
+  logic debug_req_q;
 
 `ifndef SYNTHESIS
   // synopsys translate_off
@@ -345,7 +349,7 @@ module riscv_controller
 
         // normal execution flow
         // in debug mode or single step mode we leave immediately (wfi=nop)
-        if (irq_pending_i || (debug_req_int || debug_mode_q || debug_single_step_i || trigger_match_i)) begin
+        if (wake_from_sleep_o ) begin
           ctrl_fsm_ns  = FIRST_FETCH;
         end
 
@@ -370,7 +374,7 @@ module riscv_controller
           halt_id_o   = 1'b1;
         end
 
-        if ((debug_req_int || trigger_match_i) & (~debug_mode_q))
+        if ((debug_req_pending_o || trigger_match_i) & (~debug_mode_q))
         begin
           ctrl_fsm_ns = DBG_TAKEN_IF;
           halt_if_o   = 1'b1;
@@ -445,7 +449,7 @@ module riscv_controller
               //irq_req_ctrl_i comes from a FF in the interrupt controller
               //irq_enable_int: check again irq_enable_int because xIE could have changed
               //don't serve in debug mode
-              irq_req_ctrl_i & irq_enable_int & (~debug_req_int) & (~debug_mode_q):
+              irq_req_ctrl_i & irq_enable_int & (~debug_req_pending_o) & (~debug_mode_q):
               begin
                 //Serving the external interrupt
                 halt_if_o     = 1'b1;
@@ -455,7 +459,7 @@ module riscv_controller
               end
 
 
-              (debug_req_int || trigger_match_i) & (~debug_mode_q):
+              (debug_req_pending_o || trigger_match_i) & (~debug_mode_q):
               begin
                 //Serving the debug
                 halt_if_o     = 1'b1;
@@ -695,7 +699,7 @@ module riscv_controller
         //If an interrupt occurs, we replay the ELW
         //No needs to check irq_int_req_i since in the EX stage there is only the elw, no CSR pendings
         if(id_ready_i)
-          ctrl_fsm_ns = ((debug_req_int || trigger_match_i) & ~debug_mode_q) ? DBG_FLUSH : IRQ_FLUSH_ELW;
+          ctrl_fsm_ns = ((debug_req_pending_o || trigger_match_i) & ~debug_mode_q) ? DBG_FLUSH : IRQ_FLUSH_ELW;
           // if from the ELW EXE we go to IRQ_FLUSH_ELW, it is assumed that if there was an IRQ req together with the grant and IE was valid, then
           // there must be no hazard due to xIE
         else
@@ -926,12 +930,12 @@ module riscv_controller
         pc_set_o          = 1'b1;
         pc_mux_o          = PC_EXCEPTION;
         exc_pc_mux_o      = EXC_PC_DBD;
-        if (((debug_req_int || trigger_match_i) && (~debug_mode_q)) ||
+        if (((debug_req_pending_o || trigger_match_i) && (~debug_mode_q)) ||
             (ebrk_insn_i && ebrk_force_debug_mode && (~debug_mode_q))) begin
             csr_save_cause_o = 1'b1;
             csr_save_id_o    = 1'b1;
             debug_csr_save_o = 1'b1;
-            if (debug_req_int)
+            if (debug_req_pending_o)
                 debug_cause_o = DBG_CAUSE_HALTREQ;
             if (ebrk_insn_i)
                 debug_cause_o = DBG_CAUSE_EBREAK;
@@ -952,7 +956,7 @@ module riscv_controller
         debug_csr_save_o  = 1'b1;
         if (debug_single_step_i)
             debug_cause_o = DBG_CAUSE_STEP;
-        if (debug_req_int)
+        if (debug_req_pending_o)
             debug_cause_o = DBG_CAUSE_HALTREQ;
         if (ebrk_insn_i)
             debug_cause_o = DBG_CAUSE_EBREAK;
@@ -1140,9 +1144,12 @@ module riscv_controller
   assign perf_jr_stall_o  = jr_stall_o;
   assign perf_ld_stall_o  = load_stall_o;
 
+  // wakeup from sleep conditions
+  assign wake_from_sleep_o = irq_pending_i || debug_req_pending_o || debug_mode_q ;
+
   // debug mode
   assign debug_mode_o = debug_mode_q;
-  assign debug_req_int = debug_req_i | debug_req_q;
+  assign debug_req_pending_o = debug_req_i | debug_req_q;
 
   // sticky version of debug_req
   always_ff @(posedge clk , negedge rst_n)