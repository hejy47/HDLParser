5b90debec29fda29768c39edfe87732c17c91c9b
:bug: fixed Killed controller-interrupt requests do not assert decoded instructions #160
diff --git a/rtl/riscv_controller.sv b/rtl/riscv_controller.sv
index c4db18f..f496f8b 100644
--- a/rtl/riscv_controller.sv
+++ b/rtl/riscv_controller.sv
@@ -201,6 +201,8 @@ module riscv_controller
 
   logic illegal_insn_q, illegal_insn_n;
 
+  logic instr_valid_irq_flush_n, instr_valid_irq_flush_q;
+
 `ifndef SYNTHESIS
   // synopsys translate_off
   // make sure we are called later so that we do not generate messages for
@@ -287,6 +289,12 @@ module riscv_controller
 
     perf_pipeline_stall_o  = 1'b0;
 
+
+    //this signal goes to 1 only registered interrupt requests are killed by exc_kill_o
+    //so that the current instructions will have the deassert_we_o signal equal to 0 once the controller is back to DECODE
+    instr_valid_irq_flush_n = 1'b0;
+
+
     unique case (ctrl_fsm_cs)
       // We were just reset, wait for fetch_enable
       RESET:
@@ -424,7 +432,7 @@ module riscv_controller
           // decode and execute instructions only if the current conditional
           // branch in the EX stage is either not taken, or there is no
           // conditional branch in the EX stage
-          else if (instr_valid_i) //valid block or replay after interrupt speculation
+          else if (instr_valid_i || instr_valid_irq_flush_q) //valid block or replay after interrupt speculation
           begin // now analyze the current instruction in the ID stage
 
             is_decoding_o = 1'b1;
@@ -636,6 +644,7 @@ module riscv_controller
           end else begin
             // we can go back to decode in case the IRQ is not taken (no ELW REPLAY)
             exc_kill_o   = 1'b1;
+            instr_valid_irq_flush_n =1'b1;
             ctrl_fsm_ns  = DECODE;
           end
         end
@@ -1058,6 +1067,8 @@ module riscv_controller
       debug_mode_q   <= 1'b0;
       illegal_insn_q <= 1'b0;
 
+      instr_valid_irq_flush_q <= 1'b0;
+
     end
     else
     begin
@@ -1072,6 +1083,7 @@ module riscv_controller
 
       illegal_insn_q <= illegal_insn_n;
 
+      instr_valid_irq_flush_q <= instr_valid_irq_flush_n;
     end
   end
 