c0c6549a5b15b3713a572c131e4a1bef1ef25315
Merge pull request #464 from Silabs-ArjanB/ArjanB_bge_div
diff --git a/rtl/cv32e40p_decoder.sv b/rtl/cv32e40p_decoder.sv
index bf4a459..d813dc4 100644
--- a/rtl/cv32e40p_decoder.sv
+++ b/rtl/cv32e40p_decoder.sv
@@ -48,7 +48,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
   input  logic        deassert_we_i,           // deassert we, we are stalled or not active
   input  logic        data_misaligned_i,       // misaligned data load/store in progress
   input  logic        mult_multicycle_i,       // multiplier taking multiple cycles, using op c as storage
-  output logic        instr_multicycle_o,      // true when multiple cycles are decoded
 
   output logic        illegal_insn_o,          // illegal instruction encountered
   output logic        ebrk_insn_o,             // trap instruction encountered
@@ -307,7 +306,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
     alu_bmask_a_mux_sel_o       = BMASK_A_IMM;
     alu_bmask_b_mux_sel_o       = BMASK_B_IMM;
 
-    instr_multicycle_o          = 1'b0;
     is_clpx_o                   = 1'b0;
     is_subrot_o                 = 1'b0;
 
@@ -412,7 +410,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
           rega_used_o    = 1'b1;
           regb_used_o    = 1'b1;
           alu_operator_o = ALU_ADD;
-          instr_multicycle_o = 1'b1;
           // pass write data through ALU operand c
           alu_op_c_mux_sel_o = OP_C_REGB_OR_FWD;
 
@@ -461,7 +458,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
           regfile_mem_we  = 1'b1;
           rega_used_o     = 1'b1;
           data_type_o     = 2'b00;
-          instr_multicycle_o = 1'b1;
           // offset from immediate
           alu_operator_o      = ALU_ADD;
           alu_op_b_mux_sel_o  = OP_B_IMM;
@@ -1199,7 +1195,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               mult_signed_mode_o = 2'b11;
               mult_int_en        = 1'b1;
               mult_operator_o    = MUL_H;
-              instr_multicycle_o = 1'b1;
             end
             {6'b00_0001, 3'b010}: begin // mulhsu
               alu_en             = 1'b0;
@@ -1208,7 +1203,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               mult_signed_mode_o = 2'b01;
               mult_int_en        = 1'b1;
               mult_operator_o    = MUL_H;
-              instr_multicycle_o = 1'b1;
             end
             {6'b00_0001, 3'b011}: begin // mulhu
               alu_en             = 1'b0;
@@ -1217,7 +1211,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               mult_signed_mode_o = 2'b00;
               mult_int_en        = 1'b1;
               mult_operator_o    = MUL_H;
-              instr_multicycle_o = 1'b1;
             end
             {6'b00_0001, 3'b100}: begin // div
               alu_op_a_mux_sel_o = OP_A_REGB_OR_FWD;
@@ -1227,7 +1220,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               regb_used_o        = 1'b1;
               rega_used_o        = 1'b0;
               alu_operator_o     = ALU_DIV;
-              instr_multicycle_o = 1'b1;
             end
             {6'b00_0001, 3'b101}: begin // divu
               alu_op_a_mux_sel_o = OP_A_REGB_OR_FWD;
@@ -1237,7 +1229,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               regb_used_o        = 1'b1;
               rega_used_o        = 1'b0;
               alu_operator_o     = ALU_DIVU;
-              instr_multicycle_o = 1'b1;
             end
             {6'b00_0001, 3'b110}: begin // rem
               alu_op_a_mux_sel_o = OP_A_REGB_OR_FWD;
@@ -1247,7 +1238,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               regb_used_o        = 1'b1;
               rega_used_o        = 1'b0;
               alu_operator_o     = ALU_REM;
-              instr_multicycle_o = 1'b1;
             end
             {6'b00_0001, 3'b111}: begin // remu
               alu_op_a_mux_sel_o = OP_A_REGB_OR_FWD;
@@ -1257,7 +1247,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               regb_used_o        = 1'b1;
               rega_used_o        = 1'b0;
               alu_operator_o     = ALU_REMU;
-              instr_multicycle_o = 1'b1;
             end
 
             // PULP specific instructions
@@ -2111,7 +2100,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
           regb_used_o         = 1'b1;
           alu_operator_o      = ALU_ADD;
           reg_fp_b_o          = 1'b1;
-          instr_multicycle_o  = 1'b1;
 
           // offset from immediate
           imm_b_mux_sel_o     = IMMB_S;
@@ -2155,7 +2143,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
           reg_fp_d_o          = 1'b1;
           rega_used_o         = 1'b1;
           alu_operator_o      = ALU_ADD;
-          instr_multicycle_o  = 1'b1;
 
           // offset from immediate
           imm_b_mux_sel_o     = IMMB_I;
@@ -2572,7 +2559,8 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
               12'h002:  // uret
               begin
-                uret_insn_o   = (PULP_SECURE) ? 1'b1 : 1'b0;
+                illegal_insn_o = (PULP_SECURE) ? 1'b0 : 1'b1;
+                uret_insn_o    = ~illegal_insn_o;
                 uret_dec_o     = 1'b1;
               end
 
@@ -2613,7 +2601,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
           alu_op_b_mux_sel_o  = OP_B_IMM;
           imm_a_mux_sel_o     = IMMA_Z;
           imm_b_mux_sel_o     = IMMB_I;    // CSR address is encoded in I imm
-          instr_multicycle_o  = 1'b1;
 
           if (instr_rdata_i[14] == 1'b1) begin
             // rs1 field is used as immediate
@@ -2639,7 +2626,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
           end
 
           // Determine if CSR access is illegal
-          casex(instr_rdata_i[31:20])
+          case (instr_rdata_i[31:20])
             // Floating point
             CSR_FFLAGS,
               CSR_FRM,
@@ -2647,7 +2634,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                 if(!FPU) csr_illegal = 1'b1;
 
             // Floating point (custom)
-            FPREC :
+            CSR_FPREC :
                 if(!(FPU && PULP_XPULP)) csr_illegal = 1'b1;
 
             //  Writes to read only CSRs results in illegal instruction
@@ -2739,30 +2726,48 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                 if(!debug_mode_i) csr_illegal = 1'b1;
 
             // Debug Trigger register access
-            CSR_TSELECT     ,
-              CSR_TDATA1    ,
-              CSR_TDATA2    ,
-              CSR_TDATA3    ,
-              CSR_TINFO     ,
-              CSR_MCONTEXT  ,
-              CSR_SCONTEXT  :
+            CSR_TSELECT,
+              CSR_TDATA1,
+              CSR_TDATA2,
+              CSR_TDATA3,
+              CSR_TINFO,
+              CSR_MCONTEXT,
+              CSR_SCONTEXT :
                 if(DEBUG_TRIGGER_EN != 1)
                   csr_illegal = 1'b1;
 
-            // Hardware Loop register access
-            HWLoop0_START,
-              HWLoop0_END,
-              HWLoop0_COUNTER,
-              HWLoop1_START,
-              HWLoop1_END,
-              HWLoop1_COUNTER,
-              UHARTID,
-              PRIVLV :
+            // Hardware Loop register, UHARTID, PRIVLV access
+            CSR_LPSTART0,
+              CSR_LPEND0,
+              CSR_LPCOUNT0,
+              CSR_LPSTART1,
+              CSR_LPEND1,
+              CSR_LPCOUNT1,
+              CSR_UHARTID,
+              CSR_PRIVLV :
                 if(!PULP_XPULP) csr_illegal = 1'b1;
 
             // PMP register access
-            CSR_PMPCFG_RANGE_X,
-              CSR_PMPADDR_RANGE_X :
+            CSR_PMPCFG0,
+              CSR_PMPCFG1,
+              CSR_PMPCFG2,
+              CSR_PMPCFG3,
+              CSR_PMPADDR0,
+              CSR_PMPADDR1,
+              CSR_PMPADDR2,
+              CSR_PMPADDR3,
+              CSR_PMPADDR4,
+              CSR_PMPADDR5,
+              CSR_PMPADDR6,
+              CSR_PMPADDR7,
+              CSR_PMPADDR8,
+              CSR_PMPADDR9,
+              CSR_PMPADDR10,
+              CSR_PMPADDR11,
+              CSR_PMPADDR12,
+              CSR_PMPADDR13,
+              CSR_PMPADDR14,
+              CSR_PMPADDR15 :
                 if(!USE_PMP) csr_illegal = 1'b1;
 
             // User register access
@@ -2774,7 +2779,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
             default : csr_illegal = 1'b1;
 
-          endcase // casex (instr_rdata_i[31:20])
+          endcase // case (instr_rdata_i[31:20])
 
           // set csr_status for specific CSR register access:
           //  Causes controller to enter FLUSH