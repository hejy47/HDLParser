d5c526d95e2d085ffcdf43eb37410d06ba8c8ad1
Merge pull request #511 from Silabs-ArjanB/ArjanB_irq_0
diff --git a/rtl/cv32e40p_core.sv b/rtl/cv32e40p_core.sv
index 30f0486..4042ea0 100644
--- a/rtl/cv32e40p_core.sv
+++ b/rtl/cv32e40p_core.sv
@@ -294,6 +294,8 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   logic        m_irq_enable, u_irq_enable;
   logic        csr_irq_sec;
   logic [31:0] mepc, uepc, depc;
+  logic [31:0] mie_bypass;
+  logic [31:0] mip;
 
   logic        csr_save_cause;
   logic        csr_save_if;
@@ -355,10 +357,6 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   logic [31:0]                      instr_addr_pmp;
   logic                             instr_err_pmp;
 
-  // interrupt signals
-  logic        irq_pending;
-  logic [4:0]  irq_id;
-
   // Mux selector for vectored IRQ PC
   assign m_exc_vec_pc_mux_id = (mtvec_mode == 2'b0) ? 5'h0 : exc_cause;
   assign u_exc_vec_pc_mux_id = (utvec_mode == 2'b0) ? 5'h0 : exc_cause;
@@ -705,11 +703,11 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
     .data_err_i                   ( data_err_pmp         ),
     .data_err_ack_o               ( data_err_ack         ),
 
-
     // Interrupt Signals
-    .irq_pending_i                ( irq_pending          ), // incoming interrupts
-    .irq_id_i                     ( irq_id               ),
+    .irq_i                        ( irq_i                ),
     .irq_sec_i                    ( (PULP_SECURE) ? irq_sec_i : 1'b0 ),
+    .mie_bypass_i                 ( mie_bypass           ),
+    .mip_o                        ( mip                  ),
     .m_irq_enable_i               ( m_irq_enable         ),
     .u_irq_enable_i               ( u_irq_enable         ),
     .irq_ack_o                    ( irq_ack_o            ),
@@ -1000,15 +998,14 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
     .fflags_we_i             ( fflags_we          ),
 
     // Interrupt related control signals
+    .mie_bypass_o            ( mie_bypass         ),
+    .mip_i                   ( mip                ),
     .m_irq_enable_o          ( m_irq_enable       ),
     .u_irq_enable_o          ( u_irq_enable       ),
     .csr_irq_sec_i           ( csr_irq_sec        ),
     .sec_lvl_o               ( sec_lvl_o          ),
     .mepc_o                  ( mepc               ),
     .uepc_o                  ( uepc               ),
-    .irq_i                   ( irq_i              ),
-    .irq_pending_o           ( irq_pending        ), // IRQ to ID/Controller
-    .irq_id_o                ( irq_id             ),
 
     // HPM related control signals
     .mcounteren_o            ( mcounteren         ),
@@ -1192,6 +1189,26 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
     end
   end
 
+  generate
+  if (!PULP_CLUSTER) begin
+    // Check that a taken IRQ is actually enabled (e.g. that we do not react to an IRQ that was just disabled in MIE)
+    property p_irq_enabled_0;
+       @(posedge clk) disable iff (!rst_ni) (pc_set && (pc_mux_id == PC_EXCEPTION) && (exc_pc_mux_id == EXC_PC_IRQ)) |->
+         (cs_registers_i.mie_n[exc_cause] && cs_registers_i.mstatus_q.mie);
+    endproperty
+
+    a_irq_enabled_0 : assert property(p_irq_enabled_0);
+
+    // Check that a taken IRQ was for an enabled cause and that mstatus.mie gets disabled
+    property p_irq_enabled_1;
+       @(posedge clk) disable iff (!rst_ni) (pc_set && (pc_mux_id == PC_EXCEPTION) && (exc_pc_mux_id == EXC_PC_IRQ)) |=>
+         (cs_registers_i.mcause_q[5] && cs_registers_i.mie_q[cs_registers_i.mcause_q[4:0]] && !cs_registers_i.mstatus_q.mie);
+    endproperty
+
+    a_irq_enabled_1 : assert property(p_irq_enabled_1);
+  end
+  endgenerate
+
   generate
   if (!PULP_XPULP) begin
 