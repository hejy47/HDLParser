ea30ee2a7b10719175e702efd60ba8806e5df033
Merge pull request #287 from silabs-PaulZ/debug-documentation-update
diff --git a/rtl/riscv_register_file.sv b/rtl/riscv_register_file.sv
index 0bdc235..3c11449 100644
--- a/rtl/riscv_register_file.sv
+++ b/rtl/riscv_register_file.sv
@@ -22,8 +22,8 @@
 // Description:    Register file with 31x 32 bit wide registers. Register 0   //
 //                 is fixed to 0. This register file is based on flip-flops.  //
 //                 Also supports the fp-register file now if FPU=1            //
-//                 If Zfinx is 1, floating point operations take values from  //
-//                 the X register file                                        //
+//                 If PULP_ZFINX is 1, floating point operations take values  //
+//                 from the X register file                                   //
 //                                                                            //
 ////////////////////////////////////////////////////////////////////////////////
 
@@ -32,7 +32,7 @@ module riscv_register_file
     parameter ADDR_WIDTH    = 5,
     parameter DATA_WIDTH    = 32,
     parameter FPU           = 0,
-    parameter Zfinx         = 0
+    parameter PULP_ZFINX    = 0
 )
 (
     // Clock and Reset
@@ -68,7 +68,7 @@ module riscv_register_file
   localparam    NUM_WORDS     = 2**(ADDR_WIDTH-1);
   // number of floating point registers
   localparam    NUM_FP_WORDS  = 2**(ADDR_WIDTH-1);
-  localparam    NUM_TOT_WORDS = FPU ? ( Zfinx ? NUM_WORDS : NUM_WORDS + NUM_FP_WORDS ) : NUM_WORDS;
+  localparam    NUM_TOT_WORDS = FPU ? ( PULP_ZFINX ? NUM_WORDS : NUM_WORDS + NUM_FP_WORDS ) : NUM_WORDS;
 
   // integer register file
   logic [NUM_WORDS-1:0][DATA_WIDTH-1:0]     mem;
@@ -88,7 +88,7 @@ module riscv_register_file
   //-----------------------------------------------------------------------------
   //-- READ : Read address decoder RAD
   //-----------------------------------------------------------------------------
-  if (FPU == 1 && Zfinx == 0) begin
+  if (FPU == 1 && PULP_ZFINX == 0) begin
      assign rdata_a_o = raddr_a_i[5] ? mem_fp[raddr_a_i[4:0]] : mem[raddr_a_i[4:0]];
      assign rdata_b_o = raddr_b_i[5] ? mem_fp[raddr_b_i[4:0]] : mem[raddr_b_i[4:0]];
      assign rdata_c_o = raddr_c_i[5] ? mem_fp[raddr_c_i[4:0]] : mem[raddr_c_i[4:0]];
@@ -161,7 +161,7 @@ module riscv_register_file
 
     end
 
-    if (FPU == 1) begin
+    if (FPU == 1 && PULP_ZFINX == 0) begin
       // Floating point registers
       for(l = 0; l < NUM_FP_WORDS; l++) begin
         always_ff @(posedge clk, negedge rst_n)