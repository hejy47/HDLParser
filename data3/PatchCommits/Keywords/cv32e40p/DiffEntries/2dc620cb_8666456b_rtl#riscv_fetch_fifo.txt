2dc620cbbdb22f22b58d476406213b5b8cc5e99b
OBI fix base (phase 0)
diff --git a/rtl/riscv_fetch_fifo.sv b/rtl/riscv_fetch_fifo.sv
index d10dde3..6f33b27 100644
--- a/rtl/riscv_fetch_fifo.sv
+++ b/rtl/riscv_fetch_fifo.sv
@@ -36,17 +36,11 @@ module riscv_fetch_fifo
     input  logic        in_valid_i,
     output logic        in_ready_o,
 
-    input  logic        in_replace2_i, // replaces second entry if there is one: "to be served after this instr"
-    input  logic        in_is_hwlp_i,
-
     // output port
     output logic        out_valid_o,
     input  logic        out_ready_i,
     output logic [31:0] out_rdata_o,
-    output logic [31:0] out_addr_o,
-    output logic        unaligned_is_compressed_o,
-    output logic        out_valid_stored_o, // same as out_valid_o, except that if something is incoming now it is not included. This signal is available immediately as it comes directly out of FFs
-    output logic        out_is_hwlp_o
+    output logic [31:0] out_addr_o
   );
 
   localparam DEPTH = 4; // must be 3 or greater
@@ -55,14 +49,12 @@ module riscv_fetch_fifo
   logic [0:DEPTH-1] [31:0]  addr_n,    addr_int,    addr_Q;
   logic [0:DEPTH-1] [31:0]  rdata_n,   rdata_int,   rdata_Q;
   logic [0:DEPTH-1]         valid_n,   valid_int,   valid_Q;
-  logic [0:1      ]         is_hwlp_n, is_hwlp_int, is_hwlp_Q;
 
   logic             [31:0]  addr_next;
   logic             [31:0]  rdata, rdata_unaligned;
   logic                     valid, valid_unaligned;
 
   logic                     aligned_is_compressed, unaligned_is_compressed;
-  logic                     aligned_is_compressed_st, unaligned_is_compressed_st;
 
   //////////////////////////////////////////////////////////////////////////////
   // output port
@@ -70,18 +62,14 @@ module riscv_fetch_fifo
 
 
   assign rdata = (valid_Q[0]) ? rdata_Q[0] : ( in_rdata_i & {32{in_valid_i}} );
-  assign valid = valid_Q[0] || in_valid_i || is_hwlp_Q[1];
+  assign valid = valid_Q[0] || in_valid_i;
 
   assign rdata_unaligned = (valid_Q[1]) ? {rdata_Q[1][15:0], rdata[31:16]} : {in_rdata_i[15:0], rdata[31:16]};
   // it is implied that rdata_valid_Q[0] is set
   assign valid_unaligned = (valid_Q[1] || (valid_Q[0] && in_valid_i));
 
-  assign unaligned_is_compressed_o  = unaligned_is_compressed;
-
   assign unaligned_is_compressed    = rdata[17:16] != 2'b11;
   assign aligned_is_compressed      = rdata[1:0] != 2'b11;
-  assign unaligned_is_compressed_st = valid_Q[0] && rdata_Q[0][17:16] != 2'b11;
-  assign aligned_is_compressed_st   = valid_Q[0] && rdata_Q[0][1:0] != 2'b11;
 
   //////////////////////////////////////////////////////////////////////////////
   // instruction aligner (if unaligned)
@@ -89,10 +77,7 @@ module riscv_fetch_fifo
 
   always_comb
   begin
-    // serve the aligned case even though the output address is unaligned when
-    // the next instruction will be from a hardware loop target
-    // in this case the current instruction is already prealigned in element 0
-    if (out_addr_o[1] && (~is_hwlp_Q[1])) begin
+    if (out_addr_o[1]) begin
       // unaligned case
       out_rdata_o = rdata_unaligned;
 
@@ -107,23 +92,7 @@ module riscv_fetch_fifo
     end
   end
 
-  assign out_addr_o    = (valid_Q[0]) ? addr_Q[0] : in_addr_i;
-  assign out_is_hwlp_o = (valid_Q[0]) ? is_hwlp_Q[0] : in_is_hwlp_i;
-
-  // this valid signal must not depend on signals from outside!
-  always_comb
-  begin
-    out_valid_stored_o = 1'b1;
-
-    if (out_addr_o[1] && (~is_hwlp_Q[1])) begin
-      if (unaligned_is_compressed_st)
-        out_valid_stored_o = 1'b1;
-      else
-        out_valid_stored_o = valid_Q[1];
-    end else begin
-      out_valid_stored_o = valid_Q[0];
-    end
-  end
+  assign out_addr_o = (valid_Q[0]) ? addr_Q[0] : in_addr_i;
 
 
   //////////////////////////////////////////////////////////////////////////////
@@ -145,7 +114,6 @@ module riscv_fetch_fifo
     addr_int    = addr_Q;
     rdata_int   = rdata_Q;
     valid_int   = valid_Q;
-    is_hwlp_int = is_hwlp_Q;
 
     if (in_valid_i) begin
       for(int j = 0; j < DEPTH; j++) begin
@@ -157,25 +125,6 @@ module riscv_fetch_fifo
           break;
         end
       end
-
-      // replace 2nd entry
-      if (in_replace2_i) begin
-        if (valid_Q[0]) begin
-          addr_int[1]          = in_addr_i;
-
-          // if we replace the 2nd entry, let's cache the output word in case we
-          // still need it and it would span two words in the FIFO
-          rdata_int[0]         = out_rdata_o;
-          rdata_int[1]         = in_rdata_i;
-          valid_int[1]         = 1'b1;
-          valid_int[2:DEPTH-1] = '0;
-
-          // hardware loop incoming?
-          is_hwlp_int[1] = in_is_hwlp_i;
-        end else begin
-          is_hwlp_int[0] = in_is_hwlp_i;
-        end
-      end
     end
   end
 
@@ -187,48 +136,35 @@ module riscv_fetch_fifo
     addr_n     = addr_int;
     rdata_n    = rdata_int;
     valid_n    = valid_int;
-    is_hwlp_n  = is_hwlp_int;
 
     if (out_ready_i && out_valid_o) begin
-      is_hwlp_n = {is_hwlp_int[1], 1'b0};
-
-      if (is_hwlp_int[1]) begin
-        addr_n[0] = addr_int[1][31:0];
+      if (addr_int[0][1]) begin
+        // unaligned case
+        if (unaligned_is_compressed) begin
+          addr_n[0] = {addr_next[31:2], 2'b00};
+        end else begin
+          addr_n[0] = {addr_next[31:2], 2'b10};
+        end
         for (int i = 0; i < DEPTH - 1; i++)
         begin
           rdata_n[i] = rdata_int[i + 1];
         end
         rdata_n[DEPTH - 1] = 32'b0;
-        valid_n   = {valid_int[1:DEPTH-1], 1'b0};
+        valid_n  = {valid_int[1:DEPTH-1], 1'b0};
       end else begin
-        if (addr_int[0][1]) begin
-          // unaligned case
-          if (unaligned_is_compressed) begin
-            addr_n[0] = {addr_next[31:2], 2'b00};
-          end else begin
-            addr_n[0] = {addr_next[31:2], 2'b10};
-          end
+        // aligned case
+        if (aligned_is_compressed) begin
+          // just increase address, do not move to next entry in FIFO
+          addr_n[0] = {addr_int[0][31:2], 2'b10};
+        end else begin
+          // move to next entry in FIFO
+          addr_n[0] = {addr_next[31:2], 2'b00};
           for (int i = 0; i < DEPTH - 1; i++)
           begin
             rdata_n[i] = rdata_int[i + 1];
           end
           rdata_n[DEPTH - 1] = 32'b0;
-          valid_n  = {valid_int[1:DEPTH-1], 1'b0};
-        end else begin
-          // aligned case
-          if (aligned_is_compressed) begin
-            // just increase address, do not move to next entry in FIFO
-            addr_n[0] = {addr_int[0][31:2], 2'b10};
-          end else begin
-            // move to next entry in FIFO
-            addr_n[0] = {addr_next[31:2], 2'b00};
-            for (int i = 0; i < DEPTH - 1; i++)
-            begin
-              rdata_n[i] = rdata_int[i + 1];
-            end
-            rdata_n[DEPTH - 1] = 32'b0;
-            valid_n   = {valid_int[1:DEPTH-1], 1'b0};
-          end
+          valid_n   = {valid_int[1:DEPTH-1], 1'b0};
         end
       end
     end
@@ -245,7 +181,6 @@ module riscv_fetch_fifo
       addr_Q    <= '{default: '0};
       rdata_Q   <= '{default: '0};
       valid_Q   <= '0;
-      is_hwlp_Q <= '0;
     end
     else
     begin
@@ -253,12 +188,10 @@ module riscv_fetch_fifo
       // completely and start from an empty state
       if (clear_i) begin
         valid_Q    <= '0;
-        is_hwlp_Q  <= '0;
       end else begin
         addr_Q    <= addr_n;
         rdata_Q   <= rdata_n;
         valid_Q   <= valid_n;
-        is_hwlp_Q <= is_hwlp_n;
       end
     end
   end
@@ -269,6 +202,6 @@ module riscv_fetch_fifo
 
   // check for FIFO overflows
   // assert property (
-  //   @(posedge clk) (in_valid_i) |-> ((valid_Q[DEPTH-1] == 1'b0) || (clear_i == 1'b1) || (in_replace2_i == 1'b1)) );
+  //   @(posedge clk) (in_valid_i) |-> ((valid_Q[DEPTH-1] == 1'b0) || (clear_i == 1'b1)) );
 
-endmodule
\ No newline at end of file
+endmodule