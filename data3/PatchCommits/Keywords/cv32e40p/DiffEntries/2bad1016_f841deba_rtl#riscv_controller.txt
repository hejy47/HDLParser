2bad1016918b7195aebf4ed71f7f94ad3e0ce9d2
:bug: fix Illegal compressed instruction (9042) causes a parallel case fail on the unique case decoding block #63
diff --git a/rtl/riscv_controller.sv b/rtl/riscv_controller.sv
index a224cee..7822b49 100644
--- a/rtl/riscv_controller.sv
+++ b/rtl/riscv_controller.sv
@@ -423,62 +423,67 @@ module riscv_controller
 
                 exc_kill_o    = irq_req_ctrl_i ? 1'b1 : 1'b0;
 
-                //decondig block
-                unique case (1'b1)
-
-                  jump_in_dec: begin
-                  // handle unconditional jumps
-                  // we can jump directly since we know the address already
-                  // we don't need to worry about conditional branches here as they
-                  // will be evaluated in the EX stage
-                    pc_mux_o = PC_JUMP;
-                    // if there is a jr stall, wait for it to be gone
-                    if ((~jr_stall_o) && (~jump_done_q)) begin
-                      pc_set_o    = 1'b1;
-                      jump_done   = 1'b1;
+                if(illegal_insn_i) begin
+
+                  halt_if_o         = 1'b1;
+                  halt_id_o         = 1'b1;
+                  csr_save_id_o     = 1'b1;
+                  csr_save_cause_o  = 1'b1;
+                  csr_cause_o       = EXC_CAUSE_ILLEGAL_INSN;
+                  ctrl_fsm_ns       = FLUSH_EX;
+
+                end else begin
+                  //decondig block
+                  unique case (1'b1)
+
+                    jump_in_dec: begin
+                    // handle unconditional jumps
+                    // we can jump directly since we know the address already
+                    // we don't need to worry about conditional branches here as they
+                    // will be evaluated in the EX stage
+                      pc_mux_o = PC_JUMP;
+                      // if there is a jr stall, wait for it to be gone
+                      if ((~jr_stall_o) && (~jump_done_q)) begin
+                        pc_set_o    = 1'b1;
+                        jump_done   = 1'b1;
+                      end
+                      dbg_trap_o    = dbg_settings_i[DBG_SETS_SSTE];
                     end
-                    dbg_trap_o    = dbg_settings_i[DBG_SETS_SSTE];
-                  end
-                  pipe_flush_i | ebrk_insn_i: begin
-                    halt_if_o     = 1'b1;
-                    halt_id_o     = 1'b1;
-                    ctrl_fsm_ns   = FLUSH_EX;
-                  end
-                  ecall_insn_i | illegal_insn_i: begin
-                    halt_if_o     = 1'b1;
-                    halt_id_o     = 1'b1;
-
-                    csr_save_id_o     = 1'b1;
-                    csr_save_cause_o  = 1'b1;
-
-                    if(ecall_insn_i)
+                    pipe_flush_i | ebrk_insn_i: begin
+                      halt_if_o     = 1'b1;
+                      halt_id_o     = 1'b1;
+                      ctrl_fsm_ns   = FLUSH_EX;
+                    end
+                    ecall_insn_i: begin
+                      halt_if_o     = 1'b1;
+                      halt_id_o     = 1'b1;
+                      csr_save_id_o     = 1'b1;
+                      csr_save_cause_o  = 1'b1;
                       csr_cause_o   = current_priv_lvl_i == PRIV_LVL_U ? EXC_CAUSE_ECALL_UMODE : EXC_CAUSE_ECALL_MMODE;
-                    else
-                      csr_cause_o   = EXC_CAUSE_ILLEGAL_INSN;
-
-                    ctrl_fsm_ns   = FLUSH_EX;
-                  end
-                  mret_insn_i | uret_insn_i: begin
-                    halt_if_o     = 1'b1;
-                    halt_id_o     = 1'b1;
+                      ctrl_fsm_ns   = FLUSH_EX;
+                    end
+                    mret_insn_i | uret_insn_i: begin
+                      halt_if_o     = 1'b1;
+                      halt_id_o     = 1'b1;
 
-                    csr_restore_uret_id_o = uret_insn_i;
-                    csr_restore_mret_id_o = mret_insn_i;
+                      csr_restore_uret_id_o = uret_insn_i;
+                      csr_restore_mret_id_o = mret_insn_i;
 
-                    ctrl_fsm_ns   = FLUSH_EX;
-                  end
-                  csr_status_i: begin
-                    halt_if_o     = 1'b1;
-                    ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE;
-                  end
-                  data_load_event_i: begin
-                    ctrl_fsm_ns   = id_ready_i ? ELW_EXE : DECODE;
-                    halt_if_o     = 1'b1;
-                    dbg_trap_o    = dbg_settings_i[DBG_SETS_SSTE];
-                  end
-                  default:
-                    dbg_trap_o    = dbg_settings_i[DBG_SETS_SSTE];
-                endcase
+                      ctrl_fsm_ns   = FLUSH_EX;
+                    end
+                    csr_status_i: begin
+                      halt_if_o     = 1'b1;
+                      ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE;
+                    end
+                    data_load_event_i: begin
+                      ctrl_fsm_ns   = id_ready_i ? ELW_EXE : DECODE;
+                      halt_if_o     = 1'b1;
+                      dbg_trap_o    = dbg_settings_i[DBG_SETS_SSTE];
+                    end
+                    default:
+                      dbg_trap_o    = dbg_settings_i[DBG_SETS_SSTE];
+                  endcase
+                end
 
                 if (dbg_req_i)
                 begin