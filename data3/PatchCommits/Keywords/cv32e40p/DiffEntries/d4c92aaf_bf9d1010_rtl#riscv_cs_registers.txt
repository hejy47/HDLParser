d4c92aafb300bf655f30d7bde303b006ca92dcbd
Merge branch 'fix_loadstall' into dbg_dev
diff --git a/rtl/riscv_cs_registers.sv b/rtl/riscv_cs_registers.sv
index 0a055e2..a63d8f9 100644
--- a/rtl/riscv_cs_registers.sv
+++ b/rtl/riscv_cs_registers.sv
@@ -42,6 +42,7 @@ module riscv_cs_registers
   parameter APU           = 0,
   parameter FPU           = 0,
   parameter PULP_SECURE   = 0,
+  parameter USE_PMP       = 0,
   parameter N_PMP_ENTRIES = 16
 )
 (
@@ -73,12 +74,23 @@ module riscv_cs_registers
   // Interrupts
   output logic            m_irq_enable_o,
   output logic            u_irq_enable_o,
+
   //csr_irq_sec_i is always 0 if PULP_SECURE is zero
   input  logic            csr_irq_sec_i,
   output logic            sec_lvl_o,
   output logic [31:0]     mepc_o,
   output logic [31:0]     uepc_o,
 
+  // debug
+  input  logic            debug_mode_i,
+  input  logic  [2:0]     debug_cause_i,
+  input  logic            debug_csr_save_i,
+  output logic [31:0]     depc_o,
+  output logic            debug_single_step_o,
+  output logic            debug_ebreakm_o,
+  output logic            debug_ebreaku_o,
+
+
   output logic  [N_PMP_ENTRIES-1:0] [31:0] pmp_addr_o,
   output logic  [N_PMP_ENTRIES-1:0] [7:0]  pmp_cfg_o,
 
@@ -94,11 +106,12 @@ module riscv_cs_registers
 
   input  logic            csr_restore_mret_i,
   input  logic            csr_restore_uret_i,
+
+  input  logic            csr_restore_dret_i,
   //coming from controller
   input  logic [5:0]      csr_cause_i,
   //coming from controller
   input  logic            csr_save_cause_i,
-
   // Hardware loops
   input  logic [N_HWLP-1:0] [31:0] hwlp_start_i,
   input  logic [N_HWLP-1:0] [31:0] hwlp_end_i,
@@ -178,6 +191,23 @@ module riscv_cs_registers
   } Status_t;
 
 
+  typedef struct packed{
+      logic [31:28] xdebugver;
+      logic [27:16] zero2;
+      logic         ebreakm;
+      logic         zero1;
+      logic         ebreaks;
+      logic         ebreaku;
+      logic         stepie;
+      logic         stopcount;
+      logic         stoptime;
+      logic [8:6]   cause;
+      logic         zero0;
+      logic         mprven;
+      logic         nmip;
+      logic         step;
+      PrivLvl_t     prv;
+  } Dcsr_t;
 
 `ifndef SYNTHESIS
   initial
@@ -204,6 +234,11 @@ module riscv_cs_registers
   // Interrupt control signals
   logic [31:0] mepc_q, mepc_n;
   logic [31:0] uepc_q, uepc_n;
+  Dcsr_t       dcsr_q, dcsr_n;
+  logic [31:0] depc_q, depc_n;
+  logic [31:0] dscratch0_q, dscratch0_n;
+  logic [31:0] dscratch1_q, dscratch1_n;
+
   logic [31:0] exception_pc;
   Status_t mstatus_q, mstatus_n;
   logic [ 5:0] mcause_q, mcause_n;
@@ -283,21 +318,31 @@ if(PULP_SECURE==1) begin
       12'h342: csr_rdata_int = {mcause_q[5], 26'b0, mcause_q[4:0]};
       // mhartid: unique hardware thread id
       12'hF14: csr_rdata_int = {21'b0, cluster_id_i[5:0], 1'b0, core_id_i[3:0]};
+
+      CSR_DCSR:
+               csr_rdata_int = dcsr_q;//
+      CSR_DPC:
+               csr_rdata_int = depc_q;
+      CSR_DSCRATCH0:
+               csr_rdata_int = dscratch0_q;//
+      CSR_DSCRATCH1:
+               csr_rdata_int = dscratch1_q;//
+
       // hardware loops  (not official)
-      12'h7B0: csr_rdata_int = hwlp_start_i[0];
-      12'h7B1: csr_rdata_int = hwlp_end_i[0];
-      12'h7B2: csr_rdata_int = hwlp_cnt_i[0];
-      12'h7B4: csr_rdata_int = hwlp_start_i[1];
-      12'h7B5: csr_rdata_int = hwlp_end_i[1];
-      12'h7B6: csr_rdata_int = hwlp_cnt_i[1];
+      HWLoop0_START: csr_rdata_int = hwlp_start_i[0];
+      HWLoop0_END: csr_rdata_int = hwlp_end_i[0];
+      HWLoop0_COUNTER: csr_rdata_int = hwlp_cnt_i[0];
+      HWLoop1_START: csr_rdata_int = hwlp_start_i[1];
+      HWLoop1_END: csr_rdata_int = hwlp_end_i[1];
+      HWLoop1_COUNTER: csr_rdata_int = hwlp_cnt_i[1];
 
       // PMP config registers
-      12'h3A0: csr_rdata_int = pmp_reg_q.pmpcfg_packed[0];
-      12'h3A1: csr_rdata_int = pmp_reg_q.pmpcfg_packed[1];
-      12'h3A2: csr_rdata_int = pmp_reg_q.pmpcfg_packed[2];
-      12'h3A3: csr_rdata_int = pmp_reg_q.pmpcfg_packed[3];
+      12'h3A0: csr_rdata_int = USE_PMP ? pmp_reg_q.pmpcfg_packed[0] : '0;
+      12'h3A1: csr_rdata_int = USE_PMP ? pmp_reg_q.pmpcfg_packed[1] : '0;
+      12'h3A2: csr_rdata_int = USE_PMP ? pmp_reg_q.pmpcfg_packed[2] : '0;
+      12'h3A3: csr_rdata_int = USE_PMP ? pmp_reg_q.pmpcfg_packed[3] : '0;
 
-      12'h3Bx: csr_rdata_int = pmp_reg_q.pmpaddr[csr_addr_i[3:0]];
+      12'h3Bx: csr_rdata_int = USE_PMP ? pmp_reg_q.pmpaddr[csr_addr_i[3:0]] : '0;
 
       /* USER CSR */
       // ustatus
@@ -356,13 +401,23 @@ end else begin //PULP_SECURE == 0
       12'h342: csr_rdata_int = {mcause_q[5], 26'b0, mcause_q[4:0]};
       // mhartid: unique hardware thread id
       12'hF14: csr_rdata_int = {21'b0, cluster_id_i[5:0], 1'b0, core_id_i[3:0]};
+
+      CSR_DCSR:
+               csr_rdata_int = dcsr_q;//
+      CSR_DPC:
+               csr_rdata_int = depc_q;
+      CSR_DSCRATCH0:
+               csr_rdata_int = dscratch0_q;//
+      CSR_DSCRATCH1:
+               csr_rdata_int = dscratch1_q;//
+
       // hardware loops  (not official)
-      12'h7B0: csr_rdata_int = hwlp_start_i[0];
-      12'h7B1: csr_rdata_int = hwlp_end_i[0];
-      12'h7B2: csr_rdata_int = hwlp_cnt_i[0];
-      12'h7B4: csr_rdata_int = hwlp_start_i[1];
-      12'h7B5: csr_rdata_int = hwlp_end_i[1];
-      12'h7B6: csr_rdata_int = hwlp_cnt_i[1];
+      HWLoop0_START: csr_rdata_int = hwlp_start_i[0];
+      HWLoop0_END: csr_rdata_int = hwlp_end_i[0];
+      HWLoop0_COUNTER: csr_rdata_int = hwlp_cnt_i[0];
+      HWLoop1_START: csr_rdata_int = hwlp_start_i[1];
+      HWLoop1_END: csr_rdata_int = hwlp_end_i[1];
+      HWLoop1_COUNTER: csr_rdata_int = hwlp_cnt_i[1];
       /* USER CSR */
       // dublicated mhartid: unique hardware thread id (not official)
       12'h014: csr_rdata_int = {21'b0, cluster_id_i[5:0], 1'b0, core_id_i[3:0]};
@@ -383,6 +438,11 @@ if(PULP_SECURE==1) begin
     fprec_n                  = fprec_q;
     mepc_n                   = mepc_q;
     uepc_n                   = uepc_q;
+    depc_n                   = depc_q;
+    dcsr_n                   = dcsr_q;
+    dscratch0_n              = dscratch0_q;
+    dscratch1_n              = dscratch1_q;
+
     mstatus_n                = mstatus_q;
     mcause_n                 = mcause_q;
     ucause_n                 = ucause_q;
@@ -431,13 +491,43 @@ if(PULP_SECURE==1) begin
       // mcause
       12'h342: if (csr_we_int) mcause_n = {csr_wdata_int[31], csr_wdata_int[4:0]};
 
+      CSR_DCSR:
+               if (csr_we_int)
+               begin
+                    dcsr_n = csr_wdata_int;
+                    //31:28 xdebuger = 4 -> debug is implemented
+                    dcsr_n.xdebugver=4'h4;
+                    //privilege level: 0-> U;1-> S; 3->M.
+                    dcsr_n.prv=priv_lvl_q;
+                    //currently not supported:
+                    dcsr_n.nmip=1'b0;   //nmip
+                    dcsr_n.mprven=1'b0; //mprven
+                    dcsr_n.stopcount=1'b0;   //stopcount
+                    dcsr_n.stoptime=1'b0;  //stoptime
+               end
+      CSR_DPC:
+               if (csr_we_int)
+               begin
+                    depc_n = csr_wdata_int;
+               end
+      CSR_DSCRATCH0:
+               if (csr_we_int)
+               begin
+                    dscratch0_n = csr_wdata_int;
+               end
+      CSR_DSCRATCH1:
+               if (csr_we_int)
+               begin
+                    dscratch1_n = csr_wdata_int;
+               end
+
       // hardware loops
-      12'h7B0: if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b0; end
-      12'h7B1: if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b0; end
-      12'h7B2: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b0; end
-      12'h7B4: if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b1; end
-      12'h7B5: if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b1; end
-      12'h7B6: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b1; end
+      HWLoop0_START:   if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b0; end
+      HWLoop0_END:     if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b0; end
+      HWLoop0_COUNTER: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b0; end
+      HWLoop1_START:   if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b1; end
+      HWLoop1_END:     if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b1; end
+      HWLoop1_COUNTER: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b1; end
 
 
       // PMP config registers
@@ -497,8 +587,13 @@ if(PULP_SECURE==1) begin
               mstatus_n.mpie = mstatus_q.uie;
               mstatus_n.mie  = 1'b0;
               mstatus_n.mpp  = PRIV_LVL_U;
-              mepc_n         = exception_pc;
+              // TODO: correctly handled?
+              if (debug_csr_save_i)
+                  depc_n = exception_pc;
+              else
+                  mepc_n = exception_pc;
               mcause_n       = csr_cause_i;
+
             end
             else begin
               if(~csr_irq_sec_i) begin
@@ -506,28 +601,45 @@ if(PULP_SECURE==1) begin
                 priv_lvl_n     = PRIV_LVL_U;
                 mstatus_n.upie = mstatus_q.uie;
                 mstatus_n.uie  = 1'b0;
-                uepc_n         = exception_pc;
+                // TODO: correctly handled?
+                if (debug_csr_save_i)
+                    depc_n = exception_pc;
+                else
+                    uepc_n = exception_pc;
                 ucause_n       = csr_cause_i;
+
               end else begin
               //U --> M
                 priv_lvl_n     = PRIV_LVL_M;
                 mstatus_n.mpie = mstatus_q.uie;
                 mstatus_n.mie  = 1'b0;
                 mstatus_n.mpp  = PRIV_LVL_U;
-                mepc_n         = exception_pc;
+                // TODO: correctly handled?
+                if (debug_csr_save_i)
+                    depc_n = exception_pc;
+                else
+                    mepc_n = exception_pc;
                 mcause_n       = csr_cause_i;
               end
             end
           end //PRIV_LVL_U
 
           PRIV_LVL_M: begin
-            //Exceptions or Interrupts from PRIV_LVL_M always do M --> M
-            priv_lvl_n     = PRIV_LVL_M;
-            mstatus_n.mpie = mstatus_q.mie;
-            mstatus_n.mie  = 1'b0;
-            mstatus_n.mpp  = PRIV_LVL_M;
-            mepc_n         = exception_pc;
-            mcause_n       = csr_cause_i;
+            if (debug_csr_save_i) begin
+                // all interrupts are masked, don't update cause, epc, tval dpc
+                // and mpstatus
+                dcsr_n.prv   = PRIV_LVL_M;
+                dcsr_n.cause = debug_cause_i;
+                depc_n       = exception_pc;
+            end else begin
+                //Exceptions or Interrupts from PRIV_LVL_M always do M --> M
+                priv_lvl_n     = PRIV_LVL_M;
+                mstatus_n.mpie = mstatus_q.mie;
+                mstatus_n.mie  = 1'b0;
+                mstatus_n.mpp  = PRIV_LVL_M;
+                mepc_n         = exception_pc;
+                mcause_n       = csr_cause_i;
+            end
           end //PRIV_LVL_M
           default:;
 
@@ -559,6 +671,15 @@ if(PULP_SECURE==1) begin
           default:;
         endcase
       end //csr_restore_mret_i
+
+
+      csr_restore_dret_i: begin //DRET
+          // restore to the recorded privilege level
+          // TODO: prevent illegal values, see riscv-debug p.44
+          priv_lvl_n = dcsr_q.prv;
+
+      end //csr_restore_dret_i
+
       default:;
     endcase
   end
@@ -570,6 +691,11 @@ end else begin //PULP_SECURE == 0
     frm_n                    = frm_q;
     fprec_n                  = fprec_q;
     mepc_n                   = mepc_q;
+    depc_n                   = depc_q;
+    dcsr_n                   = dcsr_q;
+    dscratch0_n              = dscratch0_q;
+    dscratch1_n              = dscratch1_q;
+
     mstatus_n                = mstatus_q;
     mcause_n                 = mcause_q;
     hwlp_we_o                = '0;
@@ -613,20 +739,51 @@ end else begin //PULP_SECURE == 0
       // mcause
       12'h342: if (csr_we_int) mcause_n = {csr_wdata_int[31], csr_wdata_int[4:0]};
 
+      CSR_DCSR:
+               if (csr_we_int)
+               begin
+                    dcsr_n = csr_wdata_int;
+                    //31:28 xdebuger = 4 -> debug is implemented
+                    dcsr_n.xdebugver=4'h4;
+                    //privilege level: 0-> U;1-> S; 3->M.
+                    dcsr_n.prv=priv_lvl_q;
+                    //currently not supported:
+                    dcsr_n.nmip=1'b0;   //nmip
+                    dcsr_n.mprven=1'b0; //mprven
+                    dcsr_n.stopcount=1'b0;   //stopcount
+                    dcsr_n.stoptime=1'b0;  //stoptime
+               end
+      CSR_DPC:
+               if (csr_we_int)
+               begin
+                    depc_n = csr_wdata_int;
+               end
+
+      CSR_DSCRATCH0:
+               if (csr_we_int)
+               begin
+                    dscratch0_n = csr_wdata_int;
+               end
+
+      CSR_DSCRATCH1:
+               if (csr_we_int)
+               begin
+                    dscratch1_n = csr_wdata_int;
+               end
+
       // hardware loops
-      12'h7B0: if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b0; end
-      12'h7B1: if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b0; end
-      12'h7B2: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b0; end
-      12'h7B4: if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b1; end
-      12'h7B5: if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b1; end
-      12'h7B6: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b1; end
+      HWLoop0_START: if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b0; end
+      HWLoop0_END: if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b0; end
+      HWLoop0_COUNTER: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b0; end
+      HWLoop1_START: if (csr_we_int) begin hwlp_we_o = 3'b001; hwlp_regid_o = 1'b1; end
+      HWLoop1_END: if (csr_we_int) begin hwlp_we_o = 3'b010; hwlp_regid_o = 1'b1; end
+      HWLoop1_COUNTER: if (csr_we_int) begin hwlp_we_o = 3'b100; hwlp_regid_o = 1'b1; end
     endcase
 
     // exception controller gets priority over other writes
     unique case (1'b1)
 
       csr_save_cause_i: begin
-
         unique case (1'b1)
           csr_save_if_i:
             exception_pc = pc_if_i;
@@ -635,12 +792,20 @@ end else begin //PULP_SECURE == 0
           default:;
         endcase
 
-        priv_lvl_n     = PRIV_LVL_M;
-        mstatus_n.mpie = mstatus_q.mie;
-        mstatus_n.mie  = 1'b0;
-        mstatus_n.mpp  = PRIV_LVL_M;
-        mepc_n         = exception_pc;
-        mcause_n       = csr_cause_i;
+        if (debug_csr_save_i) begin
+            // all interrupts are masked, don't update cause, epc, tval dpc and
+            // mpstatus
+            dcsr_n.prv   = PRIV_LVL_M;
+            dcsr_n.cause = debug_cause_i;
+            depc_n       = exception_pc;
+        end else begin
+            priv_lvl_n     = PRIV_LVL_M;
+            mstatus_n.mpie = mstatus_q.mie;
+            mstatus_n.mie  = 1'b0;
+            mstatus_n.mpp  = PRIV_LVL_M;
+            mepc_n = exception_pc;
+            mcause_n       = csr_cause_i;
+        end
       end //csr_save_cause_i
 
       csr_restore_mret_i: begin //MRET
@@ -649,6 +814,14 @@ end else begin //PULP_SECURE == 0
         mstatus_n.mpie = 1'b1;
         mstatus_n.mpp  = PRIV_LVL_M;
       end //csr_restore_mret_i
+
+      csr_restore_dret_i: begin //DRET
+        mstatus_n.mie  = mstatus_q.mpie;
+        priv_lvl_n     = PRIV_LVL_M;
+        mstatus_n.mpie = 1'b1;
+        mstatus_n.mpp  = PRIV_LVL_M;
+      end //csr_restore_dret_i
+
       default:;
     endcase
   end
@@ -702,10 +875,16 @@ end //PULP_SECURE
   assign mepc_o          = mepc_q;
   assign uepc_o          = uepc_q;
 
+  assign depc_o          = depc_q;
 
   assign pmp_addr_o     = pmp_reg_q.pmpaddr;
   assign pmp_cfg_o      = pmp_reg_q.pmpcfg;
 
+  assign debug_single_step_o  = dcsr_q.step;
+  assign debug_ebreakm_o      = dcsr_q.ebreakm;
+  assign debug_ebreaku_o      = dcsr_q.ebreaku;
+
+
 
   generate
   if (PULP_SECURE == 1)
@@ -729,9 +908,9 @@ end //PULP_SECURE
           else
           begin
             if(pmpcfg_we[j])
-              pmp_reg_q.pmpcfg[j]    <= pmp_reg_n.pmpcfg[j];
+              pmp_reg_q.pmpcfg[j]    <= USE_PMP ? pmp_reg_n.pmpcfg[j]  : '0;
             if(pmpaddr_we[j])
-              pmp_reg_q.pmpaddr[j]  <=  pmp_reg_n.pmpaddr[j];
+              pmp_reg_q.pmpaddr[j]   <= USE_PMP ? pmp_reg_n.pmpaddr[j] : '0;
           end
         end
       end //CS_PMP_REGS_FF
@@ -762,7 +941,7 @@ end //PULP_SECURE
 
         assign uepc_q       = '0;
         assign ucause_q     = '0;
-        assign mtvec_q      = {boot_addr_i[31:8], 6'h0, MTVEC_MODE};
+        assign mtvec_q      = boot_addr_i[30:7];
         assign utvec_q      = '0;
         assign priv_lvl_q   = PRIV_LVL_M;
 
@@ -790,6 +969,12 @@ end //PULP_SECURE
             };
       mepc_q      <= '0;
       mcause_q    <= '0;
+
+      depc_q      <= '0;
+      dcsr_q      <= '0;
+      dcsr_q.prv  <= PRIV_LVL_M;
+      dscratch0_q <= '0;
+      dscratch1_q <= '0;
     end
     else
     begin
@@ -813,6 +998,12 @@ end //PULP_SECURE
       end
       mepc_q     <= mepc_n    ;
       mcause_q   <= mcause_n  ;
+
+      depc_q     <= depc_n    ;
+      dcsr_q     <= dcsr_n;
+      dscratch0_q<= dscratch0_n;
+      dscratch1_q<= dscratch1_n;
+
     end
   end
 
@@ -867,11 +1058,11 @@ end //PULP_SECURE
     // only perform csr access if we actually care about the read data
     if (csr_access_i) begin
       unique case (csr_addr_i)
-        12'h7A0: begin
+        PerfCounterEventReg: begin
           is_pcer = 1'b1;
           perf_rdata[N_PERF_COUNTERS-1:0] = PCER_q;
         end
-        12'h7A1: begin
+        PerfCounterModeReg: begin
           is_pcmr = 1'b1;
           perf_rdata[1:0] = PCMR_q;
         end
@@ -1000,3 +1191,4 @@ end //PULP_SECURE
   end
 
 endmodule
+