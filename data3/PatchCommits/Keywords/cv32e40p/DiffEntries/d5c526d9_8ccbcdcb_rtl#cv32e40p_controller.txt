d5c526d95e2d085ffcdf43eb37410d06ba8c8ad1
Merge pull request #511 from Silabs-ArjanB/ArjanB_irq_0
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index bf39578..4ef1bd5 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -115,20 +115,16 @@ module cv32e40p_controller import cv32e40p_pkg::*;
   input  logic [1:0]  ctrl_transfer_insn_in_dec_i,              // jump is being calculated in ALU
 
   // Interrupt Controller Signals
-  input  logic        irq_pending_i,
   input  logic        irq_req_ctrl_i,
   input  logic        irq_sec_ctrl_i,
   input  logic [4:0]  irq_id_ctrl_i,
-  input  logic        m_IE_i,                     // interrupt enable bit from CSR (M mode)
-  input  logic        u_IE_i,                     // interrupt enable bit from CSR (U mode)
+  input  logic        irq_wu_ctrl_i,
   input  PrivLvl_t    current_priv_lvl_i,
 
   output logic        irq_ack_o,
   output logic [4:0]  irq_id_o,
 
   output logic [4:0]  exc_cause_o,
-  output logic        exc_ack_o,
-  output logic        exc_kill_o,
 
   // Debug Signal
   output logic         debug_mode_o,
@@ -212,7 +208,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
   logic jump_done, jump_done_q, jump_in_dec, jump_in_id, branch_in_id_dec, branch_in_id;
 
-  logic irq_enable_int;
   logic data_err_q;
 
   logic debug_mode_q, debug_mode_n;
@@ -254,8 +249,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
     instr_req_o            = 1'b1;
 
-    exc_ack_o              = 1'b0;
-    exc_kill_o             = 1'b0;
     data_err_ack_o         = 1'b0;
 
     csr_save_if_o          = 1'b0;
@@ -286,7 +279,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
     halt_if_o              = 1'b0;
     halt_id_o              = 1'b0;
     irq_ack_o              = 1'b0;
-    irq_id_o               = irq_id_ctrl_i;
+    irq_id_o               = 5'b0;
 
     jump_in_id             = ctrl_transfer_insn_in_id_i == BRANCH_JAL || ctrl_transfer_insn_in_id_i == BRANCH_JALR;
     jump_in_dec            = ctrl_transfer_insn_in_dec_i == BRANCH_JALR || ctrl_transfer_insn_in_dec_i == BRANCH_JAL;
@@ -294,8 +287,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
     branch_in_id           = ctrl_transfer_insn_in_id_i == BRANCH_COND;
     branch_in_id_dec       = ctrl_transfer_insn_in_dec_i == BRANCH_COND;
 
-    irq_enable_int         =  ((u_IE_i | irq_sec_ctrl_i) & current_priv_lvl_i == PRIV_LVL_U) | (m_IE_i & current_priv_lvl_i == PRIV_LVL_M);
-
     ebrk_force_debug_mode  = (debug_ebreakm_i && current_priv_lvl_i == PRIV_LVL_M) ||
                              (debug_ebreaku_i && current_priv_lvl_i == PRIV_LVL_U);
     debug_csr_save_o       = 1'b0;
@@ -311,11 +302,8 @@ module cv32e40p_controller import cv32e40p_pkg::*;
     // - IRQ and INTE bit is set and no exception is currently running
     // - Debuger requests halt
 
-    perf_pipeline_stall_o  = 1'b0;
-
+    perf_pipeline_stall_o   = 1'b0;
 
-    //this signal goes to 1 only registered interrupt requests are killed by exc_kill_o
-    //so that the current instructions will have the deassert_we_o signal equal to 0 once the controller is back to DECODE
     instr_valid_irq_flush_n = 1'b0;
 
     hwlp_mask_o             = 1'b0;
@@ -384,24 +372,44 @@ module cv32e40p_controller import cv32e40p_pkg::*;
       FIRST_FETCH:
       begin
         is_decoding_o = 1'b0;
+
         // Stall because of IF miss
-        if ((id_ready_i == 1'b1) )
-        begin
+        if (id_ready_i == 1'b1) begin
           ctrl_fsm_ns = DECODE;
         end
 
         // handle interrupts
-        if (irq_req_ctrl_i & irq_enable_int & ~(debug_req_pending || debug_mode_q)) begin
+        if (irq_req_ctrl_i && ~(debug_req_pending || debug_mode_q)) begin
           // This assumes that the pipeline is always flushed before
           // going to sleep.
           // Debug mode takes precedence over irq (see DECODE:)
-          ctrl_fsm_ns = IRQ_TAKEN_IF;
-          halt_if_o   = 1'b1;
-          halt_id_o   = 1'b1;
-        end
 
-        end
+          // Taken IRQ
+          halt_if_o         = 1'b1;
+          halt_id_o         = 1'b1;
+
+          pc_set_o          = 1'b1;
+          pc_mux_o          = PC_EXCEPTION;
+          exc_pc_mux_o      = EXC_PC_IRQ;
+          exc_cause_o       = irq_id_ctrl_i;
+          csr_irq_sec_o     = irq_sec_ctrl_i;
 
+          // IRQ interface
+          irq_ack_o         = 1'b1;
+          irq_id_o          = irq_id_ctrl_i;
+
+          if (irq_sec_ctrl_i)
+            trap_addr_mux_o  = TRAP_MACHINE;
+          else
+            trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
+
+          csr_save_cause_o  = 1'b1;
+          csr_cause_o       = {1'b1,irq_id_ctrl_i};
+          csr_save_if_o     = 1'b1;
+
+          ctrl_fsm_ns       = DECODE;
+        end
+      end
 
       DECODE:
       begin
@@ -472,25 +480,44 @@ module cv32e40p_controller import cv32e40p_pkg::*;
                 halt_id_o     = 1'b1;
                 ctrl_fsm_ns   = DBG_FLUSH;
               end
-            else if (irq_req_ctrl_i & irq_enable_int & ~debug_mode_q )
+            else if (irq_req_ctrl_i && ~debug_mode_q)
               begin
-                //Serving the external interrupt
-                halt_if_o     = 1'b1;
-                halt_id_o     = 1'b1;
-                ctrl_fsm_ns   = IRQ_FLUSH;
-                hwlp_mask_o   = PULP_XPULP ? 1'b1 : 1'b0;
+                // Taken IRQ
+                hwlp_mask_o       = PULP_XPULP ? 1'b1 : 1'b0;
+
+                is_decoding_o     = 1'b0;
+                halt_if_o         = 1'b1;
+                halt_id_o         = 1'b1;
+
+                pc_set_o          = 1'b1;
+                pc_mux_o          = PC_EXCEPTION;
+                exc_pc_mux_o      = EXC_PC_IRQ;
+                exc_cause_o       = irq_id_ctrl_i;
+                csr_irq_sec_o     = irq_sec_ctrl_i;
+
+                // IRQ interface
+                irq_ack_o         = 1'b1;
+                irq_id_o          = irq_id_ctrl_i;
+
+                if (irq_sec_ctrl_i)
+                  trap_addr_mux_o  = TRAP_MACHINE;
+                else
+                  trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
+
+                csr_save_cause_o  = 1'b1;
+                csr_cause_o       = {1'b1,irq_id_ctrl_i};
+                csr_save_id_o     = 1'b1;
               end
             else
               begin
 
-                exc_kill_o    = irq_req_ctrl_i ? 1'b1 : 1'b0;
                 is_hwlp_illegal  = is_hwlp_body & (jump_in_dec || branch_in_id_dec || mret_insn_i || uret_insn_i || dret_insn_i || is_compressed_i || fencei_insn_i || wfi_i);
 
                 if(illegal_insn_i || is_hwlp_illegal) begin
 
                   halt_if_o         = 1'b1;
                   halt_id_o         = 1'b0;
-                  ctrl_fsm_ns           = id_ready_i ? FLUSH_EX : DECODE;
+                  ctrl_fsm_ns       = id_ready_i ? FLUSH_EX : DECODE;
                   illegal_insn_n    = 1'b1;
 
                 end else begin
@@ -644,7 +671,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
                     end
                 end
 
-              end // else: !if(irq_req_ctrl_i & irq_enable_int & (~debug_req_pending) & (~debug_mode_q) )
+              end // else: !if (irq_req_ctrl_i && ~debug_mode_q)
 
           end  //valid block
           else begin
@@ -653,29 +680,49 @@ module cv32e40p_controller import cv32e40p_pkg::*;
           end
       end
 
-
       DECODE_HWLOOP:
       begin
-
           if (instr_valid_i || instr_valid_irq_flush_q) //valid block or replay after interrupt speculation
           begin // now analyze the current instruction in the ID stage
 
             is_decoding_o = 1'b1;
 
-           if ( (debug_req_pending || trigger_match_i) & ~debug_mode_q )
+            if ( (debug_req_pending || trigger_match_i) & ~debug_mode_q )
               begin
                 //Serving the debug
                 halt_if_o     = 1'b1;
                 halt_id_o     = 1'b1;
                 ctrl_fsm_ns   = DBG_FLUSH;
               end
-            else if (irq_req_ctrl_i & irq_enable_int & ~debug_mode_q )
+            else if (irq_req_ctrl_i && ~debug_mode_q)
               begin
-                //Serving the external interrupt
-                halt_if_o     = 1'b1;
-                halt_id_o     = 1'b1;
-                ctrl_fsm_ns   = IRQ_FLUSH;
-                hwlp_mask_o   = PULP_XPULP ? 1'b1 : 1'b0;
+                // Taken IRQ
+                hwlp_mask_o       = PULP_XPULP ? 1'b1 : 1'b0;
+
+                is_decoding_o     = 1'b0;
+                halt_if_o         = 1'b1;
+                halt_id_o         = 1'b1;
+
+                pc_set_o          = 1'b1;
+                pc_mux_o          = PC_EXCEPTION;
+                exc_pc_mux_o      = EXC_PC_IRQ;
+                exc_cause_o       = irq_id_ctrl_i;
+                csr_irq_sec_o     = irq_sec_ctrl_i;
+
+                // IRQ interface
+                irq_ack_o         = 1'b1;
+                irq_id_o          = irq_id_ctrl_i;
+
+                if (irq_sec_ctrl_i)
+                  trap_addr_mux_o  = TRAP_MACHINE;
+                else
+                  trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
+
+                csr_save_cause_o  = 1'b1;
+                csr_cause_o       = {1'b1,irq_id_ctrl_i};
+                csr_save_id_o     = 1'b1;
+
+                ctrl_fsm_ns       = DECODE;
               end
             else
               begin
@@ -799,7 +846,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
                     end
                 end // if (debug_single_step_i & ~debug_mode_q)
 
-              end // else: !if(irq_req_ctrl_i & irq_enable_int & (~debug_req_pending) & (~debug_mode_q) )
+              end // else: !if (irq_req_ctrl_i && ~debug_mode_q)
 
           end // block: blk_decode_level1 : valid block
           else begin
@@ -857,52 +904,41 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         end
       end
 
-
-      IRQ_FLUSH:
+      IRQ_FLUSH_ELW:
       begin
         is_decoding_o = 1'b0;
 
-        halt_if_o   = 1'b1;
-        halt_id_o   = 1'b1;
+        halt_if_o     = 1'b1;
+        halt_id_o     = 1'b1;
 
-        if (data_err_i)
-        begin //data error
-            // the current LW or SW have been blocked by the PMP
-            csr_save_ex_o     = 1'b1;
-            csr_save_cause_o  = 1'b1;
-            data_err_ack_o    = 1'b1;
-            //no jump in this stage as we have to wait one cycle to go to Machine Mode
-            csr_cause_o       = {1'b0, data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT};
-            ctrl_fsm_ns       = FLUSH_WB;
+        ctrl_fsm_ns   = DECODE;
 
-        end  //data error
-        else begin
-          if(irq_pending_i & irq_enable_int) begin
-            ctrl_fsm_ns = IRQ_TAKEN_ID;
-          end else begin
-            // we can go back to decode in case the IRQ is not taken (no ELW REPLAY)
-            exc_kill_o              = 1'b1;
-            instr_valid_irq_flush_n = 1'b1;
-            ctrl_fsm_ns             = DECODE;
-          end
-        end
-      end
+        perf_pipeline_stall_o = data_load_event_i;
 
-      IRQ_FLUSH_ELW:
-      begin
-        is_decoding_o = 1'b0;
+        if (irq_req_ctrl_i && ~(debug_req_pending || debug_mode_q)) begin
+          // Taken IRQ
+          is_decoding_o     = 1'b0;
+          halt_if_o         = 1'b1;
+          halt_id_o         = 1'b1;
 
-        halt_if_o   = 1'b1;
-        halt_id_o   = 1'b1;
+          pc_set_o          = 1'b1;
+          pc_mux_o          = PC_EXCEPTION;
+          exc_pc_mux_o      = EXC_PC_IRQ;
+          exc_cause_o       = irq_id_ctrl_i;
+          csr_irq_sec_o     = irq_sec_ctrl_i;
 
-        perf_pipeline_stall_o = data_load_event_i;
+          // IRQ interface
+          irq_ack_o         = 1'b1;
+          irq_id_o          = irq_id_ctrl_i;
 
-        if(irq_pending_i & irq_enable_int) begin
-            ctrl_fsm_ns = IRQ_TAKEN_ID;
-        end else begin
-          // we can go back to decode in case the IRQ is not taken (no ELW REPLAY)
-          exc_kill_o              = 1'b1;
-          ctrl_fsm_ns             = DECODE;
+          if (irq_sec_ctrl_i)
+            trap_addr_mux_o  = TRAP_MACHINE;
+          else
+            trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
+
+          csr_save_cause_o  = 1'b1;
+          csr_cause_o       = {1'b1,irq_id_ctrl_i};
+          csr_save_id_o     = 1'b1;
         end
       end
 
@@ -913,7 +949,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         halt_if_o   = 1'b1;
         halt_id_o   = 1'b1;
 
-
         //if we are here, a elw is executing now in the EX stage
         //or if an interrupt has been received
         //the ID stage contains the PC_ID of the elw, therefore halt_id is set to invalid the instruction
@@ -929,56 +964,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         perf_pipeline_stall_o = data_load_event_i;
       end
 
-      IRQ_TAKEN_ID:
-      begin
-        is_decoding_o = 1'b0;
-
-        pc_set_o          = 1'b1;
-        pc_mux_o          = PC_EXCEPTION;
-        exc_pc_mux_o      = EXC_PC_IRQ;
-        exc_cause_o       = irq_id_ctrl_i;
-        csr_irq_sec_o     = irq_sec_ctrl_i;
-
-        // IRQs (standard plus extension)
-          irq_ack_o         = 1'b1;
-          if(irq_sec_ctrl_i)
-            trap_addr_mux_o  = TRAP_MACHINE;
-          else
-            trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
-
-        csr_save_cause_o  = 1'b1;
-        csr_cause_o       = {1'b1,irq_id_ctrl_i};
-        csr_save_id_o     = 1'b1;
-        exc_ack_o         = 1'b1;
-        ctrl_fsm_ns       = DECODE;
-      end
-
-
-      IRQ_TAKEN_IF:
-      begin
-        is_decoding_o = 1'b0;
-
-        pc_set_o          = 1'b1;
-        pc_mux_o          = PC_EXCEPTION;
-        exc_pc_mux_o      = EXC_PC_IRQ;
-        exc_cause_o       = irq_id_ctrl_i;
-        csr_irq_sec_o     = irq_sec_ctrl_i;
-
-        // IRQs (standard plus extension)
-          irq_ack_o         = 1'b1;
-          if(irq_sec_ctrl_i)
-            trap_addr_mux_o  = TRAP_MACHINE;
-          else
-            trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
-
-        csr_save_cause_o  = 1'b1;
-        csr_cause_o       = {1'b1,irq_id_ctrl_i};
-        csr_save_if_o     = 1'b1;
-        exc_ack_o         = 1'b1;
-        ctrl_fsm_ns       = DECODE;
-      end
-
-
       // flush the pipeline, insert NOP into EX and WB stage
       FLUSH_WB:
       begin
@@ -1405,7 +1390,6 @@ endgenerate
       illegal_insn_q <= 1'b0;
 
       instr_valid_irq_flush_q <= 1'b0;
-
     end
     else
     begin
@@ -1435,7 +1419,7 @@ endgenerate
   assign perf_ld_stall_o  = load_stall_o;
 
   // wakeup from sleep conditions
-  assign wake_from_sleep_o = irq_pending_i || debug_req_pending || debug_mode_q;
+  assign wake_from_sleep_o = irq_wu_ctrl_i || debug_req_pending || debug_mode_q;
 
   // debug mode
   assign debug_mode_o = debug_mode_q;