307aa9ece151c7efa5bb2d58f08a5c610e8ac991
Merge pull request #310 from OttG/master
diff --git a/rtl/riscv_tracer.sv b/rtl/riscv_tracer.sv
index 05de222..7cba438 100644
--- a/rtl/riscv_tracer.sv
+++ b/rtl/riscv_tracer.sv
@@ -45,6 +45,8 @@ module riscv_tracer (
 
   input  logic [31:0] pc,
   input  logic [31:0] instr,
+  input  ctrl_state_e controller_state_i,
+
   input  logic        compressed,
   input  logic        id_valid,
   input  logic        is_decoding,
@@ -54,6 +56,7 @@ module riscv_tracer (
   input  logic        dret,
   input  logic        ecall,
   input  logic        ebreak,
+  input  logic        fence,
 
   input  logic [31:0] rs1_value,
   input  logic [31:0] rs2_value,
@@ -76,6 +79,7 @@ module riscv_tracer (
   input  logic        ex_data_we,
   input  logic [31:0] ex_data_addr,
   input  logic [31:0] ex_data_wdata,
+  input  logic        data_misaligned,
 
   input  logic        wb_bypass,
 
@@ -128,6 +132,7 @@ module riscv_tracer (
     reg_t        regs_read[$];
     reg_t        regs_write[$];
     mem_acc_t    mem_access[$];
+    logic        retired;
 
     function new ();
       str        = "";
@@ -745,6 +750,9 @@ module riscv_tracer (
 
   mailbox #(instr_trace_t) instr_ex = new ();
   mailbox #(instr_trace_t) instr_wb = new ();
+  mailbox #(instr_trace_t) instr_ex_misaligned = new ();
+  mailbox #(instr_trace_t) instr_wb_delay = new ();
+
 
   // cycle counter
   always_ff @(posedge clk, negedge rst_n)
@@ -809,10 +817,37 @@ module riscv_tracer (
         end
       end while (!ex_valid && !wb_bypass); // ex branches bypass the WB stage
 
+      if(ex_data_req && data_misaligned)
+        instr_ex_misaligned.put(trace);
+      else
+        instr_wb.put(trace);
+
+    end
+  end
+
+
+  // misaligned pipeline
+  initial
+  begin
+    instr_trace_t trace;
+    mem_acc_t     mem_acc;
+
+    while(1) begin
+      instr_ex_misaligned.get(trace);
+
+      // wait until we are going to the next stage
+      do begin
+        @(negedge clk);
+
+      end while (!ex_valid && !wb_bypass);
+
       instr_wb.put(trace);
+
     end
   end
 
+
+
   // these signals are for simulator visibility. Don't try to do the nicer way
   // of making instr_trace_t visible to inspect it with your simulator. Some
   // choke for some unknown performance reasons.
@@ -843,18 +878,37 @@ module riscv_tracer (
       insn_disas = trace.str;
       insn_pc    = trace.pc;
       insn_val   = trace.instr;
+      if(~(trace.str == "mret" || trace.str == "uret")) begin
+        -> retire;
+        insn_regs_write = trace.regs_write;
+      end else begin
+        instr_wb_delay.put(trace);
+      end
+
+    end
+  end
+
+  initial
+  begin
+    instr_trace_t trace;
+    //this process delays by 1 cycle he retire event for xret instrucions
+    while(1) begin
+      instr_wb_delay.get(trace);
+      // wait until we are going to the next stage
+      @(negedge clk);
       insn_regs_write = trace.regs_write;
-      -> retire;
+       -> retire;
     end
   end
 
+
   // log execution
   always @(negedge clk)
   begin
     instr_trace_t trace;
 
     // special case for WFI because we don't wait for unstalling there
-    if ( (id_valid || pipe_flush || mret || uret || ecall || ebreak || dret) && is_decoding)
+    if ( (id_valid || pipe_flush || mret || uret || ecall || ebreak || dret || fence) && is_decoding)
     begin
       trace = new ();
 