5c97310505eddbe36a429fd2fc9e0781ff89cd2f
Merge pull request #516 from silabs-PaulZ/fix_todo__controller__flush_ex
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index 806eb52..5a96903 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -215,8 +215,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
   logic is_hwlp_illegal, is_hwlp_body;
   logic illegal_insn_q, illegal_insn_n;
 
-  logic instr_valid_irq_flush_n, instr_valid_irq_flush_q;
-
   logic hwlp_end0_eq_pc;
   logic hwlp_end1_eq_pc;
   logic hwlp_counter0_gt_1;
@@ -278,6 +276,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
     halt_if_o              = 1'b0;
     halt_id_o              = 1'b0;
+    is_decoding_o          = 1'b0;
     irq_ack_o              = 1'b0;
     irq_id_o               = 5'b0;
 
@@ -304,8 +303,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
     perf_pipeline_stall_o   = 1'b0;
 
-    instr_valid_irq_flush_n = 1'b0;
-
     hwlp_mask_o             = 1'b0;
 
     is_hwlp_illegal         = 1'b0;
@@ -467,7 +464,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
           // decode and execute instructions only if the current conditional
           // branch in the EX stage is either not taken, or there is no
           // conditional branch in the EX stage
-          else if (instr_valid_i || instr_valid_irq_flush_q) //valid block or replay after interrupt speculation
+          else if (instr_valid_i) //valid block
           begin: blk_decode_level1 // now analyze the current instruction in the ID stage
 
             is_decoding_o = 1'b1;
@@ -682,7 +679,8 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
       DECODE_HWLOOP:
       begin
-          if (instr_valid_i || instr_valid_irq_flush_q) //valid block or replay after interrupt speculation
+        if (PULP_XPULP) begin
+          if (instr_valid_i) // valid block
           begin // now analyze the current instruction in the ID stage
 
             is_decoding_o = 1'b1;
@@ -853,9 +851,9 @@ module cv32e40p_controller import cv32e40p_pkg::*;
             is_decoding_o         = 1'b0;
             perf_pipeline_stall_o = data_load_event_i;
           end
+        end
       end
 
-
       // flush the pipeline, insert NOP into EX stage
       FLUSH_EX:
       begin
@@ -906,62 +904,66 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
       IRQ_FLUSH_ELW:
       begin
-        is_decoding_o = 1'b0;
+        if (PULP_CLUSTER == 1'b1) begin
+          is_decoding_o = 1'b0;
 
-        halt_if_o     = 1'b1;
-        halt_id_o     = 1'b1;
+          halt_if_o     = 1'b1;
+          halt_id_o     = 1'b1;
 
-        ctrl_fsm_ns   = DECODE;
+          ctrl_fsm_ns   = DECODE;
 
-        perf_pipeline_stall_o = data_load_event_i;
+          perf_pipeline_stall_o = data_load_event_i;
 
-        if (irq_req_ctrl_i && ~(debug_req_pending || debug_mode_q)) begin
-          // Taken IRQ
-          is_decoding_o     = 1'b0;
-          halt_if_o         = 1'b1;
-          halt_id_o         = 1'b1;
+          if (irq_req_ctrl_i && ~(debug_req_pending || debug_mode_q)) begin
+            // Taken IRQ
+            is_decoding_o     = 1'b0;
+            halt_if_o         = 1'b1;
+            halt_id_o         = 1'b1;
 
-          pc_set_o          = 1'b1;
-          pc_mux_o          = PC_EXCEPTION;
-          exc_pc_mux_o      = EXC_PC_IRQ;
-          exc_cause_o       = irq_id_ctrl_i;
-          csr_irq_sec_o     = irq_sec_ctrl_i;
+            pc_set_o          = 1'b1;
+            pc_mux_o          = PC_EXCEPTION;
+            exc_pc_mux_o      = EXC_PC_IRQ;
+            exc_cause_o       = irq_id_ctrl_i;
+            csr_irq_sec_o     = irq_sec_ctrl_i;
 
-          // IRQ interface
-          irq_ack_o         = 1'b1;
-          irq_id_o          = irq_id_ctrl_i;
+            // IRQ interface
+            irq_ack_o         = 1'b1;
+            irq_id_o          = irq_id_ctrl_i;
 
-          if (irq_sec_ctrl_i)
-            trap_addr_mux_o  = TRAP_MACHINE;
-          else
-            trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
+            if (irq_sec_ctrl_i)
+              trap_addr_mux_o  = TRAP_MACHINE;
+            else
+              trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
 
-          csr_save_cause_o  = 1'b1;
-          csr_cause_o       = {1'b1,irq_id_ctrl_i};
-          csr_save_id_o     = 1'b1;
+            csr_save_cause_o  = 1'b1;
+            csr_cause_o       = {1'b1,irq_id_ctrl_i};
+            csr_save_id_o     = 1'b1;
+          end
         end
       end
 
       ELW_EXE:
       begin
-        is_decoding_o = 1'b0;
-
-        halt_if_o   = 1'b1;
-        halt_id_o   = 1'b1;
-
-        //if we are here, a elw is executing now in the EX stage
-        //or if an interrupt has been received
-        //the ID stage contains the PC_ID of the elw, therefore halt_id is set to invalid the instruction
-        //If an interrupt occurs, we replay the ELW
-        //No needs to check irq_int_req_i since in the EX stage there is only the elw, no CSR pendings
-        if(id_ready_i)
-          ctrl_fsm_ns = ((debug_req_pending || trigger_match_i) & ~debug_mode_q) ? DBG_FLUSH : IRQ_FLUSH_ELW;
-          // if from the ELW EXE we go to IRQ_FLUSH_ELW, it is assumed that if there was an IRQ req together with the grant and IE was valid, then
-          // there must be no hazard due to xIE
-        else
-          ctrl_fsm_ns = ELW_EXE;
+        if (PULP_CLUSTER == 1'b1) begin
+          is_decoding_o = 1'b0;
+
+          halt_if_o   = 1'b1;
+          halt_id_o   = 1'b1;
+
+          //if we are here, a elw is executing now in the EX stage
+          //or if an interrupt has been received
+          //the ID stage contains the PC_ID of the elw, therefore halt_id is set to invalid the instruction
+          //If an interrupt occurs, we replay the ELW
+          //No needs to check irq_int_req_i since in the EX stage there is only the elw, no CSR pendings
+          if(id_ready_i)
+            ctrl_fsm_ns = ((debug_req_pending || trigger_match_i) & ~debug_mode_q) ? DBG_FLUSH : IRQ_FLUSH_ELW;
+            // if from the ELW EXE we go to IRQ_FLUSH_ELW, it is assumed that if there was an IRQ req together with the grant and IE was valid, then
+            // there must be no hazard due to xIE
+          else
+            ctrl_fsm_ns = ELW_EXE;
 
-        perf_pipeline_stall_o = data_load_event_i;
+          perf_pipeline_stall_o = data_load_event_i;
+        end
       end
 
       // flush the pipeline, insert NOP into EX and WB stage
@@ -1021,8 +1023,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
                   pc_set_o              = 1'b1;
                   trap_addr_mux_o       = TRAP_MACHINE;
                   exc_pc_mux_o          = debug_mode_q ? EXC_PC_DBE : EXC_PC_EXCEPTION;
-                  // TODO: why is this here, signal only needed for async exceptions
-                  exc_cause_o           = EXC_CAUSE_ECALL_MMODE;
 
                   if (debug_single_step_i && ~debug_mode_q)
                       ctrl_fsm_ns = DBG_TAKEN_IF;
@@ -1094,7 +1094,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
           end
           dret_dec_i: begin
               //dret
-              //TODO: is illegal when not in debug mode
+              // this case is only reachable while in debug_mode
               pc_mux_o              = PC_DRET;
               pc_set_o              = 1'b1;
               debug_mode_n          = 1'b0;
@@ -1292,7 +1292,6 @@ endgenerate
   always_comb
   begin
     load_stall_o   = 1'b0;
-    jr_stall_o     = 1'b0;
     deassert_we_o  = 1'b0;
 
     // deassert WE when the core is not decoding instructions
@@ -1328,6 +1327,10 @@ endgenerate
       jr_stall_o      = 1'b1;
       deassert_we_o   = 1'b1;
     end
+    else
+    begin
+      jr_stall_o     = 1'b0;
+    end
   end
 
 
@@ -1388,8 +1391,6 @@ endgenerate
 
       debug_mode_q   <= 1'b0;
       illegal_insn_q <= 1'b0;
-
-      instr_valid_irq_flush_q <= 1'b0;
     end
     else
     begin
@@ -1403,20 +1404,13 @@ endgenerate
       debug_mode_q   <= debug_mode_n;
 
       illegal_insn_q <= illegal_insn_n;
-
-      if (instr_valid_irq_flush_n) begin
-         instr_valid_irq_flush_q <= 1'b1;
-      end else if (id_valid_i) begin            // Stretch pulse until used in DECODE state
-         instr_valid_irq_flush_q <= 1'b0;
-      end
-
     end
   end
 
   // Performance Counters
   assign perf_jump_o      = jump_in_id;
-  assign perf_jr_stall_o  = jr_stall_o;
-  assign perf_ld_stall_o  = load_stall_o;
+  assign perf_jr_stall_o  = jr_stall_o && !halt_id_o;           // Do not count stall on flushed instructions
+  assign perf_ld_stall_o  = load_stall_o && !halt_id_o;         // Do not count stall on flushed instructions
 
   // wakeup from sleep conditions
   assign wake_from_sleep_o = irq_wu_ctrl_i || debug_req_pending || debug_mode_q;