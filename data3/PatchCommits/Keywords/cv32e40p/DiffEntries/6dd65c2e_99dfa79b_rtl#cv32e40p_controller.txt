6dd65c2e6d2003a8e963dca272ee708948f78303
:bug: fix corner case hwlp_jump at HWLP_END after mret from interrupt
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index 51b8f4d..54aeed0 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -648,13 +648,18 @@ module cv32e40p_controller
                         //We stay here in case we returned from the second last instruction, otherwise the next cycle
                         //in DECODE_HWLOOP we miss to jump, we jump at PC_END.
                         //This way looses a cycle but it's a corner case of returning from exceptions or interrupts
+                        // Stay in DECODE state also until the jump is performed (wait for id_ready),
+                        // otherwise in case of stall we miss the jump
 
-                        ctrl_fsm_ns  = hwlp_end0_eq_pc_plus4 || hwlp_end1_eq_pc_plus4 ? DECODE : DECODE_HWLOOP;
+                        ctrl_fsm_ns  = hwlp_end0_eq_pc_plus4 || hwlp_end1_eq_pc_plus4 || hwlp_end0_eq_pc || hwlp_end1_eq_pc ? DECODE : DECODE_HWLOOP;
 
                         // we can be at the end of HWloop due to a return from interrupt or ecall or ebreak or exceptions
                         if(hwlp_end0_eq_pc && hwlp_counter0_gt_1) begin
                             pc_mux_o         = PC_HWLOOP;
-                            if (~jump_done_q) begin
+                            // Gate with id_ready_i because if HWLP_END is stalled in ID we
+                            // want to jump only when HWLP_END can go on in the pipeline,
+                            // as the aligner (with the PC) changes state during the jump
+                            if (~jump_done_q && id_ready_i) begin
                               pc_set_o          = 1'b1;
                               jump_done         = 1'b1;
                               hwlp_dec_cnt_o[0] = 1'b1;
@@ -662,7 +667,7 @@ module cv32e40p_controller
                          end
                          if(hwlp_end1_eq_pc && hwlp_counter1_gt_1) begin
                             pc_mux_o         = PC_HWLOOP;
-                            if (~jump_done_q) begin
+                            if (~jump_done_q && id_ready_i) begin
                               pc_set_o          = 1'b1;
                               jump_done         = 1'b1;
                               hwlp_dec_cnt_o[1] = 1'b1;
@@ -749,7 +754,7 @@ module cv32e40p_controller
                 halt_if_o     = 1'b1;
                 halt_id_o     = 1'b1;
                 ctrl_fsm_ns   = IRQ_FLUSH;
-                hwlp_mask_o = 1'b1;
+                hwlp_mask_o   = 1'b1;
               end
 
 