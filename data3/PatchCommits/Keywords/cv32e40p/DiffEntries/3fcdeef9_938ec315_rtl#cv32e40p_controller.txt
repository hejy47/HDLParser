3fcdeef90561d8df2f89a92d9566121fd1b2eb3f
Merge pull request #353 from silabs-PaulZ/debug_exception
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index b9bf3d2..a619952 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -330,7 +330,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         // normal execution flow
         // in debug mode or single step mode we leave immediately (wfi=nop)
         if (wake_from_sleep_o) begin
-          ctrl_fsm_ns = FIRST_FETCH;
+          ctrl_fsm_ns  = FIRST_FETCH;
         end else begin
           ctrl_busy_o = 1'b0;
         end
@@ -407,7 +407,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
             halt_id_o         = 1'b1;
             halt_if_o         = 1'b1;
             csr_save_if_o     = 1'b1;
-            csr_save_cause_o  = 1'b1;
+            csr_save_cause_o  = !debug_mode_q;
 
             //no jump in this stage as we have to wait one cycle to go to Machine Mode
 
@@ -420,7 +420,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
           // branch in the EX stage is either not taken, or there is no
           // conditional branch in the EX stage
           else if (instr_valid_i || instr_valid_irq_flush_q) //valid block or replay after interrupt speculation
-          begin // now analyze the current instruction in the ID stage
+          begin: blk_decode_level1 // now analyze the current instruction in the ID stage
 
             is_decoding_o = 1'b1;
 
@@ -526,7 +526,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
                     default:;
 
                   endcase // unique case (1'b1)
-                end
+                end // else: !if(illegal_insn_i)
 
                 if (debug_single_step_i & ~debug_mode_q) begin
                     // prevent any more instructions from executing
@@ -556,11 +556,11 @@ module cv32e40p_controller import cv32e40p_pkg::*;
                             ctrl_fsm_ns = DBG_FLUSH;
                         endcase // unique case (1'b1)
                     end
-                end
+                end // if (debug_single_step_i & ~debug_mode_q)
 
-              end //decoding block
+              end // case: default : decoding block
             endcase
-          end  //valid block
+          end // block: blk_decode_level1 : valid block
           else begin
             is_decoding_o         = 1'b0;
             perf_pipeline_stall_o = data_load_event_i;
@@ -595,7 +595,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
           if(illegal_insn_q) begin
             csr_save_id_o     = 1'b1;
-            csr_save_cause_o  = 1'b1;
+            csr_save_cause_o  = !debug_mode_q;
             csr_cause_o       = {1'b0, EXC_CAUSE_ILLEGAL_INSN};
           end else begin
             unique case (1'b1)
@@ -606,7 +606,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
               end
               ecall_insn_i: begin
                 csr_save_id_o     = 1'b1;
-                csr_save_cause_o  = 1'b1;
+                csr_save_cause_o  = !debug_mode_q;
                 csr_cause_o       = {1'b0, current_priv_lvl_i == PRIV_LVL_U ? EXC_CAUSE_ECALL_UMODE : EXC_CAUSE_ECALL_MMODE};
               end
               default:;
@@ -699,11 +699,11 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         csr_irq_sec_o     = irq_sec_ctrl_i;
 
         // IRQs (standard plus extension)
-        irq_ack_o         = 1'b1;
-        if(irq_sec_ctrl_i)
-          trap_addr_mux_o  = TRAP_MACHINE;
-        else
-          trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
+          irq_ack_o         = 1'b1;
+          if(irq_sec_ctrl_i)
+            trap_addr_mux_o  = TRAP_MACHINE;
+          else
+            trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
 
         csr_save_cause_o  = 1'b1;
         csr_cause_o       = {1'b1,irq_id_ctrl_i};
@@ -724,11 +724,11 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         csr_irq_sec_o     = irq_sec_ctrl_i;
 
         // IRQs (standard plus extension)
-        irq_ack_o         = 1'b1;
-        if(irq_sec_ctrl_i)
-          trap_addr_mux_o = TRAP_MACHINE;
-        else
-          trap_addr_mux_o = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
+          irq_ack_o         = 1'b1;
+          if(irq_sec_ctrl_i)
+            trap_addr_mux_o  = TRAP_MACHINE;
+          else
+            trap_addr_mux_o  = current_priv_lvl_i == PRIV_LVL_U ? TRAP_USER : TRAP_MACHINE;
 
         csr_save_cause_o  = 1'b1;
         csr_cause_o       = {1'b1,irq_id_ctrl_i};
@@ -749,7 +749,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         ctrl_fsm_ns = DECODE;
 
         if(data_err_q) begin
-            //data_error
+            //PMP data_error
             pc_mux_o              = PC_EXCEPTION;
             pc_set_o              = 1'b1;
             trap_addr_mux_o       = TRAP_MACHINE;
@@ -759,11 +759,11 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
         end
         else if (is_fetch_failed_i) begin
-            //data_error
+            //instruction fetch error
             pc_mux_o              = PC_EXCEPTION;
             pc_set_o              = 1'b1;
             trap_addr_mux_o       = TRAP_MACHINE;
-            exc_pc_mux_o          = EXC_PC_EXCEPTION;
+            exc_pc_mux_o          = debug_mode_q ? EXC_PC_DBE : EXC_PC_EXCEPTION;
             exc_cause_o           = EXC_CAUSE_INSTR_FAULT;
 
         end
@@ -773,7 +773,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
               pc_mux_o              = PC_EXCEPTION;
               pc_set_o              = 1'b1;
               trap_addr_mux_o       = TRAP_MACHINE;
-              exc_pc_mux_o          = EXC_PC_EXCEPTION;
+              exc_pc_mux_o          = debug_mode_q ? EXC_PC_DBE : EXC_PC_EXCEPTION;
               illegal_insn_n        = 1'b0;
               if (debug_single_step_i && ~debug_mode_q)
                   ctrl_fsm_ns = DBG_TAKEN_IF;
@@ -794,7 +794,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
                   pc_mux_o              = PC_EXCEPTION;
                   pc_set_o              = 1'b1;
                   trap_addr_mux_o       = TRAP_MACHINE;
-                  exc_pc_mux_o          = EXC_PC_EXCEPTION;
+                  exc_pc_mux_o          = debug_mode_q ? EXC_PC_DBE : EXC_PC_EXCEPTION;
                   // TODO: why is this here, signal only needed for async exceptions
                   exc_cause_o           = EXC_CAUSE_ECALL_MMODE;
 
@@ -803,11 +803,11 @@ module cv32e40p_controller import cv32e40p_pkg::*;
               end
 
               mret_insn_i: begin
-                 csr_restore_mret_id_o =  1'b1;
+                 csr_restore_mret_id_o =  !debug_mode_q;
                  ctrl_fsm_ns           = XRET_JUMP;
               end
               uret_insn_i: begin
-                 csr_restore_uret_id_o =  1'b1;
+                 csr_restore_uret_id_o =  !debug_mode_q;
                  ctrl_fsm_ns           = XRET_JUMP;
               end
               dret_insn_i: begin
@@ -841,13 +841,15 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         unique case(1'b1)
           mret_dec_i: begin
               //mret
-              pc_mux_o              = PC_MRET;
+              pc_mux_o              = debug_mode_q ? PC_EXCEPTION : PC_MRET;
               pc_set_o              = 1'b1;
+              exc_pc_mux_o          = EXC_PC_DBE; // only used if in debug_mode
           end
           uret_dec_i: begin
               //uret
-              pc_mux_o              = PC_URET;
+              pc_mux_o              = debug_mode_q ? PC_EXCEPTION : PC_URET;
               pc_set_o              = 1'b1;
+              exc_pc_mux_o          = EXC_PC_DBE; // only used if in debug_mode
           end
           dret_dec_i: begin
               //dret
@@ -1163,6 +1165,6 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
   a_pulp_cluster_excluded_states : assert property(p_pulp_cluster_excluded_states);
 
-`endif
+  `endif
 
 endmodule // cv32e40p_controller