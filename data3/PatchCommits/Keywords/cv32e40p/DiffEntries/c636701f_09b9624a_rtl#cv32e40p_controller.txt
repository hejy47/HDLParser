c636701fcae18ecc2ef15b4c63a990c53ea5073a
Fix for #529, wfi wakeup.
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index 01b34c9..acee669 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -212,6 +212,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
   logic is_hwlp_illegal, is_hwlp_body;
   logic illegal_insn_q, illegal_insn_n;
   logic debug_req_entry_q, debug_req_entry_n;
+  logic debug_force_wakeup_q, debug_force_wakeup_n;
 
   logic hwlp_end0_eq_pc;
   logic hwlp_end1_eq_pc;
@@ -300,6 +301,8 @@ module cv32e40p_controller import cv32e40p_pkg::*;
 
     debug_req_entry_n       = debug_req_entry_q;
 
+    debug_force_wakeup_n    = debug_force_wakeup_q;
+
     perf_pipeline_stall_o   = 1'b0;
 
     hwlp_mask_o             = 1'b0;
@@ -333,7 +336,13 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         instr_req_o   = 1'b1;
         pc_mux_o      = PC_BOOT;
         pc_set_o      = 1'b1;
-        ctrl_fsm_ns   = FIRST_FETCH;
+        if (debug_req_pending) begin
+            ctrl_fsm_ns = DBG_TAKEN_IF;
+            debug_force_wakeup_n = 1'b1;
+        end else begin
+            ctrl_fsm_ns   = FIRST_FETCH;
+            debug_force_wakeup_n = 1'b0;
+        end
       end
 
       WAIT_SLEEP:
@@ -359,7 +368,13 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         // normal execution flow
         // in debug mode or single step mode we leave immediately (wfi=nop)
         if (wake_from_sleep_o) begin
-          ctrl_fsm_ns  = FIRST_FETCH;
+          if (debug_req_pending) begin
+              ctrl_fsm_ns = DBG_TAKEN_IF;
+              debug_force_wakeup_n = 1'b1;
+          end else begin
+              ctrl_fsm_ns  = FIRST_FETCH;
+              debug_force_wakeup_n = 1'b0;
+          end
         end else begin
           ctrl_busy_o = 1'b0;
         end
@@ -368,7 +383,7 @@ module cv32e40p_controller import cv32e40p_pkg::*;
       FIRST_FETCH:
       begin
         is_decoding_o = 1'b0;
-
+        
         // Stall because of IF miss
         if (id_ready_i == 1'b1) begin
           ctrl_fsm_ns = DECODE;
@@ -1144,6 +1159,8 @@ module cv32e40p_controller import cv32e40p_pkg::*;
             csr_save_cause_o = 1'b1;
             csr_save_id_o    = 1'b1;
             debug_csr_save_o = 1'b1;
+//            if(debug_force_wakeup_q)
+//                debug_cause_o = DBG_CAUSE_HALTREQ;
             if (trigger_match_i)
                 debug_cause_o = DBG_CAUSE_TRIGGER; // pri 4 (highest)
             else if (ebrk_force_debug_mode & ebrk_insn_i)
@@ -1167,11 +1184,14 @@ module cv32e40p_controller import cv32e40p_pkg::*;
         exc_pc_mux_o      = EXC_PC_DBD;
         csr_save_cause_o  = 1'b1;
         debug_csr_save_o  = 1'b1;
-        if (debug_single_step_i)
+        if (debug_force_wakeup_q) 
+            debug_cause_o = DBG_CAUSE_HALTREQ;
+        else if (debug_single_step_i)
             debug_cause_o = DBG_CAUSE_STEP; // pri 0
         csr_save_if_o   = 1'b1;
         ctrl_fsm_ns     = DECODE;
         debug_mode_n    = 1'b1;
+        debug_force_wakeup_n = 1'b0;
       end
 
 
@@ -1386,6 +1406,7 @@ endgenerate
       illegal_insn_q     <= 1'b0;
 
       debug_req_entry_q  <= 1'b0;
+      debug_force_wakeup_q <= 1'b0;
     end
     else
     begin
@@ -1401,6 +1422,7 @@ endgenerate
       illegal_insn_q     <= illegal_insn_n;
 
       debug_req_entry_q  <= debug_req_entry_n;
+      debug_force_wakeup_q <= debug_force_wakeup_n;
     end
   end
 
@@ -1483,8 +1505,10 @@ endgenerate
   end
   endgenerate
 
-  // Ensure DBG_TAKEN_IF can only be enterred if in single step mode
-  a_single_step_dbg_taken_if : assert property (@(posedge clk)  disable iff (!rst_n)  (ctrl_fsm_ns==DBG_TAKEN_IF) |-> (~debug_mode_q && debug_single_step_i));
+  // Ensure DBG_TAKEN_IF can only be enterred if in single step mode or woken
+ // up from sleep by debug_req_i
+         
+  a_single_step_dbg_taken_if : assert property (@(posedge clk)  disable iff (!rst_n)  (ctrl_fsm_ns==DBG_TAKEN_IF) |-> ((~debug_mode_q && debug_single_step_i) || debug_force_wakeup_n));
 
   // Ensure DBG_FLUSH state is only one cycle. This implies that cause is either trigger, debug_req_entry, or ebreak
   a_dbg_flush : assert property (@(posedge clk)  disable iff (!rst_n)  (ctrl_fsm_cs==DBG_FLUSH) |-> (ctrl_fsm_ns!=DBG_FLUSH) );