744e507907cb9af832a9573314e16f55ef4264b9
Merge pull request #313 from davideschiavone/fix#302
diff --git a/rtl/riscv_controller.sv b/rtl/riscv_controller.sv
index b4d3b8d..cb1b9d9 100644
--- a/rtl/riscv_controller.sv
+++ b/rtl/riscv_controller.sv
@@ -188,11 +188,7 @@ module riscv_controller
 );
 
   // FSM state encoding
-  enum  logic [4:0] { RESET, BOOT_SET, SLEEP, WAIT_SLEEP, FIRST_FETCH,
-                      DECODE,
-                      IRQ_TAKEN_ID, IRQ_TAKEN_IF, IRQ_FLUSH, IRQ_FLUSH_ELW, ELW_EXE,
-                      FLUSH_EX, FLUSH_WB, XRET_JUMP,
-                      DBG_TAKEN_ID, DBG_TAKEN_IF, DBG_FLUSH, DBG_WAIT_BRANCH } ctrl_fsm_cs, ctrl_fsm_ns;
+  ctrl_state_e ctrl_fsm_cs, ctrl_fsm_ns;
 
   logic jump_done, jump_done_q, jump_in_dec, branch_in_id;
   logic boot_done, boot_done_q;
@@ -475,9 +471,6 @@ module riscv_controller
 
                   halt_if_o         = 1'b1;
                   halt_id_o         = 1'b1;
-                  csr_save_id_o     = 1'b1;
-                  csr_save_cause_o  = 1'b1;
-                  csr_cause_o       = EXC_CAUSE_ILLEGAL_INSN;
                   ctrl_fsm_ns       = FLUSH_EX;
                   illegal_insn_n    = 1'b1;
                 end else begin
@@ -512,11 +505,7 @@ module riscv_controller
 
                       else begin
                         // otherwise just a normal ebreak exception
-                        csr_save_id_o     = 1'b1;
-                        csr_save_cause_o  = 1'b1;
-
                         ctrl_fsm_ns = FLUSH_EX;
-                        csr_cause_o = EXC_CAUSE_BREAKPOINT;
                       end
 
                     end
@@ -528,9 +517,6 @@ module riscv_controller
                     ecall_insn_i: begin
                       halt_if_o     = 1'b1;
                       halt_id_o     = 1'b1;
-                      csr_save_id_o     = 1'b1;
-                      csr_save_cause_o  = 1'b1;
-                      csr_cause_o   = current_priv_lvl_i == PRIV_LVL_U ? EXC_CAUSE_ECALL_UMODE : EXC_CAUSE_ECALL_MMODE;
                       ctrl_fsm_ns   = FLUSH_EX;
                     end
                     fencei_insn_i: begin
@@ -617,9 +603,31 @@ module riscv_controller
             //so the illegal was never executed
             illegal_insn_n    = 1'b0;
         end  //data erro
-        else if (ex_valid_i)
+        else if (ex_valid_i) begin
           //check done to prevent data harzard in the CSR registers
           ctrl_fsm_ns = FLUSH_WB;
+
+          if(illegal_insn_q) begin
+            csr_save_id_o     = 1'b1;
+            csr_save_cause_o  = 1'b1;
+            csr_cause_o       = EXC_CAUSE_ILLEGAL_INSN;
+          end else begin
+            unique case (1'b1)
+              ebrk_insn_i: begin
+                csr_save_id_o     = 1'b1;
+                csr_save_cause_o  = 1'b1;
+                csr_cause_o       = EXC_CAUSE_BREAKPOINT;
+              end
+              ecall_insn_i: begin
+                csr_save_id_o     = 1'b1;
+                csr_save_cause_o  = 1'b1;
+                csr_cause_o       = current_priv_lvl_i == PRIV_LVL_U ? EXC_CAUSE_ECALL_UMODE : EXC_CAUSE_ECALL_MMODE;
+              end
+              default:;
+            endcase // unique case (1'b1)
+          end
+
+        end
       end
 
 