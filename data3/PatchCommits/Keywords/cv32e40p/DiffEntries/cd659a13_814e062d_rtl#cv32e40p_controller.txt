cd659a13fc082ee9aad44220802ab7e5710071b3
Merge pull request #399 from silabs-PaulZ/trigger_access
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index 6dd48ed..b9bf3d2 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -28,9 +28,7 @@
 //                                                                            //
 ////////////////////////////////////////////////////////////////////////////////
 
-import cv32e40p_defines::*;
-
-module cv32e40p_controller
+module cv32e40p_controller import cv32e40p_pkg::*;
 #(
   parameter PULP_CLUSTER = 0
 )
@@ -104,15 +102,15 @@ module cv32e40p_controller
   input  logic        irq_pending_i,
   input  logic        irq_req_ctrl_i,
   input  logic        irq_sec_ctrl_i,
-  input  logic [5:0]  irq_id_ctrl_i,
+  input  logic [4:0]  irq_id_ctrl_i,
   input  logic        m_IE_i,                     // interrupt enable bit from CSR (M mode)
   input  logic        u_IE_i,                     // interrupt enable bit from CSR (U mode)
   input  PrivLvl_t    current_priv_lvl_i,
 
   output logic        irq_ack_o,
-  output logic [5:0]  irq_id_o,
+  output logic [4:0]  irq_id_o,
 
-  output logic [5:0]  exc_cause_o,
+  output logic [4:0]  exc_cause_o,
   output logic        exc_ack_o,
   output logic        exc_kill_o,
 
@@ -134,7 +132,7 @@ module cv32e40p_controller
   output logic        csr_save_if_o,
   output logic        csr_save_id_o,
   output logic        csr_save_ex_o,
-  output logic [6:0]  csr_cause_o,
+  output logic [5:0]  csr_cause_o,
   output logic        csr_irq_sec_o,
   output logic        csr_restore_mret_id_o,
   output logic        csr_restore_uret_id_o,
@@ -209,22 +207,6 @@ module cv32e40p_controller
   logic debug_req_q;
   logic debug_req_pending;
 
-`ifndef SYNTHESIS
-  // synopsys translate_off
-  // make sure we are called later so that we do not generate messages for
-  // glitches
-  always_ff @(negedge clk)
-  begin
-    // print warning in case of decoding errors
-    if (is_decoding_o && illegal_insn_i) begin
-      $display("%t: Illegal instruction (core %0d) at PC 0x%h:", $time, cv32e40p_core.hart_id_i[3:0],
-               cv32e40p_id_stage.pc_id_i);
-    end
-  end
-  // synopsys translate_on
-`endif
-
-
   ////////////////////////////////////////////////////////////////////////////////////////////
   //   ____ ___  ____  _____    ____ ___  _   _ _____ ____   ___  _     _     _____ ____    //
   //  / ___/ _ \|  _ \| ____|  / ___/ _ \| \ | |_   _|  _ \ / _ \| |   | |   | ____|  _ \   //
@@ -271,7 +253,7 @@ module cv32e40p_controller
     halt_if_o              = 1'b0;
     halt_id_o              = 1'b0;
     irq_ack_o              = 1'b0;
-    irq_id_o               = irq_id_ctrl_i[5:0];
+    irq_id_o               = irq_id_ctrl_i;
 
     boot_done              = 1'b0;
     jump_in_dec            = jump_in_dec_i == BRANCH_JALR || jump_in_dec_i == BRANCH_JAL;
@@ -411,7 +393,7 @@ module cv32e40p_controller
             data_err_ack_o    = 1'b1;
             //no jump in this stage as we have to wait one cycle to go to Machine Mode
 
-            csr_cause_o       = data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT;
+            csr_cause_o       = {1'b0, data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT};
             ctrl_fsm_ns       = FLUSH_WB;
 
           end  //data error
@@ -429,7 +411,7 @@ module cv32e40p_controller
 
             //no jump in this stage as we have to wait one cycle to go to Machine Mode
 
-            csr_cause_o       = EXC_CAUSE_INSTR_FAULT;
+            csr_cause_o       = {1'b0, EXC_CAUSE_INSTR_FAULT};
             ctrl_fsm_ns       = FLUSH_WB;
 
 
@@ -601,7 +583,7 @@ module cv32e40p_controller
             csr_save_cause_o  = 1'b1;
             data_err_ack_o    = 1'b1;
             //no jump in this stage as we have to wait one cycle to go to Machine Mode
-            csr_cause_o       = data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT;
+            csr_cause_o       = {1'b0, data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT};
             ctrl_fsm_ns       = FLUSH_WB;
             //putting illegal to 0 as if it was 1, the core is going to jump to the exception of the EX stage,
             //so the illegal was never executed
@@ -614,18 +596,18 @@ module cv32e40p_controller
           if(illegal_insn_q) begin
             csr_save_id_o     = 1'b1;
             csr_save_cause_o  = 1'b1;
-            csr_cause_o       = EXC_CAUSE_ILLEGAL_INSN;
+            csr_cause_o       = {1'b0, EXC_CAUSE_ILLEGAL_INSN};
           end else begin
             unique case (1'b1)
               ebrk_insn_i: begin
                 csr_save_id_o     = 1'b1;
                 csr_save_cause_o  = 1'b1;
-                csr_cause_o       = EXC_CAUSE_BREAKPOINT;
+                csr_cause_o       = {1'b0, EXC_CAUSE_BREAKPOINT};
               end
               ecall_insn_i: begin
                 csr_save_id_o     = 1'b1;
                 csr_save_cause_o  = 1'b1;
-                csr_cause_o       = current_priv_lvl_i == PRIV_LVL_U ? EXC_CAUSE_ECALL_UMODE : EXC_CAUSE_ECALL_MMODE;
+                csr_cause_o       = {1'b0, current_priv_lvl_i == PRIV_LVL_U ? EXC_CAUSE_ECALL_UMODE : EXC_CAUSE_ECALL_MMODE};
               end
               default:;
             endcase // unique case (1'b1)
@@ -649,7 +631,7 @@ module cv32e40p_controller
             csr_save_cause_o  = 1'b1;
             data_err_ack_o    = 1'b1;
             //no jump in this stage as we have to wait one cycle to go to Machine Mode
-            csr_cause_o       = data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT;
+            csr_cause_o       = {1'b0, data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT};
             ctrl_fsm_ns       = FLUSH_WB;
 
         end  //data error
@@ -965,7 +947,7 @@ module cv32e40p_controller
             csr_save_cause_o  = 1'b1;
             data_err_ack_o    = 1'b1;
             //no jump in this stage as we have to wait one cycle to go to Machine Mode
-            csr_cause_o       = data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT;
+            csr_cause_o       = {1'b0, data_we_ex_i ? EXC_CAUSE_STORE_FAULT : EXC_CAUSE_LOAD_FAULT};
             ctrl_fsm_ns       = FLUSH_WB;
 
         end  //data error
@@ -1157,7 +1139,7 @@ module cv32e40p_controller
   // Assertions
   //----------------------------------------------------------------------------
 
-`ifndef VERILATOR
+`ifdef CV32E40P_ASSERT_ON
 
   // make sure that taken branches do not happen back-to-back, as this is not
   // possible without branch prediction in the IF stage