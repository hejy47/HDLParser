806065bc10109cf5cfd2e901071fe652801d965e
IRQ related fixes as documented in https://github.com/openhwgroup/core-v-docs/issues/50. Removed NMI, unified fastx and fast interrupts, removed MTVECX. Fixes 243, 323, 336
diff --git a/rtl/riscv_if_stage.sv b/rtl/riscv_if_stage.sv
index 5eed535..6aff858 100644
--- a/rtl/riscv_if_stage.sv
+++ b/rtl/riscv_if_stage.sv
@@ -40,7 +40,6 @@ module riscv_if_stage
 
     // Used to calculate the exception offsets
     input  logic [23:0] m_trap_base_addr_i,
-    input  logic [23:0] m_trap_base_addrx_i,
     input  logic [23:0] u_trap_base_addr_i,
     input  logic  [1:0] trap_addr_mux_i,
     // Boot address
@@ -81,7 +80,7 @@ module riscv_if_stage
 
     input  logic  [2:0] pc_mux_i,              // sel for pc multiplexer
     input  logic  [2:0] exc_pc_mux_i,          // selects ISR address
-    input  logic  [4:0] exc_vec_pc_mux_i,      // selects ISR address for vectorized interrupt lines
+    input  logic  [5:0] exc_vec_pc_mux_i,      // selects ISR address for vectorized interrupt lines
 
     // jump and branch target and decision
     input  logic [31:0] jump_target_id_i,      // jump target address
@@ -101,6 +100,8 @@ module riscv_if_stage
     output logic        perf_imiss_o           // Instruction Fetch Miss
 );
 
+  localparam IGNORE_CAUSE_MSB = 0;             // Ignore the MSB of the exception code (effectively mapping the top 32 and bottom 32 IRQs on top of each other)
+
   // offset FSM
   enum logic[0:0] {WAIT, IDLE } offset_fsm_cs, offset_fsm_ns;
 
@@ -135,13 +136,12 @@ module riscv_if_stage
     unique case (trap_addr_mux_i)
       TRAP_MACHINE:  trap_base_addr = m_trap_base_addr_i;
       TRAP_USER:     trap_base_addr = u_trap_base_addr_i;
-      TRAP_MACHINEX: trap_base_addr = m_trap_base_addrx_i;
       default:       trap_base_addr = m_trap_base_addr_i;
     endcase
 
     unique case (exc_pc_mux_i)
       EXC_PC_EXCEPTION:                        exc_pc = { trap_base_addr, 8'h0 }; //1.10 all the exceptions go to base address
-      EXC_PC_IRQ:                              exc_pc = { trap_base_addr, 1'b0, exc_vec_pc_mux_i[4:0], 2'b0 }; // interrupts are vectored
+      EXC_PC_IRQ:                              exc_pc = { trap_base_addr, 1'b0,IGNORE_CAUSE_MSB ? {1'b0, exc_vec_pc_mux_i[4:0]} : exc_vec_pc_mux_i[5:0], 2'b0 }; // interrupts are vectored
       EXC_PC_DBD:                              exc_pc = { dm_halt_addr_i, 2'b0 };
       default:                                 exc_pc = { trap_base_addr, 8'h0 };
     endcase