7294cc3682003fdf576ecc56d4b4090c5b59edee
Merge pull request #538 from silabs-PaulZ/debug_req_single_step_fix
diff --git a/rtl/cv32e40p_alu.sv b/rtl/cv32e40p_alu.sv
index cc1b592..627707f 100644
--- a/rtl/cv32e40p_alu.sv
+++ b/rtl/cv32e40p_alu.sv
@@ -22,14 +22,11 @@
 // Language:       SystemVerilog                                              //
 //                                                                            //
 // Description:    Arithmetic logic unit of the pipelined processor           //
-//                 supports FP-comparisons, classifications if FPU is defined //
 //                                                                            //
 ////////////////////////////////////////////////////////////////////////////////
 
 module cv32e40p_alu import cv32e40p_pkg::*;
-#(
-  parameter FPU            = 0
-)(
+(
   input  logic                     clk,
   input  logic                     rst_n,
   input  logic                     enable_i,
@@ -312,8 +309,6 @@ module cv32e40p_alu import cv32e40p_pkg::*;
 
   logic [3:0] is_equal;
   logic [3:0] is_greater;     // handles both signed and unsigned forms
-  logic [3:0] f_is_greater;   // for floats, only signed and *no vectors*,
-                              // inverted for two negative numbers
 
   // 8-bit vector comparisons, basic building blocks
   logic [3:0]  cmp_signed;
@@ -349,11 +344,7 @@ module cv32e40p_alu import cv32e40p_pkg::*;
       ALU_MAX,
       ALU_ABS,
       ALU_CLIP,
-      ALU_CLIPU,
-      ALU_FLE,
-      ALU_FLT,
-      ALU_FMAX,
-      ALU_FMIN: begin
+      ALU_CLIPU: begin
         case (vector_mode_i)
           VEC_MODE8:  cmp_signed[3:0] = 4'b1111;
           VEC_MODE16: cmp_signed[3:0] = 4'b1010;
@@ -407,20 +398,12 @@ module cv32e40p_alu import cv32e40p_pkg::*;
     endcase
   end
 
-  // generate the floating point greater signal, inverted for two negative numbers
-  // (but not for identical numbers)
-  assign f_is_greater[3:0] = {4{is_greater[3] ^ (operand_a_i[31] & operand_b_i[31] & !is_equal[3])}};
-
   // generate comparison result
   logic [3:0] cmp_result;
-  logic       f_is_qnan;
-  logic       f_is_snan;
-  logic [3:0] f_is_nan;
 
   always_comb
   begin
     cmp_result = is_equal;
-    f_is_nan   = {4{(f_is_qnan | f_is_snan)}};
     unique case (operator_i)
       ALU_EQ:            cmp_result = is_equal;
       ALU_NE:            cmp_result = ~is_equal;
@@ -431,10 +414,6 @@ module cv32e40p_alu import cv32e40p_pkg::*;
       ALU_SLETS,
       ALU_SLETU,
       ALU_LES, ALU_LEU:  cmp_result = ~is_greater;
-      ALU_FEQ:           cmp_result = is_equal & ~f_is_nan;
-      ALU_FLE:           cmp_result = ~f_is_greater & ~f_is_nan;
-      ALU_FLT:           cmp_result = ~(f_is_greater | is_equal) & ~f_is_nan;
-
       default: ;
     endcase
   end
@@ -444,112 +423,22 @@ module cv32e40p_alu import cv32e40p_pkg::*;
 
   // min/max/abs handling
   logic [31:0] result_minmax;
-  logic [31:0] fp_canonical_nan;
   logic [ 3:0] sel_minmax;
   logic        do_min;
-  logic        minmax_is_fp_special;
   logic [31:0] minmax_b;
 
   assign minmax_b = (operator_i == ALU_ABS) ? adder_result : operand_b_i;
 
   assign do_min   = (operator_i == ALU_MIN)  || (operator_i == ALU_MINU) ||
-                    (operator_i == ALU_CLIP) || (operator_i == ALU_CLIPU) ||
-                    (operator_i == ALU_FMIN);
+                    (operator_i == ALU_CLIP) || (operator_i == ALU_CLIPU);
 
-  assign sel_minmax[3:0]      = ((operator_i == ALU_FMIN || operator_i == ALU_FMAX) ? f_is_greater : is_greater) ^ {4{do_min}};
+  assign sel_minmax[3:0]      = is_greater ^ {4{do_min}};
 
   assign result_minmax[31:24] = (sel_minmax[3] == 1'b1) ? operand_a_i[31:24] : minmax_b[31:24];
   assign result_minmax[23:16] = (sel_minmax[2] == 1'b1) ? operand_a_i[23:16] : minmax_b[23:16];
   assign result_minmax[15: 8] = (sel_minmax[1] == 1'b1) ? operand_a_i[15: 8] : minmax_b[15: 8];
   assign result_minmax[ 7: 0] = (sel_minmax[0] == 1'b1) ? operand_a_i[ 7: 0] : minmax_b[ 7: 0];
 
-  //////////////////////////////////////////////////
-  // Float classification
-  //////////////////////////////////////////////////
-  logic [31:0] fclass_result;
-
-  if (FPU == 1) begin
-     logic [7:0]   fclass_exponent;
-     logic [22:0]  fclass_mantiassa;
-     logic         fclass_ninf;
-     logic         fclass_pinf;
-     logic         fclass_normal;
-     logic         fclass_subnormal;
-     logic         fclass_nzero;
-     logic         fclass_pzero;
-     logic         fclass_is_negative;
-     logic         fclass_snan_a;
-     logic         fclass_qnan_a;
-     logic         fclass_snan_b;
-     logic         fclass_qnan_b;
-
-     assign fclass_exponent    = operand_a_i[30:23];
-     assign fclass_mantiassa   = operand_a_i[22:0];
-     assign fclass_is_negative = operand_a_i[31];
-
-     assign fclass_ninf        = operand_a_i == 32'hFF800000;
-     assign fclass_pinf        = operand_a_i == 32'h7F800000;
-     assign fclass_normal      = fclass_exponent != 0 && fclass_exponent != 255;
-     assign fclass_subnormal   = fclass_exponent == 0 && fclass_mantiassa != 0;
-     assign fclass_nzero       = operand_a_i == 32'h80000000;
-     assign fclass_pzero       = operand_a_i == 32'h00000000;
-     assign fclass_snan_a      = operand_a_i[30:0] == 32'h7fa00000;
-     assign fclass_qnan_a      = operand_a_i[30:0] == 32'h7fc00000;
-     assign fclass_snan_b      = operand_b_i[30:0] == 32'h7fa00000;
-     assign fclass_qnan_b      = operand_b_i[30:0] == 32'h7fc00000;
-
-     assign fclass_result[31:0] = {{22{1'b0}},
-                                   fclass_qnan_a,
-                                   fclass_snan_a,
-                                   fclass_pinf,
-                                   (fclass_normal    && !fclass_is_negative),
-                                   (fclass_subnormal && !fclass_is_negative),
-                                   fclass_pzero,
-                                   fclass_nzero,
-                                   (fclass_subnormal && fclass_is_negative),
-                                   (fclass_normal    && fclass_is_negative),
-                                   fclass_ninf};
-
-
-     // float special cases
-     assign f_is_qnan          =  fclass_qnan_a | fclass_qnan_b;
-     assign f_is_snan          =  fclass_snan_a | fclass_snan_b;
-
-     assign minmax_is_fp_special = (operator_i == ALU_FMIN || operator_i == ALU_FMAX) & (f_is_snan | f_is_qnan);
-     assign fp_canonical_nan     = 32'h7fc00000;
-  end else begin // (FPU == 0)
-     assign minmax_is_fp_special = '0;
-     assign f_is_qnan            = '0;
-     assign f_is_snan            = '0;
-     assign fclass_result        = '0;
-     assign fp_canonical_nan     = '0;
-  end
-
-
-  //////////////////////////////////////////////////
-  // Float sign injection
-  //////////////////////////////////////////////////
-  logic [31:0]  f_sign_inject_result;
-
-
-   always_comb
-     begin
-        if (FPU == 1) begin
-           f_sign_inject_result[30:0] = operand_a_i[30:0];
-           f_sign_inject_result[31]   = operand_a_i[31];
-
-           unique case(operator_i)
-             ALU_FKEEP:  f_sign_inject_result[31] = operand_a_i[31];
-             ALU_FSGNJ:  f_sign_inject_result[31] = operand_b_i[31];
-             ALU_FSGNJN: f_sign_inject_result[31] = !operand_b_i[31];
-             ALU_FSGNJX: f_sign_inject_result[31] = operand_a_i[31] ^ operand_b_i[31];
-             default: ;
-           endcase
-        end
-        else
-          f_sign_inject_result = '0;
-     end
-
   //////////////////////////////////////////////////
   // Clip
   //////////////////////////////////////////////////
@@ -1089,9 +978,7 @@ module cv32e40p_alu import cv32e40p_pkg::*;
 
       // Min/Max/Ins
       ALU_MIN, ALU_MINU,
-      ALU_MAX, ALU_MAXU,
-      ALU_FMIN,
-      ALU_FMAX: result_o = minmax_is_fp_special ? fp_canonical_nan : result_minmax;
+      ALU_MAX, ALU_MAXU: result_o = result_minmax;
 
       //Abs/Cplxconj , ABS is used to do 0 - A for Cplxconj
       ALU_ABS:  result_o = is_clpx_i ? {adder_result[31:16], operand_a_i[15:0]} : result_minmax;
@@ -1110,8 +997,6 @@ module cv32e40p_alu import cv32e40p_pkg::*;
           result_o[ 7: 0] = {8{cmp_result[0]}};
        end
       // Non-vector comparisons
-      ALU_FEQ,   ALU_FLT,
-      ALU_FLE,
       ALU_SLTS,  ALU_SLTU,
       ALU_SLETS, ALU_SLETU: result_o = {31'b0, comparison_result_o};
 
@@ -1121,13 +1006,6 @@ module cv32e40p_alu import cv32e40p_pkg::*;
       ALU_DIV, ALU_DIVU,
       ALU_REM, ALU_REMU: result_o = result_div;
 
-      // fclass
-      ALU_FCLASS: result_o = fclass_result;
-
-      // float sign injection
-      ALU_FSGNJ, ALU_FSGNJN,
-      ALU_FSGNJX, ALU_FKEEP: result_o = f_sign_inject_result;
-
       default: ; // default case to suppress unique warning
     endcase
   end