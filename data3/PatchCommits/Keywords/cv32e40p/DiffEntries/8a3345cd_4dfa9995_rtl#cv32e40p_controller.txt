8a3345cd80db4097cd007697233e54f020245bfb
Merge pull request #397 from davideschiavone/fix371
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index 93756e7..6dd48ed 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -32,7 +32,7 @@ import cv32e40p_defines::*;
 
 module cv32e40p_controller
 #(
-  parameter FPU               = 0
+  parameter PULP_CLUSTER = 0
 )
 (
   input  logic        clk,
@@ -40,7 +40,6 @@ module cv32e40p_controller
 
   input  logic        fetch_enable_i,             // Start the decoding
   output logic        ctrl_busy_o,                // Core is busy processing instructions
-  output logic        first_fetch_o,              // Core is at the FIRST FETCH stage
   output logic        is_decoding_o,              // Core is in decoding state
   input  logic        is_fetch_failed_i,
 
@@ -119,7 +118,6 @@ module cv32e40p_controller
 
   // Debug Signal
   output logic         debug_mode_o,
-  output logic         debug_req_pending_o,
   output logic [2:0]   debug_cause_o,
   output logic         debug_csr_save_o,
   input  logic         debug_req_i,
@@ -127,6 +125,8 @@ module cv32e40p_controller
   input  logic         debug_ebreakm_i,
   input  logic         debug_ebreaku_i,
   input  logic         trigger_match_i,
+  output logic         debug_p_elw_no_sleep_o,
+  output logic         debug_wfi_no_sleep_o,
 
   // Wakeup Signal
   output logic        wake_from_sleep_o,
@@ -207,6 +207,7 @@ module cv32e40p_controller
   logic instr_valid_irq_flush_n, instr_valid_irq_flush_q;
 
   logic debug_req_q;
+  logic debug_req_pending;
 
 `ifndef SYNTHESIS
   // synopsys translate_off
@@ -266,7 +267,6 @@ module cv32e40p_controller
     ctrl_fsm_ns            = ctrl_fsm_cs;
 
     ctrl_busy_o            = 1'b1;
-    first_fetch_o          = 1'b0;
 
     halt_if_o              = 1'b0;
     halt_id_o              = 1'b0;
@@ -341,24 +341,22 @@ module cv32e40p_controller
         // we begin execution when an
         // interrupt has arrived
         is_decoding_o = 1'b0;
-        ctrl_busy_o   = 1'b0;
         instr_req_o   = 1'b0;
         halt_if_o     = 1'b1;
         halt_id_o     = 1'b1;
 
-
         // normal execution flow
         // in debug mode or single step mode we leave immediately (wfi=nop)
-        if (wake_from_sleep_o ) begin
-          ctrl_fsm_ns  = FIRST_FETCH;
+        if (wake_from_sleep_o) begin
+          ctrl_fsm_ns = FIRST_FETCH;
+        end else begin
+          ctrl_busy_o = 1'b0;
         end
-
       end
 
       FIRST_FETCH:
       begin
         is_decoding_o = 1'b0;
-        first_fetch_o = 1'b1;
         // Stall because of IF miss
         if ((id_ready_i == 1'b1) )
         begin
@@ -374,7 +372,7 @@ module cv32e40p_controller
           halt_id_o   = 1'b1;
         end
 
-        if ((debug_req_pending_o || trigger_match_i) & (~debug_mode_q))
+        if ((debug_req_pending || trigger_match_i) & (~debug_mode_q))
         begin
           ctrl_fsm_ns = DBG_TAKEN_IF;
           halt_if_o   = 1'b1;
@@ -449,7 +447,7 @@ module cv32e40p_controller
               //irq_req_ctrl_i comes from a FF in the interrupt controller
               //irq_enable_int: check again irq_enable_int because xIE could have changed
               //don't serve in debug mode
-              irq_req_ctrl_i & irq_enable_int & (~debug_req_pending_o) & (~debug_mode_q):
+              irq_req_ctrl_i & irq_enable_int & (~debug_req_pending) & (~debug_mode_q):
               begin
                 //Serving the external interrupt
                 halt_if_o     = 1'b1;
@@ -459,7 +457,7 @@ module cv32e40p_controller
               end
 
 
-              (debug_req_pending_o || trigger_match_i) & (~debug_mode_q):
+              (debug_req_pending || trigger_match_i) & (~debug_mode_q):
               begin
                 //Serving the debug
                 halt_if_o     = 1'b1;
@@ -699,7 +697,7 @@ module cv32e40p_controller
         //If an interrupt occurs, we replay the ELW
         //No needs to check irq_int_req_i since in the EX stage there is only the elw, no CSR pendings
         if(id_ready_i)
-          ctrl_fsm_ns = ((debug_req_pending_o || trigger_match_i) & ~debug_mode_q) ? DBG_FLUSH : IRQ_FLUSH_ELW;
+          ctrl_fsm_ns = ((debug_req_pending || trigger_match_i) & ~debug_mode_q) ? DBG_FLUSH : IRQ_FLUSH_ELW;
           // if from the ELW EXE we go to IRQ_FLUSH_ELW, it is assumed that if there was an IRQ req together with the grant and IE was valid, then
           // there must be no hazard due to xIE
         else
@@ -914,12 +912,12 @@ module cv32e40p_controller
         pc_set_o          = 1'b1;
         pc_mux_o          = PC_EXCEPTION;
         exc_pc_mux_o      = EXC_PC_DBD;
-        if (((debug_req_pending_o || trigger_match_i) && (~debug_mode_q)) ||
+        if (((debug_req_pending || trigger_match_i) && (~debug_mode_q)) ||
             (ebrk_insn_i && ebrk_force_debug_mode && (~debug_mode_q))) begin
             csr_save_cause_o = 1'b1;
             csr_save_id_o    = 1'b1;
             debug_csr_save_o = 1'b1;
-            if (debug_req_pending_o)
+            if (debug_req_pending)
                 debug_cause_o = DBG_CAUSE_HALTREQ;
             if (ebrk_insn_i)
                 debug_cause_o = DBG_CAUSE_EBREAK;
@@ -940,7 +938,7 @@ module cv32e40p_controller
         debug_csr_save_o  = 1'b1;
         if (debug_single_step_i)
             debug_cause_o = DBG_CAUSE_STEP;
-        if (debug_req_pending_o)
+        if (debug_req_pending)
             debug_cause_o = DBG_CAUSE_HALTREQ;
         if (ebrk_insn_i)
             debug_cause_o = DBG_CAUSE_EBREAK;
@@ -1129,11 +1127,21 @@ module cv32e40p_controller
   assign perf_ld_stall_o  = load_stall_o;
 
   // wakeup from sleep conditions
-  assign wake_from_sleep_o = irq_pending_i || debug_req_pending_o || debug_mode_q ;
+  assign wake_from_sleep_o = irq_pending_i || debug_req_pending || debug_mode_q;
 
   // debug mode
   assign debug_mode_o = debug_mode_q;
-  assign debug_req_pending_o = debug_req_i | debug_req_q;
+  assign debug_req_pending = debug_req_i || debug_req_q;
+
+  // Do not let p.elw cause core_sleep_o during debug
+  assign debug_p_elw_no_sleep_o = debug_mode_q || debug_req_q || debug_single_step_i || trigger_match_i;
+
+  // Do not let WFI cause core_sleep_o (but treat as NOP):
+  //
+  // - During debug
+  // - For PULP Cluster (only p.elw can trigger sleep)
+
+  assign debug_wfi_no_sleep_o = debug_mode_q || debug_req_pending || debug_single_step_i || trigger_match_i || PULP_CLUSTER;
 
   // sticky version of debug_req
   always_ff @(posedge clk , negedge rst_n)
@@ -1148,12 +1156,31 @@ module cv32e40p_controller
   //----------------------------------------------------------------------------
   // Assertions
   //----------------------------------------------------------------------------
+
+`ifndef VERILATOR
+
   // make sure that taken branches do not happen back-to-back, as this is not
   // possible without branch prediction in the IF stage
-  `ifndef VERILATOR
   assert property (
     @(posedge clk) (branch_taken_ex_i) |=> (~branch_taken_ex_i) ) else $warning("Two branches back-to-back are taken");
+
   assert property (
     @(posedge clk) (~('0 & irq_req_ctrl_i)) ) else $warning("Both dbg_req_i and irq_req_ctrl_i are active");
-  `endif
-endmodule // controller
+
+  // ELW_EXE and IRQ_FLUSH_ELW states are only used for PULP_CLUSTER = 1
+  property p_pulp_cluster_only_states;
+     @(posedge clk) (1'b1) |-> ( !((PULP_CLUSTER == 1'b0) && ((ctrl_fsm_cs == ELW_EXE) || (ctrl_fsm_cs == IRQ_FLUSH_ELW))) );
+  endproperty
+
+  a_pulp_cluster_only_states : assert property(p_pulp_cluster_only_states);
+
+  // WAIT_SLEEP and SLEEP states are never used for PULP_CLUSTER = 1
+  property p_pulp_cluster_excluded_states;
+     @(posedge clk) (1'b1) |-> ( !((PULP_CLUSTER == 1'b1) && ((ctrl_fsm_cs == SLEEP) || (ctrl_fsm_cs == WAIT_SLEEP))) );
+  endproperty
+
+  a_pulp_cluster_excluded_states : assert property(p_pulp_cluster_excluded_states);
+
+`endif
+
+endmodule // cv32e40p_controller