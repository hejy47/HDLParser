52d60ba8149e6a3c773a01a217edfd5ecad345c3
Fixed bug related to load_stall as it was not stalling if the wb stage was not ready
diff --git a/riscv_controller.sv b/riscv_controller.sv
index 5332761..24313d0 100644
--- a/riscv_controller.sv
+++ b/riscv_controller.sv
@@ -150,6 +150,8 @@ module riscv_controller
 
   input  logic        ex_valid_i,                 // EX stage is done
 
+  input  logic        wb_ready_i,                 // WB stage is ready
+
   // Performance Counters
   output logic        perf_jump_o,                // we are executing a jump instruction   (j, jr, jal, jalr)
   output logic        perf_jr_stall_o,            // stall due to jump-register-hazard
@@ -688,8 +690,12 @@ module riscv_controller
       deassert_we_o = 1'b1;
 
     // Stall because of load operation
-    if ((data_req_ex_i == 1'b1) && (regfile_we_ex_i == 1'b1) &&
-        ((reg_d_ex_is_reg_a_i == 1'b1) || (reg_d_ex_is_reg_b_i == 1'b1) || (reg_d_ex_is_reg_c_i == 1'b1)) )
+    if (
+          ( (data_req_ex_i == 1'b1) && (regfile_we_ex_i == 1'b1) ||
+           (wb_ready_i == 1'b0) && (regfile_we_wb_i == 1'b1)
+          ) &&
+          ( (reg_d_ex_is_reg_a_i == 1'b1) || (reg_d_ex_is_reg_b_i == 1'b1) || (reg_d_ex_is_reg_c_i == 1'b1) )
+       )
     begin
       deassert_we_o   = 1'b1;
       load_stall_o    = 1'b1;