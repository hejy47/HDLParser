ad013adfae8e49e3c445cd37dd4c0168da5d6c2d
:boom: merge master new file prefix names
diff --git a/rtl/cv32e40p_controller.sv b/rtl/cv32e40p_controller.sv
index 88f3e0a..4aedbcf 100644
--- a/rtl/cv32e40p_controller.sv
+++ b/rtl/cv32e40p_controller.sv
@@ -48,7 +48,7 @@ module cv32e40p_controller
   output logic        deassert_we_o,              // deassert write enable for next instruction
 
   input  logic        illegal_insn_i,             // decoder encountered an invalid instruction
-  input  logic        ecall_insn_i,               // ecall encountered an mret instruction
+  input  logic        ecall_insn_i,               // decoder encountered an ecall instruction
   input  logic        mret_insn_i,                // decoder encountered an mret instruction
   input  logic        uret_insn_i,                // decoder encountered an uret instruction
 
@@ -58,7 +58,7 @@ module cv32e40p_controller
   input  logic        uret_dec_i,
   input  logic        dret_dec_i,
 
-  input  logic        pipe_flush_i,               // decoder wants to do a pipe flush
+  input  logic        wfi_i,                       // decoder wants to execute a WFI
   input  logic        ebrk_insn_i,                // decoder encountered an ebreak instruction
   input  logic        fencei_insn_i,              // decoder encountered an fence.i instruction
   input  logic        csr_status_i,               // decoder encountered an csr status instruction
@@ -74,10 +74,30 @@ module cv32e40p_controller
 
   // to prefetcher
   output logic        pc_set_o,                   // jump to address set by pc_mux
-  output logic [2:0]  pc_mux_o,                   // Selector in the Fetch stage to select the rigth PC (normal, jump ...)
+  output logic [3:0]  pc_mux_o,                   // Selector in the Fetch stage to select the rigth PC (normal, jump ...)
   output logic [2:0]  exc_pc_mux_o,               // Selects target PC for exception
   output logic [1:0]  trap_addr_mux_o,            // Selects trap address base
 
+  // To the Aligner
+  output logic        branch_is_jump_o,           // We are jumping now because of a JUMP in ID
+  output logic        hold_state_o,               // Tell the aligner not to update its state
+
+  // HWLoop signls
+  input  logic [31:0]       pc_id_i,
+  input  logic              is_compressed_i,
+
+  // from hwloop_regs
+  input  logic [1:0] [31:0] hwlp_start_addr_i,
+  input  logic [1:0] [31:0] hwlp_end_addr_i,
+  input  logic [1:0] [31:0] hwlp_counter_i,
+
+  // to hwloop_regs
+  output logic [1:0]        hwlp_dec_cnt_o,
+
+  output logic              hwlp_jump_o,
+  output logic              hwlp_update_pc_o,
+  output logic [31:0]       hwlp_targ_addr_o,
+
   // LSU
   input  logic        data_req_ex_i,              // data memory access is currently performed in EX stage
   input  logic        data_we_ex_i,
@@ -180,6 +200,8 @@ module cv32e40p_controller
 
   input  logic        wb_ready_i,                 // WB stage is ready
 
+  output logic        flush_instr_o,              // Used in aligner to allow state updated when wfi is executed
+
   // Performance Counters
   output logic        perf_jump_o,                // we are executing a jump instruction   (j, jr, jal, jalr)
   output logic        perf_jr_stall_o,            // stall due to jump-register-hazard
@@ -190,18 +212,31 @@ module cv32e40p_controller
   // FSM state encoding
   ctrl_state_e ctrl_fsm_cs, ctrl_fsm_ns;
 
-  logic jump_done, jump_done_q, jump_in_dec, branch_in_id;
-  logic boot_done, boot_done_q;
+
+  logic jump_done, jump_done_q, jump_in_dec, branch_in_id, branch_in_id_dec;
+
   logic irq_enable_int;
   logic data_err_q;
 
   logic debug_mode_q, debug_mode_n;
   logic ebrk_force_debug_mode;
-
+  logic is_hwlp_illegal, is_hwloop_body;
   logic illegal_insn_q, illegal_insn_n;
 
   logic instr_valid_irq_flush_n, instr_valid_irq_flush_q;
 
+  logic hwlp_end0_eq_pc;
+  logic hwlp_end1_eq_pc;
+  logic hwlp_counter0_gt_1;
+  logic hwlp_counter1_gt_1;
+  logic hwlp_end0_eq_pc_plus4;
+  logic hwlp_end1_eq_pc_plus4;
+  logic hwlp_start0_leq_pc;
+  logic hwlp_start1_leq_pc;
+  logic hwlp_end0_geq_pc;
+  logic hwlp_end1_geq_pc;
+
+
 `ifndef SYNTHESIS
   // synopsys translate_off
   // make sure we are called later so that we do not generate messages for
@@ -211,7 +246,7 @@ module cv32e40p_controller
     // print warning in case of decoding errors
     if (is_decoding_o && illegal_insn_i) begin
       $display("%t: Illegal instruction (core %0d) at PC 0x%h:", $time, cv32e40p_core.hart_id_i[3:0],
-               cv32e40p_id_stage.pc_id_i);
+               cv32e40p_id_stage.pc_id_o);
     end
   end
   // synopsys translate_on
@@ -230,6 +265,9 @@ module cv32e40p_controller
   always_comb
   begin
     // Default values
+    flush_instr_o          = 1'b0;
+    hold_state_o           = 1'b0;
+
     instr_req_o            = 1'b1;
 
     exc_ack_o              = 1'b0;
@@ -267,9 +305,9 @@ module cv32e40p_controller
     irq_ack_o              = 1'b0;
     irq_id_o               = irq_id_ctrl_i[5:0];
 
-    boot_done              = 1'b0;
     jump_in_dec            = jump_in_dec_i == BRANCH_JALR || jump_in_dec_i == BRANCH_JAL;
     branch_in_id           = jump_in_id_i == BRANCH_COND;
+    branch_in_id_dec       = jump_in_dec_i == BRANCH_COND;
     irq_enable_int         =  ((u_IE_i | irq_sec_ctrl_i) & current_priv_lvl_i == PRIV_LVL_U) | (m_IE_i & current_priv_lvl_i == PRIV_LVL_M);
 
     ebrk_force_debug_mode  = (debug_ebreakm_i && current_priv_lvl_i == PRIV_LVL_M) ||
@@ -295,6 +333,36 @@ module cv32e40p_controller
     instr_valid_irq_flush_n = 1'b0;
 
     hwloop_mask_o           = 1'b0;
+    branch_is_jump_o        = jump_in_dec; // To the aligner, to save the JUMP if ID is stalled
+
+    hwlp_end0_eq_pc         = hwlp_end_addr_i[0] == pc_id_i;
+    hwlp_end1_eq_pc         = hwlp_end_addr_i[1] == pc_id_i;
+
+    hwlp_counter0_gt_1      = hwlp_counter_i[0] > 1;
+    hwlp_counter1_gt_1      = hwlp_counter_i[1] > 1;
+
+    hwlp_end0_eq_pc_plus4   = hwlp_end_addr_i[0] == pc_id_i + 4;
+    hwlp_end1_eq_pc_plus4   = hwlp_end_addr_i[1] == pc_id_i + 4;
+
+    hwlp_start0_leq_pc      = hwlp_start_addr_i[0] <= pc_id_i;
+    hwlp_start1_leq_pc      = hwlp_start_addr_i[1] <= pc_id_i;
+
+    hwlp_end0_geq_pc        = hwlp_end_addr_i[0] >= pc_id_i;
+    hwlp_end1_geq_pc        = hwlp_end_addr_i[1] >= pc_id_i;
+
+    is_hwlp_illegal         = 1'b0;
+    is_hwloop_body          = ((hwlp_start0_leq_pc && hwlp_end0_geq_pc) && hwlp_counter0_gt_1) ||  ((hwlp_start1_leq_pc && hwlp_end1_geq_pc) && hwlp_counter1_gt_1);
+
+    hwlp_dec_cnt_o          = '0;
+    hwlp_jump_o             = 1'b0;
+    hwlp_update_pc_o        = 1'b0;
+
+    // When the controller tells to hwlp-jump, the prefetcher does not always jump immediately,
+    // but the aligner immediately modifies pc_id to HWLP_BEGIN. This condition on hwlp_targ_addr_o
+    // ensures that the target is kept constant even if pc_id is no more HWLP_END
+    hwlp_targ_addr_o        = ((hwlp_start1_leq_pc && hwlp_end1_geq_pc) && !(hwlp_start0_leq_pc && hwlp_end0_geq_pc)) ? hwlp_start_addr_i[1] : hwlp_start_addr_i[0];
+    hwlp_update_pc_o        = ((hwlp_end_addr_i[0] == pc_id_i && hwlp_counter_i[0] > 1) || (hwlp_end_addr_i[1] == pc_id_i && hwlp_counter_i[1] > 1)) && instr_valid_i;
+
 
     unique case (ctrl_fsm_cs)
       // We were just reset, wait for fetch_enable
@@ -315,7 +383,6 @@ module cv32e40p_controller
         instr_req_o   = 1'b1;
         pc_mux_o      = PC_BOOT;
         pc_set_o      = 1'b1;
-        boot_done     = 1'b1;
         ctrl_fsm_ns   = FIRST_FETCH;
       end
 
@@ -377,6 +444,7 @@ module cv32e40p_controller
 
       end
 
+
       DECODE:
       begin
 
@@ -465,35 +533,44 @@ module cv32e40p_controller
               default:
               begin
 
-                exc_kill_o    = irq_req_ctrl_i ? 1'b1 : 1'b0;
+                exc_kill_o       = irq_req_ctrl_i ? 1'b1 : 1'b0;
+                is_hwlp_illegal  = is_hwloop_body & (jump_in_dec || branch_in_id_dec || mret_insn_i || uret_insn_i || dret_insn_i || is_compressed_i || fencei_insn_i || wfi_i);
 
-                if(illegal_insn_i) begin
+                if(illegal_insn_i || is_hwlp_illegal) begin
 
                   halt_if_o         = 1'b1;
                   halt_id_o         = 1'b0;
                   ctrl_fsm_ns       = id_ready_i ? FLUSH_EX : DECODE;;
                   illegal_insn_n    = 1'b1;
+                  // Without this signal, the aligner updates the PC in ID, and the wrong
+                  // address is saved in MEPC during the next cycle.
+                  hold_state_o  = 1'b1;
+                  flush_instr_o     = 1'b0;
+
                 end else begin
 
                   //decoding block
                   unique case (1'b1)
 
                     jump_in_dec: begin
-                    // handle unconditional jumps
-                    // we can jump directly since we know the address already
-                    // we don't need to worry about conditional branches here as they
-                    // will be evaluated in the EX stage
+                      // handle unconditional jumps
+                      // we can jump directly since we know the address already
+                      // we don't need to worry about conditional branches here as they
+                      // will be evaluated in the EX stage
                       pc_mux_o = PC_JUMP;
                       // if there is a jr stall, wait for it to be gone
                       if ((~jr_stall_o) && (~jump_done_q)) begin
-                        pc_set_o    = 1'b1;
-                        jump_done   = 1'b1;
+                        pc_set_o         = 1'b1;
+                        jump_done        = 1'b1;
                       end
-
                     end
+
                     ebrk_insn_i: begin
                       halt_if_o     = 1'b1;
                       halt_id_o     = 1'b0;
+                      // Without this signal, the aligner updates the PC in ID, and the wrong
+                      // address is saved in MEPC during the next cycle.
+                      hold_state_o  = 1'b1;
 
                       if (debug_mode_q)
                         // we got back to the park loop in the debug rom
@@ -509,36 +586,276 @@ module cv32e40p_controller
                       end
 
                     end
-                    pipe_flush_i: begin
+
+                    wfi_i: begin
                       halt_if_o     = 1'b1;
+                      flush_instr_o = 1'b1;
                       halt_id_o     = 1'b0;
                       ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE;;
                     end
+
                     ecall_insn_i: begin
                       halt_if_o     = 1'b1;
+                      flush_instr_o = 1'b0;
+                      // Without this signal, the aligner updates the PC in ID, and the wrong
+                      // address is saved in MEPC during the next cycle.
+                      hold_state_o  = 1'b1;
                       halt_id_o     = 1'b0;
                       ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE;;
                     end
+
                     fencei_insn_i: begin
                       halt_if_o     = 1'b1;
+                      flush_instr_o = 1'b0;
+                      // Without this signal, the aligner updates the PC in ID, and since
+                      // we would jump to PC+4, we need not to update PC in ID.
+                      hold_state_o  = 1'b1;
                       halt_id_o     = 1'b0;
                       ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE;;
                     end
+
                     mret_insn_i | uret_insn_i | dret_insn_i: begin
                       halt_if_o     = 1'b1;
+                      flush_instr_o  = 1'b0;
                       halt_id_o     = 1'b0;
                       ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE;;
                     end
+
                     csr_status_i: begin
                       halt_if_o     = 1'b1;
                       ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE;
+                      flush_instr_o = id_ready_i;
+                      $display("CSR_STATUS AT TIME %t",$time);
                     end
+
                     data_load_event_i: begin
                       ctrl_fsm_ns   = id_ready_i ? ELW_EXE : DECODE;
                       halt_if_o     = 1'b1;
+                      flush_instr_o = id_ready_i;
+                    end
+
+                    default: begin
+
+                      if(is_hwloop_body) begin
+                        //we are at the inside of an HWloop, thus change state
+
+                        //We stay here in case we returned from the second last instruction, otherwise the next cycle
+                        //in DECODE_HWLOOP we miss to jump, we jump at PC_END.
+                        //This way looses a cycle but it's a corner case of returning from exceptions or interrupts
+
+                        ctrl_fsm_ns  = hwlp_end0_eq_pc_plus4 || hwlp_end1_eq_pc_plus4 ? DECODE : DECODE_HWLOOP;
+
+                        // we can be at the end of HWloop due to a return from interrupt or ecall or ebreak or exceptions
+                        if(hwlp_end0_eq_pc && hwlp_counter0_gt_1) begin
+                            pc_mux_o         = PC_HWLOOP;
+                            if (~jump_done_q) begin
+                              pc_set_o          = 1'b1;
+                              jump_done         = 1'b1;
+                              hwlp_dec_cnt_o[0] = 1'b1;
+                            end
+                         end
+                         if(hwlp_end1_eq_pc && hwlp_counter1_gt_1) begin
+                            pc_mux_o         = PC_HWLOOP;
+                            if (~jump_done_q) begin
+                              pc_set_o          = 1'b1;
+                              jump_done         = 1'b1;
+                              hwlp_dec_cnt_o[1] = 1'b1;
+                            end
+                         end
+                        end
+                    end
+
+                  endcase // unique case (1'b1)
+                end
+
+                if (debug_single_step_i & ~debug_mode_q) begin
+                    // prevent any more instructions from executing
+                    halt_if_o = 1'b1;
+
+                    // we don't handle dret here because its should be illegal
+                    // anyway in this context
+
+                    // illegal, ecall, ebrk and xrettransition to later to a DBG
+                    // state since we need the return address which is
+                    // determined later
+
+                    // TODO: handle ebrk_force_debug_mode plus single stepping over ebreak
+                    if (id_ready_i) begin
+                    // make sure the current instruction has been executed
+                        unique case(1'b1)
+
+                        illegal_insn_i | ecall_insn_i:
+                        begin
+                            ctrl_fsm_ns = FLUSH_EX; // TODO: flush ex
+                            flush_instr_o     = 1'b1;
+                        end
+
+                        (~ebrk_force_debug_mode & ebrk_insn_i):
+                        begin
+                            ctrl_fsm_ns = FLUSH_EX;
+                            flush_instr_o     = 1'b1;
+                        end
+
+                        mret_insn_i | uret_insn_i:
+                        begin
+                            ctrl_fsm_ns = FLUSH_EX;
+                            flush_instr_o     = 1'b1;
+                        end
+
+                        branch_in_id:
+                        begin
+                            ctrl_fsm_ns    = DBG_WAIT_BRANCH;
+                        end
+
+                        default:
+                            // regular instruction
+                            ctrl_fsm_ns = DBG_FLUSH;
+                        endcase // unique case (1'b1)
+                    end
+                end
+
+              end //decoding block
+            endcase
+          end  //valid block
+          else begin
+            is_decoding_o         = 1'b0;
+            perf_pipeline_stall_o = data_load_event_i;
+          end
+      end
+
+
+      DECODE_HWLOOP:
+      begin
+
+          if (instr_valid_i || instr_valid_irq_flush_q) //valid block or replay after interrupt speculation
+          begin // now analyze the current instruction in the ID stage
+
+            is_decoding_o = 1'b1;
+
+            unique case(1'b1)
+
+              //irq_req_ctrl_i comes from a FF in the interrupt controller
+              //irq_enable_int: check again irq_enable_int because xIE could have changed
+              //don't serve in debug mode
+              irq_req_ctrl_i & irq_enable_int & (~debug_req_i) & (~debug_mode_q):
+              begin
+                //Serving the external interrupt
+                halt_if_o     = 1'b1;
+                halt_id_o     = 1'b1;
+                ctrl_fsm_ns   = IRQ_FLUSH;
+                hwloop_mask_o = 1'b1;
+              end
+
+
+              debug_req_i & (~debug_mode_q):
+              begin
+                //Serving the debug
+                halt_if_o     = 1'b1;
+                halt_id_o     = 1'b1;
+                ctrl_fsm_ns   = DBG_FLUSH;
+              end
+
+
+              default:
+              begin
+
+                is_hwlp_illegal  = (jump_in_dec || branch_in_id_dec || mret_insn_i || uret_insn_i || dret_insn_i || is_compressed_i || fencei_insn_i || wfi_i);
+
+                if(illegal_insn_i || is_hwlp_illegal) begin
+
+                  halt_if_o         = 1'b1;
+                  halt_id_o         = 1'b1;
+                  csr_save_id_o     = 1'b1;
+                  csr_save_cause_o  = 1'b1;
+                  csr_cause_o       = EXC_CAUSE_ILLEGAL_INSN;
+                  ctrl_fsm_ns       = FLUSH_EX;
+                  illegal_insn_n    = 1'b1;
+                  flush_instr_o     = 1'b0;
+
+                end else begin
+
+                  //decoding block
+                  unique case (1'b1)
+
+                    ebrk_insn_i: begin
+                      halt_if_o     = 1'b1;
+                      halt_id_o     = 1'b1;
+
+                      if (debug_mode_q)
+                        // we got back to the park loop in the debug rom
+                        ctrl_fsm_ns = DBG_FLUSH;
+
+                      else if (ebrk_force_debug_mode)
+                        // debug module commands us to enter debug mode anyway
+                        ctrl_fsm_ns  = DBG_FLUSH;
+
+                      else begin
+                        // otherwise just a normal ebreak exception
+                        csr_save_id_o     = 1'b1;
+                        csr_save_cause_o  = 1'b1;
+
+                        ctrl_fsm_ns = FLUSH_EX;
+                        flush_instr_o     = 1'b1;
+                        csr_cause_o = EXC_CAUSE_BREAKPOINT;
+                      end
+
+                    end
+
+                    ecall_insn_i: begin
+                      halt_if_o     = 1'b1;
+                      halt_id_o     = 1'b1;
+                      csr_save_id_o     = 1'b1;
+                      csr_save_cause_o  = 1'b1;
+                      csr_cause_o   = current_priv_lvl_i == PRIV_LVL_U ? EXC_CAUSE_ECALL_UMODE : EXC_CAUSE_ECALL_MMODE;
+                      ctrl_fsm_ns   = FLUSH_EX;
+                      flush_instr_o     = 1'b0;
                     end
-                    default:;
 
+                    csr_status_i: begin
+                      halt_if_o     = 1'b1;
+                      ctrl_fsm_ns   = id_ready_i ? FLUSH_EX : DECODE_HWLOOP;
+                      flush_instr_o = id_ready_i;
+                      $display("CSR_STATUS AT TIME %t",$time);
+                    end
+
+                    data_load_event_i: begin
+                      ctrl_fsm_ns   = id_ready_i ? ELW_EXE : DECODE_HWLOOP;
+                      halt_if_o     = 1'b1;
+                      flush_instr_o = id_ready_i;
+                    end
+
+                    default: begin
+
+                       // we can be at the end of HWloop due to a return from interrupt or ecall or ebreak or exceptions
+                      if(hwlp_end1_eq_pc_plus4) begin
+                          if(hwlp_counter1_gt_1) begin
+                            hwlp_jump_o      = 1'b1;
+                            hwlp_targ_addr_o = hwlp_start_addr_i[1];
+                            ctrl_fsm_ns      = DECODE_HWLOOP;
+                          end else
+                            ctrl_fsm_ns      = is_hwloop_body ? DECODE_HWLOOP : DECODE;
+                      end
+
+                      if(hwlp_end0_eq_pc_plus4) begin
+                          if(hwlp_counter0_gt_1) begin
+                            hwlp_jump_o      = 1'b1;
+                            hwlp_targ_addr_o = hwlp_start_addr_i[0];
+                            ctrl_fsm_ns      = DECODE_HWLOOP;
+                          end else
+                            ctrl_fsm_ns      = is_hwloop_body ? DECODE_HWLOOP : DECODE;
+                      end
+
+                      hwlp_dec_cnt_o[0] = hwlp_end0_eq_pc;
+                      hwlp_dec_cnt_o[1] = hwlp_end1_eq_pc;
+
+                      // Todo: check this. The message does not seem coherent with the condition and why is this condition an error?
+                      if ( (hwlp_end_addr_i[1] == pc_id_i + 4 && hwlp_counter_i[1] > 1) &&  (hwlp_end_addr_i[0] == pc_id_i + 4 && hwlp_counter_i[0] > 1))
+                      begin
+                          $display("Jumping to same location in HWLoop at time %t",$time);
+                          $stop;
+                      end
+
+                    end
                   endcase // unique case (1'b1)
                 end
 
@@ -557,14 +874,30 @@ module cv32e40p_controller
                     if (id_ready_i) begin
                     // make sure the current instruction has been executed
                         unique case(1'b1)
+
                         illegal_insn_i | ecall_insn_i:
+                        begin
                             ctrl_fsm_ns = FLUSH_EX; // TODO: flush ex
+                            flush_instr_o     = 1'b1;
+                        end
+
                         (~ebrk_force_debug_mode & ebrk_insn_i):
+                        begin
                             ctrl_fsm_ns = FLUSH_EX;
+                            flush_instr_o     = 1'b1;
+                        end
+
                         mret_insn_i | uret_insn_i:
+                        begin
                             ctrl_fsm_ns = FLUSH_EX;
+                            flush_instr_o     = 1'b1;
+                        end
+
                         branch_in_id:
-                            ctrl_fsm_ns = DBG_WAIT_BRANCH;
+                        begin
+                            ctrl_fsm_ns    = DBG_WAIT_BRANCH;
+                        end
+
                         default:
                             // regular instruction
                             ctrl_fsm_ns = DBG_FLUSH;
@@ -830,9 +1163,25 @@ module cv32e40p_controller
               end
 
               csr_status_i: begin
+                $display("CSR_STATUS AT TIME %t",$time);
+
+                if(hwlp_end0_eq_pc && hwlp_counter0_gt_1) begin
+                    pc_mux_o         = PC_HWLOOP;
+                    pc_set_o          = 1'b1;
+                    hwlp_dec_cnt_o[0] = 1'b1;
+                end
+                if(hwlp_end1_eq_pc && hwlp_counter1_gt_1) begin
+                    pc_mux_o         = PC_HWLOOP;
+                    pc_set_o          = 1'b1;
+                    hwlp_dec_cnt_o[1] = 1'b1;
+                end
+
+                 if (debug_single_step_i && ~debug_mode_q)
+                    ctrl_fsm_ns = DBG_TAKEN_IF;
 
               end
-              pipe_flush_i: begin
+
+              wfi_i: begin
                   ctrl_fsm_ns = WAIT_SLEEP;
               end
               fencei_insn_i: begin
@@ -1091,7 +1440,6 @@ module cv32e40p_controller
     begin
       ctrl_fsm_cs    <= RESET;
       jump_done_q    <= 1'b0;
-      boot_done_q    <= 1'b0;
       data_err_q     <= 1'b0;
 
       debug_mode_q   <= 1'b0;
@@ -1103,7 +1451,7 @@ module cv32e40p_controller
     else
     begin
       ctrl_fsm_cs    <= ctrl_fsm_ns;
-      boot_done_q    <= boot_done | (~boot_done & boot_done_q);
+
       // clear when id is valid (no instruction incoming)
       jump_done_q    <= jump_done & (~id_ready_i);
 