e2c86c9fe2e6966ce237785c6de427d5a4abe18e
Merge pull request #390 from Silabs-ArjanB/ArjanB_elw_auto_inc
diff --git a/rtl/cv32e40p_cs_registers.sv b/rtl/cv32e40p_cs_registers.sv
index 5b4e305..a64bd52 100644
--- a/rtl/cv32e40p_cs_registers.sv
+++ b/rtl/cv32e40p_cs_registers.sv
@@ -256,6 +256,7 @@ module cv32e40p_cs_registers
   // Trigger
   logic [31:0] tmatch_control_rdata;
   logic [31:0] tmatch_value_rdata;
+  logic [15:0] tinfo_types;
   // Debug
   Dcsr_t       dcsr_q, dcsr_n;
   logic [31:0] depc_q, depc_n;
@@ -419,6 +420,8 @@ if(PULP_SECURE==1) begin
                csr_rdata_int = tmatch_control_rdata;
       CSR_TDATA2:
                csr_rdata_int = tmatch_value_rdata;
+      CSR_TINFO:
+               csr_rdata_int = tinfo_types;
 
       CSR_DCSR:
                csr_rdata_int = dcsr_q;//
@@ -583,6 +586,8 @@ end else begin //PULP_SECURE == 0
                csr_rdata_int = tmatch_control_rdata;
       CSR_TDATA2:
                csr_rdata_int = tmatch_value_rdata;
+      CSR_TINFO:
+               csr_rdata_int = tinfo_types;
 
       CSR_DCSR:
                csr_rdata_int = dcsr_q;//
@@ -1001,7 +1006,8 @@ end else begin //PULP_SECURE == 0
       end
       // mtvec: machine trap-handler base address
       CSR_MTVEC: if (csr_we_int) begin
-        mtvec_n    = csr_wdata_int[31:8];
+        mtvec_n      = csr_wdata_int[31:8];
+        mtvec_mode_n = {1'b0, csr_wdata_int[0]}; // Only direct and vectored mode are supported
       end
       // mscratch: machine scratch
       CSR_MSCRATCH: if (csr_we_int) begin
@@ -1382,11 +1388,14 @@ end //PULP_SECURE
      end
     end
 
+    // All supported trigger types
+    assign tinfo_types = 1 << TTYPE_MCONTROL;
+
     // Assign read data
     // TDATA0 - only support simple address matching
     assign tmatch_control_rdata =
                {
-                4'h2,                  // type    : address/data match
+                TTYPE_MCONTROL,        // type    : address/data match
                 1'b1,                  // dmode   : access from D mode only
                 6'h00,                 // maskmax : exact match only
                 1'b0,                  // hit     : not supported
@@ -1413,6 +1422,7 @@ end //PULP_SECURE
                               (pc_id_i[31:0] == tmatch_value_q[31:0]);
 
   end else begin : gen_no_trigger_regs
+    assign tinfo_types          = 'b0;
     assign tmatch_control_rdata = 'b0;
     assign tmatch_value_rdata   = 'b0;
     assign trigger_match_o      = 'b0;