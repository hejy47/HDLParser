d5c526d95e2d085ffcdf43eb37410d06ba8c8ad1
Merge pull request #511 from Silabs-ArjanB/ArjanB_irq_0
diff --git a/rtl/cv32e40p_int_controller.sv b/rtl/cv32e40p_int_controller.sv
index c7bdaaa..d5dcc87 100644
--- a/rtl/cv32e40p_int_controller.sv
+++ b/rtl/cv32e40p_int_controller.sv
@@ -29,85 +29,110 @@ module cv32e40p_int_controller import cv32e40p_pkg::*;
   input  logic        clk,
   input  logic        rst_n,
 
-  // irq_req for controller
+  // External interrupt lines
+  input  logic [31:0] irq_i,                    // Level-triggered interrupt inputs
+  input  logic        irq_sec_i,                // Interrupt secure bit from EU
+
+  // To cv32e40p_controller
   output logic        irq_req_ctrl_o,
   output logic        irq_sec_ctrl_o,
   output logic  [4:0] irq_id_ctrl_o,
+  output logic        irq_wu_ctrl_o,
 
-  // handshake signals to controller
-  input  logic        ctrl_ack_i,
-  input  logic        ctrl_kill_i,
-
-  // external interrupt lines
-  input  logic        irq_pending_i,  // level-triggered interrupt inputs
-  input  logic        irq_sec_i,      // interrupt secure bit from EU
-  input  logic  [4:0] irq_id_i,       // interrupt id [0,1,....31]
-
-  input  logic        m_IE_i,         // interrupt enable bit from CSR (M mode)
-  input  logic        u_IE_i,         // interrupt enable bit from CSR (U mode)
+  // To/from cv32e40p_cs_registers
+  input  logic [31:0] mie_bypass_i,             // MIE CSR (bypass)
+  output logic [31:0] mip_o,                    // MIP CSR
+  input  logic        m_ie_i,                   // Interrupt enable bit from CSR (M mode)
+  input  logic        u_ie_i,                   // Interrupt enable bit from CSR (U mode)
   input  PrivLvl_t    current_priv_lvl_i
-
 );
 
-  enum logic [1:0] { IDLE, IRQ_PENDING, IRQ_DONE} exc_ctrl_cs;
-
-  logic irq_enable_ext;
-  logic [4:0] irq_id_q;
-  logic irq_sec_q;
+  logic        global_irq_enable;
+  logic [31:0] irq_local_qual;
+  logic [31:0] irq_q;
+  logic        irq_sec_q;
 
-if(PULP_SECURE)
-  assign irq_enable_ext =  ((u_IE_i | irq_sec_i) & current_priv_lvl_i == PRIV_LVL_U) | (m_IE_i & current_priv_lvl_i == PRIV_LVL_M);
-else
-  assign irq_enable_ext =  m_IE_i;
-
-  assign irq_req_ctrl_o = exc_ctrl_cs == IRQ_PENDING;
-  assign irq_sec_ctrl_o = irq_sec_q;
-  assign irq_id_ctrl_o  = irq_id_q;
+  // Register all interrupt inputs (on gated clock). The wake-up logic will
+  // observe irq_i as well, but in all other places irq_q will be used to 
+  // avoid timing paths from irq_i to instr_*_o
 
   always_ff @(posedge clk, negedge rst_n)
   begin
     if (rst_n == 1'b0) begin
+      irq_q     <= '0;
+      irq_sec_q <= 1'b0;
+    end else begin
+      irq_q     <= irq_i & IRQ_MASK;
+      irq_sec_q <= irq_sec_i;
+    end
+  end
 
-      irq_id_q    <= '0;
-      irq_sec_q   <= 1'b0;
-      exc_ctrl_cs <= IDLE;
+  // MIP CSR
+  assign mip_o = irq_q;
 
-    end else begin
+  // Qualify registered IRQ with MIE CSR to compute locally enabled IRQs
+  assign irq_local_qual = irq_q & mie_bypass_i;
 
-      unique case (exc_ctrl_cs)
-
-        IDLE:
-        begin
-          if(irq_enable_ext & irq_pending_i) begin
-            exc_ctrl_cs <= IRQ_PENDING;
-            irq_id_q    <= irq_id_i;
-            irq_sec_q   <= irq_sec_i;
-          end
-        end
-
-        IRQ_PENDING:
-        begin
-          unique case(1'b1)
-            ctrl_ack_i:
-              exc_ctrl_cs <= IRQ_DONE;
-            ctrl_kill_i:
-              exc_ctrl_cs <= IDLE;
-            default:
-              exc_ctrl_cs <= IRQ_PENDING;
-          endcase
-        end
-
-        IRQ_DONE:
-        begin
-          irq_sec_q   <= 1'b0;
-          exc_ctrl_cs <= IDLE;
-        end
-
-        default: ;
-
-      endcase
+  // Wake-up signal based on unregistered IRQ such that wake-up can be caused if no clock is present
+  assign irq_wu_ctrl_o = |(irq_i & mie_bypass_i);
 
-    end
+  // Global interrupt enable
+if (PULP_SECURE)
+  assign global_irq_enable = ((u_ie_i || irq_sec_i) && current_priv_lvl_i == PRIV_LVL_U) || (m_ie_i && current_priv_lvl_i == PRIV_LVL_M);
+else
+  assign global_irq_enable = m_ie_i;
+
+  // Request to take interrupt if there is a locally enabled interrupt while interrupts are also enabled globally
+  assign irq_req_ctrl_o = (|irq_local_qual) && global_irq_enable;
+
+  // Interrupt Encoder
+  //
+  // - sets correct id to request to ID
+  // - encodes priority order
+
+  always_comb
+  begin
+    if      (irq_local_qual[31]) irq_id_ctrl_o = 5'd31;                         // Custom irq_i[31]
+    else if (irq_local_qual[30]) irq_id_ctrl_o = 5'd30;                         // Custom irq_i[30]
+    else if (irq_local_qual[29]) irq_id_ctrl_o = 5'd29;                         // Custom irq_i[29]
+    else if (irq_local_qual[28]) irq_id_ctrl_o = 5'd28;                         // Custom irq_i[28]
+    else if (irq_local_qual[27]) irq_id_ctrl_o = 5'd27;                         // Custom irq_i[27]
+    else if (irq_local_qual[26]) irq_id_ctrl_o = 5'd26;                         // Custom irq_i[26]
+    else if (irq_local_qual[25]) irq_id_ctrl_o = 5'd25;                         // Custom irq_i[25]
+    else if (irq_local_qual[24]) irq_id_ctrl_o = 5'd24;                         // Custom irq_i[24]
+    else if (irq_local_qual[23]) irq_id_ctrl_o = 5'd23;                         // Custom irq_i[23]
+    else if (irq_local_qual[22]) irq_id_ctrl_o = 5'd22;                         // Custom irq_i[22]
+    else if (irq_local_qual[21]) irq_id_ctrl_o = 5'd21;                         // Custom irq_i[21]
+    else if (irq_local_qual[20]) irq_id_ctrl_o = 5'd20;                         // Custom irq_i[20]
+    else if (irq_local_qual[19]) irq_id_ctrl_o = 5'd19;                         // Custom irq_i[19]
+    else if (irq_local_qual[18]) irq_id_ctrl_o = 5'd18;                         // Custom irq_i[18]
+    else if (irq_local_qual[17]) irq_id_ctrl_o = 5'd17;                         // Custom irq_i[17]
+    else if (irq_local_qual[16]) irq_id_ctrl_o = 5'd16;                         // Custom irq_i[16]
+
+    else if (irq_local_qual[15]) irq_id_ctrl_o = 5'd15;                         // Reserved  (default masked out with IRQ_MASK)
+    else if (irq_local_qual[14]) irq_id_ctrl_o = 5'd14;                         // Reserved  (default masked out with IRQ_MASK)
+    else if (irq_local_qual[13]) irq_id_ctrl_o = 5'd13;                         // Reserved  (default masked out with IRQ_MASK)
+    else if (irq_local_qual[12]) irq_id_ctrl_o = 5'd12;                         // Reserved  (default masked out with IRQ_MASK)
+
+    else if (irq_local_qual[CSR_MEIX_BIT]) irq_id_ctrl_o = CSR_MEIX_BIT;        // MEI, irq_i[11]
+    else if (irq_local_qual[CSR_MSIX_BIT]) irq_id_ctrl_o = CSR_MSIX_BIT;        // MSI, irq_i[3]
+    else if (irq_local_qual[CSR_MTIX_BIT]) irq_id_ctrl_o = CSR_MTIX_BIT;        // MTI, irq_i[7]
+
+    else if (irq_local_qual[10]) irq_id_ctrl_o = 5'd10;                         // Reserved (for now assuming EI, SI, TI priority) (default masked out with IRQ_MASK)
+    else if (irq_local_qual[ 2]) irq_id_ctrl_o = 5'd2;                          // Reserved (for now assuming EI, SI, TI priority) (default masked out with IRQ_MASK)
+    else if (irq_local_qual[ 6]) irq_id_ctrl_o = 5'd6;                          // Reserved (for now assuming EI, SI, TI priority) (default masked out with IRQ_MASK)
+
+    else if (irq_local_qual[ 9]) irq_id_ctrl_o = 5'd9;                          // Reserved: SEI (default masked out with IRQ_MASK)
+    else if (irq_local_qual[ 1]) irq_id_ctrl_o = 5'd1;                          // Reserved: SSI (default masked out with IRQ_MASK)
+    else if (irq_local_qual[ 5]) irq_id_ctrl_o = 5'd5;                          // Reserved: STI (default masked out with IRQ_MASK)
+
+    else if (irq_local_qual[ 8]) irq_id_ctrl_o = 5'd8;                          // Reserved: UEI (default masked out with IRQ_MASK)
+    else if (irq_local_qual[ 0]) irq_id_ctrl_o = 5'd0;                          // Reserved: USI (default masked out with IRQ_MASK)
+    else if (irq_local_qual[ 4]) irq_id_ctrl_o = 5'd4;                          // Reserved: UTI (default masked out with IRQ_MASK)
+
+    else irq_id_ctrl_o = CSR_MTIX_BIT;                                          // Value not relevant
   end
 
-endmodule
+  assign irq_sec_ctrl_o = irq_sec_q;
+
+endmodule // cv32e40p_int_controller