d5c526d95e2d085ffcdf43eb37410d06ba8c8ad1
Merge pull request #511 from Silabs-ArjanB/ArjanB_irq_0
diff --git a/rtl/cv32e40p_cs_registers.sv b/rtl/cv32e40p_cs_registers.sv
index 0ddddcf..752d740 100644
--- a/rtl/cv32e40p_cs_registers.sv
+++ b/rtl/cv32e40p_cs_registers.sv
@@ -70,13 +70,10 @@ module cv32e40p_cs_registers import cv32e40p_pkg::*;
   input  logic               fflags_we_i,
 
   // Interrupts
-  input  logic [31:0]     irq_i,
-
+  output logic [31:0]     mie_bypass_o,
+  input  logic [31:0]     mip_i,
   output logic            m_irq_enable_o,
   output logic            u_irq_enable_o,
-  // IRQ req to ID/controller
-  output logic            irq_pending_o,    //used to wake up the WFI and to signal interrupts to controller
-  output logic [4:0]      irq_id_o,
 
   //csr_irq_sec_i is always 0 if PULP_SECURE is zero
   input  logic            csr_irq_sec_i,
@@ -259,8 +256,9 @@ module cv32e40p_cs_registers import cv32e40p_pkg::*;
 
   logic [31:0] mip;                     // Bits are masked according to IRQ_MASK
   logic [31:0] mie_q, mie_n;            // Bits are masked according to IRQ_MASK
-  //machine enabled interrupt pending
-  logic [31:0] menip;                   // Bits are masked according to IRQ_MASK
+
+  logic [31:0] csr_mie_wdata;
+  logic        csr_mie_we;
 
   logic is_irq;
   PrivLvl_t priv_lvl_n, priv_lvl_q;
@@ -271,20 +269,42 @@ module cv32e40p_cs_registers import cv32e40p_pkg::*;
 
   // Performance Counter Signals
   logic                      id_valid_q;
-  logic [31:0] [63:0]        mhpmcounter_q  , mhpmcounter_n;   // performance counters
+  logic [31:0] [63:0]        mhpmcounter_q;                    // performance counters
   logic [31:0] [31:0]        mhpmevent_q    , mhpmevent_n;     // event enable
   logic [31:0]               mcounteren_q   , mcounteren_n;    // user mode counter enable
   logic [31:0]               mcountinhibit_q, mcountinhibit_n; // performance counter enable
   logic [NUM_HPM_EVENTS-1:0] hpm_events;                       // events for performance counters
+  logic [31:0] [63:0]        mhpmcounter_increment;            // increment of mhpmcounter_q
+  logic [31:0]               mhpmcounter_write_lower;          // write 32 lower bits of mhpmcounter_q
+  logic [31:0]               mhpmcounter_write_upper;          // write 32 upper bits mhpmcounter_q
+  logic [31:0]               mhpmcounter_write_increment;      // write increment of mhpmcounter_q
 
   assign is_irq = csr_cause_i[5];
 
-  // mip CSR is purely combintational
-  // must be able to re-enable the clock upon WFI
-  assign mip = irq_i & IRQ_MASK;
+  // mip CSR
+  assign mip = mip_i;
+
+  // mie_n is used instead of mie_q such that a CSR write to the MIE register can 
+  // affect the instruction immediately following it.
+
+  // MIE CSR operation logic
+  always_comb
+  begin
+    csr_mie_wdata = csr_wdata_i;
+    csr_mie_we    = 1'b1;
+
+    case (csr_op_i)
+      CSR_OP_WRITE: csr_mie_wdata = csr_wdata_i;
+      CSR_OP_SET:   csr_mie_wdata = csr_wdata_i | mie_q;
+      CSR_OP_CLEAR: csr_mie_wdata = (~csr_wdata_i) & mie_q;
+      CSR_OP_READ: begin
+        csr_mie_wdata = csr_wdata_i;
+        csr_mie_we    = 1'b0;
+      end
+    endcase
+  end
 
-  // menip signal the controller
-  assign menip = irq_i & mie_q;
+  assign mie_bypass_o = ((csr_addr_i == CSR_MIE) && csr_mie_we) ? csr_mie_wdata & IRQ_MASK : mie_q;
 
   ////////////////////////////////////////////
   //   ____ ____  ____    ____              //
@@ -1115,53 +1135,6 @@ end //PULP_SECURE
 
   assign csr_rdata_o = csr_rdata_int;
 
-  // Interrupt Encoder:
-  // - sets correct id to request to ID
-  // - encodes priority order
-  always_comb
-  begin
-    if      (menip[31]) irq_id_o = 5'd31;                       // Custom irq_i[31]
-    else if (menip[30]) irq_id_o = 5'd30;                       // Custom irq_i[30]
-    else if (menip[29]) irq_id_o = 5'd29;                       // Custom irq_i[29]
-    else if (menip[28]) irq_id_o = 5'd28;                       // Custom irq_i[28]
-    else if (menip[27]) irq_id_o = 5'd27;                       // Custom irq_i[27]
-    else if (menip[26]) irq_id_o = 5'd26;                       // Custom irq_i[26]
-    else if (menip[25]) irq_id_o = 5'd25;                       // Custom irq_i[25]
-    else if (menip[24]) irq_id_o = 5'd24;                       // Custom irq_i[24]
-    else if (menip[23]) irq_id_o = 5'd23;                       // Custom irq_i[23]
-    else if (menip[22]) irq_id_o = 5'd22;                       // Custom irq_i[22]
-    else if (menip[21]) irq_id_o = 5'd21;                       // Custom irq_i[21]
-    else if (menip[20]) irq_id_o = 5'd20;                       // Custom irq_i[20]
-    else if (menip[19]) irq_id_o = 5'd19;                       // Custom irq_i[19]
-    else if (menip[18]) irq_id_o = 5'd18;                       // Custom irq_i[18]
-    else if (menip[17]) irq_id_o = 5'd17;                       // Custom irq_i[17]
-    else if (menip[16]) irq_id_o = 5'd16;                       // Custom irq_i[16]
-
-    else if (menip[15]) irq_id_o = 5'd15;                       // Reserved  (default masked out with IRQ_MASK)
-    else if (menip[14]) irq_id_o = 5'd14;                       // Reserved  (default masked out with IRQ_MASK)
-    else if (menip[13]) irq_id_o = 5'd13;                       // Reserved  (default masked out with IRQ_MASK)
-    else if (menip[12]) irq_id_o = 5'd12;                       // Reserved  (default masked out with IRQ_MASK)
-
-    else if (menip[CSR_MEIX_BIT]) irq_id_o = CSR_MEIX_BIT;      // MEI, irq_i[11]
-    else if (menip[CSR_MSIX_BIT]) irq_id_o = CSR_MSIX_BIT;      // MSI, irq_i[3]
-    else if (menip[CSR_MTIX_BIT]) irq_id_o = CSR_MTIX_BIT;      // MTI, irq_i[7]
-
-    else if (menip[10]) irq_id_o = 5'd10;                       // Reserved (for now assuming EI, SI, TI priority) (default masked out with IRQ_MASK)
-    else if (menip[ 2]) irq_id_o = 5'd2;                        // Reserved (for now assuming EI, SI, TI priority) (default masked out with IRQ_MASK)
-    else if (menip[ 6]) irq_id_o = 5'd6;                        // Reserved (for now assuming EI, SI, TI priority) (default masked out with IRQ_MASK)
-
-    else if (menip[ 9]) irq_id_o = 5'd9;                        // Reserved: SEI (default masked out with IRQ_MASK)
-    else if (menip[ 1]) irq_id_o = 5'd1;                        // Reserved: SSI (default masked out with IRQ_MASK)
-    else if (menip[ 5]) irq_id_o = 5'd5;                        // Reserved: STI (default masked out with IRQ_MASK)
-
-    else if (menip[ 8]) irq_id_o = 5'd8;                        // Reserved: UEI (default masked out with IRQ_MASK)
-    else if (menip[ 0]) irq_id_o = 5'd0;                        // Reserved: USI (default masked out with IRQ_MASK)
-    else if (menip[ 4]) irq_id_o = 5'd4;                        // Reserved: UTI (default masked out with IRQ_MASK)
-
-    else irq_id_o = CSR_MTIX_BIT;                               // Value not relevant
-  end
-
-
   // directly output some registers
   assign m_irq_enable_o  = mstatus_q.mie && !(dcsr_q.step && !dcsr_q.stepie);
   assign u_irq_enable_o  = mstatus_q.uie && !(dcsr_q.step && !dcsr_q.stepie);
@@ -1189,9 +1162,6 @@ end //PULP_SECURE
   assign debug_ebreakm_o      = dcsr_q.ebreakm;
   assign debug_ebreaku_o      = dcsr_q.ebreaku;
 
-  // Output interrupt pending to ID/Controller and to clock gating (WFI)
-  assign irq_pending_o = |menip;
-
   generate
   if (PULP_SECURE == 1)
   begin
@@ -1435,9 +1405,9 @@ end //PULP_SECURE
 
   // ------------------------
   // address decoder for performance counter registers
-  logic mcounteren_we ;
-  logic mcountinhibit_we ;
-  logic mhpmevent_we     ;
+  logic mcounteren_we;
+  logic mcountinhibit_we;
+  logic mhpmevent_we;
 
   assign mcounteren_we    = csr_we_int & (  csr_addr_i == CSR_MCOUNTEREN);
   assign mcountinhibit_we = csr_we_int & (  csr_addr_i == CSR_MCOUNTINHIBIT);
@@ -1471,14 +1441,26 @@ end //PULP_SECURE
                                            (csr_addr_i == CSR_MHPMEVENT30 ) ||
                                            (csr_addr_i == CSR_MHPMEVENT31 ) );
 
+  // ------------------------
+  // Increment value for performance counters
+  always_comb
+    begin
+      // Increment counters
+      for(int cnt_idx=0; cnt_idx<32; cnt_idx++)
+        mhpmcounter_increment[cnt_idx] = mhpmcounter_q[cnt_idx] + 1;
+    end
+
   // ------------------------
   // next value for performance counters and control registers
   always_comb
     begin
-      mcounteren_n    = mcounteren_q   ;
-      mcountinhibit_n = mcountinhibit_q;
-      mhpmevent_n     = mhpmevent_q    ;
-      mhpmcounter_n   = mhpmcounter_q  ;
+      mcounteren_n                = mcounteren_q;
+      mcountinhibit_n             = mcountinhibit_q;
+      mhpmevent_n                 = mhpmevent_q;
+
+      mhpmcounter_write_lower     = 32'b0;
+      mhpmcounter_write_upper     = 32'b0;
+      mhpmcounter_write_increment = 32'b0;
 
       // User Mode Enable
       if(PULP_SECURE && mcounteren_we)
@@ -1495,30 +1477,29 @@ end //PULP_SECURE
       // Counters
       for(int cnt_idx=0; cnt_idx<32; cnt_idx++)
 
-        if( csr_we_int & ( csr_addr_i == (CSR_MCYCLE + cnt_idx) ) )
+        if( csr_we_int && ( csr_addr_i == (CSR_MCYCLE + cnt_idx) ) )
           // write lower counter bits
-          mhpmcounter_n[cnt_idx][31:0]  = csr_wdata_int;
+          mhpmcounter_write_lower[cnt_idx] = 1'b1;
 
-        else if( csr_we_int & ( csr_addr_i == (CSR_MCYCLEH + cnt_idx) ) )
+        else if( csr_we_int && ( csr_addr_i == (CSR_MCYCLEH + cnt_idx) ) )
           // write upper counter bits
-          mhpmcounter_n[cnt_idx][63:32]  = csr_wdata_int;
+          mhpmcounter_write_upper[cnt_idx] = 1'b1;
 
         else
           if(!mcountinhibit_q[cnt_idx])
             // If not inhibitted, increment on appropriate condition
 
-            if( cnt_idx == 0)
+            if(cnt_idx == 0)
               // mcycle = mhpmcounter[0] : count every cycle (if not inhibited)
-              mhpmcounter_n[cnt_idx] = mhpmcounter_q[cnt_idx] + 1;
+              mhpmcounter_write_increment[cnt_idx] = 1'b1;
 
             else if(cnt_idx == 2)
               // minstret = mhpmcounter[2]  : count every retired instruction (if not inhibited)
-              mhpmcounter_n[cnt_idx] = mhpmcounter_q[cnt_idx] + hpm_events[1];
+              mhpmcounter_write_increment[cnt_idx] = hpm_events[1];
 
             else if( (cnt_idx>2) && (cnt_idx<(NUM_MHPMCOUNTERS+3)))
               // add +1 if any event is enabled and active
-              mhpmcounter_n[cnt_idx] = mhpmcounter_q[cnt_idx] +
-                                       |(hpm_events & mhpmevent_q[cnt_idx][NUM_HPM_EVENTS-1:0]) ;
+              mhpmcounter_write_increment[cnt_idx] = |(hpm_events & mhpmevent_q[cnt_idx][NUM_HPM_EVENTS-1:0]);
     end
 
   // ------------------------
@@ -1538,10 +1519,17 @@ end //PULP_SECURE
       end
       else begin : g_implemented
         always_ff @(posedge clk, negedge rst_n)
-            if (!rst_n)
+            if (!rst_n) begin
                 mhpmcounter_q[cnt_gidx] <= 'b0;
-            else
-                mhpmcounter_q[cnt_gidx] <= mhpmcounter_n[cnt_gidx];
+            end else begin
+                if (mhpmcounter_write_lower[cnt_gidx]) begin
+                  mhpmcounter_q[cnt_gidx][31:0] <= csr_wdata_int;
+                end else if (mhpmcounter_write_upper[cnt_gidx]) begin
+                  mhpmcounter_q[cnt_gidx][63:32] <= csr_wdata_int;
+                end else if (mhpmcounter_write_increment[cnt_gidx]) begin
+                  mhpmcounter_q[cnt_gidx] <= mhpmcounter_increment[cnt_gidx];
+                end
+            end
       end
     end
   endgenerate
@@ -1625,11 +1613,19 @@ end //PULP_SECURE
   // Single Step only decodes one instruction in non debug mode and next instrcution decode is in debug mode
   a_single_step : assert property
   (
-    @(posedge clk)  disable iff (!rst_n)
+    @(posedge clk) disable iff (!rst_n)
     (inst_ret && debug_single_step_o && ~debug_mode_i)
     ##1 inst_ret [->1]
     |-> (debug_mode_i && debug_single_step_o));
-  `endif
+
+  // Check that mie_bypass_o equals mie_n
+  a_mie_bypass : assert property
+  (
+    @(posedge clk) disable iff (!rst_n)
+    (1'b1) 
+    |-> (mie_bypass_o == mie_n));
+
+`endif
 
 endmodule
 