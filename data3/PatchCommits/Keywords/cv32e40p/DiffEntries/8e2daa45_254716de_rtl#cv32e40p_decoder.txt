8e2daa45462ceeffd34541eb6b5caae19d7f92ae
Merge pull request #535 from Silabs-ArjanB/ArjanB_per_counter_illegal
diff --git a/rtl/cv32e40p_decoder.sv b/rtl/cv32e40p_decoder.sv
index 781d28f..5f4d7a3 100644
--- a/rtl/cv32e40p_decoder.sv
+++ b/rtl/cv32e40p_decoder.sv
@@ -108,7 +108,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
   // APU
   output logic                apu_en_o,
-  output logic [WAPUTYPE-1:0] apu_type_o,
   output logic [APU_WOP_CPU-1:0]  apu_op_o,
   output logic [1:0]          apu_lat_o,
   output logic [WAPUTYPE-1:0] apu_flags_src_o,
@@ -156,15 +155,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
   input  logic [31:0] mcounteren_i
 );
 
-  // careful when modifying the following parameters! these types have to match the ones in the APU!
-  localparam APUTYPE_FP         = 0;
-  localparam APUTYPE_ADDSUB     = APUTYPE_FP;
-  localparam APUTYPE_MULT       = APUTYPE_FP;
-  localparam APUTYPE_CAST       = APUTYPE_FP;
-  localparam APUTYPE_MAC        = APUTYPE_FP;
-  localparam APUTYPE_DIV        = APUTYPE_FP;
-  localparam APUTYPE_SQRT       = APUTYPE_FP;
-
   // write enable/request control
   logic       regfile_mem_we;
   logic       regfile_alu_we;
@@ -225,7 +215,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
     mult_dot_signed_o           = 2'b00;
 
     apu_en                      = 1'b0;
-    apu_type_o                  = '0;
     apu_op_o                    = '0;
     apu_lat_o                   = '0;
     apu_flags_src_o             = '0;
@@ -790,7 +779,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                 5'b00001: begin
                   fpu_op      = fpnew_pkg::ADD;
                   fp_op_group = ADDMUL;
-                  apu_type_o  = APUTYPE_ADDSUB;
                   // FPnew needs addition operands as operand B and C
                   alu_op_b_mux_sel_o     = OP_B_REGA_OR_FWD;
                   alu_op_c_mux_sel_o     = OP_C_REGB_OR_FWD;
@@ -802,7 +790,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op      = fpnew_pkg::ADD;
                   fpu_op_mod  = 1'b1;
                   fp_op_group = ADDMUL;
-                  apu_type_o  = APUTYPE_ADDSUB;
                   // FPnew needs addition operands as operand B and C
                   alu_op_b_mux_sel_o     = OP_B_REGA_OR_FWD;
                   alu_op_c_mux_sel_o     = OP_C_REGB_OR_FWD;
@@ -813,20 +800,17 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                 5'b00011: begin
                   fpu_op      = fpnew_pkg::MUL;
                   fp_op_group = ADDMUL;
-                  apu_type_o  = APUTYPE_MULT;
                 end
                 // vfdiv.vfmt - Vectorial FP Division
                 5'b00100: begin
                   fpu_op      = fpnew_pkg::DIV;
                   fp_op_group = DIVSQRT;
-                  apu_type_o  = APUTYPE_DIV;
                 end
                 // vfmin.vfmt - Vectorial FP Minimum
                 5'b00101: begin
                   fpu_op        = fpnew_pkg::MINMAX;
                   fp_rnd_mode_o = 3'b000; // min
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0; // instruction encoded in rm
                 end
                 // vfmax.vfmt - Vectorial FP Maximum
@@ -834,7 +818,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op        = fpnew_pkg::MINMAX;
                   fp_rnd_mode_o = 3'b001; // max
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0; // instruction encoded in rm
                 end
                 // vfsqrt.vfmt - Vectorial FP Square Root
@@ -842,7 +825,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   regb_used_o = 1'b0;
                   fpu_op      = fpnew_pkg::SQRT;
                   fp_op_group = DIVSQRT;
-                  apu_type_o  = APUTYPE_SQRT;
                   // rs2 and R must be zero
                   if ((instr_rdata_i[24:20] != 5'b00000) || instr_rdata_i[14]) begin
                     illegal_insn_o = 1'b1;
@@ -855,7 +837,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   reg_fp_c_o  = 1'b1;
                   fpu_op      = fpnew_pkg::FMADD;
                   fp_op_group = ADDMUL;
-                  apu_type_o  = APUTYPE_MAC;
                 end
                 // vfmre.vfmt - Vectorial FP Multiply-Reduce
                 5'b01001: begin
@@ -865,7 +846,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op      = fpnew_pkg::FMADD;
                   fpu_op_mod  = 1'b1;
                   fp_op_group = ADDMUL;
-                  apu_type_o  = APUTYPE_MAC;
                 end
                 // Moves, Conversions, Classifications
                 5'b01100: begin
@@ -879,7 +859,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                       fpu_op             = fpnew_pkg::SGNJ;
                       fp_rnd_mode_o      = 3'b011;  // passthrough without checking nan-box
                       fp_op_group        = NONCOMP;
-                      apu_type_o         = APUTYPE_FP; // doesn't matter much as long as it's not div
                       check_fprm         = 1'b0;
                       // GP reg to FP reg
                       if (instr_rdata_i[14]) begin
@@ -898,7 +877,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                       fpu_op        = fpnew_pkg::CLASSIFY;
                       fp_rnd_mode_o = 3'b000;
                       fp_op_group   = NONCOMP;
-                      apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                       check_fprm    = 1'b0;
                       // R must not be set
                       if (instr_rdata_i[14]) illegal_insn_o = 1'b1;
@@ -907,7 +885,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                     5'b0001?: begin
                       fp_op_group = CONV;
                       fpu_op_mod  = instr_rdata_i[14]; // signed/unsigned switch
-                      apu_type_o  = APUTYPE_CAST;
                       // Integer width matches FP width
                       unique case (instr_rdata_i[13:12])
                         // FP32
@@ -933,7 +910,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                     5'b001??: begin
                       fpu_op      = fpnew_pkg::F2F;
                       fp_op_group = CONV;
-                      apu_type_o  = APUTYPE_CAST;
                       // check source format
                       unique case (instr_rdata_i[21:20])
                         // Only process instruction if corresponding extension is active (static)
@@ -966,7 +942,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op        = fpnew_pkg::SGNJ;
                   fp_rnd_mode_o = 3'b000; // sgnj
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfsgnjn.vfmt - Vectorial FP Negated Sign Injection
@@ -974,7 +949,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op        = fpnew_pkg::SGNJ;
                   fp_rnd_mode_o = 3'b001; // sgnjn
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfsgnjx.vfmt - Vectorial FP Xored Sign Injection
@@ -982,7 +956,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op        = fpnew_pkg::SGNJ;
                   fp_rnd_mode_o = 3'b010; // sgnjx
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfeq.vfmt - Vectorial FP Equals
@@ -991,7 +964,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op        = fpnew_pkg::CMP;
                   fp_rnd_mode_o = 3'b010; // eq
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfne.vfmt - Vectorial FP Not Equals
@@ -1001,7 +973,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op_mod    = 1'b1; // invert output
                   fp_rnd_mode_o = 3'b010; // eq
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vflt.vfmt - Vectorial FP Less Than
@@ -1010,7 +981,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op        = fpnew_pkg::CMP;
                   fp_rnd_mode_o = 3'b001; // lt
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfge.vfmt - Vectorial FP Greater Than or Equals
@@ -1020,7 +990,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op_mod    = 1'b1; // invert output
                   fp_rnd_mode_o = 3'b001; // lt
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfle.vfmt - Vectorial FP Less Than or Equals
@@ -1029,7 +998,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op        = fpnew_pkg::CMP;
                   fp_rnd_mode_o = 3'b000; // le
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfgt.vfmt - Vectorial FP Greater Than
@@ -1039,7 +1007,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   fpu_op_mod    = 1'b1; // invert output
                   fp_rnd_mode_o = 3'b000; // le
                   fp_op_group   = NONCOMP;
-                  apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
                   check_fprm    = 1'b0;
                 end
                 // vfcpk{a-d}.vfmt.s/d
@@ -1047,7 +1014,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
                   // vfcpk{{a/c}/{b/d}} selection in R bit
                   fpu_op_mod           = instr_rdata_i[14];
                   fp_op_group          = CONV;
-                  apu_type_o           = APUTYPE_CAST;
                   scalar_replication_o = 1'b0;
 
                   if (instr_rdata_i[25]) fpu_op = fpnew_pkg::CPKCD; // vfcpk{c/d}
@@ -1464,7 +1430,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             5'b00000: begin
               fpu_op        = fpnew_pkg::ADD;
               fp_op_group   = ADDMUL;
-              apu_type_o    = APUTYPE_ADDSUB;
               apu_op_o      = 2'b0;
               apu_lat_o     = (PIPE_REG_ADDSUB==1) ? 2'h2 : 2'h1;
               alu_op_b_mux_sel_o = OP_B_REGA_OR_FWD;
@@ -1475,7 +1440,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               fpu_op        = fpnew_pkg::ADD;
               fpu_op_mod    = 1'b1;
               fp_op_group   = ADDMUL;
-              apu_type_o    = APUTYPE_ADDSUB;
               apu_op_o      = 2'b1;
               apu_lat_o     = (PIPE_REG_ADDSUB==1) ? 2'h2 : 2'h1;
               alu_op_b_mux_sel_o = OP_B_REGA_OR_FWD;
@@ -1485,14 +1449,12 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             5'b00010: begin
               fpu_op        = fpnew_pkg::MUL;
               fp_op_group   = ADDMUL;
-              apu_type_o    = APUTYPE_MULT;
               apu_lat_o     = (PIPE_REG_MULT==1) ? 2'h2 : 2'h1;
             end
             // fdiv.fmt - FP Division
             5'b00011: begin
               fpu_op      = fpnew_pkg::DIV;
               fp_op_group = DIVSQRT;
-              apu_type_o  = APUTYPE_DIV;
               apu_lat_o   = 2'h3;
             end
             // fsqrt.fmt - FP Square Root
@@ -1500,7 +1462,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               regb_used_o = 1'b0;
               fpu_op      = fpnew_pkg::SQRT;
               fp_op_group = DIVSQRT;
-              apu_type_o  = APUTYPE_SQRT;
               apu_op_o    = 1'b1;
               apu_lat_o   = 2'h3;
               // rs2 must be zero
@@ -1510,7 +1471,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             5'b00100: begin
               fpu_op        = fpnew_pkg::SGNJ;
               fp_op_group   = NONCOMP;
-              apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
               check_fprm    = 1'b0; // instruction encoded in rm, do the check here
               if (C_XF16ALT) begin  // FP16ALT instructions encoded in rm separately (static)
                 if (!(instr_rdata_i[14:12] inside {[3'b000:3'b010], [3'b100:3'b110]})) begin
@@ -1531,7 +1491,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             5'b00101: begin
               fpu_op        = fpnew_pkg::MINMAX;
               fp_op_group   = NONCOMP;
-              apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
               check_fprm    = 1'b0; // instruction encoded in rm, do the check here
               if (C_XF16ALT) begin  // FP16ALT instructions encoded in rm separately (static)
                 if (!(instr_rdata_i[14:12] inside {[3'b000:3'b001], [3'b100:3'b101]})) begin
@@ -1553,7 +1512,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               regb_used_o   = 1'b0;
               fpu_op        = fpnew_pkg::F2F;
               fp_op_group   = CONV;
-              apu_type_o    = APUTYPE_CAST;
               // bits [22:20] used, other bits must be 0
               if (instr_rdata_i[24:23]) illegal_insn_o = 1'b1;
               // check source format
@@ -1586,7 +1544,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             5'b01001: begin
               fpu_op        = fpnew_pkg::MUL;
               fp_op_group   = ADDMUL;
-              apu_type_o    = APUTYPE_MULT;
               apu_lat_o     = (PIPE_REG_MULT==1) ? 2'h2 : 2'h1;
               // set dst format to FP32
               fpu_dst_fmt_o = fpnew_pkg::FP32;
@@ -1598,7 +1555,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               reg_fp_c_o  = 1'b1;
               fpu_op      = fpnew_pkg::FMADD;
               fp_op_group = ADDMUL;
-              apu_type_o  = APUTYPE_MAC;
               apu_lat_o   = (PIPE_REG_MULT==1) ? 2'h2 : 2'h1;
               // set dst format to FP32
               fpu_dst_fmt_o = fpnew_pkg::FP32;
@@ -1608,7 +1564,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               fpu_op        = fpnew_pkg::CMP;
               fp_op_group   = NONCOMP;
               reg_fp_d_o    = 1'b0; // go to integer regfile
-              apu_type_o    = APUTYPE_FP; // doesn't matter much as long as it's not div
               check_fprm    = 1'b0; // instruction encoded in rm, do the check here
               if (C_XF16ALT) begin  // FP16ALT instructions encoded in rm separately (static)
                 if (!(instr_rdata_i[14:12] inside {[3'b000:3'b010], [3'b100:3'b110]})) begin
@@ -1632,7 +1587,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               fpu_op        = fpnew_pkg::F2I;
               fp_op_group   = CONV;
               fpu_op_mod    = instr_rdata_i[20]; // signed/unsigned switch
-              apu_type_o    = APUTYPE_CAST;
               apu_op_o      = 2'b1;
               apu_lat_o     = (PIPE_REG_CAST==1) ? 2'h2 : 2'h1;
 
@@ -1670,7 +1624,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               fpu_op        = fpnew_pkg::I2F;
               fp_op_group   = CONV;
               fpu_op_mod    = instr_rdata_i[20]; // signed/unsigned switch
-              apu_type_o    = APUTYPE_CAST;
               apu_op_o      = 2'b0;
               apu_lat_o     = (PIPE_REG_CAST==1) ? 2'h2 : 2'h1;
               // bits [21:20] used, other bits must be 0
@@ -1681,7 +1634,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               regb_used_o = 1'b0;
               reg_fp_d_o  = 1'b0; // go to integer regfile
               fp_op_group = NONCOMP;
-              apu_type_o  = APUTYPE_FP; // doesn't matter much as long as it's not div
               check_fprm  = 1'b0; // instruction encoded in rm, do the check here
               // fmv.x.fmt - FPR to GPR Move
               if (instr_rdata_i[14:12] == 3'b000 || (C_XF16ALT && instr_rdata_i[14:12] == 3'b100)) begin
@@ -1718,7 +1670,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               fpu_op_mod          = 1'b0;    // nan-box result
               fp_op_group         = NONCOMP;
               fp_rnd_mode_o       = 3'b011;  // passthrough without checking nan-box
-              apu_type_o          = APUTYPE_FP; // doesn't matter much as long as it's not div
               check_fprm          = 1'b0; // instruction encoded in rm, do the check here
               if (instr_rdata_i[14:12] == 3'b000 || (C_XF16ALT && instr_rdata_i[14:12] == 3'b100)) begin
                 // FP16ALT uses special encoding here
@@ -1813,7 +1764,6 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
           alu_en           = 1'b0;
           // Private and new shared FP use FPnew
           apu_flags_src_o  = APU_FLAGS_FPNEW;
-          apu_type_o       = APUTYPE_MAC;
           apu_lat_o        = (PIPE_REG_MAC>1) ? 2'h3 : 2'h2;
           // all registers are FP registers and use three
           rega_used_o      = 1'b1;