c0c6549a5b15b3713a572c131e4a1bef1ef25315
Merge pull request #464 from Silabs-ArjanB/ArjanB_bge_div
diff --git a/rtl/cv32e40p_core.sv b/rtl/cv32e40p_core.sv
index 8291da6..806e3a5 100644
--- a/rtl/cv32e40p_core.sv
+++ b/rtl/cv32e40p_core.sv
@@ -132,8 +132,6 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
 
 
   // IF/ID signals
-  logic              is_hwlp_id;
-  logic [N_HWLP-1:0] hwlp_dec_cnt_id;
   logic              instr_valid_id;
   logic [31:0]       instr_rdata_id;    // Instruction sampled inside IF stage
   logic              is_compressed_id;
@@ -253,7 +251,6 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   logic [1:0]  mtvec_mode;
   logic [1:0]  utvec_mode;
 
-  logic        csr_access;
   logic [1:0]  csr_op;
   csr_num_e    csr_addr;
   csr_num_e    csr_addr_int;
@@ -362,9 +359,7 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   logic        irq_pending;
   logic [4:0]  irq_id;
 
-  //Simchecker signal
-  logic is_interrupt;
-  assign is_interrupt = (pc_mux_id == PC_EXCEPTION) && (exc_pc_mux_id == EXC_PC_IRQ);
+  // Mux selector for vectored IRQ PC
   assign m_exc_vec_pc_mux_id = (mtvec_mode == 2'b0) ? 5'h0 : exc_cause;
   assign u_exc_vec_pc_mux_id = (utvec_mode == 2'b0) ? 5'h0 : exc_cause;
 
@@ -404,9 +399,9 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   sleep_unit_i
   (
     // Clock, reset interface
-    .clk_i                      ( clk_i                ),       // Only RTL usage of clk_i
+    .clk_ungated_i              ( clk_i                ),       // Ungated clock
     .rst_n                      ( rst_ni               ),
-    .clk_o                      ( clk                  ),       // Rest of design uses this gated clock
+    .clk_gated_o                ( clk                  ),       // Gated clock
     .scan_cg_en_i               ( scan_cg_en_i         ),
 
     // Core sleep
@@ -445,6 +440,7 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   #(
     .PULP_XPULP          ( PULP_XPULP        ),
     .PULP_OBI            ( PULP_OBI          ),
+    .PULP_SECURE         ( PULP_SECURE       ),
     .FPU                 ( FPU               )
   )
   if_stage_i
@@ -557,7 +553,8 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   )
   id_stage_i
   (
-    .clk                          ( clk                  ),
+    .clk                          ( clk                  ),     // Gated clock
+    .clk_ungated_i                ( clk_i                ),     // Ungated clock
     .rst_n                        ( rst_ni               ),
 
     .scan_cg_en_i                 ( scan_cg_en_i         ),
@@ -950,6 +947,7 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
     .busy_o                ( lsu_busy           )
   );
 
+  // Tracer signal
   assign wb_valid = lsu_ready_wb & apu_ready_wb;
 
 
@@ -991,7 +989,6 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
     .mtvec_addr_i            ( mtvec_addr_i[31:0] ),
     .csr_mtvec_init_i        ( csr_mtvec_init     ),
     // Interface to CSRs (SRAM like)
-    .csr_access_i            ( csr_access         ),
     .csr_addr_i              ( csr_addr           ),
     .csr_wdata_i             ( csr_wdata          ),
     .csr_op_i                ( csr_op             ),
@@ -1057,7 +1054,7 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
 
     // performance counter related signals
     .id_valid_i              ( id_valid           ),
-    .is_compressed_i         ( is_compressed      ),
+    .is_compressed_i         ( is_compressed_id   ),
     .is_decoding_i           ( is_decoding        ),
 
     .imiss_i                 ( perf_imiss         ),
@@ -1079,7 +1076,6 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   );
 
   //  CSR access
-  assign csr_access   =  csr_access_ex;
   assign csr_addr     =  csr_addr_int;
   assign csr_wdata    =  alu_operand_a_ex;
   assign csr_op       =  csr_op_ex;
@@ -1187,6 +1183,103 @@ module cv32e40p_core import cv32e40p_apu_core_pkg::*;
   // Assertions
   //----------------------------------------------------------------------------
 
+  generate
+  if (!PULP_XPULP) begin
+
+    // Illegal, ECALL, EBRK checks excluded for PULP due to other definition for for Hardware Loop
+
+    // First illegal instruction decoded
+    logic         first_illegal_found;
+    logic         first_ecall_found;
+    logic         first_ebrk_found;
+    logic [31:0]  expected_illegal_mepc;
+    logic [31:0]  expected_ecall_mepc;
+    logic [31:0]  expected_ebrk_mepc;
+
+    always_ff @(posedge clk , negedge rst_ni)
+    begin
+      if (rst_ni == 1'b0) begin
+        first_illegal_found   <= 1'b0;
+        first_ecall_found     <= 1'b0;
+        first_ebrk_found      <= 1'b0;
+        expected_illegal_mepc <= 32'b0;
+        expected_ecall_mepc   <= 32'b0;
+        expected_ebrk_mepc    <= 32'b0;
+      end
+      else begin
+        if (!first_illegal_found && is_decoding && id_valid && id_stage_i.illegal_insn_dec && !id_stage_i.controller_i.debug_mode_n) begin
+          first_illegal_found   <= 1'b1;
+          expected_illegal_mepc <= pc_id;
+        end
+        if (!first_ecall_found && is_decoding && id_valid && id_stage_i.ecall_insn_dec && !id_stage_i.controller_i.debug_mode_n) begin
+          first_ecall_found   <= 1'b1;
+          expected_ecall_mepc <= pc_id;
+        end
+        if (!first_ebrk_found && is_decoding && id_valid && id_stage_i.ebrk_insn && (id_stage_i.controller_i.ctrl_fsm_ns != DBG_FLUSH)) begin
+          first_ebrk_found   <= 1'b1;
+          expected_ebrk_mepc <= pc_id;
+        end
+      end
+    end
+
+    // First mepc write for illegal instruction exception
+    logic         first_cause_illegal_found;
+    logic         first_cause_ecall_found;
+    logic         first_cause_ebrk_found;
+    logic [31:0]  actual_illegal_mepc;
+    logic [31:0]  actual_ecall_mepc;
+    logic [31:0]  actual_ebrk_mepc;
+
+    always_ff @(posedge clk , negedge rst_ni)
+    begin
+      if (rst_ni == 1'b0) begin
+        first_cause_illegal_found <= 1'b0;
+        first_cause_ecall_found   <= 1'b0;
+        first_cause_ebrk_found    <= 1'b0;
+        actual_illegal_mepc       <= 32'b0;
+        actual_ecall_mepc         <= 32'b0;
+        actual_ebrk_mepc          <= 32'b0;
+      end
+      else begin
+        if (!first_cause_illegal_found && (cs_registers_i.csr_cause_i == {1'b0, EXC_CAUSE_ILLEGAL_INSN}) && csr_save_cause) begin
+          first_cause_illegal_found <= 1'b1;
+          actual_illegal_mepc       <= cs_registers_i.mepc_n;
+        end
+        if (!first_cause_ecall_found && (cs_registers_i.csr_cause_i == {1'b0, EXC_CAUSE_ECALL_MMODE}) && csr_save_cause) begin
+          first_cause_ecall_found <= 1'b1;
+          actual_ecall_mepc       <= cs_registers_i.mepc_n;
+        end
+        if (!first_cause_ebrk_found && (cs_registers_i.csr_cause_i == {1'b0, EXC_CAUSE_BREAKPOINT}) && csr_save_cause) begin
+          first_cause_ebrk_found <= 1'b1;
+          actual_ebrk_mepc       <= cs_registers_i.mepc_n;
+        end
+      end
+    end
+
+    // Check that mepc is updated with PC of illegal instruction
+    property p_illegal_mepc;
+       @(posedge clk) disable iff (!rst_ni) (first_illegal_found && first_cause_illegal_found) |=> (expected_illegal_mepc == actual_illegal_mepc);
+    endproperty
+
+    a_illegal_mepc : assert property(p_illegal_mepc);
+
+    // Check that mepc is updated with PC of the ECALL instruction
+    property p_ecall_mepc;
+       @(posedge clk) disable iff (!rst_ni) (first_ecall_found && first_cause_ecall_found) |=> (expected_ecall_mepc == actual_ecall_mepc);
+    endproperty
+
+    a_ecall_mepc : assert property(p_ecall_mepc);
+
+    // Check that mepc is updated with PC of EBRK instruction
+    property p_ebrk_mepc;
+       @(posedge clk) disable iff (!rst_ni) (first_ebrk_found && first_cause_ebrk_found) |=> (expected_ebrk_mepc == actual_ebrk_mepc);
+    endproperty
+
+    a_ebrk_mepc : assert property(p_ebrk_mepc);
+
+  end
+  endgenerate
+
 `endif
 
 endmodule