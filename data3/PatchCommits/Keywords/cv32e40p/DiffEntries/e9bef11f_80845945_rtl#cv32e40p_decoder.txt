e9bef11ff391a593dd32012bb5e6fe7795ac9d0e
Merge pull request #475 from davideschiavone/fix_debug_ss
diff --git a/rtl/cv32e40p_decoder.sv b/rtl/cv32e40p_decoder.sv
index 14cfa93..d813dc4 100644
--- a/rtl/cv32e40p_decoder.sv
+++ b/rtl/cv32e40p_decoder.sv
@@ -193,6 +193,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
   logic [1:0] csr_op;
 
+  logic       alu_en;
   logic       mult_int_en;
   logic       mult_dot_en;
   logic       apu_en;
@@ -221,7 +222,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
     ctrl_transfer_insn          = BRANCH_NONE;
     ctrl_transfer_target_mux_sel_o       = JT_JAL;
 
-    alu_en_o                    = 1'b1;
+    alu_en                      = 1'b1;
     alu_operator_o              = ALU_SLTU;
     alu_op_a_mux_sel_o          = OP_A_REGA_OR_FWD;
     alu_op_b_mux_sel_o          = OP_B_REGB_OR_FWD;
@@ -759,7 +760,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
               // using APU instead of ALU
               apu_en           = 1'b1;
-              alu_en_o         = 1'b0;
+              alu_en           = 1'b0;
               apu_flags_src_o  = APU_FLAGS_FPNEW;
               // by default, set all registers to FP registers and use 2
               rega_used_o      = 1'b1;
@@ -1182,13 +1183,13 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
             // supported RV32M instructions
             {6'b00_0001, 3'b000}: begin // mul
-              alu_en_o        = 1'b0;
+              alu_en          = 1'b0;
               mult_int_en     = 1'b1;
               mult_operator_o = MUL_MAC32;
               regc_mux_o      = REGC_ZERO;
             end
             {6'b00_0001, 3'b001}: begin // mulh
-              alu_en_o           = 1'b0;
+              alu_en             = 1'b0;
               regc_used_o        = 1'b1;
               regc_mux_o         = REGC_ZERO;
               mult_signed_mode_o = 2'b11;
@@ -1196,7 +1197,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               mult_operator_o    = MUL_H;
             end
             {6'b00_0001, 3'b010}: begin // mulhsu
-              alu_en_o           = 1'b0;
+              alu_en             = 1'b0;
               regc_used_o        = 1'b1;
               regc_mux_o         = REGC_ZERO;
               mult_signed_mode_o = 2'b01;
@@ -1204,7 +1205,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               mult_operator_o    = MUL_H;
             end
             {6'b00_0001, 3'b011}: begin // mulhu
-              alu_en_o           = 1'b0;
+              alu_en             = 1'b0;
               regc_used_o        = 1'b1;
               regc_mux_o         = REGC_ZERO;
               mult_signed_mode_o = 2'b00;
@@ -1251,7 +1252,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             // PULP specific instructions
             {6'b10_0001, 3'b000}: begin         // p.mac
               if (PULP_XPULP) begin
-                alu_en_o        = 1'b0;
+                alu_en          = 1'b0;
                 regc_used_o     = 1'b1;
                 regc_mux_o      = REGC_RD;
                 mult_int_en     = 1'b1;
@@ -1262,7 +1263,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             end
             {6'b10_0001, 3'b001}: begin         // p.msu
               if (PULP_XPULP) begin
-                alu_en_o        = 1'b0;
+                alu_en          = 1'b0;
                 regc_used_o     = 1'b1;
                 regc_mux_o      = REGC_RD;
                 mult_int_en     = 1'b1;
@@ -1437,7 +1438,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               {6'b00_0001, 3'b101},             // divu
               {6'b00_0001, 3'b110},             // rem
               {6'b00_0001, 3'b111}: begin       // remu
-                alu_en_o   = 1'b0;
+                alu_en     = 1'b0;
                 apu_en     = 1'b1;
                 apu_type_o = APUTYPE_INT_DIV;
                 apu_op_o   = alu_operator_o;
@@ -1485,7 +1486,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
           // using APU instead of ALU
           apu_en           = 1'b1;
-          alu_en_o         = 1'b0;
+          alu_en           = 1'b0;
           // Private and new shared FP use FPnew
           apu_flags_src_o  = (SHARED_FP==1) ? APU_FLAGS_FP : APU_FLAGS_FPNEW;
           // by default, set all registers to FP registers and use 2
@@ -1582,7 +1583,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               // old FPU needs ALU
               if (SHARED_FP==1) begin
                 apu_en         = 1'b0;
-                alu_en_o       = 1'b1;
+                alu_en         = 1'b1;
                 regfile_alu_we = 1'b1;
                 case (instr_rdata_i[14:12])
                   //fsgnj.s
@@ -1621,7 +1622,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               // old FPU needs ALU
               if (SHARED_FP==1) begin
                 apu_en         = 1'b0;
-                alu_en_o       = 1'b1;
+                alu_en         = 1'b1;
                 regfile_alu_we = 1'b1;
                 case (instr_rdata_i[14:12])
                   //fmin.s
@@ -1657,7 +1658,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               // old FPU has hacky fcvt.s.d
               if (SHARED_FP==1) begin
                 apu_en         = 1'b0;
-                alu_en_o       = 1'b1;
+                alu_en         = 1'b1;
                 regfile_alu_we = 1'b1;
                 regb_used_o    = 1'b0;
                 alu_operator_o = ALU_FKEEP;
@@ -1722,7 +1723,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               // old FPU needs ALU
               if (SHARED_FP==1) begin
                 apu_en         = 1'b0;
-                alu_en_o       = 1'b1;
+                alu_en         = 1'b1;
                 regfile_alu_we = 1'b1;
                 reg_fp_d_o     = 1'b0;
                 case (instr_rdata_i[14:12])
@@ -1813,7 +1814,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               // old fpu maps this to ALU ops
               if (SHARED_FP==1) begin
                 apu_en         = 1'b0;
-                alu_en_o       = 1'b1;
+                alu_en         = 1'b1;
                 regfile_alu_we = 1'b1;
                 case (instr_rdata_i[14:12])
                   // fmv.x.s - move from floating point to gp register
@@ -1868,7 +1869,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               // old fpu maps this to ALU ops
               if (SHARED_FP==1) begin
                 apu_en         = 1'b0;
-                alu_en_o       = 1'b1;
+                alu_en         = 1'b1;
                 regfile_alu_we = 1'b1;
                 reg_fp_a_o     = 1'b0; // go from integer regfile
                 alu_operator_o = ALU_ADD;
@@ -1976,7 +1977,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
         if (FPU==1) begin
           // using APU instead of ALU
           apu_en           = 1'b1;
-          alu_en_o         = 1'b0;
+          alu_en           = 1'b0;
           // Private and new shared FP use FPnew
           apu_flags_src_o  = (SHARED_FP==1) ? APU_FLAGS_FP : APU_FLAGS_FPNEW;
           apu_type_o       = APUTYPE_MAC;
@@ -2180,7 +2181,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
 
           case (instr_rdata_i[13:12])
             2'b00: begin // multiply with subword selection
-              alu_en_o           = 1'b0;
+              alu_en             = 1'b0;
 
               mult_sel_subword_o = instr_rdata_i[30];
               mult_signed_mode_o = {2{instr_rdata_i[31]}};
@@ -2196,7 +2197,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             end
 
             2'b01: begin // MAC with subword selection
-              alu_en_o           = 1'b0;
+              alu_en             = 1'b0;
 
               mult_sel_subword_o = instr_rdata_i[30];
               mult_signed_mode_o = {2{instr_rdata_i[31]}};
@@ -2378,23 +2379,23 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               alu_op_b_mux_sel_o = OP_B_REGC_OR_FWD;
             end
             6'b10000_0: begin // pv.dotup
-              alu_en_o          = 1'b0;
+              alu_en            = 1'b0;
               mult_dot_en       = 1'b1;
               mult_dot_signed_o = 2'b00;
               imm_b_mux_sel_o   = IMMB_VU;
             end
             6'b10001_0: begin // pv.dotusp
-              alu_en_o          = 1'b0;
+              alu_en            = 1'b0;
               mult_dot_en       = 1'b1;
               mult_dot_signed_o = 2'b01;
             end
             6'b10011_0: begin // pv.dotsp
-              alu_en_o          = 1'b0;
+              alu_en            = 1'b0;
               mult_dot_en       = 1'b1;
               mult_dot_signed_o = 2'b11;
             end
             6'b10100_0: begin // pv.sdotup
-              alu_en_o          = 1'b0;
+              alu_en            = 1'b0;
               mult_dot_en       = 1'b1;
               mult_dot_signed_o = 2'b00;
               regc_used_o       = 1'b1;
@@ -2402,14 +2403,14 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
               imm_b_mux_sel_o   = IMMB_VU;
             end
             6'b10101_0: begin // pv.sdotusp
-              alu_en_o          = 1'b0;
+              alu_en            = 1'b0;
               mult_dot_en       = 1'b1;
               mult_dot_signed_o = 2'b01;
               regc_used_o       = 1'b1;
               regc_mux_o        = REGC_RD;
             end
             6'b10111_0: begin // pv.sdotsp
-              alu_en_o          = 1'b0;
+              alu_en            = 1'b0;
               mult_dot_en       = 1'b1;
               mult_dot_signed_o = 2'b11;
               regc_used_o       = 1'b1;
@@ -2419,7 +2420,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
             /*  COMPLEX INSTRUCTIONS */
 
             6'b01010_1: begin // pc.clpxmul.h.{r,i}.{/,div2,div4,div8}
-              alu_en_o             = 1'b0;
+              alu_en               = 1'b0;
               mult_dot_en          = 1'b1;
               mult_dot_signed_o    = 2'b11;
               is_clpx_o            = 1'b1;
@@ -2904,6 +2905,7 @@ module cv32e40p_decoder import cv32e40p_pkg::*; import cv32e40p_apu_core_pkg::*;
   end
 
   // deassert we signals (in case of stalls)
+  assign alu_en_o                    = (deassert_we_i) ? 1'b0          : alu_en;
   assign apu_en_o                    = (deassert_we_i) ? 1'b0          : apu_en;
   assign mult_int_en_o               = (deassert_we_i) ? 1'b0          : mult_int_en;
   assign mult_dot_en_o               = (deassert_we_i) ? 1'b0          : mult_dot_en;