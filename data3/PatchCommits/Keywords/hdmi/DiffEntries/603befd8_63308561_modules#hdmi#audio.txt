603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
diff --git a/modules/hdmi/audio.sv b/modules/hdmi/audio.sv
index dd66958..167db52 100644
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -3,22 +3,23 @@
 
 // See HDMI 1.4a Section 5.3.3.
 module audio_clock_regeneration_packet
-#(
-    parameter AUDIO_RATE = 32000
-)
 (
+    input logic [19:0] n,
     input logic [19:0] cts,
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );
 
-// See Section 7.2.1
 logic [19:0] N, CTS;
-assign N = 20'(128 * AUDIO_RATE / 1000);
+assign N = n;
 assign CTS = cts;
 
 // "An HDMI Sink shall ignore bytes HB1 and HB2 of the Audio Clock Regeneration Packet header."
+`ifdef MODEL_TECH
+assign header = {8'd0, 8'd0, 8'd1};
+`else
 assign header = {8'dX, 8'dX, 8'd1};
+`endif
 // "The four Subpackets each contain the same Audio Clock regeneration Subpacket."
 genvar i;
 generate
@@ -77,10 +78,11 @@ module audio_sample_packet
 (
     input logic [7:0] frame_counter,
     // See IEC 60958-1 4.4 and Annex A. 0 indicates the signal is suitable for decoding to an analog audio signal.
-    input logic [1:0] valid_bit,
+    input logic [1:0] valid_bit [3:0],
     // See IEC 60958-3 Section 6. 0 indicates that no user data is being sent
-    input logic [1:0] user_data_bit,
-    input logic [23:0] audio_sample_word [1:0],
+    input logic [1:0] user_data_bit [3:0],
+    input logic [23:0] audio_sample_word [3:0] [1:0],
+    input logic [3:0] audio_sample_word_present,
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );
@@ -94,20 +96,29 @@ localparam CHANNEL_STATUS_LENGTH = 8'd192;
 wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_left = {152'd0, ORIGINAL_SAMPLING_FREQUENCY, WORD_LENGTH, 2'b00, CLOCK_ACCURACY, SAMPLING_FREQUENCY, CHANNEL_LEFT, SOURCE_NUMBER, CATEGORY_CODE, MODE, PRE_EMPHASIS, COPYRIGHT_NOT_ASSERTED, SAMPLE_WORD_TYPE, GRADE};
 wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_right = {152'd0, ORIGINAL_SAMPLING_FREQUENCY, WORD_LENGTH, 2'b00, CLOCK_ACCURACY, SAMPLING_FREQUENCY, CHANNEL_RIGHT, SOURCE_NUMBER, CATEGORY_CODE, MODE, PRE_EMPHASIS, COPYRIGHT_NOT_ASSERTED, SAMPLE_WORD_TYPE, GRADE};
 
-logic [1:0] parity_bit;
-assign parity_bit[0] = ^{channel_status_left[frame_counter], user_data_bit[0], valid_bit[0], audio_sample_word[0]};
-assign parity_bit[1] = ^{channel_status_right[frame_counter], user_data_bit[1], valid_bit[1], audio_sample_word[1]};
 
 // See HDMI 1.4a Table 5-12: Audio Sample Packet Header.
-assign header = {{3'b000, frame_counter == 8'd0, 4'b0000}, {3'b000, LAYOUT, 4'b0001}, 8'd2};
-// See HDMI 1.4a Table 5-13: Audio Sample Subpacket.
-`ifdef MODEL_TECH
-    assign sub[3:1] = '{56'd0, 56'd0, 56'd0};
-`else
-    // "The fields within a Subpacket with a corresponding sample_flat bit set or a sample_present bit clear, are not defined and can be any value."
-    assign sub[3:1] = '{56'dX, 56'dX, 56'dX};
-`endif
-assign sub[0] = {{parity_bit[1], channel_status_right[frame_counter], user_data_bit[1], valid_bit[1], parity_bit[0], channel_status_left[frame_counter], user_data_bit[0], valid_bit[0]}, audio_sample_word[1], audio_sample_word[0]};
+assign header[19:12] = {4'b0000, {3'b000, LAYOUT}};
+assign header[7:0] = 8'd2;
+logic [1:0] parity_bit [3:0];
+logic [7:0] aligned_frame_counter [3:0];
+genvar i;
+generate
+    for (i = 0; i < 4; i++)
+    begin: sample_based_assign
+        assign aligned_frame_counter[i] = 8'(frame_counter + i) >= 8'd192 ? 8'(frame_counter + i - 192) : 8'(frame_counter + i);
+        assign header[23 - (3-i)] = aligned_frame_counter[i] == 8'd0 && audio_sample_word_present[i];
+        assign header[11 - (3-i)] = audio_sample_word_present[i];
+        assign parity_bit[i][0] = ^{channel_status_left[aligned_frame_counter[i]], user_data_bit[i][0], valid_bit[i][0], audio_sample_word[i][0]};
+        assign parity_bit[i][1] = ^{channel_status_right[aligned_frame_counter[i]], user_data_bit[i][1], valid_bit[i][1], audio_sample_word[i][1]};
+        // See HDMI 1.4a Table 5-13: Audio Sample Subpacket.
+        `ifdef MODEL_TECH
+        assign sub[i] = !audio_sample_word_present[i] ? 56'd0 : {{parity_bit[i][1], channel_status_right[aligned_frame_counter[i]], user_data_bit[i][1], valid_bit[i][1], parity_bit[i][0], channel_status_left[aligned_frame_counter[i]], user_data_bit[i][0], valid_bit[i][0]}, audio_sample_word[i][1], audio_sample_word[i][0]};
+        `else
+        assign sub[i] = !audio_sample_word_present[i] ? 56'dX : {{parity_bit[i][1], channel_status_right[aligned_frame_counter[i]], user_data_bit[i][1], valid_bit[i][1], parity_bit[i][0], channel_status_left[aligned_frame_counter[i]], user_data_bit[i][0], valid_bit[i][0]}, audio_sample_word[i][1], audio_sample_word[i][0]};
+        `endif
+    end
+endgenerate
 
 endmodule
 