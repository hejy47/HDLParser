4e32ff3efbb5ca6a4680cf68fefcd39e697d41af
Fix buffer bit width + update comments, force top to infer RAM instead of logic cells
diff --git a/modules/sound/buffer.sv b/modules/sound/buffer.sv
index 9855bea..18e3fe7 100644
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -3,14 +3,14 @@
 // If the buffer is cleared, either a larger buffer is needed or output is slower than input.
 
 // Operating principles:
-// * remove_position is the next available audio sample, if any
+// * remove_position is the next available audio sample, unless remove_position == insert_position
 // * insert_position is the next empty buffer location
 // * remaining is the distance between insert and remove
-//     * insert is always ahead of remove -- if remove > insert, a position has wrapped around from BUFFER_SIZE and an alternate calculation is used
-// * if the buffer is completely filled, insert and remove become equal and the remaining count drops from BUFFER_SIZE-1 to 0.
+//     * insert is always ahead of remove -- if remove > insert, a position has wrapped around from BUFFER_END and an alternate calculation is used
+// * if the buffer is completely filled, insert_position and remove_position become equal and the buffer is cleared (remaining = 0)
 module buffer 
 #(
-    parameter BUFFER_SIZE = 128,
+    parameter BUFFER_SIZE = 16,
     parameter BIT_WIDTH = 16,
     parameter CHANNELS = 2
 )
@@ -25,14 +25,14 @@ module buffer
 
 localparam BUFFER_WIDTH = $clog2(BUFFER_SIZE);
 
-const bit [BUFFER_WIDTH-1:0] BUFFER_END = 2 ** BUFFER_WIDTH == BUFFER_SIZE ? ~(BUFFER_WIDTH'(0)) : BUFFER_WIDTH'(BUFFER_SIZE) - 1'b1;
+const bit [BUFFER_WIDTH-1:0] BUFFER_END = BUFFER_WIDTH'(BUFFER_SIZE - 1);
 
 logic [BUFFER_WIDTH-1:0] insert_position = 0;
 logic [BUFFER_WIDTH-1:0] remove_position = 0;
 
 assign remaining = insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position + BUFFER_WIDTH'(1));
 
-logic [19:0] audio_buffer [BUFFER_SIZE-1:0] [CHANNELS-1:0];
+logic [BIT_WIDTH-1:0] audio_buffer [BUFFER_SIZE-1:0] [CHANNELS-1:0];
 
 assign audio_out = audio_buffer[remove_position];
 
@@ -42,16 +42,16 @@ begin
     audio_buffer[insert_position] <= audio_in;
     if (remaining == BUFFER_END)
         $fatal("Audio buffer overflow");
-    insert_position <= insert_position == BUFFER_END ? BUFFER_WIDTH'(0) : insert_position + 1'd1;
+    insert_position <= insert_position == BUFFER_END ? BUFFER_WIDTH'(0) : insert_position + BUFFER_WIDTH'(1);
 end
 
 always @(posedge clk_pixel)
 begin
     if (packet_enable)
     begin
-        if (remaining > 1'd0) // Remove.
+        if (remaining > BUFFER_WIDTH'(0)) // Remove.
         begin
-            remove_position <= remove_position == BUFFER_END ? BUFFER_WIDTH'(0) : remove_position + 1'd1;
+            remove_position <= remove_position == BUFFER_END ? BUFFER_WIDTH'(0) : remove_position + BUFFER_WIDTH'(1);
         end else
         begin
             // clk_packet but no items left