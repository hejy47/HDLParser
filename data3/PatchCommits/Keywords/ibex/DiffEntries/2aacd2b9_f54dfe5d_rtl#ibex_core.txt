2aacd2b98be61fa4c9b633d1ddba9d1d5c894faf
[Priv modes] Add support for U-Mode
diff --git a/rtl/ibex_core.sv b/rtl/ibex_core.sv
index 007ea813..303f5338 100644
--- a/rtl/ibex_core.sv
+++ b/rtl/ibex_core.sv
@@ -196,7 +196,10 @@ module ibex_core #(
   logic        csr_mtvec_init;
   logic [31:0] csr_mtvec;
   logic [31:0] csr_mtval;
-  priv_lvl_e   priv_mode;
+  logic        csr_mstatus_tw;
+  priv_lvl_e   priv_mode_id;
+  priv_lvl_e   priv_mode_if;
+  priv_lvl_e   priv_mode_lsu;
 
   // debug mode and dcsr configuration
   logic        debug_mode;
@@ -412,6 +415,8 @@ module ibex_core #(
       .csr_restore_mret_id_o        ( csr_restore_mret_id    ), // restore mstatus upon MRET
       .csr_save_cause_o             ( csr_save_cause         ),
       .csr_mtval_o                  ( csr_mtval              ),
+      .priv_mode_i                  ( priv_mode_id           ),
+      .csr_mstatus_tw_i             ( csr_mstatus_tw         ),
       .illegal_csr_insn_i           ( illegal_csr_insn_id    ),
 
       // LSU
@@ -572,7 +577,9 @@ module ibex_core #(
 
       // Hart ID from outside
       .hart_id_i               ( hart_id_i              ),
-      .priv_mode_o             ( priv_mode              ),
+      .priv_mode_id_o          ( priv_mode_id           ),
+      .priv_mode_if_o          ( priv_mode_if           ),
+      .priv_mode_lsu_o         ( priv_mode_lsu          ),
 
       // mtvec
       .csr_mtvec_o             ( csr_mtvec              ),
@@ -597,6 +604,7 @@ module ibex_core #(
       .csr_meip_o              ( csr_meip               ),
       .csr_mfip_o              ( csr_mfip               ),
       .csr_mstatus_mie_o       ( csr_mstatus_mie        ),
+      .csr_mstatus_tw_o        ( csr_mstatus_tw         ),
       .csr_mepc_o              ( csr_mepc               ),
 
       // PMP
@@ -640,11 +648,14 @@ module ibex_core #(
   if (PMPEnable) begin : g_pmp
     logic [33:0] pmp_req_addr [PMP_NUM_CHAN];
     pmp_req_e    pmp_req_type [PMP_NUM_CHAN];
+    priv_lvl_e   pmp_priv_lvl [PMP_NUM_CHAN];
 
     assign pmp_req_addr[PMP_I] = {2'b00,instr_addr_o[31:0]};
     assign pmp_req_type[PMP_I] = PMP_ACC_EXEC;
+    assign pmp_priv_lvl[PMP_I] = priv_mode_if;
     assign pmp_req_addr[PMP_D] = {2'b00,data_addr_o[31:0]};
     assign pmp_req_type[PMP_D] = data_we_o ? PMP_ACC_WRITE : PMP_ACC_READ;
+    assign pmp_priv_lvl[PMP_D] = priv_mode_lsu;
 
     ibex_pmp #(
         .PMPGranularity        ( PMPGranularity ),
@@ -656,13 +667,18 @@ module ibex_core #(
         // Interface to CSRs
         .csr_pmp_cfg_i         ( csr_pmp_cfg    ),
         .csr_pmp_addr_i        ( csr_pmp_addr   ),
-        .priv_mode_i           ( priv_mode      ),
+        .priv_mode_i           ( pmp_priv_lvl   ),
         // Access checking channels
         .pmp_req_addr_i        ( pmp_req_addr   ),
         .pmp_req_type_i        ( pmp_req_type   ),
         .pmp_req_err_o         ( pmp_req_err    )
     );
   end else begin : g_no_pmp
+    // Unused signal tieoff
+    priv_lvl_e unused_priv_lvl_if, unused_priv_lvl_ls;
+    assign unused_priv_lvl_if = priv_mode_if;
+    assign unused_priv_lvl_ls = priv_mode_lsu;
+    // Output tieoff
     assign pmp_req_err[PMP_I] = 1'b0;
     assign pmp_req_err[PMP_D] = 1'b0;
   end
@@ -675,7 +691,7 @@ module ibex_core #(
       rvfi_intr              <= '0;
       rvfi_order             <= '0;
       rvfi_insn              <= '0;
-      rvfi_mode              <= '0;
+      rvfi_mode              <= {PRIV_LVL_M};
       rvfi_rs1_addr          <= '0;
       rvfi_rs2_addr          <= '0;
       rvfi_pc_rdata          <= '0;
@@ -696,7 +712,7 @@ module ibex_core #(
       rvfi_intr              <= rvfi_intr_d;
       rvfi_order             <= rvfi_order + 64'(rvfi_valid);
       rvfi_insn              <= rvfi_insn_id;
-      rvfi_mode              <= PRIV_LVL_M; // TODO: Update for user mode support
+      rvfi_mode              <= {priv_mode_id};
       rvfi_rs1_addr          <= rvfi_rs1_addr_id;
       rvfi_rs2_addr          <= rvfi_rs2_addr_id;
       rvfi_pc_rdata          <= pc_id;