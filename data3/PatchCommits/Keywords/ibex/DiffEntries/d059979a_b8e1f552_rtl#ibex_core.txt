d059979af65601363ca92160f53c1ba157c2bbbd
RVFI based on core state (#151, fix #147)
diff --git a/rtl/ibex_core.sv b/rtl/ibex_core.sv
index 01399190..f1c77ce7 100644
--- a/rtl/ibex_core.sv
+++ b/rtl/ibex_core.sv
@@ -180,8 +180,6 @@ module ibex_core #(
   logic        id_in_ready;
   logic        ex_valid;
 
-  logic        if_id_pipe_reg_we;
-
   logic        lsu_data_valid;
 
   // Signals between instruction core interface and pipe (if and id stages)
@@ -216,13 +214,11 @@ module ibex_core #(
   logic        perf_store;
 
   // for RVFI
-  logic        id_out_valid, unused_id_out_valid;       // ID stage has valid output data
   logic        illegal_insn_id, unused_illegal_insn_id; // ID stage sees an illegal instruction
 
   // RISC-V Formal Interface signals
 `ifdef RVFI
-  logic [31:0] rvfi_insn_opcode;
-  logic        rvfi_valid_int;
+  logic [31:0] rvfi_insn_id;
   logic [4:0]  rvfi_rs1_addr_id;
   logic [4:0]  rvfi_rs2_addr_id;
   logic [31:0] rvfi_rs1_data_d;
@@ -240,11 +236,6 @@ module ibex_core #(
   logic        rvfi_rd_we_id;
   logic        rvfi_insn_new_d;
   logic        rvfi_insn_new_q;
-  logic        rvfi_insn_clear_d;
-  logic        rvfi_insn_clear_q;
-  logic        rvfi_changed_insn;
-  logic        rvfi_changed_pc;
-  logic [31:0] rvfi_pc_id_q;
   logic [3:0]  rvfi_mem_mask_int;
   logic [31:0] rvfi_mem_rdata_d;
   logic [31:0] rvfi_mem_rdata_q;
@@ -336,7 +327,6 @@ module ibex_core #(
 
       // pipeline stalls
       .id_in_ready_i            ( id_in_ready            ),
-      .if_id_pipe_reg_we_o      ( if_id_pipe_reg_we      ),
 
       .if_busy_o                ( if_busy                ),
       .perf_imiss_o             ( perf_imiss             )
@@ -389,8 +379,6 @@ module ibex_core #(
       .ex_valid_i                   ( ex_valid               ),
       .lsu_valid_i                  ( lsu_data_valid         ),
 
-      .id_out_valid_o               ( id_out_valid           ),
-
       .alu_operator_ex_o            ( alu_operator_ex        ),
       .alu_operand_a_ex_o           ( alu_operand_a_ex       ),
       .alu_operand_b_ex_o           ( alu_operand_b_ex       ),
@@ -465,7 +453,6 @@ module ibex_core #(
   );
 
   // for RVFI only
-  assign unused_id_out_valid    = id_out_valid;
   assign unused_illegal_insn_id = illegal_insn_id;
 
   ibex_ex_block #(
@@ -611,33 +598,55 @@ module ibex_core #(
   );
 
 `ifdef RVFI
-  always_ff @(posedge clk) begin
-    rvfi_halt      <= '0;
-    rvfi_trap      <= '0;
-    rvfi_intr      <= irq_ack_o;
-    rvfi_order     <= rst_ni ? rvfi_order + rvfi_valid : '0;
-    rvfi_insn      <= rvfi_insn_opcode;
-    rvfi_mode      <= PRIV_LVL_M;
-    rvfi_rs1_addr  <= rvfi_rs1_addr_id;
-    rvfi_rs2_addr  <= rvfi_rs2_addr_id;
-    rvfi_pc_rdata  <= pc_id;
-    rvfi_mem_rmask <= rvfi_mem_mask_int;
-    rvfi_mem_wmask <= data_we_o ? rvfi_mem_mask_int : 4'b0000;
-    rvfi_valid     <= rvfi_valid_int;
-    rvfi_rs1_rdata <= rvfi_rs1_data_d;
-    rvfi_rs2_rdata <= rvfi_rs2_data_d;
+  always_ff @(posedge clk or negedge rst_ni) begin
+    if (!rst_ni) begin
+      rvfi_halt      <= '0;
+      rvfi_trap      <= '0;
+      rvfi_intr      <= '0;
+      rvfi_order     <= '0;
+      rvfi_insn      <= '0;
+      rvfi_mode      <= '0;
+      rvfi_rs1_addr  <= '0;
+      rvfi_rs2_addr  <= '0;
+      rvfi_pc_rdata  <= '0;
+      rvfi_pc_wdata  <= '0;
+      rvfi_mem_rmask <= '0;
+      rvfi_mem_wmask <= '0;
+      rvfi_valid     <= '0;
+      rvfi_rs1_rdata <= '0;
+      rvfi_rs2_rdata <= '0;
+      rvfi_rd_wdata  <= '0;
+      rvfi_rd_addr   <= '0;
+      rvfi_mem_rdata <= '0;
+      rvfi_mem_wdata <= '0;
+      rvfi_mem_addr  <= '0;
+    end else begin
+      rvfi_halt      <= '0;
+      rvfi_trap      <= illegal_insn_id;
+      rvfi_intr      <= irq_ack_o;
+      rvfi_order     <= rvfi_order + rvfi_valid;
+      rvfi_insn      <= rvfi_insn_id;
+      rvfi_mode      <= PRIV_LVL_M; // TODO: Update for user mode support
+      rvfi_rs1_addr  <= rvfi_rs1_addr_id;
+      rvfi_rs2_addr  <= rvfi_rs2_addr_id;
+      rvfi_pc_rdata  <= pc_id;
+      rvfi_pc_wdata  <= pc_if;
+      rvfi_mem_rmask <= rvfi_mem_mask_int;
+      rvfi_mem_wmask <= data_we_o ? rvfi_mem_mask_int : 4'b0000;
+      rvfi_valid     <= instr_ret;
+      rvfi_rs1_rdata <= rvfi_rs1_data_d;
+      rvfi_rs2_rdata <= rvfi_rs2_data_d;
+      rvfi_rd_wdata  <= rvfi_rd_wdata_d;
+      rvfi_rd_addr   <= rvfi_rd_addr_d;
+      rvfi_mem_rdata <= rvfi_mem_rdata_d;
+      rvfi_mem_wdata <= rvfi_mem_wdata_d;
+      rvfi_mem_addr  <= rvfi_mem_addr_d;
+    end
   end
 
-  assign rvfi_pc_wdata  = pc_id;
-  assign rvfi_rd_wdata  = rvfi_rd_wdata_q;
-  assign rvfi_rd_addr   = rvfi_rd_addr_q;
-  assign rvfi_mem_rdata = rvfi_mem_rdata_q;
-  assign rvfi_mem_wdata = rvfi_mem_wdata_q;
-  assign rvfi_mem_addr  = rvfi_mem_addr_q;
-
   // Keep the mem data stable for each instruction cycle
   always_comb begin
-    if (rvfi_insn_new_d) begin
+    if (rvfi_insn_new_d && lsu_data_valid) begin
       rvfi_mem_addr_d  = alu_adder_result_ex;
       rvfi_mem_rdata_d = regfile_wdata_lsu;
       rvfi_mem_wdata_d = data_wdata_ex;
@@ -647,10 +656,16 @@ module ibex_core #(
       rvfi_mem_wdata_d = rvfi_mem_wdata_q;
     end
   end
-  always_ff @(posedge clk) begin
-    rvfi_mem_addr_q  <= rvfi_mem_addr_d;
-    rvfi_mem_rdata_q <= rvfi_mem_rdata_d;
-    rvfi_mem_wdata_q <= rvfi_mem_wdata_d;
+  always_ff @(posedge clk or negedge rst_ni) begin
+    if (!rst_ni) begin
+      rvfi_mem_addr_q  <= '0;
+      rvfi_mem_rdata_q <= '0;
+      rvfi_mem_wdata_q <= '0;
+    end else begin
+      rvfi_mem_addr_q  <= rvfi_mem_addr_d;
+      rvfi_mem_rdata_q <= rvfi_mem_rdata_d;
+      rvfi_mem_wdata_q <= rvfi_mem_wdata_d;
+    end
   end
   // Byte enable based on data type
   always_comb begin
@@ -662,19 +677,17 @@ module ibex_core #(
     endcase
   end
 
-  assign rvfi_valid_int = id_out_valid && if_id_pipe_reg_we && !illegal_c_insn_id;
-
   always_comb begin
     if (instr_is_compressed_id) begin
-      rvfi_insn_opcode = {16'b0, instr_rdata_c_id};
+      rvfi_insn_id = {16'b0, instr_rdata_c_id};
     end else begin
-      rvfi_insn_opcode = instr_rdata_id;
+      rvfi_insn_id = instr_rdata_id;
     end
   end
 
   // Source register data are kept stable for each instruction cycle
   always_comb begin
-    if (rvfi_insn_new_d) begin
+    if (instr_new_id) begin
       rvfi_rs1_data_d = rvfi_rs1_data_id;
       rvfi_rs2_data_d = rvfi_rs2_data_id;
     end else begin
@@ -682,9 +695,14 @@ module ibex_core #(
       rvfi_rs2_data_d = rvfi_rs2_data_q;
     end
   end
-  always_ff @(posedge clk) begin
-    rvfi_rs1_data_q <= rvfi_rs1_data_d;
-    rvfi_rs2_data_q <= rvfi_rs2_data_d;
+  always_ff @(posedge clk or negedge rst_ni) begin
+    if (!rst_ni) begin
+      rvfi_rs1_data_q <= '0;
+      rvfi_rs2_data_q <= '0;
+    end else begin
+      rvfi_rs1_data_q <= rvfi_rs1_data_d;
+      rvfi_rs2_data_q <= rvfi_rs2_data_d;
+    end
   end
 
   // RD write register is refreshed only once per cycle and
@@ -694,7 +712,6 @@ module ibex_core #(
       if (!rvfi_rd_we_id) begin
         rvfi_rd_addr_d    = '0;
         rvfi_rd_wdata_d   = '0;
-        rvfi_insn_clear_d = 1'b0;
       end else begin
         rvfi_rd_addr_d = rvfi_rd_addr_id;
         if (!rvfi_rd_addr_id) begin
@@ -702,43 +719,41 @@ module ibex_core #(
         end else begin
           rvfi_rd_wdata_d = rvfi_rd_wdata_id;
         end
-        rvfi_insn_clear_d = 1'b1;
       end
     end else begin
       rvfi_rd_addr_d    = rvfi_rd_addr_q;
       rvfi_rd_wdata_d   = rvfi_rd_wdata_q;
-      rvfi_insn_clear_d = 1'b0;
     end
   end
-  always_ff @(posedge clk) begin
-    rvfi_insn_clear_q <= rvfi_insn_clear_d;
-    rvfi_rd_addr_q    <= rvfi_rd_addr_d;
-    rvfi_rd_wdata_q   <= rvfi_rd_wdata_d;
+  always_ff @(posedge clk or negedge rst_ni) begin
+    if (!rst_ni) begin
+      rvfi_rd_addr_q    <= '0;
+      rvfi_rd_wdata_q   <= '0;
+    end else begin
+      rvfi_rd_addr_q    <= rvfi_rd_addr_d;
+      rvfi_rd_wdata_q   <= rvfi_rd_wdata_d;
+    end
   end
 
-  // New instruction signalling based on changes of
-  // instruction data, program counter and valid signal
   always_comb begin
-    if (rvfi_changed_insn || rvfi_changed_pc || rvfi_valid ) begin
+    if (instr_new_id) begin
       rvfi_insn_new_d = 1'b1;
-    end else if (rvfi_insn_clear_q) begin
-      rvfi_insn_new_d = 1'b0;
     end else begin
       rvfi_insn_new_d = rvfi_insn_new_q;
     end
   end
-  always_ff @(posedge clk) begin
-    rvfi_insn_new_q <= rvfi_insn_new_d;
+  always_ff @(posedge clk or negedge rst_ni) begin
+    if (!rst_ni) begin
+      rvfi_insn_new_q <= 1'b0;
+    end else begin
+      if (instr_ret) begin
+        rvfi_insn_new_q <= 1'b0;
+      end else begin
+        rvfi_insn_new_q <= rvfi_insn_new_d;
+      end
+    end
   end
 
-  // Change in instruction code
-  assign rvfi_changed_insn = rvfi_insn != rvfi_insn_opcode;
-
-  // Change in program counter
-  always_ff @(posedge clk) begin
-    rvfi_pc_id_q <= pc_id;
-  end
-  assign rvfi_changed_pc = rvfi_pc_id_q != pc_id;
 `endif
 
 endmodule