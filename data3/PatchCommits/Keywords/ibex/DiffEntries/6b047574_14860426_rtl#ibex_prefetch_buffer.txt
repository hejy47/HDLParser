6b0475744dba1991664be9c780a5c727586c8a9d
Code cleanup
diff --git a/rtl/ibex_prefetch_buffer.sv b/rtl/ibex_prefetch_buffer.sv
index 75e04af4..d757d48b 100644
--- a/rtl/ibex_prefetch_buffer.sv
+++ b/rtl/ibex_prefetch_buffer.sv
@@ -14,42 +14,44 @@
 //                 long critical paths to the instruction cache               //
 //                                                                            //
 ////////////////////////////////////////////////////////////////////////////////
-
 /**
  * Prefetcher Buffer for 32 bit memory interface
  *
  * Prefetch Buffer that caches instructions. This cuts overly long critical
  * paths to the instruction cache.
  */
-module ibex_prefetch_buffer
-(
-  input  logic        clk,
-  input  logic        rst_n,
+module ibex_prefetch_buffer (
+    input  logic        clk,
+    input  logic        rst_n,
 
-  input  logic        req_i,
+    input  logic        req_i,
 
-  input  logic        branch_i,
-  input  logic [31:0] addr_i,
+    input  logic        branch_i,
+    input  logic [31:0] addr_i,
 
 
-  input  logic        ready_i,
-  output logic        valid_o,
-  output logic [31:0] rdata_o,
-  output logic [31:0] addr_o,
+    input  logic        ready_i,
+    output logic        valid_o,
+    output logic [31:0] rdata_o,
+    output logic [31:0] addr_o,
 
 
-  // goes to instruction memory / instruction cache
-  output logic        instr_req_o,
-  input  logic        instr_gnt_i,
-  output logic [31:0] instr_addr_o,
-  input  logic [31:0] instr_rdata_i,
-  input  logic        instr_rvalid_i,
+    // goes to instruction memory / instruction cache
+    output logic        instr_req_o,
+    input  logic        instr_gnt_i,
+    output logic [31:0] instr_addr_o,
+    input  logic [31:0] instr_rdata_i,
+    input  logic        instr_rvalid_i,
 
-  // Prefetch Buffer Status
-  output logic        busy_o
+    // Prefetch Buffer Status
+    output logic        busy_o
 );
 
-  enum logic [1:0] {IDLE, WAIT_GNT, WAIT_RVALID, WAIT_ABORTED } CS, NS;
+  typedef enum logic [1:0] {
+    IDLE, WAIT_GNT, WAIT_RVALID, WAIT_ABORTED
+  } prefetch_fsm_e;
+
+  prefetch_fsm_e CS, NS;
 
   logic [31:0] instr_addr_q, fetch_addr;
   logic        addr_valid;
@@ -58,39 +60,35 @@ module ibex_prefetch_buffer
   logic        fifo_ready;
   logic        fifo_clear;
 
-  logic        valid_stored;
-
-
   //////////////////////////////////////////////////////////////////////////////
   // prefetch buffer status
   //////////////////////////////////////////////////////////////////////////////
 
-  assign busy_o = (CS != IDLE) || instr_req_o;
+  assign busy_o = (CS != IDLE) | instr_req_o;
 
   //////////////////////////////////////////////////////////////////////////////
   // fetch fifo
   // consumes addresses and rdata
   //////////////////////////////////////////////////////////////////////////////
 
-  ibex_fetch_fifo fifo_i
-  (
-    .clk                   ( clk               ),
-    .rst_n                 ( rst_n             ),
+  ibex_fetch_fifo fifo_i (
+      .clk                   ( clk               ),
+      .rst_n                 ( rst_n             ),
 
-    .clear_i               ( fifo_clear        ),
+      .clear_i               ( fifo_clear        ),
 
-    .in_addr_i             ( instr_addr_q      ),
-    .in_rdata_i            ( instr_rdata_i     ),
-    .in_valid_i            ( fifo_valid        ),
-    .in_ready_o            ( fifo_ready        ),
+      .in_addr_i             ( instr_addr_q      ),
+      .in_rdata_i            ( instr_rdata_i     ),
+      .in_valid_i            ( fifo_valid        ),
+      .in_ready_o            ( fifo_ready        ),
 
 
-    .out_valid_o           ( valid_o           ),
-    .out_ready_i           ( ready_i           ),
-    .out_rdata_o           ( rdata_o           ),
-    .out_addr_o            ( addr_o            ),
+      .out_valid_o           ( valid_o           ),
+      .out_ready_i           ( ready_i           ),
+      .out_rdata_o           ( rdata_o           ),
+      .out_addr_o            ( addr_o            ),
 
-    .out_valid_stored_o    ( valid_stored      )
+      .out_valid_stored_o    (                   )
   );
 
 
@@ -99,19 +97,14 @@ module ibex_prefetch_buffer
   //////////////////////////////////////////////////////////////////////////////
 
   assign fetch_addr = {instr_addr_q[31:2], 2'b00} + 32'd4;
-
-  always_comb
-  begin
-    fifo_clear = branch_i;
-  end
+  assign fifo_clear = branch_i;
 
   //////////////////////////////////////////////////////////////////////////////
   // instruction fetch FSM
   // deals with instruction memory / instruction cache
   //////////////////////////////////////////////////////////////////////////////
 
-  always_comb
-  begin
+  always_comb begin
     instr_req_o   = 1'b0;
     instr_addr_o  = fetch_addr;
     fifo_valid    = 1'b0;
@@ -120,30 +113,26 @@ module ibex_prefetch_buffer
 
     unique case(CS)
       // default state, not waiting for requested data
-      IDLE:
-      begin
+      IDLE: begin
         instr_addr_o = fetch_addr;
         instr_req_o  = 1'b0;
 
-        if (branch_i)
+        if (branch_i) begin
           instr_addr_o = addr_i;
+        end
 
-        if (req_i & (fifo_ready | branch_i )) begin
+        if (req_i && (fifo_ready || branch_i )) begin
           instr_req_o = 1'b1;
           addr_valid  = 1'b1;
 
 
-          if(instr_gnt_i) //~>  granted request
-            NS = WAIT_RVALID;
-          else begin //~> got a request but no grant
-            NS = WAIT_GNT;
-          end
+          //~> granted request or not
+          NS = instr_gnt_i ? WAIT_RVALID : WAIT_GNT;
         end
       end // case: IDLE
 
       // we sent a request but did not yet get a grant
-      WAIT_GNT:
-      begin
+      WAIT_GNT: begin
         instr_addr_o = instr_addr_q;
         instr_req_o  = 1'b1;
 
@@ -152,21 +141,19 @@ module ibex_prefetch_buffer
           addr_valid   = 1'b1;
         end
 
-        if(instr_gnt_i)
-          NS = WAIT_RVALID;
-        else
-          NS = WAIT_GNT;
+        //~> granted request or not
+        NS = instr_gnt_i ? WAIT_RVALID : WAIT_GNT;
       end // case: WAIT_GNT
 
       // we wait for rvalid, after that we are ready to serve a new request
       WAIT_RVALID: begin
         instr_addr_o = fetch_addr;
 
-        if (branch_i)
+        if (branch_i) begin
           instr_addr_o  = addr_i;
+        end
 
-
-        if (req_i & (fifo_ready | branch_i)) begin
+        if (req_i && (fifo_ready || branch_i)) begin
           // prepare for next request
 
           if (instr_rvalid_i) begin
@@ -174,12 +161,8 @@ module ibex_prefetch_buffer
             fifo_valid  = 1'b1;
             addr_valid  = 1'b1;
 
-
-            if (instr_gnt_i) begin
-              NS = WAIT_RVALID;
-            end else begin
-              NS = WAIT_GNT;
-            end
+            //~> granted request or not
+            NS = instr_gnt_i ? WAIT_RVALID : WAIT_GNT;
           end else begin
             // we are requested to abort our current request
             // we didn't get an rvalid yet, so wait for it
@@ -213,18 +196,14 @@ module ibex_prefetch_buffer
           instr_req_o  = 1'b1;
           // no need to send address, already done in WAIT_RVALID
 
-          if (instr_gnt_i) begin
-            NS = WAIT_RVALID;
-          end else begin
-            NS = WAIT_GNT;
-          end
+          //~> granted request or not
+          NS = instr_gnt_i ? WAIT_RVALID : WAIT_GNT;
         end
       end
 
-      default:
-      begin
-        NS          = IDLE;
-        instr_req_o = 1'b0;
+      default: begin
+        // NS          = IDLE;      // unreachable, removing dead code
+        // instr_req_o = 1'b0;      // unreachable, removing dead code
       end
     endcase
   end
@@ -233,15 +212,11 @@ module ibex_prefetch_buffer
   // registers
   //////////////////////////////////////////////////////////////////////////////
 
-  always_ff @(posedge clk, negedge rst_n)
-  begin
-    if(rst_n == 1'b0)
-    begin
+  always_ff @(posedge clk, negedge rst_n) begin
+    if (!rst_n) begin
       CS              <= IDLE;
       instr_addr_q    <= '0;
-    end
-    else
-    begin
+    end else begin
       CS              <= NS;
 
       if (addr_valid) begin