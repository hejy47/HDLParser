f7c2b6427045701706308f3a07b4848d3dc4e5b4
decoupled irq, debug with instr mem
diff --git a/zeroriscy_exc_controller.sv b/zeroriscy_exc_controller.sv
index d2bb5b28..8e62e9aa 100644
--- a/zeroriscy_exc_controller.sv
+++ b/zeroriscy_exc_controller.sv
@@ -37,6 +37,8 @@ module zeroriscy_exc_controller
   output logic        ext_req_o,
   input  logic        ack_i,
 
+  input  logic        ctr_decoding_i,
+
   output logic        trap_o,
 
   // to IF stage
@@ -61,11 +63,12 @@ module zeroriscy_exc_controller
 );
 
 
-  enum logic [1:0] { IDLE, WAIT_CONTROLLER_INT, WAIT_CONTROLLER_EXT } exc_ctrl_cs, exc_ctrl_ns;
+  enum logic [1:0] { IDLE, WAIT_CONTROLLER_INT, WAIT_CONTROLLER_EXT, WAIT_CONTROLLER_DBG } exc_ctrl_cs, exc_ctrl_ns;
 
   logic req_int, int_req_int, ext_req_int;
   logic [1:0] pc_mux_int, pc_mux_int_q;
   logic [5:0] cause_int, cause_int_q;
+  logic trap_int;
 
   // a trap towards the debug unit is generated when one of the
   // following conditions are true:
@@ -74,19 +77,19 @@ module zeroriscy_exc_controller
   // - illegal instruction exception and IIE bit is set
   // - IRQ and INTE bit is set and no exception is currently running
   // - Debuger requests halt
-  assign trap_o =       (dbg_settings_i[DBG_SETS_SSTE])
+  assign trap_int =   (dbg_settings_i[DBG_SETS_SSTE])
                       | (ecall_insn_i            & dbg_settings_i[DBG_SETS_ECALL])
                       | (ebrk_insn_i             & dbg_settings_i[DBG_SETS_EBRK])
                       | (illegal_insn_i          & dbg_settings_i[DBG_SETS_EILL])
                       | (irq_enable_i & irq_i & dbg_settings_i[DBG_SETS_IRQ]);
 
-// request for exception/interrupt
-assign int_req_int =   ecall_insn_i
-                   | illegal_insn_i;
+  // request for exception/interrupt
+  assign int_req_int =   ecall_insn_i
+                     | illegal_insn_i;
 
-assign ext_req_int = irq_enable_i & irq_i;
+  assign ext_req_int = irq_enable_i & irq_i;
 
-assign req_int = int_req_int | ext_req_int;
+  assign req_int = int_req_int | ext_req_int;
 
   // Exception cause and ISR address selection
   always_comb
@@ -131,7 +134,7 @@ assign req_int = int_req_int | ext_req_int;
     if (rst_n == 1'b0) begin
       cause_int_q  <= '0;
       pc_mux_int_q <= '0;
-    end else if (exc_ctrl_cs == IDLE && req_int) begin
+    end else if (exc_ctrl_cs == IDLE && (ctr_decoding_i | ext_req_o)) begin
       // save cause and ISR when new irq request is first sent to controller
       cause_int_q  <= cause_int;
       pc_mux_int_q <= pc_mux_int;
@@ -140,8 +143,10 @@ assign req_int = int_req_int | ext_req_int;
 
 
   // Exception cause and mux output (with bypass)
-  assign cause_o      = ((exc_ctrl_cs == IDLE && req_int) || ebrk_insn_i) ? cause_int  : cause_int_q;
-  assign pc_mux_o     = (exc_ctrl_cs == IDLE && req_int) ? pc_mux_int : pc_mux_int_q;
+//  assign cause_o      = ((exc_ctrl_cs == IDLE && req_int) || ebrk_insn_i) ? cause_int  : cause_int_q;
+//  assign pc_mux_o     = (exc_ctrl_cs == IDLE && req_int) ? pc_mux_int : pc_mux_int_q;
+  assign cause_o      = cause_int_q;
+  assign pc_mux_o     = pc_mux_int_q;
 
   // Exception controller FSM
   always_comb
@@ -150,35 +155,30 @@ assign req_int = int_req_int | ext_req_int;
     int_req_o    = 1'b0;
     ext_req_o    = 1'b0;
     save_cause_o = 1'b0;
+    trap_o       = 1'b0;
 
     unique case (exc_ctrl_cs)
       IDLE:
       begin
         int_req_o = int_req_int;
         ext_req_o = ext_req_int;
-        if (int_req_int) begin
-          exc_ctrl_ns = WAIT_CONTROLLER_INT;
-
-          if (ack_i) begin
-            save_cause_o = 1'b1;
-            exc_ctrl_ns  = IDLE;
-          end
-        end else begin
-          if (ext_req_o) begin
-            exc_ctrl_ns = WAIT_CONTROLLER_EXT;
-
-            if (ack_i) begin
-              save_cause_o = 1'b1;
-              exc_ctrl_ns  = IDLE;
-            end
-          end
-        end
+        trap_o    = dbg_settings_i[DBG_SETS_SSTE];
+        unique case(1'b1)
+          int_req_int & ctr_decoding_i:
+            exc_ctrl_ns = WAIT_CONTROLLER_INT;
+          ebrk_insn_i & ctr_decoding_i:
+            exc_ctrl_ns = WAIT_CONTROLLER_DBG;
+          default:
+            if (ext_req_o)
+              exc_ctrl_ns = WAIT_CONTROLLER_EXT;
+        endcase
       end
 
       WAIT_CONTROLLER_INT:
       begin
         int_req_o = 1'b1;
         ext_req_o = 1'b0;
+        trap_o    = trap_int;
         if (ack_i) begin
           save_cause_o = 1'b1;
           exc_ctrl_ns  = IDLE;
@@ -189,12 +189,19 @@ assign req_int = int_req_int | ext_req_int;
       begin
         int_req_o = 1'b0;
         ext_req_o = 1'b1;
+        trap_o    = trap_int;
         if (ack_i) begin
           save_cause_o = 1'b1;
           exc_ctrl_ns  = IDLE;
         end
       end
 
+      WAIT_CONTROLLER_DBG:
+      begin
+        exc_ctrl_ns  = IDLE;
+        trap_o       = trap_int;
+      end
+
       default:
       begin
         exc_ctrl_ns = IDLE;