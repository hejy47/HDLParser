b1daf9e44efdf8fc382493b63065c5816fdb7938
Update lowrisc_ip to lowRISC/opentitan@c277e3a8
diff --git a/vendor/lowrisc_ip/ip/prim/rtl/prim_esc_receiver.sv b/vendor/lowrisc_ip/ip/prim/rtl/prim_esc_receiver.sv
index fe146113..2ffe702c 100644
--- a/vendor/lowrisc_ip/ip/prim/rtl/prim_esc_receiver.sv
+++ b/vendor/lowrisc_ip/ip/prim/rtl/prim_esc_receiver.sv
@@ -57,17 +57,27 @@ module prim_esc_receiver
 
   typedef enum logic [2:0] {Idle, Check, PingResp, EscResp, SigInt} state_e;
   state_e state_d, state_q;
-  logic resp_pd, resp_pq, resp_nd, resp_nq;
+  logic resp_p, resp_pd, resp_pq;
+  logic resp_n, resp_nd, resp_nq;
+
+  // This prevents further tool optimizations of the differential signal.
+  prim_buf u_prim_buf_p (
+    .in_i(resp_p),
+    .out_o(resp_pd)
+  );
+  prim_buf u_prim_buf_n (
+    .in_i(resp_n),
+    .out_o(resp_nd)
+  );
 
   assign esc_rx_o.resp_p = resp_pq;
   assign esc_rx_o.resp_n = resp_nq;
 
-
   always_comb begin : p_fsm
     // default
     state_d  = state_q;
-    resp_pd  = 1'b0;
-    resp_nd  = 1'b1;
+    resp_p   = 1'b0;
+    resp_n   = 1'b1;
     esc_en_o = 1'b0;
 
     unique case (state_q)
@@ -75,8 +85,8 @@ module prim_esc_receiver
       Idle: begin
         if (esc_level) begin
           state_d = Check;
-          resp_pd = 1'b1;
-          resp_nd = 1'b0;
+          resp_p  = 1'b1;
+          resp_n  = 1'b0;
         end
       end
       // we decide here whether this is only a ping request or
@@ -92,8 +102,8 @@ module prim_esc_receiver
       // we got an escalation signal (pings cannot occur back to back)
       PingResp: begin
         state_d = Idle;
-        resp_pd = 1'b1;
-        resp_nd = 1'b0;
+        resp_p  = 1'b1;
+        resp_n  = 1'b0;
         if (esc_level) begin
           state_d  = EscResp;
           esc_en_o = 1'b1;
@@ -105,8 +115,8 @@ module prim_esc_receiver
         state_d = Idle;
         if (esc_level) begin
           state_d  = EscResp;
-          resp_pd  = ~resp_pq;
-          resp_nd  = resp_pq;
+          resp_p   = ~resp_pq;
+          resp_n   = resp_pq;
           esc_en_o = 1'b1;
         end
       end
@@ -119,8 +129,8 @@ module prim_esc_receiver
         state_d = Idle;
         if (sigint_detected) begin
           state_d = SigInt;
-          resp_pd = ~resp_pq;
-          resp_nd = ~resp_pq;
+          resp_p  = ~resp_pq;
+          resp_n  = ~resp_pq;
         end
       end
       default : state_d = Idle;
@@ -129,8 +139,8 @@ module prim_esc_receiver
     // bail out if a signal integrity issue has been detected
     if (sigint_detected && (state_q != SigInt)) begin
       state_d  = SigInt;
-      resp_pd  = 1'b0;
-      resp_nd  = 1'b0;
+      resp_p   = 1'b0;
+      resp_n   = 1'b0;
     end
   end
 