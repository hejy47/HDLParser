23e0f3f05410596a3c31c13c2c27505c5971f4ee
[i2c, rtl] Fixes to Lint Errors and Changes to Clock Stretching by Target
diff --git a/hw/ip/i2c/rtl/i2c_fsm.sv b/hw/ip/i2c/rtl/i2c_fsm.sv
index 64a947b5e..4daf75aba 100644
--- a/hw/ip/i2c/rtl/i2c_fsm.sv
+++ b/hw/ip/i2c/rtl/i2c_fsm.sv
@@ -55,18 +55,20 @@ module i2c_fsm (
   input [15:0] t_buf_i,    // bus free time between STOP and START in clock units
   input [30:0] stretch_timeout_i,  // max time target may stretch the clock
   input        timeout_enable_i,   // assert if target stretches clock past max
-  input        stretch_en_addr_i,  // enable target stretching clock after address matching
-  input        stretch_en_tx_i,    // enable target stretching clock after transmit transaction
-  input        stretch_en_acq_i,   // enable target stretching clock after acquire transaction
-  input        stretch_stop_i,     // stop stretching clock and resume normal operation
   input [31:0] host_timeout_i,     // max time target waits for host to pull clock down
 
+  input        stretch_en_addr_tx_i,  // target stretches clock after address matching for transmit
+  input        stretch_en_addr_acq_i, // target stretches clock after address matching for acquire
+  input        stretch_stop_tx_i,     // stop stretching clock for transmit, resume normal operation
+  input        stretch_stop_acq_i,    // stop stretching clock for acquire, resume normal operation
+
   input logic [6:0] target_address0_i,
   input logic [6:0] target_mask0_i,
   input logic [6:0] target_address1_i,
   input logic [6:0] target_mask1_i,
 
-  output logic stretch_stop_clr_o,       // hardware to deassert stretch_stop bit
+  output logic stretch_stop_tx_clr_o,    // hardware to deassert stretch_stop_tx bit
+  output logic stretch_stop_acq_clr_o,   // hardware to deassert stretch_stop_acq bit
 
   output logic event_nak_o,              // target didn't Ack when expected
   output logic event_scl_interference_o, // other device forcing SCL low
@@ -117,8 +119,10 @@ module i2c_fsm (
   logic [7:0]  input_byte;    // register for reads from host
   logic        input_byte_clr;// clear input_byte contents
   logic [31:0] scl_high_cnt;  // counter for continuously released scl_i
-  logic        addr_stop;     // indicates stretch_stop and stretch_en_addr are both asserted
-  logic        stretch_stop_clr;
+  logic        addr_stop_tx;  // indicates stretch_stop_tx and stretch_en_addr_tx are asserted
+  logic        addr_stop_acq; // indicates stretch_stop_acq and stretch_en_addr_acq are asserted
+  logic        stretch_stop_tx_clr;
+  logic        stretch_stop_acq_clr;
 
   // Target bit counter variables
   logic [3:0]  bit_idx;       // bit index including ack/nack
@@ -323,16 +327,27 @@ module i2c_fsm (
     end
   end
 
-  // Deasserting stretch_stop bit after the first target address match
-  always_ff @ (posedge clk_i or negedge rst_ni) begin : stretch_addr_sp
+  // Deasserting stretch_stop_tx bit after the first target address match for transmit
+  always_ff @ (posedge clk_i or negedge rst_ni) begin : stretch_addr_sp_tx
+    if (!rst_ni) begin
+      stretch_stop_tx_clr <= 1'b0;
+    end else if (addr_stop_tx) begin
+      stretch_stop_tx_clr <= 1'b1;
+    end
+  end
+
+  assign stretch_stop_tx_clr_o = stretch_stop_tx_clr;
+
+  // Deasserting stretch_stop_acq bit after the first target address match for acquire
+  always_ff @ (posedge clk_i or negedge rst_ni) begin : stretch_addr_sp_acq
     if (!rst_ni) begin
-      stretch_stop_clr <= 1'b0;
-    end else if (addr_stop) begin
-      stretch_stop_clr <= 1'b1;
+      stretch_stop_acq_clr <= 1'b0;
+    end else if (addr_stop_acq) begin
+      stretch_stop_acq_clr <= 1'b1;
     end
   end
 
-  assign stretch_stop_clr_o = stretch_stop_clr;
+  assign stretch_stop_acq_clr_o = stretch_stop_acq_clr;
 
   // State definitions
   typedef enum logic [5:0] {
@@ -345,8 +360,8 @@ module i2c_fsm (
         AcquireStart, AddrRead, AddrAckWait, AddrAckSetup, AddrAckPulse, AddrAckHold,
         TransmitWait, TransmitSetup, TransmitPulse, TransmitHold, TransmitAck,
         AcquireByte, AcquireAckWait, AcquireAckSetup, AcquireAckPulse, AcquireAckHold,
-        PopTxFifo, AcquireSrP, StretchTxEmpty, StretchAcqFull, StretchAddr,
-        StretchAcquire, StretchTransmit, StretchTransmitWait
+        PopTxFifo, AcquireSrP, StretchTxEmpty, StretchAcqFull, StretchAddrTransmit,
+        StretchAddrAcquire
   } state_e;
 
   state_e state_q, state_d;
@@ -658,22 +673,13 @@ module i2c_fsm (
         acq_fifo_wvalid_o = 1'b1;
         if (tx_fifo_depth_i != '0) event_tx_nonempty_o = 1'b1;
       end
-      // StretchAddr: target stretches the clock after matching an address
-      StretchAddr : begin
+      // StretchAddrTransmit: target stretches the clock after matching an address for transmit
+      StretchAddrTransmit : begin
         target_idle_o = 1'b0;
         scl_temp = 1'b0;
       end
-      // StretchAcquire: target stretches the clock after acquiring a byte
-      StretchAcquire : begin
-        target_idle_o = 1'b0;
-        scl_temp = 1'b0;
-      end
-      // StretchTransmitWait: target waits for host to pull SCL low before stretching the clock
-      StretchTransmitWait : begin
-        target_idle_o = 1'b0;
-      end
-      // StretchTransmit: target stretches the clock after transmitting a byte
-      StretchTransmit : begin
+      // StretchAddrAcquire: target stretches the clock after matching an address for acquire
+      StretchAddrAcquire : begin
         target_idle_o = 1'b0;
         scl_temp = 1'b0;
       end
@@ -729,7 +735,8 @@ module i2c_fsm (
     log_stop = 1'b0;
     restart = 1'b0;
     input_byte_clr = 1'b0;
-    addr_stop = 1'b0;
+    addr_stop_tx = 1'b0;
+    addr_stop_acq = 1'b0;
 
     unique case (state_q)
       // Idle: initial state, SDA and SCL are released (high)
@@ -1026,11 +1033,19 @@ module i2c_fsm (
       AddrAckWait : begin
         if (tcount_q == 20'd1) begin
           if (!scl_i) begin
-            if (stretch_en_addr_i && !stretch_stop_i) state_d = StretchAddr;
-            else if (stretch_en_addr_i && stretch_stop_i) begin
-              state_d = AddrAckSetup;
-              addr_stop = 1'b1;
-            end else state_d = AddrAckSetup;
+            if (rw_bit) begin
+              if (stretch_en_addr_tx_i && !stretch_stop_tx_i) state_d = StretchAddrTransmit;
+              else if (stretch_en_addr_tx_i && stretch_stop_tx_i) begin
+                state_d = AddrAckSetup;
+                addr_stop_tx = 1'b1;
+              end else state_d = AddrAckSetup;
+            end else begin
+              if (stretch_en_addr_acq_i && !stretch_stop_acq_i) state_d = StretchAddrAcquire;
+              else if (stretch_en_addr_acq_i && stretch_stop_acq_i) begin
+                state_d = AddrAckSetup;
+                addr_stop_acq = 1'b1;
+              end else state_d = AddrAckSetup;
+            end
           end
         end
       end
@@ -1096,8 +1111,7 @@ module i2c_fsm (
       TransmitAck : begin
         if (scl_i) begin
           if (host_ack) begin
-            if (stretch_en_tx_i) state_d = StretchTransmitWait;
-            else state_d = PopTxFifo;
+            state_d = PopTxFifo;
           end else begin
             if (start_det || stop_det) state_d = AcquireSrP;
           end
@@ -1129,10 +1143,7 @@ module i2c_fsm (
       // AcquireAckWait: pause before acknowledging
       AcquireAckWait : begin
         if (tcount_q == 20'd1) begin
-          if (!scl_i) begin
-            if (stretch_en_acq_i) state_d = StretchAcquire;
-            else state_d = AcquireAckSetup;
-          end
+          if (!scl_i) state_d = AcquireAckSetup;
         end
       end
       // AcquireAckSetup: target pulls SDA low while SCL is low
@@ -1162,27 +1173,16 @@ module i2c_fsm (
         state_d = Idle;
       end
 
-      // StretchAddr: target stretches the clock after matching an address
-      StretchAddr : begin
-        if (!stretch_stop_i) state_d = StretchAddr;
+      // StretchAddrTransmit: target stretches the clock after matching an address for transmit
+      StretchAddrTransmit : begin
+        if (!stretch_stop_tx_i) state_d = StretchAddrTransmit;
         else state_d = AddrAckSetup;
       end
 
-      // StretchAcquire: target stretches the clock after acquiring a byte
-      StretchAcquire : begin
-        if (!stretch_stop_i) state_d = StretchAcquire;
-        else state_d = AcquireAckSetup;
-      end
-
-      // StretchTransmitWait: target waits for host to pull SCL low before stretching the clock
-      StretchTransmitWait : begin
-        if (!scl_i) state_d = StretchTransmit;
-      end
-
-      // StretchTransmit: target stretches the clock after transmitting a byte
-      StretchTransmit : begin
-        if (!stretch_stop_i) state_d = StretchTransmit;
-        else state_d = PopTxFifo;
+      // StretchAddrAcquire: target stretches the clock after matching an address for acquire
+      StretchAddrAcquire : begin
+        if (!stretch_stop_acq_i) state_d = StretchAddrAcquire;
+        else state_d = AddrAckSetup;
       end
 
       // StretchTxEmpty: target stretches the clock when tx_fifo is empty
@@ -1217,7 +1217,8 @@ module i2c_fsm (
         log_stop = 1'b0;
         restart = 1'b0;
         input_byte_clr = 1'b0;
-        addr_stop = 1'b0;
+        addr_stop_tx = 1'b0;
+        addr_stop_acq = 1'b0;
       end
     endcase
   end