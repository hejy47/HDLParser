4bee429d0160d74d3d2166193b1e8dbbae62d892
[clkmgr] Allow software to control clock stepdown
diff --git a/hw/ip/clkmgr/rtl/clkmgr_byp.sv b/hw/ip/clkmgr/rtl/clkmgr_byp.sv
index a802d077f..713bf5a65 100644
--- a/hw/ip/clkmgr/rtl/clkmgr_byp.sv
+++ b/hw/ip/clkmgr/rtl/clkmgr_byp.sv
@@ -10,7 +10,8 @@ module clkmgr_byp import clkmgr_pkg::*; import lc_ctrl_pkg::lc_tx_t; # (
   input                   clk_i,
   input                   rst_ni,
   input  lc_tx_t          en_i,
-  input  lc_tx_t          byp_req,
+  input  lc_tx_t          byp_req_i,
+  input  lc_tx_t          step_down_req_i,
   output lc_tx_t          ast_clk_byp_req_o,
   input  lc_tx_t          ast_clk_byp_ack_i,
   input  lc_tx_t          lc_clk_byp_req_i,
@@ -26,7 +27,7 @@ module clkmgr_byp import clkmgr_pkg::*; import lc_ctrl_pkg::lc_tx_t; # (
   // Generate qualified reg clk bypass request
   for (genvar i = 0; i < $bits(lc_tx_t); i++) begin : gen_clk_byp
     prim_buf u_buf (
-      .in_i(on_val[i] ? byp_req[i] & en_i[i] : byp_req[i] | en_i[i]),
+      .in_i(on_val[i] ? byp_req_i[i] & en_i[i] : byp_req_i[i] | en_i[i]),
       .out_o(reg_clk_byp_req[i])
     );
   end
@@ -48,13 +49,20 @@ module clkmgr_byp import clkmgr_pkg::*; import lc_ctrl_pkg::lc_tx_t; # (
    .lc_en_o(ast_clk_byp_req_o)
   );
 
+  lc_tx_t ast_clk_byp_ack;
   prim_lc_sync u_rcv (
     .clk_i,
     .rst_ni,
     .lc_en_i(ast_clk_byp_ack_i),
-    .lc_en_o(step_down_req_o)
+    .lc_en_o(ast_clk_byp_ack)
   );
 
+  // if switch request came from software, let software dictate whether to step down
+  assign step_down_req_o =
+    lc_clk_byp_req_i == lc_ctrl_pkg::On ? ast_clk_byp_ack :
+    reg_clk_byp_req == lc_ctrl_pkg::On  ? ast_clk_byp_ack & step_down_req_i :
+                                          lc_ctrl_pkg::Off;
+
   // only ack the lc_ctrl if it made a request.
   prim_lc_sender u_send (
    .clk_i,