d65d139663d32e8b509e5aa5af2b848daab74a6b
[csrng/rtl] added fatal alert
diff --git a/hw/ip/csrng/rtl/csrng_ctr_drbg_upd.sv b/hw/ip/csrng/rtl/csrng_ctr_drbg_upd.sv
index 64fef2b59..3e198bdc8 100644
--- a/hw/ip/csrng/rtl/csrng_ctr_drbg_upd.sv
+++ b/hw/ip/csrng/rtl/csrng_ctr_drbg_upd.sv
@@ -48,7 +48,9 @@ module csrng_ctr_drbg_upd #(
   output logic [2:0]         ctr_drbg_upd_sfifo_bencreq_err_o,
   output logic [2:0]         ctr_drbg_upd_sfifo_bencack_err_o,
   output logic [2:0]         ctr_drbg_upd_sfifo_pdata_err_o,
-  output logic [2:0]         ctr_drbg_upd_sfifo_final_err_o
+  output logic [2:0]         ctr_drbg_upd_sfifo_final_err_o,
+  output logic               ctr_drbg_updbe_sm_err_o,
+  output logic               ctr_drbg_updob_sm_err_o
 );
 
   localparam int UpdReqFifoDepth = 1;
@@ -73,7 +75,7 @@ module csrng_ctr_drbg_upd #(
   logic                       sfifo_updreq_push;
   logic [UpdReqFifoWidth-1:0] sfifo_updreq_wdata;
   logic                       sfifo_updreq_pop;
-  logic                       sfifo_updreq_not_full;
+  logic                       sfifo_updreq_full;
   logic                       sfifo_updreq_not_empty;
   // breakout
   logic [Cmd-1:0]             sfifo_updreq_ccmd;
@@ -87,7 +89,7 @@ module csrng_ctr_drbg_upd #(
   logic                       sfifo_bencreq_push;
   logic [BlkEncReqFifoWidth-1:0] sfifo_bencreq_wdata;
   logic                       sfifo_bencreq_pop;
-  logic                       sfifo_bencreq_not_full;
+  logic                       sfifo_bencreq_full;
   logic                       sfifo_bencreq_not_empty;
   // breakout
   logic [Cmd-1:0]             sfifo_bencreq_ccmd;
@@ -100,7 +102,7 @@ module csrng_ctr_drbg_upd #(
   logic                       sfifo_bencack_push;
   logic [BlkEncAckFifoWidth-1:0] sfifo_bencack_wdata;
   logic                       sfifo_bencack_pop;
-  logic                       sfifo_bencack_not_full;
+  logic                       sfifo_bencack_full;
   logic                       sfifo_bencack_not_empty;
   // breakout
   logic [Cmd-1:0]             sfifo_bencack_ccmd;
@@ -112,7 +114,7 @@ module csrng_ctr_drbg_upd #(
   logic                       sfifo_pdata_push;
   logic [PDataFifoWidth-1:0]  sfifo_pdata_wdata;
   logic                       sfifo_pdata_pop;
-  logic                       sfifo_pdata_not_full;
+  logic                       sfifo_pdata_full;
   logic                       sfifo_pdata_not_empty;
   logic [SeedLen-1:0]         sfifo_pdata_v;
 
@@ -121,7 +123,7 @@ module csrng_ctr_drbg_upd #(
   logic                       sfifo_final_push;
   logic [FinalFifoWidth-1:0]  sfifo_final_wdata;
   logic                       sfifo_final_pop;
-  logic                       sfifo_final_not_full;
+  logic                       sfifo_final_full;
   logic                       sfifo_final_not_empty;
   // breakout
   logic [Cmd-1:0]             sfifo_final_ccmd;
@@ -142,28 +144,34 @@ module csrng_ctr_drbg_upd #(
   logic [CtrLen-1:0]  v_ctr_q, v_ctr_d;
   logic [1:0]         interate_ctr_q, interate_ctr_d;
   logic [1:0]         concat_ctr_q, concat_ctr_d;
-//  logic [1:0]         ctr_drbg_upd_sts_q, ctr_drbg_upd_sts_d;
   logic [SeedLen-1:0] concat_outblk_q, concat_outblk_d;
   logic [Cmd-1:0]     concat_ccmd_q, concat_ccmd_d;
   logic [StateId-1:0] concat_inst_id_q, concat_inst_id_d;
 
-  // Encoding generated with ./sparse-fsm-encode.py -d 3 -m 2 -n 4 -s 2483430365
-  // Hamming distance histogram:
-  //
-  // 0: --
-  // 1: --
-  // 2: --
-  // 3: |||||||||||||||||||| (100.00%)
-  // 4: --
-  //
-  // Minimum Hamming distance: 3
-  // Maximum Hamming distance: 3
-  //
-
-  localparam int BlkEncStateWidth = 4;
+// Encoding generated with:
+// $ ./util/design/sparse-fsm-encode.py -d 3 -m 3 -n 5 \
+//      -s 2557753240 --language=sv
+//
+// Hamming distance histogram:
+//
+//  0: --
+//  1: --
+//  2: --
+//  3: |||||||||||||||||||| (66.67%)
+//  4: |||||||||| (33.33%)
+//  5: --
+//
+// Minimum Hamming distance: 3
+// Maximum Hamming distance: 4
+// Minimum Hamming weight: 2
+// Maximum Hamming weight: 3
+//
+
+  localparam int BlkEncStateWidth = 5;
   typedef enum logic [BlkEncStateWidth-1:0] {
-    ReqIdle = 4'b0001,
-    ReqSend = 4'b0110
+    ReqIdle = 5'b00110,
+    ReqSend = 5'b10011,
+    BEError = 5'b11100
   } blk_enc_state_e;
 
   blk_enc_state_e blk_enc_state_d, blk_enc_state_q;
@@ -184,26 +192,32 @@ module csrng_ctr_drbg_upd #(
 
   assign blk_enc_state_q = blk_enc_state_e'(blk_enc_state_raw_q);
 
-  // Encoding generated with ./sparse-fsm-encode.py -d 3 -m 3 -n 6 -s 4062121537
-  // Hamming distance histogram:
-  //
-  // 0: --
-  // 1: --
-  // 2: --
-  // 3: |||||||||||||||||||| (66.67%)
-  // 4: |||||||||| (33.33%)
-  // 5: --
-  // 6: --
-  //
-  // Minimum Hamming distance: 3
-  // Maximum Hamming distance: 4
-  //
+// Encoding generated with:
+// $ ./util/design/sparse-fsm-encode.py -d 3 -m 4 -n 6 \
+//      -s 400877681 --language=sv
+//
+// Hamming distance histogram:
+//
+//  0: --
+//  1: --
+//  2: --
+//  3: |||||||||||||||||||| (66.67%)
+//  4: ||||| (16.67%)
+//  5: --
+//  6: ||||| (16.67%)
+//
+// Minimum Hamming distance: 3
+// Maximum Hamming distance: 6
+// Minimum Hamming weight: 2
+// Maximum Hamming weight: 4
+//
 
   localparam int OutBlkStateWidth = 6;
   typedef enum logic [OutBlkStateWidth-1:0] {
-    AckIdle = 6'b111001,
-    Load    = 6'b011100,
-    Shift   = 6'b110010
+    AckIdle = 6'b110110,
+    Load    = 6'b110001,
+    Shift   = 6'b001001,
+    OBError = 6'b011100
   } outblk_state_e;
 
   outblk_state_e outblk_state_d, outblk_state_q;
@@ -255,27 +269,27 @@ module csrng_ctr_drbg_upd #(
     .rst_ni   (rst_ni),
     .clr_i    (!ctr_drbg_upd_enable_i),
     .wvalid_i (sfifo_updreq_push),
-    .wready_o (sfifo_updreq_not_full),
+    .wready_o (),
     .wdata_i  (sfifo_updreq_wdata),
     .rvalid_o (sfifo_updreq_not_empty),
     .rready_i (sfifo_updreq_pop),
     .rdata_o  (sfifo_updreq_rdata),
-    .full_o   (),
+    .full_o   (sfifo_updreq_full),
     .depth_o  ()
   );
 
-  assign sfifo_updreq_push = sfifo_updreq_not_full && ctr_drbg_upd_req_i;
+  assign sfifo_updreq_push = !sfifo_updreq_full && ctr_drbg_upd_req_i;
   assign sfifo_updreq_wdata = {ctr_drbg_upd_key_i,ctr_drbg_upd_v_i,ctr_drbg_upd_pdata_i,
                                ctr_drbg_upd_inst_id_i,ctr_drbg_upd_ccmd_i};
-  assign ctr_drbg_upd_rdy_o = sfifo_updreq_not_full;
+  assign ctr_drbg_upd_rdy_o = !sfifo_updreq_full;
 
   assign {sfifo_updreq_key,sfifo_updreq_v,sfifo_updreq_pdata,
           sfifo_updreq_inst_id,sfifo_updreq_ccmd} = sfifo_updreq_rdata;
 
   assign ctr_drbg_upd_sfifo_updreq_err_o =
-         {(sfifo_updreq_push && !sfifo_updreq_not_full),
+         {(sfifo_updreq_push && sfifo_updreq_full),
          (sfifo_updreq_pop && !sfifo_updreq_not_empty),
-         (!sfifo_updreq_not_full && !sfifo_updreq_not_empty)};
+         (sfifo_updreq_full && !sfifo_updreq_not_empty)};
 
   //--------------------------------------------
   // prepare value for block_encrypt step
@@ -315,17 +329,19 @@ module csrng_ctr_drbg_upd #(
     sfifo_pdata_push = 1'b0;
     sfifo_bencreq_push = 1'b0;
     sfifo_updreq_pop = 1'b0;
+    ctr_drbg_updbe_sm_err_o = 1'b0;
     unique case (blk_enc_state_q)
       // ReqIdle: increment v this cycle, push in next
-      ReqIdle:
-        if (sfifo_updreq_not_empty && sfifo_bencreq_not_full && sfifo_pdata_not_full) begin
+      ReqIdle: begin
+        if (sfifo_updreq_not_empty && !sfifo_bencreq_full && !sfifo_pdata_full) begin
           v_ctr_load = 1'b1;
           sfifo_pdata_push = 1'b1;
           blk_enc_state_d = ReqSend;
         end
-      ReqSend:
+      end
+      ReqSend: begin
         if (!interate_ctr_done) begin
-          if (sfifo_bencreq_not_full) begin
+          if (!sfifo_bencreq_full) begin
             v_ctr_inc  = 1'b1;
             interate_ctr_inc  = 1'b1;
             sfifo_bencreq_push = 1'b1;
@@ -334,7 +350,11 @@ module csrng_ctr_drbg_upd #(
           sfifo_updreq_pop = 1'b1;
           blk_enc_state_d = ReqIdle;
         end
-      default: blk_enc_state_d = ReqIdle;
+      end
+      BEError: begin
+        ctr_drbg_updbe_sm_err_o = 1'b1;
+      end
+      default: blk_enc_state_d = BEError;
     endcase // case (blk_enc_state_q)
   end
 
@@ -351,12 +371,12 @@ module csrng_ctr_drbg_upd #(
     .rst_ni   (rst_ni),
     .clr_i    (!ctr_drbg_upd_enable_i),
     .wvalid_i (sfifo_bencreq_push),
-    .wready_o (sfifo_bencreq_not_full),
+    .wready_o (),
     .wdata_i  (sfifo_bencreq_wdata),
     .rvalid_o (sfifo_bencreq_not_empty),
     .rready_i (sfifo_bencreq_pop),
     .rdata_o  (sfifo_bencreq_rdata),
-    .full_o   (),
+    .full_o   (sfifo_bencreq_full),
     .depth_o  ()
   );
 
@@ -375,9 +395,9 @@ module csrng_ctr_drbg_upd #(
   assign block_encrypt_ccmd_o = sfifo_bencreq_ccmd;
 
   assign ctr_drbg_upd_sfifo_bencreq_err_o =
-         {(sfifo_bencreq_push && !sfifo_bencreq_not_full),
+         {(sfifo_bencreq_push && sfifo_bencreq_full),
           (sfifo_bencreq_pop && !sfifo_bencreq_not_empty),
-          (!sfifo_bencreq_not_full && !sfifo_bencreq_not_empty)};
+          (sfifo_bencreq_full && !sfifo_bencreq_not_empty)};
 
   //--------------------------------------------
   // block_encrypt response fifo from block encrypt
@@ -392,25 +412,25 @@ module csrng_ctr_drbg_upd #(
     .rst_ni   (rst_ni),
     .clr_i    (!ctr_drbg_upd_enable_i),
     .wvalid_i (sfifo_bencack_push),
-    .wready_o (sfifo_bencack_not_full),
+    .wready_o (),
     .wdata_i  (sfifo_bencack_wdata),
     .rvalid_o (sfifo_bencack_not_empty),
     .rready_i (sfifo_bencack_pop),
     .rdata_o  (sfifo_bencack_rdata),
-    .full_o   (),
+    .full_o   (sfifo_bencack_full),
     .depth_o  ()
   );
 
-  assign sfifo_bencack_push = sfifo_bencack_not_full && block_encrypt_ack_i;
+  assign sfifo_bencack_push = !sfifo_bencack_full && block_encrypt_ack_i;
   assign sfifo_bencack_wdata = {block_encrypt_v_i,block_encrypt_inst_id_i,block_encrypt_ccmd_i};
-  assign block_encrypt_rdy_o = sfifo_bencack_not_full;
+  assign block_encrypt_rdy_o = !sfifo_bencack_full;
 
   assign {sfifo_bencack_v,sfifo_bencack_inst_id,sfifo_bencack_ccmd} = sfifo_bencack_rdata;
 
   assign ctr_drbg_upd_sfifo_bencack_err_o =
-         {(sfifo_bencack_push && !sfifo_bencack_not_full),
+         {(sfifo_bencack_push && sfifo_bencack_full),
           (sfifo_bencack_pop && !sfifo_bencack_not_empty),
-          (!sfifo_bencack_not_full && !sfifo_bencack_not_empty)};
+          (sfifo_bencack_full && !sfifo_bencack_not_empty)};
 
   //--------------------------------------------
   // fifo to stage provided_data, waiting for blk_encrypt to ack
@@ -425,12 +445,12 @@ module csrng_ctr_drbg_upd #(
     .rst_ni   (rst_ni),
     .clr_i    (!ctr_drbg_upd_enable_i),
     .wvalid_i (sfifo_pdata_push),
-    .wready_o (sfifo_pdata_not_full),
+    .wready_o (),
     .wdata_i  (sfifo_pdata_wdata),
     .rvalid_o (sfifo_pdata_not_empty),
     .rready_i (sfifo_pdata_pop),
     .rdata_o  (sfifo_pdata_rdata),
-    .full_o   (),
+    .full_o   (sfifo_pdata_full),
     .depth_o  ()
   );
 
@@ -439,9 +459,9 @@ module csrng_ctr_drbg_upd #(
   assign sfifo_pdata_v = sfifo_pdata_rdata;
 
   assign ctr_drbg_upd_sfifo_pdata_err_o =
-         {(sfifo_pdata_push && !sfifo_pdata_not_full),
+         {(sfifo_pdata_push && sfifo_pdata_full),
           (sfifo_pdata_pop && !sfifo_pdata_not_empty),
-          (!sfifo_pdata_not_full && !sfifo_pdata_not_empty)};
+          (sfifo_pdata_full && !sfifo_pdata_not_empty)};
 
   //--------------------------------------------
   // shifting logic to receive values from block_encrypt
@@ -476,19 +496,22 @@ module csrng_ctr_drbg_upd #(
     sfifo_pdata_pop = 1'b0;
     sfifo_bencack_pop = 1'b0;
     sfifo_final_push = 1'b0;
+    ctr_drbg_updob_sm_err_o = 1'b0;
     unique case (outblk_state_q)
       // AckIdle: increment v this cycle, push in next
-      AckIdle:
-        if (sfifo_bencack_not_empty && sfifo_pdata_not_empty && sfifo_final_not_full) begin
+      AckIdle: begin
+        if (sfifo_bencack_not_empty && sfifo_pdata_not_empty && !sfifo_final_full) begin
           outblk_state_d = Load;
         end
-      Load:
+      end
+      Load: begin
         if (sfifo_bencack_not_empty) begin
           concat_ctr_inc  = 1'b1;
           sfifo_bencack_pop = 1'b1;
           outblk_state_d = Shift;
         end
-      Shift:
+      end
+      Shift: begin
         if (concat_ctr_done) begin
           sfifo_pdata_pop = 1'b1;
           sfifo_final_push = 1'b1;
@@ -497,6 +520,10 @@ module csrng_ctr_drbg_upd #(
           concat_outblk_shift = 1'b1;
           outblk_state_d = Load;
         end
+      end
+      OBError: begin
+        ctr_drbg_updob_sm_err_o = 1'b1;
+      end
       default: outblk_state_d = AckIdle;
     endcase
   end
@@ -518,12 +545,12 @@ module csrng_ctr_drbg_upd #(
     .rst_ni   (rst_ni),
     .clr_i    (!ctr_drbg_upd_enable_i),
     .wvalid_i (sfifo_final_push),
-    .wready_o (sfifo_final_not_full),
+    .wready_o (),
     .wdata_i  (sfifo_final_wdata),
     .rvalid_o (sfifo_final_not_empty),
     .rready_i (sfifo_final_pop),
     .rdata_o  (sfifo_final_rdata),
-    .full_o   (),
+    .full_o   (sfifo_final_full),
     .depth_o  ()
   );
 
@@ -539,9 +566,9 @@ module csrng_ctr_drbg_upd #(
   assign ctr_drbg_upd_v_o = sfifo_final_v;
 
   assign ctr_drbg_upd_sfifo_final_err_o =
-         {(sfifo_final_push && !sfifo_final_not_full),
+         {(sfifo_final_push && sfifo_final_full),
           (sfifo_final_pop && !sfifo_final_not_empty),
-          (!sfifo_final_not_full && !sfifo_final_not_empty)};
+          (sfifo_final_full && !sfifo_final_not_empty)};
 
 
 endmodule