79aac27c5eb3b17346aaeb86678edcffa94cb9d9
Update lowrisc_ibex to lowRISC/ibex@6b1a7ad
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_controller.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_controller.sv
index c521e9bda..07b64e35e 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_controller.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_controller.sv
@@ -68,6 +68,7 @@ module ibex_controller (
     output logic                  debug_mode_o,
     input  logic                  debug_single_step_i,
     input  logic                  debug_ebreakm_i,
+    input  logic                  debug_ebreaku_i,
 
     output logic                  csr_save_if_o,
     output logic                  csr_save_id_o,
@@ -114,6 +115,7 @@ module ibex_controller (
   logic exc_req_lsu;
   logic special_req;
   logic enter_debug_mode;
+  logic ebreak_into_debug;
   logic handle_irq;
 
   logic [3:0] mfip_id;
@@ -190,7 +192,18 @@ module ibex_controller (
   // Interrupts //
   ////////////////
 
-  assign enter_debug_mode = debug_req_i & ~debug_mode_q;
+  // Enter debug mode due to an external debug_req_i or because the core is in
+  // single step mode (dcsr.step == 1). Single step must be qualified with
+  // instruction valid otherwise the core will immediately enter debug mode
+  // due to a recently flushed IF (or a delay in an instruction returning from
+  // memory) before it has had anything to single step.
+  assign enter_debug_mode = (debug_req_i | (debug_single_step_i & instr_valid_i)) & ~debug_mode_q;
+
+  // Set when an ebreak should enter debug mode rather than jump to exception
+  // handler
+  assign ebreak_into_debug = priv_mode_i == PRIV_LVL_M ? debug_ebreakm_i :
+                             priv_mode_i == PRIV_LVL_U ? debug_ebreaku_i :
+                                                         1'b0;
 
   // interrupts including NMI are ignored while in debug mode [Debug Spec v0.13.2, p.39]
   assign handle_irq       = ~debug_mode_q &
@@ -316,8 +329,9 @@ module ibex_controller (
         // enter debug mode
         if (enter_debug_mode) begin
           ctrl_fsm_ns = DBG_TAKEN_IF;
+          // Halt IF only for now, ID will be flushed in DBG_TAKEN_IF as the
+          // ID state is needed for correct debug mode entry
           halt_if     = 1'b1;
-          flush_id    = 1'b1;
         end
       end
 
@@ -346,32 +360,21 @@ module ibex_controller (
             perf_jump_o    = jump_set_i;
           end
 
-
-          // stall IF stage to not starve debug and interrupt requests, these just
-          // need to wait until after the current (multicycle) instruction
+          // If entering debug mode or handling an IRQ the core needs to wait
+          // until the current instruction has finished executing. Stall IF
+          // during that time.
           if ((enter_debug_mode || handle_irq) && stall) begin
             halt_if = 1'b1;
           end
-
-          // single stepping:
-          // execute a single instruction and then enter debug mode, in case of exceptions,
-          // set registers but do not jump into handler [Debug Spec v0.13.2, p.44]
-          if (debug_single_step_i && !debug_mode_q) begin
-            halt_if = 1'b1;
-
-            if (!special_req && !stall) begin
-              ctrl_fsm_ns = DBG_TAKEN_IF;
-            end
-          end
         end // instr_valid_i
 
         if (!stall && !special_req) begin
           if (enter_debug_mode) begin
             // enter debug mode
             ctrl_fsm_ns = DBG_TAKEN_IF;
+            // Halt IF only for now, ID will be flushed in DBG_TAKEN_IF as the
+            // ID state is needed for correct debug mode entry
             halt_if     = 1'b1;
-            flush_id    = 1'b1;
-
           end else if (handle_irq) begin
             // handle interrupt (not in debug mode)
             ctrl_fsm_ns = IRQ_TAKEN;
@@ -417,6 +420,7 @@ module ibex_controller (
         // enter debug mode and save PC in IF to dpc
         // jump to debug exception handler in debug memory
         if (debug_single_step_i || debug_req_i) begin
+          flush_id         = 1'b1;
           pc_mux_o         = PC_EXC;
           pc_set_o         = 1'b1;
           exc_pc_mux_o     = EXC_PC_DBD;
@@ -447,12 +451,13 @@ module ibex_controller (
         // for 1. do not update dcsr and dpc, for 2. do so [Debug Spec v0.13.2, p.39]
         // jump to debug exception handler in debug memory
         if (ebrk_insn) begin
+          flush_id     = 1'b1;
           pc_mux_o     = PC_EXC;
           pc_set_o     = 1'b1;
           exc_pc_mux_o = EXC_PC_DBD;
 
           // update dcsr and dpc
-          if (debug_ebreakm_i && !debug_mode_q) begin // ebreak with forced entry
+          if (ebreak_into_debug && !debug_mode_q) begin // ebreak with forced entry
 
             // dpc (set to the address of the EBREAK, i.e. set to PC in ID stage)
             csr_save_cause_o = 1'b1;
@@ -499,7 +504,7 @@ module ibex_controller (
                                                         EXC_CAUSE_ECALL_UMODE;
 
           end else if (ebrk_insn) begin
-            if (debug_mode_q) begin
+            if (debug_mode_q | ebreak_into_debug) begin
               /*
                * EBREAK in debug mode re-enters debug mode
                *
@@ -507,11 +512,7 @@ module ibex_controller (
                * Mode, it halts the hart again but without updating dpc or
                * dcsr." [Debug Spec v0.13.2, p.39]
                */
-              pc_set_o         = 1'b0;
-              csr_save_id_o    = 1'b0;
-              csr_save_cause_o = 1'b0;
-              ctrl_fsm_ns      = DBG_TAKEN_ID;
-            end else if (debug_ebreakm_i) begin
+
               /*
                * dcsr.ebreakm == 1:
                * "EBREAK instructions in M-mode enter Debug Mode."
@@ -521,13 +522,14 @@ module ibex_controller (
               csr_save_id_o    = 1'b0;
               csr_save_cause_o = 1'b0;
               ctrl_fsm_ns      = DBG_TAKEN_ID;
+              flush_id         = 1'b0;
             end else begin
               /*
                * "The EBREAK instruction is used by debuggers to cause control
                * to be transferred back to a debugging environment. It
                * generates a breakpoint exception and performs no other
                * operation. [...] ECALL and EBREAK cause the receiving
-               * privilege modeâ€™s epc register to be set to the address of the
+               * privilege mode's epc register to be set to the address of the
                * ECALL or EBREAK instruction itself, not the address of the
                * following instruction." [Privileged Spec v1.11, p.40]
                */
@@ -564,10 +566,13 @@ module ibex_controller (
           end
         end // exc_req_q
 
-        // single stepping
-        // set exception registers, but do not jump into handler [Debug Spec v0.13.2, p.44]
-        if (debug_single_step_i && !debug_mode_q) begin
-          pc_set_o    = 1'b0;
+        // Entering debug mode due to either single step or debug_req. Ensure
+        // registers are set for exception but then enter debug handler rather
+        // than exception handler [Debug Spec v0.13.2, p.44]
+        // Leave all other signals as is to ensure CSRs and PC get set as if
+        // core was entering exception handler, entry to debug mode will then
+        // see the appropriate state and setup dpc correctly.
+        if (enter_debug_mode) begin
           ctrl_fsm_ns = DBG_TAKEN_IF;
         end
       end // FLUSH