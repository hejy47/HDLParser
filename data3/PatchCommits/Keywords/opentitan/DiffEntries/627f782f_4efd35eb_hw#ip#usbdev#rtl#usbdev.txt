627f782f3648293efd398045a5959509f255eacc
[usbdev dv] Initial dv bench
diff --git a/hw/ip/usbdev/rtl/usbdev.sv b/hw/ip/usbdev/rtl/usbdev.sv
index 061da3b7f..b3557e72c 100644
--- a/hw/ip/usbdev/rtl/usbdev.sv
+++ b/hw/ip/usbdev/rtl/usbdev.sv
@@ -14,8 +14,8 @@ module usbdev (
   input  logic       rst_usb_ni, // async reset, with relase sync to clk_usb_48_mhz_i
 
   // Register interface
-  input  tlul_pkg::tl_h2d_t tl_d_i,
-  output tlul_pkg::tl_d2h_t tl_d_o,
+  input  tlul_pkg::tl_h2d_t tl_i,
+  output tlul_pkg::tl_d2h_t tl_o,
 
   // USB Interface
   input  logic       cio_usb_d_i,
@@ -239,7 +239,7 @@ module usbdev (
     .rst_ni (rst_usb_ni),
     .d      ({enable_setup, enable_out, ep_stall}),
     .q      ({usb_enable_setup, usb_enable_out, usb_ep_stall})
-  );  
+  );
 
   // CDC: ok, quasi-static
   always_comb begin : proc_map_iso
@@ -272,7 +272,7 @@ module usbdev (
   );
 
   // CDC: We synchronize the qe (write pulse) and assume that the
-  // rest of the register remains stable 
+  // rest of the register remains stable
   prim_pulse_sync usbdev_data_toggle_clear (
     .clk_src_i   (clk_i),
     .clk_dst_i   (clk_usb_48mhz_i),
@@ -286,9 +286,9 @@ module usbdev (
     usb_data_toggle_clear = '0;
     for (int i = 0; i < NEndpoints; i++) begin
       if (usb_data_toggle_clear_en) begin
-        usb_data_toggle_clear[i] = reg2hw.data_toggle_clear[i].q; 
-      end      
-    end  
+        usb_data_toggle_clear[i] = reg2hw.data_toggle_clear[i].q;
+      end
+    end
   end
 
   // Clear of ready and set of sent is a pulse in USB clock domain
@@ -392,7 +392,7 @@ module usbdev (
     end else begin
       // Clear pending when a SETUP is received
       // CDC: usb_out_endpoint is synchronized implicitly by
-      // setup_received, as it is stable 
+      // setup_received, as it is stable
       clear_rdybit[usb_out_endpoint] = setup_received;
       update_pend[usb_out_endpoint]  = setup_received;
 
@@ -520,7 +520,7 @@ module usbdev (
     .rst_ni (rst_usb_ni),
     .d      ({reg2hw.usbctrl.enable.q, reg2hw.usbctrl.device_address.q}),
     .q      ({usb_enable,              usb_device_addr})
-  );  
+  );
 
   // CDC for event signals (arguably they are there for a long time so would be ok)
   // Just want a pulse to ensure only one interrupt for an event
@@ -529,7 +529,7 @@ module usbdev (
     .rst_ni (rst_ni),
     .d      ({usb_event_disconnect, usb_event_link_reset, usb_event_link_suspend,
               usb_event_host_lost, usb_event_connect}),
-    .q      ({event_disconnect, event_link_reset, event_link_suspend, 
+    .q      ({event_disconnect, event_link_reset, event_link_suspend,
               event_host_lost, event_connect})
   );
 
@@ -579,17 +579,17 @@ module usbdev (
   // Clear the stall flag when a SETUP is received
 
   // CDC: usb_out_endpoint is synchronized implicitly by
-  // setup_received, as it is stable 
+  // setup_received, as it is stable
   always_comb begin : proc_stall_tieoff
     for (int i = 0; i < NEndpoints; i++) begin
-      hw2reg.stall[i].d  = 1'b0;              
+      hw2reg.stall[i].d  = 1'b0;
       if (setup_received && usb_out_endpoint == 4'(i)) begin
         hw2reg.stall[i].de = 1'b1;
       end else begin
         hw2reg.stall[i].de = 1'b0;
-      end        
-    end  
-  end  
+      end
+    end
+  end
 
   logic        unused_mem_a_rerror_d;
 
@@ -659,8 +659,8 @@ module usbdev (
     .clk_i,
     .rst_ni,
 
-    .tl_i (tl_d_i),
-    .tl_o (tl_d_o),
+    .tl_i (tl_i),
+    .tl_o (tl_o),
 
     .tl_win_o (tl_sram_h2d),
     .tl_win_i (tl_sram_d2h),