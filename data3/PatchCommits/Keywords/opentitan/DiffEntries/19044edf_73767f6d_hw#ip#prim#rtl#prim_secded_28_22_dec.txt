19044edfb0b9485031557705595840bea41fb33d
[prim_secded] Use _i/_o suffix for port names
diff --git a/hw/ip/prim/rtl/prim_secded_28_22_dec.sv b/hw/ip/prim/rtl/prim_secded_28_22_dec.sv
index 66140339b..57b9d10d2 100644
--- a/hw/ip/prim/rtl/prim_secded_28_22_dec.sv
+++ b/hw/ip/prim/rtl/prim_secded_28_22_dec.sv
@@ -5,8 +5,8 @@
 // SECDED decoder generated by util/design/secded_gen.py
 
 module prim_secded_28_22_dec (
-  input        [27:0] in,
-  output logic [21:0] d_o,
+  input        [27:0] data_i,
+  output logic [21:0] data_o,
   output logic [5:0] syndrome_o,
   output logic [1:0] err_o
 );
@@ -14,36 +14,36 @@ module prim_secded_28_22_dec (
   logic single_error;
 
   // Syndrome calculation
-  assign syndrome_o[0] = ^(in & 28'h07003FF);
-  assign syndrome_o[1] = ^(in & 28'h090FC0F);
-  assign syndrome_o[2] = ^(in & 28'h1271C71);
-  assign syndrome_o[3] = ^(in & 28'h23B6592);
-  assign syndrome_o[4] = ^(in & 28'h43DAAA4);
-  assign syndrome_o[5] = ^(in & 28'h83ED348);
+  assign syndrome_o[0] = ^(data_i & 28'h07003FF);
+  assign syndrome_o[1] = ^(data_i & 28'h090FC0F);
+  assign syndrome_o[2] = ^(data_i & 28'h1271C71);
+  assign syndrome_o[3] = ^(data_i & 28'h23B6592);
+  assign syndrome_o[4] = ^(data_i & 28'h43DAAA4);
+  assign syndrome_o[5] = ^(data_i & 28'h83ED348);
 
   // Corrected output calculation
-  assign d_o[0] = (syndrome_o == 6'h7) ^ in[0];
-  assign d_o[1] = (syndrome_o == 6'hb) ^ in[1];
-  assign d_o[2] = (syndrome_o == 6'h13) ^ in[2];
-  assign d_o[3] = (syndrome_o == 6'h23) ^ in[3];
-  assign d_o[4] = (syndrome_o == 6'hd) ^ in[4];
-  assign d_o[5] = (syndrome_o == 6'h15) ^ in[5];
-  assign d_o[6] = (syndrome_o == 6'h25) ^ in[6];
-  assign d_o[7] = (syndrome_o == 6'h19) ^ in[7];
-  assign d_o[8] = (syndrome_o == 6'h29) ^ in[8];
-  assign d_o[9] = (syndrome_o == 6'h31) ^ in[9];
-  assign d_o[10] = (syndrome_o == 6'he) ^ in[10];
-  assign d_o[11] = (syndrome_o == 6'h16) ^ in[11];
-  assign d_o[12] = (syndrome_o == 6'h26) ^ in[12];
-  assign d_o[13] = (syndrome_o == 6'h1a) ^ in[13];
-  assign d_o[14] = (syndrome_o == 6'h2a) ^ in[14];
-  assign d_o[15] = (syndrome_o == 6'h32) ^ in[15];
-  assign d_o[16] = (syndrome_o == 6'h1c) ^ in[16];
-  assign d_o[17] = (syndrome_o == 6'h2c) ^ in[17];
-  assign d_o[18] = (syndrome_o == 6'h34) ^ in[18];
-  assign d_o[19] = (syndrome_o == 6'h38) ^ in[19];
-  assign d_o[20] = (syndrome_o == 6'h3b) ^ in[20];
-  assign d_o[21] = (syndrome_o == 6'h3d) ^ in[21];
+  assign data_o[0] = (syndrome_o == 6'h7) ^ data_i[0];
+  assign data_o[1] = (syndrome_o == 6'hb) ^ data_i[1];
+  assign data_o[2] = (syndrome_o == 6'h13) ^ data_i[2];
+  assign data_o[3] = (syndrome_o == 6'h23) ^ data_i[3];
+  assign data_o[4] = (syndrome_o == 6'hd) ^ data_i[4];
+  assign data_o[5] = (syndrome_o == 6'h15) ^ data_i[5];
+  assign data_o[6] = (syndrome_o == 6'h25) ^ data_i[6];
+  assign data_o[7] = (syndrome_o == 6'h19) ^ data_i[7];
+  assign data_o[8] = (syndrome_o == 6'h29) ^ data_i[8];
+  assign data_o[9] = (syndrome_o == 6'h31) ^ data_i[9];
+  assign data_o[10] = (syndrome_o == 6'he) ^ data_i[10];
+  assign data_o[11] = (syndrome_o == 6'h16) ^ data_i[11];
+  assign data_o[12] = (syndrome_o == 6'h26) ^ data_i[12];
+  assign data_o[13] = (syndrome_o == 6'h1a) ^ data_i[13];
+  assign data_o[14] = (syndrome_o == 6'h2a) ^ data_i[14];
+  assign data_o[15] = (syndrome_o == 6'h32) ^ data_i[15];
+  assign data_o[16] = (syndrome_o == 6'h1c) ^ data_i[16];
+  assign data_o[17] = (syndrome_o == 6'h2c) ^ data_i[17];
+  assign data_o[18] = (syndrome_o == 6'h34) ^ data_i[18];
+  assign data_o[19] = (syndrome_o == 6'h38) ^ data_i[19];
+  assign data_o[20] = (syndrome_o == 6'h3b) ^ data_i[20];
+  assign data_o[21] = (syndrome_o == 6'h3d) ^ data_i[21];
 
   // err_o calc. bit0: single error, bit1: double error
   assign single_error = ^syndrome_o;