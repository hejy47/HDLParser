57f926bed17ce0c265e4b23535613238160c8afe
[i2c, rtl] Various FSM fixes and improvements
diff --git a/hw/ip/i2c/rtl/i2c_fsm.sv b/hw/ip/i2c/rtl/i2c_fsm.sv
index f4a6a733a..a30e6e83e 100644
--- a/hw/ip/i2c/rtl/i2c_fsm.sv
+++ b/hw/ip/i2c/rtl/i2c_fsm.sv
@@ -16,6 +16,8 @@ module i2c_fsm (
   input        host_enable_i, // enable host functionality
 
   input        fmt_fifo_rvalid_i, // indicates there is valid data in fmt_fifo
+  input        fmt_fifo_wvalid_i, // indicates data is being put into fmt_fifo
+  input [5:0]  fmt_fifo_depth_i,  // fmt_fifo_depth
   output logic fmt_fifo_rready_o, // populates fmt_fifo
   input [7:0]  fmt_byte_i,        // byte in fmt_fifo to be sent to target
   input        fmt_flag_start_before_i, // issue start before sending byte
@@ -93,8 +95,8 @@ module i2c_fsm (
         tHoldBit    : tcount_d = t_f_i + thd_dat_i;
         tSetupStop  : tcount_d = t_r_i + tsu_sto_i;
         tHoldStop   : tcount_d = t_r_i + t_buf_i - tsu_sta_i;
-        tNoDelay    : tcount_d = '0;
-        default     : tcount_d = '0;
+        tNoDelay    : tcount_d = 20'b1;
+        default     : tcount_d = 20'b1;
       endcase
     end else if (stretch == 0) begin
       tcount_d = tcount_q - 1'b1;
@@ -105,7 +107,7 @@ module i2c_fsm (
 
   always_ff @ (posedge clk_i or negedge rst_ni) begin : clk_counter
     if (!rst_ni) begin
-      tcount_q <= '0;
+      tcount_q <= '1;
     end else begin
       tcount_q <= tcount_d;
     end
@@ -184,7 +186,7 @@ module i2c_fsm (
         ClockLowAck, SetupDevAck, ClockPulseAck, HoldDevAck,
         ReadClockLow, ReadSetupBit, ReadClockPulse, ReadHoldBit,
         HostClockLowAck, HostSetupBitAck, HostClockPulseAck, HostHoldBitAck,
-        Continue
+        Active
   } state_e;
 
   state_e state_q, state_d;
@@ -310,7 +312,7 @@ module i2c_fsm (
       ReadHoldBit : begin
         host_idle_o = 1'b0;
         scl_temp = 1'b0;
-        if (bit_index == 0 && tcount_q == 0) begin
+        if (bit_index == 0 && tcount_q == 1) begin
           rx_fifo_wdata_o = read_byte;  // transfer read data to rx_fifo
           rx_fifo_wvalid_o = 1'b1;      // assert that rx_fifo has valid data
         end
@@ -324,18 +326,18 @@ module i2c_fsm (
       // HostSetupBitAck: Shift Ack/Nack bit onto SDA
       HostSetupBitAck : begin
         host_idle_o = 1'b0;
-        if (fmt_flag_stop_after_i && byte_index == 0) sda_temp = 1'b1;
-        else if (fmt_flag_read_continue_i) sda_temp = 1'b0;
-        else sda_temp = 1'b1;
+        if (fmt_flag_read_continue_i) sda_temp = 1'b0;
+        else if (byte_index == 1) sda_temp = 1'b1;
+        else sda_temp = 1'b0;
         scl_temp = 1'b0;
         if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
       end
       // HostClockPulseAck: SCL is released
       HostClockPulseAck : begin
         host_idle_o = 1'b0;
-        if (fmt_flag_stop_after_i && byte_index == 0) sda_temp = 1'b1;
-        else if (fmt_flag_read_continue_i) sda_temp = 1'b0;
-        else sda_temp = 1'b1;
+        if (fmt_flag_read_continue_i) sda_temp = 1'b0;
+        else if (byte_index == 1) sda_temp = 1'b1;
+        else sda_temp = 1'b0;
         scl_temp = 1'b1;
         if ((stretch > stretch_timeout_i) && timeout_enable_i) begin
           event_stretch_timeout_o = 1'b1;
@@ -347,9 +349,9 @@ module i2c_fsm (
       // HostHoldBitAck: SCL is pulled low
       HostHoldBitAck : begin
         host_idle_o = 1'b0;
-        if (fmt_flag_stop_after_i && byte_index == 0) sda_temp = 1'b1;
-        else if (fmt_flag_read_continue_i) sda_temp = 1'b0;
-        else sda_temp = 1'b1;
+        if (fmt_flag_read_continue_i) sda_temp = 1'b0;
+        else if (byte_index == 1) sda_temp = 1'b1;
+        else sda_temp = 1'b0;
         scl_temp = 1'b0;
         if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
       end
@@ -366,8 +368,8 @@ module i2c_fsm (
         scl_temp = 1'b1;
         if (sda_i == 0) event_sda_interference_o = 1'b1;
       end
-      // Continue: continue while keeping SCL low
-      Continue : begin
+      // Active: Hold SCL low
+      Active : begin
         host_idle_o = 1'b0;
         scl_temp = 1'b0;
       end
@@ -430,7 +432,7 @@ module i2c_fsm (
 
       // SetupStart: SDA and SCL are released
       SetupStart : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = HoldStart;
           load_tcount = 1'b1;
           tcount_sel = tHoldStart;
@@ -438,7 +440,7 @@ module i2c_fsm (
       end
       // HoldStart: SDA is pulled low, SCL is released
       HoldStart : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = ClockLow;
           load_tcount = 1'b1;
           tcount_sel = tClockLow;
@@ -447,7 +449,7 @@ module i2c_fsm (
 
       // ClockLow: SCL is pulled low, SDA stays low
       ClockLow : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = SetupBit;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -455,7 +457,7 @@ module i2c_fsm (
       end
       // SetupBit: Shift indexed bit onto SDA, SCL stays low
       SetupBit : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = ClockPulse;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -463,7 +465,7 @@ module i2c_fsm (
       end
       // ClockPulse: SCL is released, SDA keeps the indexed bit value
       ClockPulse : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = HoldBit;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -471,7 +473,7 @@ module i2c_fsm (
       end
       // HoldBit: SCL is pulled low
       HoldBit : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           load_tcount = 1'b1;
           tcount_sel = tClockLow;
           if (bit_index == 0) begin
@@ -486,7 +488,7 @@ module i2c_fsm (
 
       // ClockLowAck: SCL and SDA are pulled low
       ClockLowAck : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = SetupDevAck;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -494,7 +496,7 @@ module i2c_fsm (
       end
       // SetupDevAck: SDA is released, waiting for target to pull it low
       SetupDevAck : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = ClockPulseAck;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -502,7 +504,7 @@ module i2c_fsm (
       end
       // ClockPulseAck: SCL is released
       ClockPulseAck : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = HoldDevAck;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -510,7 +512,7 @@ module i2c_fsm (
       end
       // HoldDevAck: SCL is pulled low
       HoldDevAck : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           if (fmt_flag_stop_after_i) begin
             state_d = SetupStop;
             load_tcount = 1'b1;
@@ -525,7 +527,7 @@ module i2c_fsm (
 
       // ReadClockLow: SCL is pulled low, SDA stays low
       ReadClockLow : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = ReadSetupBit;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -533,7 +535,7 @@ module i2c_fsm (
       end
       // ReadSetupBit: Shift indexed bit onto SDA, SCL stays low
       ReadSetupBit : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = ReadClockPulse;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -541,7 +543,7 @@ module i2c_fsm (
       end
       // ReadClockPulse: SCL is released, the indexed bit value is read off SDA
       ReadClockPulse : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = ReadHoldBit;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -550,7 +552,7 @@ module i2c_fsm (
       end
       // ReadHoldBit: SCL is pulled low
       ReadHoldBit : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           load_tcount = 1'b1;
           tcount_sel = tClockLow;
           if (bit_index == 0) begin
@@ -566,7 +568,7 @@ module i2c_fsm (
 
       // HostClockLowAck: SCL and SDA are pulled low
       HostClockLowAck : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = HostSetupBitAck;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -574,7 +576,7 @@ module i2c_fsm (
       end
       // HostSetupBitAck: Shift Ack/Nack bit onto SDA
       HostSetupBitAck : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = HostClockPulseAck;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -582,7 +584,7 @@ module i2c_fsm (
       end
       // HostClockPulseAck: SCL is released
       HostClockPulseAck : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = HostHoldBitAck;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -590,8 +592,8 @@ module i2c_fsm (
       end
       // HostHoldBitAck: SCL is pulled low
       HostHoldBitAck : begin
-        if (tcount_q == 0) begin
-          if (byte_index == 0) begin
+        if (tcount_q == 1) begin
+          if (byte_index == 1) begin
             if (fmt_flag_stop_after_i) begin
               state_d = SetupStop;
               load_tcount = 1'b1;
@@ -612,7 +614,7 @@ module i2c_fsm (
 
       // SetupStop: SDA is pulled low, SCL is released
       SetupStop : begin
-        if (tcount_q == 0) begin
+        if (tcount_q == 1) begin
           state_d = HoldStop;
           load_tcount = 1'b1;
           tcount_sel = tHoldStop;
@@ -620,8 +622,8 @@ module i2c_fsm (
       end
       // HoldStop: SDA and SCL are released
       HoldStop : begin
-        if (tcount_q == 0) begin
-           if (!host_enable_i) begin
+        if (tcount_q == 1) begin
+          if (!host_enable_i) begin
              state_d = Idle;
              load_tcount = 1'b1;
              tcount_sel = tNoDelay;
@@ -633,8 +635,8 @@ module i2c_fsm (
         end
       end
 
-      // Continue: continue while keeping SCL low
-      Continue : begin
+      // Active: Hold SCL low
+      Active : begin
         if (fmt_flag_read_bytes_i) begin
           byte_clr = 1'b1;
           state_d = ReadClockLow;
@@ -657,12 +659,12 @@ module i2c_fsm (
           state_d = SetupStop;
           load_tcount = 1'b1;
           tcount_sel = tSetupStop;
-        end else if (!fmt_fifo_rvalid_i) begin
+        end else if (fmt_fifo_depth_i == 1 && !fmt_fifo_wvalid_i) begin
           state_d = Idle;
           load_tcount = 1'b1;
           tcount_sel = tNoDelay;
         end else begin
-          state_d = Continue;
+          state_d = Active;
           load_tcount = 1'b1;
           tcount_sel = tNoDelay;
         end