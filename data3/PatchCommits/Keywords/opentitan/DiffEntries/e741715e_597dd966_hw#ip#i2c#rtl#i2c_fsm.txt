e741715e7b9ee4e5c1913afbbd175832aca20530
[i2c, rtl] Fixed Lint warnings
diff --git a/hw/ip/i2c/rtl/i2c_fsm.sv b/hw/ip/i2c/rtl/i2c_fsm.sv
index 3459d6aaa..7bc7d9bfb 100644
--- a/hw/ip/i2c/rtl/i2c_fsm.sv
+++ b/hw/ip/i2c/rtl/i2c_fsm.sv
@@ -126,20 +126,20 @@ module i2c_fsm (
     tcount_d = tcount_q;
     if (load_tcount) begin
       unique case (tcount_sel)
-        tSetupStart : tcount_d = t_r_i + tsu_sta_i;
-        tHoldStart  : tcount_d = t_f_i + thd_sta_i;
+        tSetupStart : tcount_d = 20'(t_r_i) + 20'(tsu_sta_i);
+        tHoldStart  : tcount_d = 20'(t_f_i) + 20'(thd_sta_i);
         tClockStart : tcount_d = 20'(thd_dat_i);
-        tClockLow   : tcount_d = tlow_i - t_r_i - tsu_dat_i - thd_dat_i;
-        tSetupBit   : tcount_d = t_r_i + tsu_dat_i;
-        tClockPulse : tcount_d = t_r_i + thigh_i + t_f_i;
-        tHoldBit    : tcount_d = t_f_i + thd_dat_i;
-        tClockStop  : tcount_d = t_f_i + tlow_i - thd_dat_i;
-        tSetupStop  : tcount_d = t_r_i + tsu_sto_i;
-        tHoldStop   : tcount_d = t_r_i + t_buf_i - tsu_sta_i;
+        tClockLow   : tcount_d = 20'(tlow_i) - 20'(t_r_i) - 20'(tsu_dat_i) - 20'(thd_dat_i);
+        tSetupBit   : tcount_d = 20'(t_r_i) + 20'(tsu_dat_i);
+        tClockPulse : tcount_d = 20'(t_r_i) + 20'(thigh_i) + 20'(t_f_i);
+        tHoldBit    : tcount_d = 20'(t_f_i) + 20'(thd_dat_i);
+        tClockStop  : tcount_d = 20'(t_f_i) + 20'(tlow_i) - 20'(thd_dat_i);
+        tSetupStop  : tcount_d = 20'(t_r_i) + 20'(tsu_sto_i);
+        tHoldStop   : tcount_d = 20'(t_r_i) + 20'(t_buf_i) - 20'(tsu_sta_i);
         tNoDelay    : tcount_d = 20'h00001;
         default     : tcount_d = 20'h00001;
       endcase
-    end else if (stretch == 0) begin
+    end else if (stretch == '0) begin
       tcount_d = tcount_q - 1'b1;
     end else begin
       tcount_d = tcount_q;  // pause timer if clock is stretched
@@ -158,7 +158,7 @@ module i2c_fsm (
   always_ff @ (posedge clk_i or negedge rst_ni) begin : clk_stretch
     if (!rst_ni) begin
       stretch <= '0;
-    end else if (scl_temp == 1 && scl_i == 0) begin
+    end else if (scl_temp == 1'b1 && scl_i == '0) begin
       stretch <= stretch + 1'b1;
     end else begin
       stretch <= '0;
@@ -192,7 +192,7 @@ module i2c_fsm (
   // Number of bytes to read
   always_comb begin : byte_number
     if (!fmt_flag_read_bytes_i) byte_num = 9'd0;
-    else if (fmt_byte_i == 0) byte_num = 9'd256;
+    else if (fmt_byte_i == '0) byte_num = 9'd256;
     else byte_num = 9'(fmt_byte_i);
   end
 
@@ -342,7 +342,7 @@ module i2c_fsm (
         host_idle_o = 1'b1;
         sda_temp = 1'b1;
         scl_temp = 1'b1;
-        if (host_enable_i && sda_i == 0) event_sda_interference_o = 1'b1;
+        if (host_enable_i && sda_i == '0) event_sda_interference_o = 1'b1;
         if (!target_address0_i && !target_mask0_i && !target_address1_i && !target_mask1_i) begin
           acq_fifo_wvalid_o = 1'b0;
         end
@@ -352,8 +352,8 @@ module i2c_fsm (
         host_idle_o = 1'b0;
         sda_temp = 1'b1;
         scl_temp = 1'b1;
-        if (sda_i == 0) event_sda_interference_o = 1'b1;
-        if (restart == 1) event_trans_complete_o = 1'b1;
+        if (sda_i == '0) event_sda_interference_o = 1'b1;
+        if (restart == 1'b1) event_trans_complete_o = 1'b1;
       end
       // HoldStart: SDA is pulled low, SCL is released
       HoldStart : begin
@@ -378,7 +378,7 @@ module i2c_fsm (
         host_idle_o = 1'b0;
         sda_temp = fmt_byte_i[bit_index];
         scl_temp = 1'b0;
-        if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
+        if (sda_temp == 1'b1 && sda_i == '0) event_sda_interference_o = 1'b1;
       end
       // ClockPulse: SCL is released, SDA keeps the indexed bit value
       ClockPulse : begin
@@ -388,8 +388,8 @@ module i2c_fsm (
         if ((stretch > stretch_timeout_i) && timeout_enable_i) begin
           event_stretch_timeout_o = 1'b1;
         end
-        if (scl_i_q == 1 && scl_i == 0)  event_scl_interference_o = 1'b1;
-        if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
+        if (scl_i_q == 1'b1 && scl_i == '0)  event_scl_interference_o = 1'b1;
+        if (sda_temp == 1'b1 && sda_i == '0) event_sda_interference_o = 1'b1;
         if (sda_i_q != sda_i)            event_sda_unstable_o = 1'b1;
       end
       // HoldBit: SCL is pulled low
@@ -397,7 +397,7 @@ module i2c_fsm (
         host_idle_o = 1'b0;
         sda_temp = fmt_byte_i[bit_index];
         scl_temp = 1'b0;
-        if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
+        if (sda_temp == 1'b1 && sda_i == '0) event_sda_interference_o = 1'b1;
       end
       // ClockLowAck: SCL and SDA are pulled low
       ClockLowAck : begin
@@ -416,11 +416,11 @@ module i2c_fsm (
         host_idle_o = 1'b0;
         sda_temp = 1'b1;
         scl_temp = 1'b1;
-        if (sda_i == 0 && !fmt_flag_nak_ok_i) event_nak_o = 1'b1;
+        if (sda_i == '0 && !fmt_flag_nak_ok_i) event_nak_o = 1'b1;
         if ((stretch > stretch_timeout_i) && timeout_enable_i) begin
           event_stretch_timeout_o = 1'b1;
         end
-        if (scl_i_q == 1 && scl_i == 0)  event_scl_interference_o = 1'b1;
+        if (scl_i_q == 1'b1 && scl_i == '0)  event_scl_interference_o = 1'b1;
         if (sda_i_q != sda_i)            event_sda_unstable_o = 1'b1;
       end
       // HoldDevAck: SCL is pulled low
@@ -447,14 +447,14 @@ module i2c_fsm (
         if ((stretch > stretch_timeout_i) && timeout_enable_i) begin
           event_stretch_timeout_o = 1'b1;
         end
-        if (scl_i_q == 1 && scl_i == 0)  event_scl_interference_o = 1'b1;
+        if (scl_i_q == 1'b1 && scl_i == '0)  event_scl_interference_o = 1'b1;
         if (sda_i_q != sda_i)            event_sda_unstable_o = 1'b1;
       end
       // ReadHoldBit: SCL is pulled low
       ReadHoldBit : begin
         host_idle_o = 1'b0;
         scl_temp = 1'b0;
-        if (bit_index == 0 && tcount_q == 1) begin
+        if (bit_index == '0 && tcount_q == 20'd1) begin
           rx_fifo_wdata_o = read_byte;  // transfer read data to rx_fifo
           rx_fifo_wvalid_o = 1'b1;      // assert that rx_fifo has valid data
         end
@@ -469,33 +469,33 @@ module i2c_fsm (
       HostSetupBitAck : begin
         host_idle_o = 1'b0;
         if (fmt_flag_read_continue_i) sda_temp = 1'b0;
-        else if (byte_index == 1) sda_temp = 1'b1;
+        else if (byte_index == 9'd1) sda_temp = 1'b1;
         else sda_temp = 1'b0;
         scl_temp = 1'b0;
-        if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
+        if (sda_temp == 1'b1 && sda_i == '0) event_sda_interference_o = 1'b1;
       end
       // HostClockPulseAck: SCL is released
       HostClockPulseAck : begin
         host_idle_o = 1'b0;
         if (fmt_flag_read_continue_i) sda_temp = 1'b0;
-        else if (byte_index == 1) sda_temp = 1'b1;
+        else if (byte_index == 9'd1) sda_temp = 1'b1;
         else sda_temp = 1'b0;
         scl_temp = 1'b1;
         if ((stretch > stretch_timeout_i) && timeout_enable_i) begin
           event_stretch_timeout_o = 1'b1;
         end
-        if (scl_i_q == 1 && scl_i == 0)  event_scl_interference_o = 1'b1;
-        if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
+        if (scl_i_q == 1'b1 && scl_i == '0)  event_scl_interference_o = 1'b1;
+        if (sda_temp == 1'b1 && sda_i == '0) event_sda_interference_o = 1'b1;
         if (sda_i_q != sda_i)            event_sda_unstable_o = 1'b1;
       end
       // HostHoldBitAck: SCL is pulled low
       HostHoldBitAck : begin
         host_idle_o = 1'b0;
         if (fmt_flag_read_continue_i) sda_temp = 1'b0;
-        else if (byte_index == 1) sda_temp = 1'b1;
+        else if (byte_index == 9'd1) sda_temp = 1'b1;
         else sda_temp = 1'b0;
         scl_temp = 1'b0;
-        if (sda_temp == 1 && sda_i == 0) event_sda_interference_o = 1'b1;
+        if (sda_temp == 1'b1 && sda_i == '0) event_sda_interference_o = 1'b1;
       end
       // ClockStop: SCL is pulled low, SDA stays low
       ClockStop : begin
@@ -514,7 +514,7 @@ module i2c_fsm (
         host_idle_o = 1'b0;
         sda_temp = 1'b1;
         scl_temp = 1'b1;
-        if (sda_i == 0) event_sda_interference_o = 1'b1;
+        if (sda_i == '0) event_sda_interference_o = 1'b1;
         event_trans_complete_o = 1'b1;
       end
       // Active: continue while keeping SCL low
@@ -688,7 +688,7 @@ module i2c_fsm (
       // SetupStart: SDA and SCL are released
       SetupStart : begin
         if (no_stop) restart = 1'b1;
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = HoldStart;
           load_tcount = 1'b1;
           tcount_sel = tHoldStart;
@@ -697,7 +697,7 @@ module i2c_fsm (
       end
       // HoldStart: SDA is pulled low, SCL is released
       HoldStart : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = ClockStart;
           load_tcount = 1'b1;
           tcount_sel = tClockStart;
@@ -705,7 +705,7 @@ module i2c_fsm (
       end
       // ClockStart: SCL is pulled low, SDA stays low
       ClockStart : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = ClockLow;
           load_tcount = 1'b1;
           tcount_sel = tClockLow;
@@ -714,7 +714,7 @@ module i2c_fsm (
 
       // ClockLow: SCL is pulled low, SDA stays low
       ClockLow : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = SetupBit;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -722,7 +722,7 @@ module i2c_fsm (
       end
       // SetupBit: Shift indexed bit onto SDA, SCL stays low
       SetupBit : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = ClockPulse;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -730,7 +730,7 @@ module i2c_fsm (
       end
       // ClockPulse: SCL is released, SDA keeps the indexed bit value
       ClockPulse : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = HoldBit;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -738,10 +738,10 @@ module i2c_fsm (
       end
       // HoldBit: SCL is pulled low
       HoldBit : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           load_tcount = 1'b1;
           tcount_sel = tClockLow;
-          if (bit_index == 0) begin
+          if (bit_index == '0) begin
             state_d = ClockLowAck;
             bit_clr = 1'b1;
           end else begin
@@ -753,7 +753,7 @@ module i2c_fsm (
 
       // ClockLowAck: SCL and SDA are pulled low
       ClockLowAck : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = SetupDevAck;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -761,7 +761,7 @@ module i2c_fsm (
       end
       // SetupDevAck: SDA is released, waiting for target to pull it low
       SetupDevAck : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = ClockPulseAck;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -769,7 +769,7 @@ module i2c_fsm (
       end
       // ClockPulseAck: SCL is released
       ClockPulseAck : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = HoldDevAck;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -777,7 +777,7 @@ module i2c_fsm (
       end
       // HoldDevAck: SCL is pulled low
       HoldDevAck : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           if (fmt_flag_stop_after_i) begin
             state_d = ClockStop;
             load_tcount = 1'b1;
@@ -792,7 +792,7 @@ module i2c_fsm (
 
       // ReadClockLow: SCL is pulled low, SDA is released
       ReadClockLow : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = ReadSetupBit;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -800,7 +800,7 @@ module i2c_fsm (
       end
       // ReadSetupBit: Shift indexed bit onto SDA, SCL stays low
       ReadSetupBit : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = ReadClockPulse;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -808,7 +808,7 @@ module i2c_fsm (
       end
       // ReadClockPulse: SCL is released, the indexed bit value is read off SDA
       ReadClockPulse : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = ReadHoldBit;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -817,10 +817,10 @@ module i2c_fsm (
       end
       // ReadHoldBit: SCL is pulled low
       ReadHoldBit : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           load_tcount = 1'b1;
           tcount_sel = tClockLow;
-          if (bit_index == 0) begin
+          if (bit_index == '0) begin
             state_d = HostClockLowAck;
             bit_clr = 1'b1;
             read_byte_clr = 1'b1;
@@ -833,7 +833,7 @@ module i2c_fsm (
 
       // HostClockLowAck: SCL and SDA are pulled low
       HostClockLowAck : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = HostSetupBitAck;
           load_tcount = 1'b1;
           tcount_sel = tSetupBit;
@@ -841,7 +841,7 @@ module i2c_fsm (
       end
       // HostSetupBitAck: Shift Ack/Nack bit onto SDA
       HostSetupBitAck : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = HostClockPulseAck;
           load_tcount = 1'b1;
           tcount_sel = tClockPulse;
@@ -849,7 +849,7 @@ module i2c_fsm (
       end
       // HostClockPulseAck: SCL is released
       HostClockPulseAck : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = HostHoldBitAck;
           load_tcount = 1'b1;
           tcount_sel = tHoldBit;
@@ -857,8 +857,8 @@ module i2c_fsm (
       end
       // HostHoldBitAck: SCL is pulled low
       HostHoldBitAck : begin
-        if (tcount_q == 1) begin
-          if (byte_index == 1) begin
+        if (tcount_q == 20'd1) begin
+          if (byte_index == 9'd1) begin
             if (fmt_flag_stop_after_i) begin
               state_d = ClockStop;
               load_tcount = 1'b1;
@@ -879,7 +879,7 @@ module i2c_fsm (
 
       // ClockStop: SCL is pulled low, SDA stays low
       ClockStop : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = SetupStop;
           load_tcount = 1'b1;
           tcount_sel = tSetupStop;
@@ -887,7 +887,7 @@ module i2c_fsm (
       end
       // SetupStop: SDA is pulled low, SCL is released
       SetupStop : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           state_d = HoldStop;
           load_tcount = 1'b1;
           tcount_sel = tHoldStop;
@@ -896,7 +896,7 @@ module i2c_fsm (
       end
       // HoldStop: SDA and SCL are released
       HoldStop : begin
-        if (tcount_q == 1) begin
+        if (tcount_q == 20'd1) begin
           if (!host_enable_i) begin
             state_d = Idle;
             load_tcount = 1'b1;
@@ -933,7 +933,7 @@ module i2c_fsm (
           state_d = ClockStop;
           load_tcount = 1'b1;
           tcount_sel = tClockStop;
-        end else if (fmt_fifo_depth_i == 1 && !fmt_fifo_wvalid_i) begin
+        end else if (fmt_fifo_depth_i == 6'd1 && !fmt_fifo_wvalid_i) begin
           state_d = Idle;
           load_tcount = 1'b1;
           tcount_sel = tNoDelay;