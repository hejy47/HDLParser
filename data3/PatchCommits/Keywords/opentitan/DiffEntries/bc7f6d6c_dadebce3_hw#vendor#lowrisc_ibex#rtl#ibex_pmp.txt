bc7f6d6cde2259f2741e40112f2ff4c6871d0d75
Update lowrisc_ibex to lowRISC/ibex@6d9e1ac
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
index 1b48693a0..3d110f659 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
@@ -16,8 +16,9 @@ module ibex_pmp #(
     input  logic                    rst_ni,
 
     // Interface to CSRs
-    input  ibex_pkg::pmp_cfg_t      csr_pmp_cfg_i  [PMPNumRegions],
-    input  logic [33:0]             csr_pmp_addr_i [PMPNumRegions],
+    input  ibex_pkg::pmp_cfg_t      csr_pmp_cfg_i     [PMPNumRegions],
+    input  logic [33:0]             csr_pmp_addr_i    [PMPNumRegions],
+    input  ibex_pkg::pmp_mseccfg_t  csr_pmp_mseccfg_i,
 
     input  ibex_pkg::priv_lvl_e     priv_mode_i    [PMPNumChan],
     // Access checking channels
@@ -36,7 +37,8 @@ module ibex_pmp #(
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_lt;
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_eq;
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_all;
-  logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_perm_check;
+  logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_basic_perm_check;
+  logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_mml_perm_check;
   logic [PMPNumChan-1:0]                      access_fault;
 
 
@@ -55,8 +57,8 @@ module ibex_pmp #(
     end
     // Address mask for NA matching
     for (genvar b = PMPGranularity+2; b < 34; b++) begin : g_bitmask
-      if (b == PMPGranularity+2) begin : g_bit0
-        // Always mask bit (G+2) for NAPOT
+      if (b == 2) begin : g_bit0
+        // Always mask bit 2 for NAPOT
         assign region_addr_mask[r][b] = (csr_pmp_cfg_i[r].mode != PMP_MODE_NAPOT);
       end else begin : g_others
         // We will mask this bit if it is within the programmed granule
@@ -64,8 +66,13 @@ module ibex_pmp #(
         //                  ^
         //                  | This bit pos is the top of the mask, all lower bits set
         // thus mask = 1111 0000
-        assign region_addr_mask[r][b] = (csr_pmp_cfg_i[r].mode != PMP_MODE_NAPOT) |
-                                        ~&csr_pmp_addr_i[r][b-1:PMPGranularity+2];
+        if (PMPGranularity == 0) begin : g_region_addr_mask_zero_granularity
+          assign region_addr_mask[r][b] = (csr_pmp_cfg_i[r].mode != PMP_MODE_NAPOT) |
+                                          ~&csr_pmp_addr_i[r][b-1:2];
+        end else begin : g_region_addr_mask_other_granularity
+          assign region_addr_mask[r][b] = (csr_pmp_cfg_i[r].mode != PMP_MODE_NAPOT) |
+                                          ~&csr_pmp_addr_i[r][b-1:PMPGranularity+1];
+        end
       end
     end
   end
@@ -97,27 +104,72 @@ module ibex_pmp #(
       end
 
       // Check specific required permissions
-      assign region_perm_check[c][r] =
+      assign region_basic_perm_check[c][r] =
           ((pmp_req_type_i[c] == PMP_ACC_EXEC)  & csr_pmp_cfg_i[r].exec) |
           ((pmp_req_type_i[c] == PMP_ACC_WRITE) & csr_pmp_cfg_i[r].write) |
           ((pmp_req_type_i[c] == PMP_ACC_READ)  & csr_pmp_cfg_i[r].read);
+
+
+      // Compute permission checks that apply when MSECCFG.MML is set.
+      always_comb begin
+        region_mml_perm_check[c][r] = 1'b0;
+
+        if (!csr_pmp_cfg_i[r].read && csr_pmp_cfg_i[r].write) begin
+          // Special-case shared regions where R = 0, W = 1
+          unique case ({csr_pmp_cfg_i[r].lock, csr_pmp_cfg_i[r].exec})
+            // Read/write in M, read only in S/U
+            2'b00: region_mml_perm_check[c][r] =
+                (pmp_req_type_i[c] == PMP_ACC_READ) |
+                ((pmp_req_type_i[c] == PMP_ACC_WRITE) & (priv_mode_i[c] == PRIV_LVL_M));
+            // Read/write in M/S/U
+            2'b01: region_mml_perm_check[c][r] =
+                (pmp_req_type_i[c] == PMP_ACC_READ) | (pmp_req_type_i[c] == PMP_ACC_WRITE);
+            // Execute only on M/S/U
+            2'b10: region_mml_perm_check[c][r] = (pmp_req_type_i[c] == PMP_ACC_EXEC);
+            // Read/execute in M, execute only on S/U
+            2'b11: region_mml_perm_check[c][r] =
+                (pmp_req_type_i[c] == PMP_ACC_EXEC) |
+                ((pmp_req_type_i[c] == PMP_ACC_READ) & (priv_mode_i[c] == PRIV_LVL_M));
+            default: ;
+          endcase
+        end else begin
+          if (csr_pmp_cfg_i[r].read & csr_pmp_cfg_i[r].write & csr_pmp_cfg_i[r].exec
+              & csr_pmp_cfg_i[r].lock) begin
+            // Special-case shared read only region when R = 1, W = 1, X = 1, L = 1
+            region_mml_perm_check[c][r] = pmp_req_type_i[c] == PMP_ACC_READ;
+          end else begin
+            // Otherwise use basic permission check. Permission is always denied if in S/U mode and
+            // L is set or if in M mode and L is unset.
+            region_mml_perm_check[c][r] =
+              priv_mode_i[c] == PRIV_LVL_M ? csr_pmp_cfg_i[r].lock & region_basic_perm_check[c][r] :
+                                            ~csr_pmp_cfg_i[r].lock & region_basic_perm_check[c][r];
+          end
+        end
+      end
     end
 
     // Access fault determination / prioritization
     always_comb begin
-      // Default is allow for M-mode, deny for other modes
-      access_fault[c] = (priv_mode_i[c] != PRIV_LVL_M);
+      // When MSECCFG.MMWP is set default deny always, otherwise allow for M-mode, deny for other
+      // modes
+      access_fault[c] = csr_pmp_mseccfg_i.mmwp | (priv_mode_i[c] != PRIV_LVL_M);
 
       // PMP entries are statically prioritized, from 0 to N-1
       // The lowest-numbered PMP entry which matches an address determines accessability
       for (int r = PMPNumRegions-1; r >= 0; r--) begin
         if (region_match_all[c][r]) begin
-          access_fault[c] = (priv_mode_i[c] == PRIV_LVL_M) ?
-              // For M-mode, any region which matches with the L-bit clear, or with sufficient
-              // access permissions will be allowed
-              (csr_pmp_cfg_i[r].lock & ~region_perm_check[c][r]) :
-              // For other modes, the lock bit doesn't matter
-              ~region_perm_check[c][r];
+          if (csr_pmp_mseccfg_i.mml) begin
+            // When MSECCFG.MML is set use MML specific permission check
+            access_fault[c] = ~region_mml_perm_check[c][r];
+          end else begin
+            // Otherwise use original PMP behaviour
+            access_fault[c] = (priv_mode_i[c] == PRIV_LVL_M) ?
+                // For M-mode, any region which matches with the L-bit clear, or with sufficient
+                // access permissions will be allowed
+                (csr_pmp_cfg_i[r].lock & ~region_basic_perm_check[c][r]) :
+                // For other modes, the lock bit doesn't matter
+                ~region_basic_perm_check[c][r];
+          end
         end
       end
     end
@@ -125,4 +177,8 @@ module ibex_pmp #(
     assign pmp_req_err_o[c] = access_fault[c];
   end
 
+  // RLB, rule locking bypass, is only relevant to ibex_cs_registers which controls writes to the
+  // PMP CSRs. Tie to unused signal here to prevent lint warnings.
+  logic unused_csr_pmp_mseccfg_rlb;
+  assign unused_csr_pmp_mseccfg_rlb = csr_pmp_mseccfg_i.rlb;
 endmodule