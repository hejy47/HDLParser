53ef2ec43c1c1eb00b771e17fc157f5bb1103ed5
Update lowrisc_ibex to lowRISC/ibex@d14312c
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_fetch_fifo.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_fetch_fifo.sv
index ba3276720..1a2d5d1eb 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_fetch_fifo.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_fetch_fifo.sv
@@ -1,18 +1,8 @@
 // Copyright lowRISC contributors.
-// Copyright 2018 ETH Zurich and University of Bologna.
+// Copyright 2018 ETH Zurich and University of Bologna, see also CREDITS.md.
 // Licensed under the Apache License, Version 2.0, see LICENSE for details.
 // SPDX-License-Identifier: Apache-2.0
 
-////////////////////////////////////////////////////////////////////////////////
-// Engineer:       Andreas Traber - atraber@iis.ee.ethz.ch                    //
-//                                                                            //
-// Design Name:    Fetch Fifo for 32 bit memory interface                     //
-// Project Name:   ibex                                                       //
-// Language:       SystemVerilog                                              //
-//                                                                            //
-// Description:    Fetch fifo                                                 //
-////////////////////////////////////////////////////////////////////////////////
-
 /**
  * Fetch Fifo for 32 bit memory interface
  *
@@ -30,6 +20,7 @@ module ibex_fetch_fifo (
     // input port
     input  logic [31:0] in_addr_i,
     input  logic [31:0] in_rdata_i,
+    input  logic        in_err_i,
     input  logic        in_valid_i,
     output logic        in_ready_o,
 
@@ -39,6 +30,7 @@ module ibex_fetch_fifo (
     input  logic        out_ready_i,
     output logic [31:0] out_rdata_o,
     output logic [31:0] out_addr_o,
+    output logic        out_err_o,
 
     output logic        out_valid_stored_o // same as out_valid_o, except that if something is
                                            // incoming now it is not included. This signal is
@@ -50,10 +42,12 @@ module ibex_fetch_fifo (
   // index 0 is used for output
   logic [DEPTH-1:0] [31:0]  addr_n,    addr_int,    addr_q;
   logic [DEPTH-1:0] [31:0]  rdata_n,   rdata_int,   rdata_q;
+  logic [DEPTH-1:0]         err_n,     err_int,     err_q;
   logic [DEPTH-1:0]         valid_n,   valid_int,   valid_q;
 
   logic             [31:2]  addr_next;
   logic             [31:0]  rdata, rdata_unaligned;
+  logic                     err,   err_unaligned;
   logic                     valid, valid_unaligned;
 
   logic                     aligned_is_compressed, unaligned_is_compressed;
@@ -65,12 +59,22 @@ module ibex_fetch_fifo (
 
 
   assign rdata = valid_q[0] ? rdata_q[0] : in_rdata_i;
+  assign err   = valid_q[0] ? err_q[0]   : in_err_i;
   assign valid = valid_q[0] | in_valid_i;
 
   assign rdata_unaligned = valid_q[1] ? {rdata_q[1][15:0], rdata[31:16]} :
                                         {in_rdata_i[15:0], rdata[31:16]};
-  // it is implied that rdata_valid_q[0] is set
-  assign valid_unaligned = valid_q[1] | (valid_q[0] & in_valid_i);
+  // If entry[1] is valid, an error can come from entry[0] or entry[1], unless the
+  // instruction in entry[0] is compressed (entry[1] is a new instruction)
+  // If entry[1] is not valid, and entry[0] is, an error can come from entry[0] or the incoming
+  // data, unless the instruction in entry[0] is compressed
+  // If entry[0] is not valid, the error must come from the incoming data
+  assign err_unaligned   = valid_q[1] ? ((err_q[1] & ~unaligned_is_compressed) | err_q[0]) :
+                                        ((valid_q[0] & err_q[0]) |
+                                         (in_err_i & (~valid_q[0] | ~unaligned_is_compressed)));
+  // An uncompressed unaligned instruction is only valid if both parts are available
+  assign valid_unaligned = valid_q[1] ? 1'b1 :
+                                        (valid_q[0] & in_valid_i);
 
   assign unaligned_is_compressed    = rdata[17:16] != 2'b11;
   assign aligned_is_compressed      = rdata[ 1: 0] != 2'b11;
@@ -87,6 +91,7 @@ module ibex_fetch_fifo (
     if (out_addr_o[1]) begin
       // unaligned case
       out_rdata_o = rdata_unaligned;
+      out_err_o   = err_unaligned;
 
       if (unaligned_is_compressed) begin
         out_valid_o = valid;
@@ -96,6 +101,7 @@ module ibex_fetch_fifo (
     end else begin
       // aligned case
       out_rdata_o = rdata;
+      out_err_o   = err;
       out_valid_o = valid;
     end
   end
@@ -134,12 +140,14 @@ module ibex_fetch_fifo (
   always_comb begin
     addr_int    = addr_q;
     rdata_int   = rdata_q;
+    err_int     = err_q;
     valid_int   = valid_q;
     if (in_valid_i) begin
       for (int j = 0; j < DEPTH; j++) begin
         if (!valid_q[j]) begin
           addr_int[j]  = in_addr_i;
           rdata_int[j] = in_rdata_i;
+          err_int[j]   = in_err_i;
           valid_int[j] = 1'b1;
           break;
         end
@@ -153,6 +161,7 @@ module ibex_fetch_fifo (
   always_comb begin
     addr_n     = addr_int;
     rdata_n    = rdata_int;
+    err_n      = err_int;
     valid_n    = valid_int;
 
     if (out_ready_i && out_valid_o) begin
@@ -165,6 +174,7 @@ module ibex_fetch_fifo (
         end
 
         rdata_n  = {32'b0, rdata_int[DEPTH-1:1]};
+        err_n    = {1'b0,  err_int[DEPTH-1:1]};
         valid_n  = {1'b0,  valid_int[DEPTH-1:1]};
       end else if (aligned_is_compressed) begin
         // just increase address, do not move to next entry in FIFO
@@ -173,6 +183,7 @@ module ibex_fetch_fifo (
         // move to next entry in FIFO
         addr_n[0] = {addr_next[31:2], 2'b00};
         rdata_n   = {32'b0, rdata_int[DEPTH-1:1]};
+        err_n     = {1'b0,  err_int[DEPTH-1:1]};
         valid_n   = {1'b0,  valid_int[DEPTH-1:1]};
       end
     end
@@ -186,6 +197,7 @@ module ibex_fetch_fifo (
     if (!rst_ni) begin
       addr_q    <= '{default: '0};
       rdata_q   <= '{default: '0};
+      err_q     <= '0;
       valid_q   <= '0;
     end else begin
       // on a clear signal from outside we invalidate the content of the FIFO
@@ -195,6 +207,7 @@ module ibex_fetch_fifo (
       end else begin
         addr_q    <= addr_n;
         rdata_q   <= rdata_n;
+        err_q     <= err_n;
         valid_q   <= valid_n;
       end
     end