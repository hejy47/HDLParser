7af52b90406790ba0969e127dba7dc2bcc25c5c3
[vsg] fix _i/_o for rv_plic
diff --git a/hw/ip/rv_plic/rtl/rv_plic_gateway.sv b/hw/ip/rv_plic/rtl/rv_plic_gateway.sv
index 31ab09937..c81810b24 100644
--- a/hw/ip/rv_plic/rtl/rv_plic_gateway.sv
+++ b/hw/ip/rv_plic/rtl/rv_plic_gateway.sv
@@ -10,52 +10,52 @@ module rv_plic_gateway #(
   input clk_i,
   input rst_ni,
 
-  input [N_SOURCE-1:0] src,
-  input [N_SOURCE-1:0] le,      // Level0 Edge1
+  input [N_SOURCE-1:0] src_i,
+  input [N_SOURCE-1:0] le_i,      // Level0 Edge1
 
-  input [N_SOURCE-1:0] claim, // $onehot0(claim)
-  input [N_SOURCE-1:0] complete, // $onehot0(complete)
+  input [N_SOURCE-1:0] claim_i, // $onehot0(claim_i)
+  input [N_SOURCE-1:0] complete_i, // $onehot0(complete_i)
 
-  output logic [N_SOURCE-1:0] ip
+  output logic [N_SOURCE-1:0] ip_o
 );
 
   logic [N_SOURCE-1:0] ia;    // Interrupt Active
 
-  logic [N_SOURCE-1:0] set;   // Set: (le) ? src & ~src_d : src ;
-  logic [N_SOURCE-1:0] src_d;
+  logic [N_SOURCE-1:0] set;   // Set: (le_i) ? src_i & ~src_q : src_i ;
+  logic [N_SOURCE-1:0] src_q;
 
   always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) src_d <= '0;
-    else         src_d <= src;
+    if (!rst_ni) src_q <= '0;
+    else         src_q <= src_i;
   end
 
   always_comb begin
     for (int i = 0 ; i < N_SOURCE; i++) begin
-      set[i] = (le[i]) ? src[i] & ~src_d[i] : src[i] ;
+      set[i] = (le_i[i]) ? src_i[i] & ~src_q[i] : src_i[i] ;
     end
   end
 
-  // Interrupt pending is set by source (depends on le), cleared by claim.
-  // Until interrupt is claimed, set doesn't affect ip.
+  // Interrupt pending is set by source (depends on le_i), cleared by claim_i.
+  // Until interrupt is claimed, set doesn't affect ip_o.
   // RISC-V PLIC spec mentioned it can have counter for edge triggered
   // But skipped the feature as counter consumes substantial logic size.
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      ip <= '0;
+      ip_o <= '0;
     end else begin
-      ip <= (ip | (set & ~ia & ~ip)) & (~(ip & claim));
+      ip_o <= (ip_o | (set & ~ia & ~ip_o)) & (~(ip_o & claim_i));
     end
   end
 
-  // Interrupt active is to control ip. If ip is set then until completed
-  // by target, ip shouldn't be set by source even claim can clear ip.
-  // ia can be cleared only when ia was set. If `set` and `complete` happen
+  // Interrupt active is to control ip_o. If ip_o is set then until completed
+  // by target, ip_o shouldn't be set by source even claim_i can clear ip_o.
+  // ia can be cleared only when ia was set. If `set` and `complete_i` happen
   // at the same time, always `set` wins.
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       ia <= '0;
     end else begin
-      ia <= (ia | (set & ~ia)) & (~(ia & complete & ~ip));
+      ia <= (ia | (set & ~ia)) & (~(ia & complete_i & ~ip_o));
     end
   end
 