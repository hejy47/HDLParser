21167d2118874f62091feb8b71926052de0a77a2
[i2c, rtl] Initial incomplete implementation of i2c target mode
diff --git a/hw/ip/i2c/rtl/i2c_core.sv b/hw/ip/i2c/rtl/i2c_core.sv
index e00bf6f34..ec1fce4dd 100644
--- a/hw/ip/i2c/rtl/i2c_core.sv
+++ b/hw/ip/i2c/rtl/i2c_core.sv
@@ -25,7 +25,12 @@ module  i2c_core (
   output logic                     intr_sda_interference_o,
   output logic                     intr_stretch_timeout_o,
   output logic                     intr_sda_unstable_o,
-  output logic                     intr_trans_complete_o
+  output logic                     intr_trans_complete_o,
+  output logic                     intr_tx_empty_o,
+  output logic                     intr_tx_nonempty_o,
+  output logic                     intr_tx_overflow_o,
+  output logic                     intr_acq_overflow_o,
+  output logic                     intr_ack_stop_o
 );
 
   logic [15:0] thigh;
@@ -54,6 +59,11 @@ module  i2c_core (
   logic event_stretch_timeout;
   logic event_sda_unstable;
   logic event_trans_complete;
+  logic event_tx_empty;
+  logic event_tx_nonempty;
+  logic event_tx_overflow;
+  logic event_acq_overflow;
+  logic event_ack_stop;
 
   logic [15:0] scl_rx_val;
   logic [15:0] sda_rx_val;
@@ -92,18 +102,42 @@ module  i2c_core (
   logic        rx_watermark_d;
   logic        rx_watermark_q;
 
+  logic        tx_fifo_wvalid;
+  logic        tx_fifo_wready;
+  logic [7:0]  tx_fifo_wdata;
+  logic [5:0]  tx_fifo_depth;
+  logic        tx_fifo_rvalid;
+  logic        tx_fifo_rready;
+  logic [7:0]  tx_fifo_rdata;
+
+  logic        acq_fifo_wvalid;
+  logic        acq_fifo_wready;
+  logic [9:0]  acq_fifo_wdata;
+  logic [5:0]  acq_fifo_depth;
+  logic        acq_fifo_rvalid;
+  logic        acq_fifo_rready;
+  logic [9:0]  acq_fifo_rdata;
+
+  logic        i2c_fifo_txrst;
+  logic        i2c_fifo_acqrst;
+
   logic        host_idle;
   logic        target_idle;
 
   logic        host_enable;
+  logic        target_enable;
+
+  logic [6:0]  target_address0;
+  logic [6:0]  target_mask0;
+  logic [6:0]  target_address1;
+  logic [6:0]  target_mask1;
 
   // Unused parts of exposed bits
   logic        unused_fifo_ctrl_rxilvl_qe;
   logic        unused_fifo_ctrl_fmtilvl_qe;
   logic [7:0]  unused_rx_fifo_rdata_q;
-
-   // placeholder: no target functionality yet;
-  assign target_idle = 1'b1;
+  logic [7:0]  unused_acq_fifo_adata_q;
+  logic [1:0]  unused_acq_fifo_signal_q;
 
   assign hw2reg.status.fmtfull.d = ~fmt_fifo_wready;
   assign hw2reg.status.rxfull.d = ~rx_fifo_wready;
@@ -117,12 +151,27 @@ module  i2c_core (
   assign hw2reg.val.scl_rx.d = scl_rx_val;
   assign hw2reg.val.sda_rx.d = sda_rx_val;
 
+  assign hw2reg.status.txfull.d = ~tx_fifo_wready;
+  assign hw2reg.status.acqfull.d = ~acq_fifo_wready;
+  assign hw2reg.status.txempty.d = ~tx_fifo_rvalid;
+  assign hw2reg.status.acqempty.d = ~acq_fifo_rvalid;
+  assign hw2reg.fifo_status.txlvl.d = tx_fifo_depth;
+  assign hw2reg.fifo_status.acqlvl.d = acq_fifo_depth;
+  assign hw2reg.acqdata.abyte.d = acq_fifo_rdata[7:0];
+  assign hw2reg.acqdata.signal.d = acq_fifo_rdata[9:8];
+
   assign override = reg2hw.ovrd.txovrden;
 
   assign scl_o = override ? reg2hw.ovrd.sclval : scl_out_fsm;
   assign sda_o = override ? reg2hw.ovrd.sdaval : sda_out_fsm;
 
-  assign host_enable = reg2hw.ctrl.q;
+  assign host_enable = reg2hw.ctrl.enablehost.q;
+  assign target_enable = reg2hw.ctrl.enabletarget.q;
+
+  assign target_address0 = reg2hw.target_id.address0.q;
+  assign target_mask0 = reg2hw.target_id.mask0.q;
+  assign target_address1 = reg2hw.target_id.address1.q;
+  assign target_mask1 = reg2hw.target_id.mask1.q;
 
   // Sample scl_i and sda_i at system clock
   always_ff @ (posedge clk_i or negedge rst_ni) begin : rx_oversampling
@@ -153,6 +202,9 @@ module  i2c_core (
   assign i2c_fifo_rxilvl  = reg2hw.fifo_ctrl.rxilvl.q;
   assign i2c_fifo_fmtilvl = reg2hw.fifo_ctrl.fmtilvl.q;
 
+  assign i2c_fifo_txrst   = reg2hw.fifo_ctrl.txrst.q & reg2hw.fifo_ctrl.txrst.qe;
+  assign i2c_fifo_acqrst  = reg2hw.fifo_ctrl.acqrst.q & reg2hw.fifo_ctrl.acqrst.qe;
+
   always_ff @ (posedge clk_i or negedge rst_ni) begin : watermark_transition
     if (!rst_ni) begin
       fmt_watermark_q <= 1'b1; // true by default
@@ -217,6 +269,8 @@ module  i2c_core (
   assign unused_fifo_ctrl_rxilvl_qe  = reg2hw.fifo_ctrl.rxilvl.qe;
   assign unused_fifo_ctrl_fmtilvl_qe = reg2hw.fifo_ctrl.fmtilvl.qe;
   assign unused_rx_fifo_rdata_q = reg2hw.rdata.q;
+  assign unused_acq_fifo_adata_q = reg2hw.acqdata.abyte.q;
+  assign unused_acq_fifo_signal_q = reg2hw.acqdata.signal.q;
 
   prim_fifo_sync #(
     .Width   (13),
@@ -254,6 +308,49 @@ module  i2c_core (
     .rdata_o (rx_fifo_rdata)
   );
 
+  // Target TX and ACQ FIFOs
+  assign event_tx_overflow = tx_fifo_wvalid & ~tx_fifo_wready;
+  assign event_acq_overflow = acq_fifo_wvalid & ~acq_fifo_wready;
+
+  assign tx_fifo_wvalid = reg2hw.txdata.qe;
+  assign tx_fifo_wdata  = reg2hw.txdata.q;
+
+  prim_fifo_sync #(
+    .Width(8),
+    .Pass(1'b1),
+    .Depth(32)
+  ) u_i2c_txfifo (
+    .clk_i,
+    .rst_ni,
+    .clr_i   (i2c_fifo_txrst),
+    .wvalid_i(tx_fifo_wvalid),
+    .wready_o(tx_fifo_wready),
+    .wdata_i (tx_fifo_wdata),
+    .depth_o (tx_fifo_depth),
+    .rvalid_o(tx_fifo_rvalid),
+    .rready_i(tx_fifo_rready),
+    .rdata_o (tx_fifo_rdata)
+  );
+
+  assign acq_fifo_rready = reg2hw.acqdata.abyte.re & reg2hw.acqdata.signal.re;
+
+  prim_fifo_sync #(
+    .Width(10),
+    .Pass(1'b0),
+    .Depth(32)
+  ) u_i2c_acqfifo (
+    .clk_i,
+    .rst_ni,
+    .clr_i   (i2c_fifo_acqrst),
+    .wvalid_i(acq_fifo_wvalid),
+    .wready_o(acq_fifo_wready),
+    .wdata_i (acq_fifo_wdata),
+    .depth_o (acq_fifo_depth),
+    .rvalid_o(acq_fifo_rvalid),
+    .rready_i(acq_fifo_rready),
+    .rdata_o (acq_fifo_rdata)
+  );
+
   i2c_fsm u_i2c_fsm (
     .clk_i,
     .rst_ni,
@@ -264,6 +361,7 @@ module  i2c_core (
     .sda_o                   (sda_out_fsm),
 
     .host_enable_i           (host_enable),
+    .target_enable_i         (target_enable),
 
     .fmt_fifo_rvalid_i       (fmt_fifo_rvalid),
     .fmt_fifo_wvalid_i       (fmt_fifo_wvalid),
@@ -280,7 +378,15 @@ module  i2c_core (
     .rx_fifo_wvalid_o        (rx_fifo_wvalid),
     .rx_fifo_wdata_o         (rx_fifo_wdata),
 
+    .tx_fifo_rvalid_i        (tx_fifo_rvalid),
+    .tx_fifo_rready_o        (tx_fifo_rready),
+    .tx_fifo_rdata_i         (tx_fifo_rdata),
+
+    .acq_fifo_wvalid_o       (acq_fifo_wvalid),
+    .acq_fifo_wdata_o        (acq_fifo_wdata),
+
     .host_idle_o             (host_idle),
+    .target_idle_o           (target_idle),
 
     .thigh_i                 (thigh),
     .tlow_i                  (tlow),
@@ -295,12 +401,20 @@ module  i2c_core (
     .stretch_timeout_i       (stretch_timeout),
     .timeout_enable_i        (timeout_enable),
 
+    .target_address0_i       (target_address0),
+    .target_mask0_i          (target_mask0),
+    .target_address1_i       (target_address1),
+    .target_mask1_i          (target_mask1),
+
     .event_nak_o             (event_nak),
     .event_scl_interference_o(event_scl_interference),
     .event_sda_interference_o(event_sda_interference),
     .event_stretch_timeout_o (event_stretch_timeout),
     .event_sda_unstable_o    (event_sda_unstable),
-    .event_trans_complete_o  (event_trans_complete)
+    .event_trans_complete_o  (event_trans_complete),
+    .event_tx_empty_o        (event_tx_empty),
+    .event_tx_nonempty_o     (event_tx_nonempty),
+    .event_ack_stop_o        (event_ack_stop)
   );
 
   prim_intr_hw #(.Width(1)) intr_hw_fmt_watermark (
@@ -413,4 +527,59 @@ module  i2c_core (
     .intr_o                 (intr_trans_complete_o)
   );
 
+  prim_intr_hw #(.Width(1)) intr_hw_tx_empty (
+    .event_intr_i           (event_tx_empty),
+    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.tx_empty.q),
+    .reg2hw_intr_test_q_i   (reg2hw.intr_test.tx_empty.q),
+    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.tx_empty.qe),
+    .reg2hw_intr_state_q_i  (reg2hw.intr_state.tx_empty.q),
+    .hw2reg_intr_state_de_o (hw2reg.intr_state.tx_empty.de),
+    .hw2reg_intr_state_d_o  (hw2reg.intr_state.tx_empty.d),
+    .intr_o                 (intr_tx_empty_o)
+  );
+
+  prim_intr_hw #(.Width(1)) intr_hw_tx_nonempty (
+    .event_intr_i           (event_tx_nonempty),
+    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.tx_nonempty.q),
+    .reg2hw_intr_test_q_i   (reg2hw.intr_test.tx_nonempty.q),
+    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.tx_nonempty.qe),
+    .reg2hw_intr_state_q_i  (reg2hw.intr_state.tx_nonempty.q),
+    .hw2reg_intr_state_de_o (hw2reg.intr_state.tx_nonempty.de),
+    .hw2reg_intr_state_d_o  (hw2reg.intr_state.tx_nonempty.d),
+    .intr_o                 (intr_tx_nonempty_o)
+  );
+
+  prim_intr_hw #(.Width(1)) intr_hw_tx_overflow (
+    .event_intr_i           (event_tx_overflow),
+    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.tx_overflow.q),
+    .reg2hw_intr_test_q_i   (reg2hw.intr_test.tx_overflow.q),
+    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.tx_overflow.qe),
+    .reg2hw_intr_state_q_i  (reg2hw.intr_state.tx_overflow.q),
+    .hw2reg_intr_state_de_o (hw2reg.intr_state.tx_overflow.de),
+    .hw2reg_intr_state_d_o  (hw2reg.intr_state.tx_overflow.d),
+    .intr_o                 (intr_tx_overflow_o)
+  );
+
+  prim_intr_hw #(.Width(1)) intr_hw_acq_overflow (
+    .event_intr_i           (event_acq_overflow),
+    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.acq_overflow.q),
+    .reg2hw_intr_test_q_i   (reg2hw.intr_test.acq_overflow.q),
+    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.acq_overflow.qe),
+    .reg2hw_intr_state_q_i  (reg2hw.intr_state.acq_overflow.q),
+    .hw2reg_intr_state_de_o (hw2reg.intr_state.acq_overflow.de),
+    .hw2reg_intr_state_d_o  (hw2reg.intr_state.acq_overflow.d),
+    .intr_o                 (intr_acq_overflow_o)
+  );
+
+  prim_intr_hw #(.Width(1)) intr_hw_ack_stop (
+    .event_intr_i           (event_ack_stop),
+    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.ack_stop.q),
+    .reg2hw_intr_test_q_i   (reg2hw.intr_test.ack_stop.q),
+    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.ack_stop.qe),
+    .reg2hw_intr_state_q_i  (reg2hw.intr_state.ack_stop.q),
+    .hw2reg_intr_state_de_o (hw2reg.intr_state.ack_stop.de),
+    .hw2reg_intr_state_d_o  (hw2reg.intr_state.ack_stop.d),
+    .intr_o                 (intr_ack_stop_o)
+  );
+
 endmodule