e9fd2bfcd09ba6aff9e5dca868407751a4cd23a5
[aes] Use sparse encodings for additional control signals
diff --git a/hw/ip/aes/rtl/aes_reg_status.sv b/hw/ip/aes/rtl/aes_reg_status.sv
index 8429636d4..36ea8148d 100644
--- a/hw/ip/aes/rtl/aes_reg_status.sv
+++ b/hw/ip/aes/rtl/aes_reg_status.sv
@@ -6,7 +6,8 @@
 //
 // This module tracks the collective status of multiple registers.
 
-module aes_reg_status #(
+module aes_reg_status import aes_pkg::*;
+#(
   parameter int Width = 1
 ) (
   input  logic             clk_i,
@@ -16,16 +17,16 @@ module aes_reg_status #(
   input  logic             use_i,
   input  logic             clear_i,
   input  logic             arm_i,
-  output logic             new_o,
-  output logic             clean_o
+  output sp2v_e            new_o,
+  output sp2v_e            clean_o
 );
 
   logic [Width-1:0] we_d, we_q;
   logic             armed_d, armed_q;
-  logic             all_written;
-  logic             none_written;
-  logic             new_d, new_q;
-  logic             clean_d, clean_q;
+  sp2v_e            all_written;
+  sp2v_e            none_written;
+  sp2v_e            new_d, new_q;
+  sp2v_e            clean_d, clean_q;
 
   // Collect write operations. Upon clear or use, we start over. If armed, the next write will
   // restart the tracking.
@@ -45,11 +46,11 @@ module aes_reg_status #(
   end
 
   // Status tracking
-  assign all_written  =  &we_d;
-  assign none_written = ~|we_d;
+  assign all_written  =  &we_d ? SP2V_HIGH : SP2V_LOW;
+  assign none_written = ~|we_d ? SP2V_HIGH : SP2V_LOW;
 
   // We have a complete new value if all registers have been written at least once.
-  assign new_d   = (clear_i || use_i) ? 1'b0 : all_written;
+  assign new_d   = (clear_i || use_i) ? SP2V_LOW : all_written;
 
   // We have a clean value, if either:
   // - all registers have been written at least once, or
@@ -57,19 +58,35 @@ module aes_reg_status #(
   // A value is NOT clean, if either:
   // - we get a clear or reset, or
   // - some but not all registers have been written.
-  assign clean_d = clear_i      ? 1'b0    :
-                   all_written  ? 1'b1    :
-                   none_written ? clean_q : 1'b0;
+  assign clean_d =  clear_i                    ? SP2V_LOW  :
+                   (all_written  == SP2V_HIGH) ? SP2V_HIGH :
+                   (none_written == SP2V_HIGH) ? clean_q   : SP2V_LOW;
 
-  always_ff @(posedge clk_i or negedge rst_ni) begin : reg_status
-    if (!rst_ni) begin
-      new_q   <= 1'b0;
-      clean_q <= 1'b0;
-    end else begin
-      new_q   <= new_d;
-      clean_q <= clean_d;
-    end
-  end
+  // The following primitives are used to place a size-only constraint on the
+  // flops in order to prevent optimizations on these status signals.
+  logic [Sp2VWidth-1:0] new_q_raw;
+  prim_flop #(
+    .Width      ( Sp2VWidth            ),
+    .ResetValue ( Sp2VWidth'(SP2V_LOW) )
+  ) u_new_status_regs (
+    .clk_i  ( clk_i     ),
+    .rst_ni ( rst_ni    ),
+    .d_i    ( new_d     ),
+    .q_o    ( new_q_raw )
+  );
+  assign new_q = sp2v_e'(new_q_raw);
+
+  logic [Sp2VWidth-1:0] clean_q_raw;
+  prim_flop #(
+    .Width      ( Sp2VWidth            ),
+    .ResetValue ( Sp2VWidth'(SP2V_LOW) )
+  ) u_clean_status_regs (
+    .clk_i  ( clk_i       ),
+    .rst_ni ( rst_ni      ),
+    .d_i    ( clean_d     ),
+    .q_o    ( clean_q_raw )
+  );
+  assign clean_q = sp2v_e'(clean_q_raw);
 
   assign new_o   = new_q;
   assign clean_o = clean_q;