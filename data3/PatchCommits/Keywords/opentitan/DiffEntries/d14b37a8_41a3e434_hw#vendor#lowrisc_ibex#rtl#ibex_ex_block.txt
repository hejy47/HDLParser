d14b37a8c2a7f7faa351587c7a3489fa58db0790
Update lowrisc_ibex to lowRISC/ibex@a3a1f9f
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
index fc42665d6..1c5e6e719 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
@@ -21,6 +21,7 @@ module ibex_ex_block #(
     input  ibex_pkg::alu_op_e     alu_operator_i,
     input  logic [31:0]           alu_operand_a_i,
     input  logic [31:0]           alu_operand_b_i,
+    input  logic                  alu_instr_first_cycle_i,
 
     // Branch Target ALU
     // All of these signals are unusued when BranchTargetALU == 0
@@ -37,6 +38,11 @@ module ibex_ex_block #(
     input  logic [31:0]           multdiv_operand_b_i,
     input  logic                  multdiv_ready_id_i,
 
+    // intermediate val reg
+    output logic                  imd_val_we_o,
+    output logic [33:0]           imd_val_d_o,
+    input  logic [33:0]           imd_val_q_i,
+
     // Outputs
     output logic [31:0]           alu_adder_result_ex_o, // to LSU
     output logic [31:0]           result_ex_o,
@@ -55,6 +61,14 @@ module ibex_ex_block #(
   logic        alu_cmp_result, alu_is_equal_result;
   logic        multdiv_valid;
   logic        multdiv_en;
+  logic [31:0] alu_imd_val_d;
+  logic        alu_imd_val_we;
+  logic [33:0] multdiv_imd_val_d;
+  logic        multdiv_imd_val_we;
+
+  // Intermediate Value Register Mux
+  assign imd_val_d_o  = multdiv_sel_i ? multdiv_imd_val_d : {2'b0, alu_imd_val_d};
+  assign imd_val_we_o = multdiv_sel_i ? multdiv_imd_val_we : alu_imd_val_we;
 
   /*
     The multdiv_i output is never selected if RV32M=0
@@ -95,19 +109,23 @@ module ibex_ex_block #(
   /////////
 
   ibex_alu #(
-    .RV32B( RV32B )
-  ) alu_i (
-      .operator_i          ( alu_operator_i            ),
-      .operand_a_i         ( alu_operand_a_i           ),
-      .operand_b_i         ( alu_operand_b_i           ),
-      .multdiv_operand_a_i ( multdiv_alu_operand_a     ),
-      .multdiv_operand_b_i ( multdiv_alu_operand_b     ),
-      .multdiv_sel_i       ( multdiv_sel_i             ),
-      .adder_result_o      ( alu_adder_result_ex_o     ),
-      .adder_result_ext_o  ( alu_adder_result_ext      ),
-      .result_o            ( alu_result                ),
-      .comparison_result_o ( alu_cmp_result            ),
-      .is_equal_result_o   ( alu_is_equal_result       )
+    .RV32B(RV32B)
+  ) alu_i                  (
+      .operator_i          ( alu_operator_i          ),
+      .operand_a_i         ( alu_operand_a_i         ),
+      .operand_b_i         ( alu_operand_b_i         ),
+      .instr_first_cycle_i ( alu_instr_first_cycle_i ),
+      .imd_val_q_i         ( imd_val_q_i[31:0]       ),
+      .imd_val_we_o        ( alu_imd_val_we          ),
+      .imd_val_d_o         ( alu_imd_val_d           ),
+      .multdiv_operand_a_i ( multdiv_alu_operand_a   ),
+      .multdiv_operand_b_i ( multdiv_alu_operand_b   ),
+      .multdiv_sel_i       ( multdiv_sel_i           ),
+      .adder_result_o      ( alu_adder_result_ex_o   ),
+      .adder_result_ext_o  ( alu_adder_result_ext    ),
+      .result_o            ( alu_result              ),
+      .comparison_result_o ( alu_cmp_result          ),
+      .is_equal_result_o   ( alu_is_equal_result     )
   );
 
   ////////////////
@@ -134,50 +152,56 @@ module ibex_ex_block #(
         .multdiv_result_o   ( multdiv_result        )
     );
   end else if (MultiplierImplementation == "fast") begin : gen_multdiv_fast
-    ibex_multdiv_fast #(
-        .SingleCycleMultiply(0)
-    ) multdiv_i (
-        .clk_i              ( clk_i                 ),
-        .rst_ni             ( rst_ni                ),
-        .mult_en_i          ( mult_en_i             ),
-        .div_en_i           ( div_en_i              ),
-        .operator_i         ( multdiv_operator_i    ),
-        .signed_mode_i      ( multdiv_signed_mode_i ),
-        .op_a_i             ( multdiv_operand_a_i   ),
-        .op_b_i             ( multdiv_operand_b_i   ),
-        .alu_operand_a_o    ( multdiv_alu_operand_a ),
-        .alu_operand_b_o    ( multdiv_alu_operand_b ),
-        .alu_adder_ext_i    ( alu_adder_result_ext  ),
-        .alu_adder_i        ( alu_adder_result_ex_o ),
-        .equal_to_zero      ( alu_is_equal_result   ),
-        .multdiv_ready_id_i ( multdiv_ready_id_i    ),
-        .valid_o            ( multdiv_valid         ),
-        .multdiv_result_o   ( multdiv_result        )
+    ibex_multdiv_fast #        (
+        .SingleCycleMultiply   (0)
+    ) multdiv_i                (
+        .clk_i                 ( clk_i                 ),
+        .rst_ni                ( rst_ni                ),
+        .mult_en_i             ( mult_en_i             ),
+        .div_en_i              ( div_en_i              ),
+        .operator_i            ( multdiv_operator_i    ),
+        .signed_mode_i         ( multdiv_signed_mode_i ),
+        .op_a_i                ( multdiv_operand_a_i   ),
+        .op_b_i                ( multdiv_operand_b_i   ),
+        .alu_operand_a_o       ( multdiv_alu_operand_a ),
+        .alu_operand_b_o       ( multdiv_alu_operand_b ),
+        .alu_adder_ext_i       ( alu_adder_result_ext  ),
+        .alu_adder_i           ( alu_adder_result_ex_o ),
+        .equal_to_zero         ( alu_is_equal_result   ),
+        .imd_val_q_i           ( imd_val_q_i           ),
+        .imd_val_d_o           ( multdiv_imd_val_d     ),
+        .imd_val_we_o          ( multdiv_imd_val_we    ),
+        .multdiv_ready_id_i    ( multdiv_ready_id_i    ),
+        .valid_o               ( multdiv_valid         ),
+        .multdiv_result_o      ( multdiv_result        )
     );
   end else if (MultiplierImplementation == "single-cycle") begin: gen_multdiv_single_cycle
     ibex_multdiv_fast #(
         .SingleCycleMultiply(1)
     ) multdiv_i (
-        .clk_i              ( clk_i                 ),
-        .rst_ni             ( rst_ni                ),
-        .mult_en_i          ( mult_en_i             ),
-        .div_en_i           ( div_en_i              ),
-        .operator_i         ( multdiv_operator_i    ),
-        .signed_mode_i      ( multdiv_signed_mode_i ),
-        .op_a_i             ( multdiv_operand_a_i   ),
-        .op_b_i             ( multdiv_operand_b_i   ),
-        .alu_operand_a_o    ( multdiv_alu_operand_a ),
-        .alu_operand_b_o    ( multdiv_alu_operand_b ),
-        .alu_adder_ext_i    ( alu_adder_result_ext  ),
-        .alu_adder_i        ( alu_adder_result_ex_o ),
-        .equal_to_zero      ( alu_is_equal_result   ),
-        .multdiv_ready_id_i ( multdiv_ready_id_i    ),
-        .valid_o            ( multdiv_valid         ),
-        .multdiv_result_o   ( multdiv_result        )
+        .clk_i                 ( clk_i                 ),
+        .rst_ni                ( rst_ni                ),
+        .mult_en_i             ( mult_en_i             ),
+        .div_en_i              ( div_en_i              ),
+        .operator_i            ( multdiv_operator_i    ),
+        .signed_mode_i         ( multdiv_signed_mode_i ),
+        .op_a_i                ( multdiv_operand_a_i   ),
+        .op_b_i                ( multdiv_operand_b_i   ),
+        .alu_operand_a_o       ( multdiv_alu_operand_a ),
+        .alu_operand_b_o       ( multdiv_alu_operand_b ),
+        .alu_adder_ext_i       ( alu_adder_result_ext  ),
+        .alu_adder_i           ( alu_adder_result_ex_o ),
+        .equal_to_zero         ( alu_is_equal_result   ),
+        .imd_val_q_i           ( imd_val_q_i           ),
+        .imd_val_d_o           ( multdiv_imd_val_d     ),
+        .imd_val_we_o          ( multdiv_imd_val_we    ),
+        .multdiv_ready_id_i    ( multdiv_ready_id_i    ),
+        .valid_o               ( multdiv_valid         ),
+        .multdiv_result_o      ( multdiv_result        )
     );
   end
 
   // ALU output valid in same cycle, multiplier/divider may require multiple cycles
-  assign ex_valid_o = multdiv_en ? multdiv_valid : 1'b1;
+  assign ex_valid_o = multdiv_en ? multdiv_valid : !alu_imd_val_we;
 
 endmodule