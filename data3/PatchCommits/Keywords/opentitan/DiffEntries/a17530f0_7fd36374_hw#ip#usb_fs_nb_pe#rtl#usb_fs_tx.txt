a17530f0a51524486c59b0c8d5295d6ded247ec2
[usbdev] USB device update from ETH repo
diff --git a/hw/ip/usb_fs_nb_pe/rtl/usb_fs_tx.sv b/hw/ip/usb_fs_nb_pe/rtl/usb_fs_tx.sv
index c909dd49b..6caca8958 100644
--- a/hw/ip/usb_fs_nb_pe/rtl/usb_fs_tx.sv
+++ b/hw/ip/usb_fs_nb_pe/rtl/usb_fs_tx.sv
@@ -11,13 +11,16 @@ module usb_fs_tx (
   input  logic rst_ni,  // asyc reset
   input  logic link_reset_i, // USB reset, sync to 48 MHz, active high
 
+  // Oscillator test mode (constantly output JK)
+  input  logic tx_osc_test_mode_i,
+
   // bit strobe from rx to align with senders clock
   input  logic bit_strobe_i,
 
   // output enable to take ownership of bus and data out
-  output logic oe_o,
-  output logic dp_o,
-  output logic dn_o,
+  output logic usb_oe_o,
+  output logic usb_d_o,
+  output logic usb_se0_o,
 
   // pulse to initiate new packet transmission
   input  logic pkt_start_i,
@@ -33,7 +36,8 @@ module usb_fs_tx (
 );
 
 
-  typedef enum {IDLE, SYNC, PID, DATA_OR_CRC16_0, CRC16_1, EOP} state_t;
+  typedef enum {IDLE, SYNC, PID, DATA_OR_CRC16_0, CRC16_1, EOP, OSC_TEST} state_e;
+  typedef enum {Idle, WaitByte, Transmit} out_state_e;
 
     
   // -------------------------------------------------
@@ -48,7 +52,8 @@ module usb_fs_tx (
 
   logic [5:0] bit_history;
 
-  state_t state_d, state_q;
+  state_e      state_d, state_q;
+  out_state_e  out_state_d, out_state_q;
 
 
   logic [7:0] data_shift_reg_q, data_shift_reg_d;
@@ -63,14 +68,17 @@ module usb_fs_tx (
   logic [15:0] crc16_d, crc16_q;
 
   logic oe_q, oe_d;
-  logic dp_q, dp_d;
-  logic dn_q, dn_d;
+  logic usb_d_q, usb_d_d;
+  logic usb_se0_q, usb_se0_d;
   logic [2:0] dp_eop_q, dp_eop_d;
 
+  logic test_mode_start;
   logic serial_tx_data;
   logic serial_tx_oe;
   logic serial_tx_se0;
   logic crc16_invert;
+  logic pkt_end;
+  logic out_nrzi_en;
 
   // save packet parameters at pkt_start_i
   always_ff @(posedge clk_i or negedge rst_ni) begin : proc_pid
@@ -118,7 +126,8 @@ module usb_fs_tx (
     end
   end
 
-  assign pkt_end_o = bit_strobe_i && se0_shift_reg_q[1:0] == 2'b01;
+  assign pkt_end   = bit_strobe_i && se0_shift_reg_q[1:0] == 2'b01;
+  assign pkt_end_o = pkt_end;
 
 
   // -------------------------------------------------
@@ -134,11 +143,15 @@ module usb_fs_tx (
     tx_data_get_d    = tx_data_get_q;
     bit_history_d    = bit_history_q;
     bit_count_d      = bit_count_q;
+    test_mode_start  = 0;
 
 
     case (state_q)
       IDLE : begin
-        if (pkt_start_i) begin
+        if (tx_osc_test_mode_i) begin
+          state_d         = OSC_TEST;
+          test_mode_start = 1;
+        end else if (pkt_start_i) begin
           state_d = SYNC;
         end
       end
@@ -204,11 +217,27 @@ module usb_fs_tx (
           se0_shift_reg_d = 8'b00000111;
         end
       end
+
+      OSC_TEST: begin
+        // Oscillator test mode: toggle constantly
+        if (!tx_osc_test_mode_i && byte_strobe_q) begin
+          oe_shift_reg_d   = 8'b00000000;
+          state_d = IDLE;          
+        end else if (byte_strobe_q) begin
+          data_shift_reg_d = 8'b00000000;
+          oe_shift_reg_d   = 8'b11111111;
+          se0_shift_reg_d  = 8'b00000000;
+        end
+      end
     endcase
 
     // Logic closely coupled to the FSM
     if (pkt_start_i) begin
-      bit_count_d   = 1;
+      // We need to have a inter-packed delay between
+      // 2 and 6.5 bit times (see USB 2.0 spec / 7.1.18.1)
+      // The latency in the rest of the system is approximately (measured)
+      // 3.68 bit-times, so we only introduce 1 bit-time here
+      bit_count_d   = 7; // 8-7 = 1
       bit_history_d = 0;
 
     end else if (bit_strobe_i) begin
@@ -231,7 +260,7 @@ module usb_fs_tx (
   end
 
   always_comb begin : proc_byte_str
-    if (bit_strobe_i && !bitstuff) begin
+    if (bit_strobe_i && !bitstuff && !pkt_start_i) begin
       byte_strobe_d = (bit_count_q == 3'b000);
     end else begin
       byte_strobe_d = 0;
@@ -282,7 +311,6 @@ module usb_fs_tx (
       data_shift_reg_q  <= 0;
       oe_shift_reg_q    <= 0;
       se0_shift_reg_q   <= 0;
-      data_payload_q    <= 0;
       tx_data_get_q     <= 0;
       byte_strobe_q     <= 0;
       bit_history_q     <= 0;
@@ -295,7 +323,6 @@ module usb_fs_tx (
         data_shift_reg_q  <= 0;
         oe_shift_reg_q    <= 0;
         se0_shift_reg_q   <= 0;
-        data_payload_q    <= 0;
         tx_data_get_q     <= 0;
         byte_strobe_q     <= 0;
         bit_history_q     <= 0;
@@ -307,7 +334,6 @@ module usb_fs_tx (
         data_shift_reg_q  <= data_shift_reg_d;
         oe_shift_reg_q    <= oe_shift_reg_d;
         se0_shift_reg_q   <= se0_shift_reg_d;
-        data_payload_q    <= data_payload_d;
         tx_data_get_q     <= tx_data_get_d;
         byte_strobe_q     <= byte_strobe_d;
         bit_history_q     <= bit_history_d;
@@ -320,34 +346,74 @@ module usb_fs_tx (
   // -------------------------------------------------
   // nrzi and differential driving
   // -------------------------------------------------
+
+  // Output FSM
+  always_comb begin : proc_out_fsm
+    out_state_d          = out_state_q;
+    out_nrzi_en          = 1'b0;
+
+    case (out_state_q)
+      Idle: begin
+        if (pkt_start_i || test_mode_start) begin
+          out_state_d = WaitByte;
+        end
+      end
+
+      WaitByte: begin
+        if (byte_strobe_q) begin
+          out_state_d = Transmit;
+        end
+      end
+
+      Transmit: begin
+        out_nrzi_en          = 1'b1;
+        if ((bit_strobe_i && !serial_tx_oe)) begin
+          out_state_d = Idle;
+        end
+      end
+      
+      default : out_state_d = Idle;
+    endcase  
+  end
+
+
   always_comb begin : proc_diff
-    dp_d     = dp_q;
-    dn_d     = dn_q;
+    usb_d_d   = usb_d_q;
+    usb_se0_d = usb_se0_q;
     oe_d     = oe_q;
     dp_eop_d = dp_eop_q;
 
     if (pkt_start_i) begin
-      // J
-      dp_d = 1;
-      dn_d = 0;
-      
-      dp_eop_d = 3'b100;
+      usb_d_d = 1; // J -> first bit will be K (start of sync)
+      dp_eop_d = 3'b100; // EOP: {SE0, SE0, J}
 
-    end else if (bit_strobe_i) begin
+    end else if (bit_strobe_i && out_nrzi_en) begin
       oe_d = serial_tx_oe;
 
       if (serial_tx_se0) begin
-        dp_d = dp_eop_q[0];
-        dn_d = 0;
-
+        // EOP
         dp_eop_d = dp_eop_q >> 1;
 
+        if (dp_eop_q[0]) begin
+          // last bit of EOP: J
+          usb_d_d   = 1;
+          usb_se0_d = 0;
+        end else begin
+          // first two bits of EOP: SE0
+          usb_se0_d = 1;
+        end       
+
       end else if (serial_tx_data) begin
         // value should stay the same, do nothing
 
       end else begin
-        dp_d = !dp_q;
-        dn_d = !dn_q;
+        usb_d_d = !usb_d_q;
+      end
+
+      // Set to J state when OE=0 to avoid
+      // glitches
+      if (!oe_d) begin
+        usb_d_d = 1;
       end
     end
   
@@ -355,27 +421,30 @@ module usb_fs_tx (
 
   always_ff @(posedge clk_i or negedge rst_ni) begin : proc_diff_reg
     if(!rst_ni) begin
-      dp_eop_q  <= 0;
-      oe_q      <= 0;
-      dp_q      <= 0;
-      dn_q      <= 0;
+      dp_eop_q             <= 0;
+      oe_q                 <= 0;
+      usb_d_q              <= 1; // J state = idle state
+      usb_se0_q            <= 0;
+      out_state_q          <= Idle;
     end else begin
       if (link_reset_i) begin
-        dp_eop_q  <= 0;
-        oe_q      <= 0;
-        dp_q      <= 0;
-        dn_q      <= 0;        
+        dp_eop_q             <= 0;
+        oe_q                 <= 0;
+        usb_d_q              <= 1;
+        usb_se0_q            <= 0;
+        out_state_q          <= Idle;
       end else begin
-        dp_eop_q  <= dp_eop_d;
-        oe_q      <= oe_d;
-        dp_q      <= dp_d;
-        dn_q      <= dn_d;
+        dp_eop_q             <= dp_eop_d;
+        oe_q                 <= oe_d;
+        usb_d_q              <= usb_d_d;
+        usb_se0_q            <= usb_se0_d;
+        out_state_q          <= out_state_d;
       end
     end
   end
 
-  assign oe_o = oe_q;
-  assign dp_o = dp_q;
-  assign dn_o = dn_q;
+  assign usb_oe_o  = oe_q;
+  assign usb_d_o   = usb_d_q;
+  assign usb_se0_o = usb_se0_q;
 
 endmodule