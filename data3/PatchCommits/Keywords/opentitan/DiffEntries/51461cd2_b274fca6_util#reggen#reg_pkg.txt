51461cd27e0f7bea13ae61e05e6b0ed3da2a5da7
[util/reggen] Addressed subword write.
diff --git a/util/reggen/reg_pkg.tpl.sv b/util/reggen/reg_pkg.tpl.sv
index 0c43c4e0b..b2f2223c6 100644
--- a/util/reggen/reg_pkg.tpl.sv
+++ b/util/reggen/reg_pkg.tpl.sv
@@ -4,6 +4,10 @@
 //
 // Register Package auto-generated by `reggen` containing data structure
 
+<%
+  num_regs = len(block.regs)
+  max_regs_char = len("{}".format(num_regs-1))
+%>\
 package ${block.name}_reg_pkg;
 
 // Register to internal design logic
@@ -135,13 +139,25 @@ packbit = 0
   parameter ${block.name.upper()}_${w.name.upper()}_SIZE   = ${block.addr_width}'h ${"%x" % (w.limit_addr - w.base_addr)};
 % endfor
 
-##   typedef enum int {
-## % for r in block.regs:
-##   % if loop.last:
-##   ${block.name.upper()}_${r.name.upper()}
-##   % else:
-##   ${block.name.upper()}_${r.name.upper()},
-##   % endif
-## % endfor
-##   } ${block.name}_reg_e;
+  // Register Index
+  typedef enum int {
+% for r in block.regs:
+    ${block.name.upper()}_${r.name.upper()}${"" if loop.last else ","}
+% endfor
+  } ${block.name}_id_e;
+
+  // Register width information to check illegal writes
+  localparam logic [3:0] ${block.name.upper()}_PERMIT [${len(block.regs)}] = '{
+% for i,r in enumerate(block.regs):
+<% index_str = "{}".format(i).rjust(max_regs_char) %>\
+  % if r.width > 16:
+    4'b 1111${" " if i == max_regs else ","} // index[${index_str}] ${block.name.upper()}_${r.name.upper()}
+  % elif r.width > 8:
+    4'b 0011${" " if i == max_regs else ","} // index[${index_str}] ${block.name.upper()}_${r.name.upper()}
+  % else:
+    4'b 0001${" " if i == max_regs else ","} // index[${index_str}] ${block.name.upper()}_${r.name.upper()}
+  % endif
+% endfor
+  };
 endpackage
+