3dfbfea94164ff8553a3051cb6cbdd399301fe23
[pwm, rtl] RTL update for issue #6044 pare down PWM CDC
diff --git a/hw/ip/pwm/rtl/pwm_core.sv b/hw/ip/pwm/rtl/pwm_core.sv
index f18db9f08..c0eb6ac4c 100644
--- a/hw/ip/pwm/rtl/pwm_core.sv
+++ b/hw/ip/pwm/rtl/pwm_core.sv
@@ -15,26 +15,65 @@ module pwm_core #(
   output logic [NOutputs-1:0]     pwm_o
 );
 
-  pwm_reg_pkg::pwm_reg2hw_t       reg2hw_sync;
-  logic                           clr_phase_cntr;
-  logic [NOutputs-1:0]            clr_blink_cntr;
-
-  pwm_cdc u_pwm_cdc (
-    .clk_core_i,
-    .rst_core_ni,
-    .reg2hw,
-    .reg2hw_sync,
-    .clr_phase_cntr,
-    .clr_blink_cntr
-  );
+  logic [31:0] common_param_d;
+  assign common_param_d = {reg2hw.cfg.clk_div.q,
+                           reg2hw.cfg.dc_resn.q,
+                           reg2hw.cfg.cntr_en.q};
+
+  logic [31:0] common_param_q;
+
+  always_ff @(posedge clk_core_i or negedge rst_core_ni) begin
+    if (!rst_core_ni) begin
+      common_param_q <= 32'h0;
+    end else begin
+      common_param_q <= common_param_d;
+    end
+  end
+
+  // Reset internal counters whenever parameters change.
+
+  logic                clr_phase_cntr;
+  logic [NOutputs-1:0] clr_blink_cntr;
+
+  assign clr_phase_cntr = (common_param_q != common_param_d);
+
+  for (genvar ii = 0; ii < NOutputs; ii++) begin : gen_chan_clr
+
+    logic [83:0] chan_param_d;
+    assign chan_param_d  = {reg2hw.pwm_en[ii].q,
+                            reg2hw.invert[ii].q,
+                            reg2hw.pwm_param[ii].phase_delay.q,
+                            reg2hw.pwm_param[ii].htbt_en.q,
+                            reg2hw.pwm_param[ii].blink_en.q,
+                            reg2hw.duty_cycle[ii].a.q,
+                            reg2hw.duty_cycle[ii].b.q,
+                            reg2hw.blink_param[ii].x.q,
+                            reg2hw.blink_param[ii].y.q};
+
+    logic [83:0] chan_param_q;
+
+    always_ff @(posedge clk_core_i or negedge rst_core_ni) begin
+      if (!rst_core_ni) begin
+        chan_param_q <= 84'h0;
+      end else begin
+        chan_param_q <= chan_param_d;
+      end
+    end
+
+    // Though it may be a bit overkill, we reset the internal blink counters whenever any channel
+    // specific parameters change.
+
+    assign clr_blink_cntr[ii] = (chan_param_q != chan_param_d);
+
+  end : gen_chan_clr
 
   //
   // Beat and phase counters (in core clock domain)
   //
 
-  logic        cntr_en_sync;
-  logic [26:0] clk_div_sync;
-  logic [3:0]  dc_resn_sync;
+  logic        cntr_en;
+  logic [26:0] clk_div;
+  logic [3:0]  dc_resn;
 
   logic [26:0] beat_ctr_q;
   logic [26:0] beat_ctr_d;
@@ -52,16 +91,16 @@ module pwm_core #(
   logic        unused_regen;
 
   // TODO: implement register locking
-  assign unused_regen = reg2hw_sync.regen.q;
+  assign unused_regen = reg2hw.regen.q;
 
-  assign cntr_en_sync = reg2hw_sync.cfg.cntr_en.q;
-  assign dc_resn_sync = reg2hw_sync.cfg.dc_resn.q;
-  assign clk_div_sync = reg2hw_sync.cfg.clk_div.q;
+  assign cntr_en = reg2hw.cfg.cntr_en.q;
+  assign dc_resn = reg2hw.cfg.dc_resn.q;
+  assign clk_div = reg2hw.cfg.clk_div.q;
 
   assign beat_ctr_d = (clr_phase_cntr) ? 27'h0 :
-                      (beat_ctr_q == clk_div_sync) ? 27'h0 : (beat_ctr_q + 27'h1);
-  assign beat_ctr_en = clr_phase_cntr | cntr_en_sync;
-  assign beat_end = (beat_ctr_q == clk_div_sync);
+                      (beat_ctr_q == clk_div) ? 27'h0 : (beat_ctr_q + 27'h1);
+  assign beat_ctr_en = clr_phase_cntr | cntr_en;
+  assign beat_end = (beat_ctr_q == clk_div);
 
   always_ff @(posedge clk_core_i or negedge rst_core_ni) begin
     if (!rst_core_ni) begin
@@ -73,8 +112,8 @@ module pwm_core #(
 
   // Only update phase_ctr at the end of each beat
   // Exception: allow reset to zero whenever not enabled
-  assign phase_ctr_en = beat_end & (clr_phase_cntr | cntr_en_sync);
-  assign phase_ctr_incr =  16'h1 << (15 - dc_resn_sync);
+  assign phase_ctr_en = beat_end & (clr_phase_cntr | cntr_en);
+  assign phase_ctr_incr =  16'h1 << (15 -dc_resn);
   assign {phase_ctr_overflow, phase_ctr_next} = phase_ctr_q + phase_ctr_incr;
   assign phase_ctr_d = clr_phase_cntr ? 16'h0 : phase_ctr_next;
   assign cycle_end = beat_end & phase_ctr_overflow;
@@ -96,19 +135,19 @@ module pwm_core #(
     pwm_chan u_chan (
       .clk_i            (clk_core_i),
       .rst_ni           (rst_core_ni),
-      .pwm_en_i         (reg2hw_sync.pwm_en[ii].q),
-      .invert_i         (reg2hw_sync.invert[ii].q),
-      .phase_delay_i    (reg2hw_sync.pwm_param[ii].phase_delay.q),
-      .blink_en_i       (reg2hw_sync.pwm_param[ii].blink_en.q),
-      .htbt_en_i        (reg2hw_sync.pwm_param[ii].htbt_en.q),
-      .duty_cycle_a_i   (reg2hw_sync.duty_cycle[ii].a.q),
-      .duty_cycle_b_i   (reg2hw_sync.duty_cycle[ii].b.q),
-      .blink_param_x_i  (reg2hw_sync.blink_param[ii].x.q),
-      .blink_param_y_i  (reg2hw_sync.blink_param[ii].y.q),
+      .pwm_en_i         (reg2hw.pwm_en[ii].q),
+      .invert_i         (reg2hw.invert[ii].q),
+      .phase_delay_i    (reg2hw.pwm_param[ii].phase_delay.q),
+      .blink_en_i       (reg2hw.pwm_param[ii].blink_en.q),
+      .htbt_en_i        (reg2hw.pwm_param[ii].htbt_en.q),
+      .duty_cycle_a_i   (reg2hw.duty_cycle[ii].a.q),
+      .duty_cycle_b_i   (reg2hw.duty_cycle[ii].b.q),
+      .blink_param_x_i  (reg2hw.blink_param[ii].x.q),
+      .blink_param_y_i  (reg2hw.blink_param[ii].y.q),
       .phase_ctr_i      (phase_ctr_q),
       .clr_blink_cntr_i (clr_blink_cntr[ii]),
       .cycle_end_i      (cycle_end),
-      .dc_resn_i        (dc_resn_sync),
+      .dc_resn_i        (dc_resn),
       .pwm_o            (pwm_o[ii])
     );
 
@@ -116,6 +155,6 @@ module pwm_core #(
 
   // unused register configuration
   logic unused_reg;
-  assign unused_reg = ^reg2hw.alert_test | ^reg2hw_sync.alert_test;
+  assign unused_reg = ^reg2hw.alert_test;
 
 endmodule : pwm_core