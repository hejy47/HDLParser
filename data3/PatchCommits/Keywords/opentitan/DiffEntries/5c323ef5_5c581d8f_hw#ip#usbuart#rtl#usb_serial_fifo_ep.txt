5c323ef52ef42785286da49a3a2919a35dce75d9
[usb] Fix lint errors
diff --git a/hw/ip/usbuart/rtl/usb_serial_fifo_ep.sv b/hw/ip/usbuart/rtl/usb_serial_fifo_ep.sv
index 800962107..95297525c 100644
--- a/hw/ip/usbuart/rtl/usb_serial_fifo_ep.sv
+++ b/hw/ip/usbuart/rtl/usb_serial_fifo_ep.sv
@@ -1,7 +1,8 @@
 module usb_serial_fifo_ep  #(
   parameter int unsigned MaxPktSizeByte = 32,
-  parameter int unsigned PktW = $clog2(MaxPktSizeByte)
 
+  // Derived parameters
+  localparam int unsigned PktW = $clog2(MaxPktSizeByte)
 ) (
   input               clk_i,
   input               rst_ni,
@@ -83,7 +84,7 @@ module usb_serial_fifo_ep  #(
     end else begin
       if (!do_setup && out_ep_acked_i) begin
         ob_unload <= 1'b1;
-      end else if (({1'b0, ob_rptr} == (ob_max_used - PktW'(2))) && !rx_full) begin
+      end else if (({1'b0, ob_rptr} == (ob_max_used - {1'b0, PktW'(2)})) && !rx_full) begin
         ob_unload <= 1'b0;
       end
     end
@@ -203,7 +204,7 @@ module usb_serial_fifo_ep  #(
   logic [7:0] bmRequestType, raw_setup_data [8];
   // Alias for the setup bytes using names from USB spec
   logic [7:0] bRequest;
-  logic [15:0] wValue, wLength; //wIndex
+  logic [15:0] wValue, wLength, wIndex;
 
   assign pkt_start = (out_ep_put_addr_i == '0) && out_ep_data_put_i;
   assign pkt_end = out_ep_acked_i || out_ep_rollback_i;
@@ -246,7 +247,7 @@ module usb_serial_fifo_ep  #(
     status_stage_end = 1'b0;
     send_zero_length_data_pkt = 1'b0;
 
-    case (ctrl_xfr_state)
+    unique case (ctrl_xfr_state)
       StIdle: begin
         if (setup_pkt_start) begin
           ctrl_xfr_state_next = StSetup;
@@ -330,11 +331,14 @@ module usb_serial_fifo_ep  #(
   assign bmRequestType = raw_setup_data[0];
   assign bRequest = raw_setup_data[1];
   assign wValue = {raw_setup_data[3][7:0], raw_setup_data[2][7:0]};
-//assign wIndex = {raw_setup_data[5][7:0], raw_setup_data[4][7:0]};
+  assign wIndex = {raw_setup_data[5][7:0], raw_setup_data[4][7:0]};
   assign wLength = {raw_setup_data[7][7:0], raw_setup_data[6][7:0]};
-  // suppress warning
+
+  // Suppress warnings
   logic [6:0]  unused_bmR;
+  logic [15:0] unused_wIndex;
   assign unused_bmR = bmRequestType[6:0];
+  assign unused_wIndex = wIndex;
 
   // Check of upper put_addr bits needed because CRC will be sent (10 bytes total)
   always_ff @(posedge clk_i) begin
@@ -354,7 +358,7 @@ module usb_serial_fifo_ep  #(
       baud_o <= 16'd1152; // spec is default to 115,200 baud
       parity_o <= 1'b0;   // with no parity
       bytes_sent <= '0;
-      send_length  <= '0;
+      send_length <= '0;
       return_data <= '0;
     end else begin
       if (setup_stage_end) begin
@@ -363,35 +367,35 @@ module usb_serial_fifo_ep  #(
         // so no standard defines for the codes
         // (note looks like this is the first time REQ has been implemented)
         unique case (bRequest)
-          'h00: begin
+          8'h00: begin
             // REQ_PARITY
             return_data <= {14'b0, parity_o};
-            send_length <= 'h2;
+            send_length <= 2'b10;
           end
 
-          'h01: begin
+          8'h01: begin
             // SET_PARITY
-            send_length <= 'h00;
+            send_length <= 2'b00;
             parity_o    <= wValue[1:0];
           end
 
-          'h02: begin
+          8'h02: begin
             // REQ_BAUD
             return_data <= baud_o;
-            send_length <= 'h2;
+            send_length <= 2'b10;
           end
 
-          'h03: begin
+          8'h03: begin
             // SET_BAUD
-            send_length <= 'h00;
+            send_length <= 2'b00;
             baud_o      <= wValue;
           end
           default begin
-            send_length <= 'h00;
+            send_length <= 2'b00;
           end
         endcase
       end else if ((ctrl_xfr_state == StDataIn) && more_data_to_send && in_ep_data_get_i) begin
-        bytes_sent <= bytes_sent + 1'b1;
+        bytes_sent <= bytes_sent + 2'b01;
       end else if (status_stage_end) begin
         bytes_sent <= '0;
       end