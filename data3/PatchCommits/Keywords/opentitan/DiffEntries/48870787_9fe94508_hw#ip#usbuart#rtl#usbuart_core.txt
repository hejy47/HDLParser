488707873168bd72fba44d8de8cd4df45d70e106
[usb] Fix lint errors
diff --git a/hw/ip/usbuart/rtl/usbuart_core.sv b/hw/ip/usbuart/rtl/usbuart_core.sv
index a8c1add39..9c676a804 100644
--- a/hw/ip/usbuart/rtl/usbuart_core.sv
+++ b/hw/ip/usbuart/rtl/usbuart_core.sv
@@ -63,14 +63,16 @@ module usbuart_core (
   logic          event_tx_watermark, event_rx_watermark, event_tx_overflow, event_rx_overflow;
   logic          event_rx_frame_err, event_rx_break_err, event_rx_timeout, event_rx_parity_err;
   logic          host_lost, host_timeout;
-  logic          unused_usb_pullup;
+  logic          usb_pullup_en;
 
-  assign tx_enable        = reg2hw.ctrl.tx.q;
-  assign rx_enable        = reg2hw.ctrl.rx.q;
-  assign sys_loopback     = reg2hw.ctrl.slpbk.q;
-  assign unused_usb_pullup = tx_enable | rx_enable;
+  assign tx_enable     = reg2hw.ctrl.tx.q;
+  assign rx_enable     = reg2hw.ctrl.rx.q;
+  assign sys_loopback  = reg2hw.ctrl.slpbk.q;
+  assign usb_pullup_en = tx_enable | rx_enable;
 
-// assign line_loopback    = reg2hw.ctrl.llpbk.q;
+  logic [3:0]    unused_ctrl_q;
+  assign unused_ctrl_q = {reg2hw.ctrl.nf.q, reg2hw.ctrl.llpbk.q, reg2hw.ctrl.parity_en.q,
+                          reg2hw.ctrl.parity_odd.q};
 
   // 4 cycle reset pulse
   logic [2:0]    rxres_cnt;
@@ -103,13 +105,20 @@ module usbuart_core (
 
   assign uart_fifo_rxilvl = reg2hw.fifo_ctrl.rxilvl.q;
   assign uart_fifo_txilvl = reg2hw.fifo_ctrl.txilvl.q;
-  // assign ovrd_tx_en       = reg2hw.ovrd.txen.q;
-  // assign ovrd_tx_val      = reg2hw.ovrd.txval.q;
+
+  logic [1:0]    unused_fifo_ctrl_qe;
+  assign unused_fifo_ctrl_qe = {reg2hw.fifo_ctrl.rxilvl.qe, reg2hw.fifo_ctrl.txilvl.qe};
+
+  logic          unused_ovrd_tx_en, unused_ovrd_tx_val;
+  assign unused_ovrd_tx_en  = reg2hw.ovrd.txen.q;
+  assign unused_ovrd_tx_val = reg2hw.ovrd.txval.q;
 
   // VAL register not used at the moment
   assign hw2reg.val.d  = 16'b0;
 
   assign hw2reg.rdata.d = uart_rdata;
+  logic [7:0]    unused_rdata_q;
+  assign unused_rdata_q = reg2hw.rdata.q;
 
   assign hw2reg.status.rxempty.d     = ~rx_fifo_rvalid;
   assign hw2reg.status.rxidle.d      = ~rx_fifo_rvalid; // TODO
@@ -179,8 +188,7 @@ module usbuart_core (
   //////////////
   // RX Logic //
   //////////////
-  logic [5:0]        usb_rx_wdepth;
-  logic              usb_rx_oflw;
+  logic usb_rx_oflw;
 
   // TODO: This is not a safe way to create a reset signal
   assign rx_fifo_rst_n = rst_usb_48mhz_ni & ~uart_fifo_rxrst;
@@ -195,7 +203,7 @@ module usbuart_core (
     .wvalid    (usb_rx_wvalid),
     .wready    (usb_rx_wready),
     .wdata     (usb_rx_fifo_wdata),
-    .wdepth    (usb_rx_wdepth),
+    .wdepth    (), // only using full
 
     .clk_rd_i  (clk_i),
     .rst_rd_ni (rx_fifo_rst_n),
@@ -241,7 +249,6 @@ module usbuart_core (
     .rx_err         (usb_rx_oflw), // RX overflow
     .rx_fifo_wdata  (usb_if_rx_fifo_wdata),
     .tx_fifo_rdata  (usb_tx_fifo_rdata),
-    .rx_fifo_wdepth (usb_rx_wdepth),
     .status_frame_o (hw2reg.usbstat.frame.d),
     .status_host_lost_o (host_lost),
     .status_host_timeout_o (host_timeout),
@@ -421,6 +428,7 @@ module usbuart_core (
   assign usb_phy_config.eop_single_bit.q         = 1'b1;
   assign usb_phy_config.override_pwr_sense_en.q  = 1'b0;
   assign usb_phy_config.override_pwr_sense_val.q = 1'b0;
+  assign usb_phy_config.usb_ref_disable.q        = 1'b0;
 
   usbdev_iomux i_usbdev_iomux (
     .clk_i                  ( clk_i                  ),
@@ -454,8 +462,8 @@ module usbuart_core (
     .usb_tx_se0_i           ( usb_tx_se0             ),
     .usb_tx_oe_i            ( usb_tx_oe              ),
     .usb_pwr_sense_o        (                        ),
-    .usb_pullup_en_i        (                        ),
-    .usb_suspend_i          (                        )
+    .usb_pullup_en_i        ( usb_pullup_en          ),
+    .usb_suspend_i          ( 1'b0                   )  // not used
   );
 
   assign cio_usb_dp_en_o = cio_oe;