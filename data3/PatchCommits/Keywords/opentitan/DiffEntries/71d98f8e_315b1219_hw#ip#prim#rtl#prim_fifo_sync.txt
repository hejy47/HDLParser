71d98f8e4adf0b1ba851ce096ecc10909327156b
[prim] Update fifo behavior during reset
diff --git a/hw/ip/prim/rtl/prim_fifo_sync.sv b/hw/ip/prim/rtl/prim_fifo_sync.sv
index af559ace7..77b8230fd 100644
--- a/hw/ip/prim/rtl/prim_fifo_sync.sv
+++ b/hw/ip/prim/rtl/prim_fifo_sync.sv
@@ -27,9 +27,11 @@ module prim_fifo_sync #(
   input                   rready_i,
   output  [Width-1:0]     rdata_o,
   // occupancy
+  output                  full_o,
   output  [DepthW-1:0]    depth_o
 );
 
+
   // FIFO is in complete passthrough mode
   if (Depth == 0) begin : gen_passthru_fifo
     `ASSERT_INIT(paramCheckPass, Pass == 1)
@@ -42,6 +44,7 @@ module prim_fifo_sync #(
 
     // host facing
     assign wready_o = rready_i;
+    assign full_o = rready_i;
 
     // this avoids lint warnings
     logic unused_clr;
@@ -56,6 +59,16 @@ module prim_fifo_sync #(
     logic [PTR_WIDTH-1:0] fifo_wptr, fifo_rptr;
     logic                 fifo_incr_wptr, fifo_incr_rptr, fifo_empty;
 
+    // module under reset flag
+    logic under_rst;
+    always_ff @(posedge clk_i or negedge rst_ni) begin
+      if (!rst_ni) begin
+        under_rst <= 1'b1;
+      end else if (under_rst) begin
+        under_rst <= ~under_rst;
+      end
+    end
+
     // create the write and read pointers
     logic  full, empty;
     logic  wptr_msb;
@@ -71,11 +84,15 @@ module prim_fifo_sync #(
                      (wptr_msb == rptr_msb) ? DepthW'(wptr_value) - DepthW'(rptr_value) :
                      (DepthW'(Depth) - DepthW'(rptr_value) + DepthW'(wptr_value)) ;
 
-    assign fifo_incr_wptr = wvalid_i & wready_o;
-    assign fifo_incr_rptr = rvalid_o & rready_i;
+    assign fifo_incr_wptr = wvalid_i & wready_o & ~under_rst;
+    assign fifo_incr_rptr = rvalid_o & rready_i & ~under_rst;
 
-    assign wready_o = ~full;
-    assign rvalid_o = ~empty;
+    // full and not ready for write are two different concepts.
+    // The latter can be '0' when under reset, while the former is an indication that no more
+    // entries can be written.
+    assign wready_o = ~full & ~under_rst;
+    assign full_o   = full;
+    assign rvalid_o = ~empty & ~under_rst;
 
     always_ff @(posedge clk_i or negedge rst_ni) begin
       if (!rst_ni) begin