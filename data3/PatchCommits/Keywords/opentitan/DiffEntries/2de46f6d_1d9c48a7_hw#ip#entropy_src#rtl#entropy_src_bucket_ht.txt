2de46f6dd9a3db8d3425364c0b834d63d0b7a3b6
[entropy_src/rtl] fixes to address issue #3511
diff --git a/hw/ip/entropy_src/rtl/entropy_src_bucket_ht.sv b/hw/ip/entropy_src/rtl/entropy_src_bucket_ht.sv
index ebe15f450..f986d4f19 100755
--- a/hw/ip/entropy_src/rtl/entropy_src_bucket_ht.sv
+++ b/hw/ip/entropy_src/rtl/entropy_src_bucket_ht.sv
@@ -6,11 +6,11 @@
 //
 
 module entropy_src_bucket_ht #(
-  parameter int unsigned RegWidth = 16,
-  parameter int unsigned RngBusWidth = 4
+  parameter int RegWidth = 16,
+  parameter int RngBusWidth = 4
 ) (
-  input                  clk_i,
-  input                  rst_ni,
+  input logic clk_i,
+  input logic rst_ni,
 
    // ins req interface
   input logic [RngBusWidth-1:0] entropy_bit_i,
@@ -18,31 +18,26 @@ module entropy_src_bucket_ht #(
   input logic                   clear_i,
   input logic                   active_i,
   input logic [RegWidth-1:0]    thresh_i,
-  input logic [RegWidth-1:0]    window_i,
+  input logic                   window_wrap_pulse_i,
   output logic [RegWidth-1:0]   test_cnt_o,
-  output logic                  test_done_pulse_o,
   output logic                  test_fail_pulse_o
 );
 
   localparam int NUM_BINS = 2**RngBusWidth;
 
   // signals
-  logic        window_cntr_wrap;
   logic [NUM_BINS-1:0] bin_incr;
   logic [NUM_BINS-1:0] bin_cnt_exceeds_thresh;
 
   // flops
-  logic [RegWidth-1:0] window_cntr_q, window_cntr_d;
   logic [RegWidth-1:0] test_cnt_q, test_cnt_d;
   logic [RegWidth-1:0] bin_cntr_q[NUM_BINS], bin_cntr_d[NUM_BINS];
 
   always_ff @(posedge clk_i or negedge rst_ni)
     if (!rst_ni) begin
-      window_cntr_q    <= '0;
       test_cnt_q       <= '0;
       bin_cntr_q       <= '{default:0};
     end else begin
-      window_cntr_q    <= window_cntr_d;
       test_cnt_q       <= test_cnt_d;
       bin_cntr_q       <= bin_cntr_d;
     end
@@ -63,33 +58,21 @@ module entropy_src_bucket_ht #(
     // set the bin incrementer if the symbol matches that bin
     assign bin_incr[i] = entropy_bit_vld_i && (entropy_bit_i == i);
     // use the bin incrementer to increase the bin total count
-    assign bin_cntr_d[i] = window_cntr_wrap ? '0 :
+    assign bin_cntr_d[i] = window_wrap_pulse_i ? '0 :
            ((active_i && bin_incr[i]) ? (bin_cntr_q[i]+1) : bin_cntr_q[i]);
     // use the bin incrementer to increase the bin total count
     assign bin_cnt_exceeds_thresh[i] = (bin_cntr_q[i] > thresh_i);
   end : gen_symbol_match
 
-
-  // Window wrap condition
-  assign window_cntr_wrap = (window_cntr_q == window_i);
-
-  // Window counter
-  assign window_cntr_d =
-         clear_i ? '0 :
-         window_cntr_wrap ? '0  :
-         entropy_bit_vld_i ? (window_cntr_q+1) :
-         window_cntr_q;
-
   // Test event counter
   assign test_cnt_d =
          (!active_i || clear_i) ? '0 :
-         window_cntr_wrap ? '0 :
+         window_wrap_pulse_i ? '0 :
          entropy_bit_vld_i && (|bin_cnt_exceeds_thresh) ? (test_cnt_q+1) :
          test_cnt_q;
 
   // the pulses will be only one clock in length
-  assign test_fail_pulse_o = active_i && window_cntr_wrap && (test_cnt_q > '0);
-  assign test_done_pulse_o = window_cntr_wrap;
+  assign test_fail_pulse_o = active_i && window_wrap_pulse_i && (test_cnt_q > '0);
   assign test_cnt_o = test_cnt_q;
 
 