2de46f6dd9a3db8d3425364c0b834d63d0b7a3b6
[entropy_src/rtl] fixes to address issue #3511
diff --git a/hw/ip/entropy_src/rtl/entropy_src_markov_ht.sv b/hw/ip/entropy_src/rtl/entropy_src_markov_ht.sv
index 29fabd2e7..a2bafa330 100755
--- a/hw/ip/entropy_src/rtl/entropy_src_markov_ht.sv
+++ b/hw/ip/entropy_src/rtl/entropy_src_markov_ht.sv
@@ -6,46 +6,49 @@
 //
 
 module entropy_src_markov_ht #(
-  parameter int unsigned RegWidth = 16,
-  parameter int unsigned RngBusWidth = 4
+  parameter int RegWidth = 16,
+  parameter int RngBusWidth = 4
 ) (
-  input                  clk_i,
-  input                  rst_ni,
+  input logic clk_i,
+  input logic rst_ni,
 
    // ins req interface
   input logic [RngBusWidth-1:0] entropy_bit_i,
   input logic                   entropy_bit_vld_i,
   input logic                   clear_i,
   input logic                   active_i,
-  input logic [RegWidth-1:0]    thresh_i,
-  input logic [RegWidth-1:0]    window_i,
-  output logic [RegWidth-1:0]   test_cnt_o,
-  output logic                  test_done_pulse_o,
-  output logic                  test_fail_pulse_o
+  input logic [RegWidth-1:0]    thresh_hi_i,
+  input logic [RegWidth-1:0]    thresh_lo_i,
+  input logic                   window_wrap_pulse_i,
+  output logic [RegWidth-1:0]   test_cnt_hi_o,
+  output logic [RegWidth-1:0]   test_cnt_lo_o,
+  output logic                  test_fail_hi_pulse_o,
+  output logic                  test_fail_lo_pulse_o
 );
 
   // signals
-  logic                   window_cntr_wrap;
   logic [RngBusWidth-1:0] samples_no_match_pulse;
-  logic [RngBusWidth-1:0] pair_cnt_fail;
+  logic [RegWidth-1:0] pair_cntr_gt1;
+  logic [RegWidth-1:0] pair_cntr_gt2;
+  logic [RegWidth-1:0] pair_cntr_gt3;
+  logic [RegWidth-1:0] pair_cntr_lt1;
+  logic [RegWidth-1:0] pair_cntr_lt2;
+  logic [RegWidth-1:0] pair_cntr_lt3;
 
   // flops
+  logic                toggle_q, toggle_d;
   logic [RngBusWidth-1:0] prev_sample_q, prev_sample_d;
   logic [RegWidth-1:0]    pair_cntr_q[RngBusWidth], pair_cntr_d[RngBusWidth];
-  logic [RegWidth-1:0]    window_cntr_q, window_cntr_d;
-  logic [RegWidth-1:0]    test_cnt_q, test_cnt_d;
 
   always_ff @(posedge clk_i or negedge rst_ni)
     if (!rst_ni) begin
+      toggle_q         <= '0;
       prev_sample_q    <= '0;
       pair_cntr_q      <= '{default:0};
-      window_cntr_q    <= '0;
-      test_cnt_q       <= '0;
     end else begin
+      toggle_q         <= toggle_d;
       prev_sample_q    <= prev_sample_d;
       pair_cntr_q      <= pair_cntr_d;
-      window_cntr_q    <= window_cntr_d;
-      test_cnt_q       <= test_cnt_d;
     end
 
 
@@ -60,47 +63,47 @@ module entropy_src_markov_ht #(
 
     // bit sampler
     assign prev_sample_d[sh] = (!active_i || clear_i) ? '0 :
-                               window_cntr_wrap ? '0  :
+                               window_wrap_pulse_i ? '0  :
                                entropy_bit_vld_i ? entropy_bit_i[sh] :
                                prev_sample_q[sh];
 
     // pair check
-    assign samples_no_match_pulse[sh] = entropy_bit_vld_i && window_cntr_q[0] &&
+    assign samples_no_match_pulse[sh] = entropy_bit_vld_i && toggle_q &&
            (prev_sample_q[sh] == !entropy_bit_i[sh]);
 
     // pair counter
     assign pair_cntr_d[sh] =
            (!active_i || clear_i) ? '0 :
-           window_cntr_wrap ? '0  :
+           window_wrap_pulse_i ? '0  :
            samples_no_match_pulse[sh] ? (pair_cntr_q[sh]+1) :
            pair_cntr_q[sh];
 
-    assign pair_cnt_fail[sh] = (pair_cntr_q[sh] >= thresh_i);
-
   end : gen_cntrs
 
+    // create a toggle signal to sample pairs with
+    assign toggle_d =
+                      (!active_i || clear_i) ? '0 :
+                      window_wrap_pulse_i ? '0  :
+                      entropy_bit_vld_i ? (!toggle_q) :
+                      toggle_q;
+
+  // determine the highest counter pair counter value
+  assign pair_cntr_gt1 = (pair_cntr_q[0] < pair_cntr_q[1]) ? pair_cntr_q[1] : pair_cntr_q[0];
+  assign pair_cntr_gt2 = (pair_cntr_gt1 < pair_cntr_q[2]) ? pair_cntr_q[2] : pair_cntr_gt1;
+  assign pair_cntr_gt3 = (pair_cntr_gt2 < pair_cntr_q[3]) ? pair_cntr_q[3] : pair_cntr_gt2;
 
-  // Window wrap condition
-  assign window_cntr_wrap = (window_cntr_q == window_i);
 
-  // Window counter
-  assign window_cntr_d =
-         clear_i ? '0 :
-         window_cntr_wrap ? '0  :
-         entropy_bit_vld_i ? (window_cntr_q+1) :
-         window_cntr_q;
+  // determine the lowest counter pair counter value
+  assign pair_cntr_lt1 = (pair_cntr_q[0] > pair_cntr_q[1]) ? pair_cntr_q[1] : pair_cntr_q[0];
+  assign pair_cntr_lt2 = (pair_cntr_lt1 > pair_cntr_q[2]) ? pair_cntr_q[2] : pair_cntr_lt1;
+  assign pair_cntr_lt3 = (pair_cntr_lt2 > pair_cntr_q[3]) ? pair_cntr_q[3] : pair_cntr_lt2;
 
-  // Test event counter
-  assign test_cnt_d =
-         (!active_i || clear_i) ? '0 :
-         window_cntr_wrap ? '0 :
-         entropy_bit_vld_i && (|pair_cnt_fail) ? (test_cnt_q+1) :
-         test_cnt_q;
 
   // the pulses will be only one clock in length
-  assign test_fail_pulse_o = active_i && window_cntr_wrap && (test_cnt_q > '0);
-  assign test_done_pulse_o = window_cntr_wrap;
-  assign test_cnt_o = test_cnt_q;
+  assign test_fail_hi_pulse_o = active_i && window_wrap_pulse_i && (pair_cntr_gt3 > thresh_hi_i);
+  assign test_fail_lo_pulse_o = active_i && window_wrap_pulse_i && (pair_cntr_lt3 < thresh_lo_i);
+  assign test_cnt_hi_o = pair_cntr_gt3;
+  assign test_cnt_lo_o = pair_cntr_lt3;
 
 
 endmodule