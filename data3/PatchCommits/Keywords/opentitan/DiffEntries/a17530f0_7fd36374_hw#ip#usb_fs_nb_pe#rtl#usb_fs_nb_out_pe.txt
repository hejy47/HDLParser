a17530f0a51524486c59b0c8d5295d6ded247ec2
[usbdev] USB device update from ETH repo
diff --git a/hw/ip/usb_fs_nb_pe/rtl/usb_fs_nb_out_pe.sv b/hw/ip/usb_fs_nb_pe/rtl/usb_fs_nb_out_pe.sv
index 4d2717d2c..9b172a99e 100644
--- a/hw/ip/usb_fs_nb_pe/rtl/usb_fs_nb_out_pe.sv
+++ b/hw/ip/usb_fs_nb_pe/rtl/usb_fs_nb_out_pe.sv
@@ -25,16 +25,19 @@ module usb_fs_nb_out_pe #(
   ////////////////////////
   // endpoint interface //
   ////////////////////////
-  output logic [3:0]           out_ep_current_o, // Other signals address to this ep
-  output logic                 out_ep_data_put_o, // put the data (put addr advances after)
-  output logic [PktW - 1:0]    out_ep_put_addr_o, // Offset to put data (0..pktlen)
-  output logic [7:0]           out_ep_data_o,
-  output logic                 out_ep_newpkt_o, // new packed, current was set
-  output logic                 out_ep_acked_o, // good termination, device has acked
-  output logic                 out_ep_rollback_o, // bad termination, discard data
-  output logic [NumOutEps-1:0] out_ep_setup_o,
-  input [NumOutEps-1:0]        out_ep_full_i, // Cannot accept data
-  input [NumOutEps-1:0]        out_ep_stall_i, // Stalled
+  output logic [3:0]             out_ep_current_o, // Other signals address to this ep, this signal will be stable for several cycles
+  output logic                   out_ep_data_put_o, // put the data (put addr advances after)
+  output logic [PktW - 1:0]      out_ep_put_addr_o, // Offset to put data (0..pktlen)
+  output logic [7:0]             out_ep_data_o,
+  output logic                   out_ep_newpkt_o, // new packed, current was set
+  output logic                   out_ep_acked_o, // good termination, device has acked
+  output logic                   out_ep_rollback_o, // bad termination, discard data
+  output logic [NumOutEps-1:0]   out_ep_setup_o,
+  input [NumOutEps-1:0]          out_ep_full_i, // Cannot accept data
+  input [NumOutEps-1:0]          out_ep_stall_i, // Stalled
+  input logic  [NumOutEps-1:0]   out_ep_iso_i, // Configure endpoint in isochronous mode
+
+  input logic  [NumOutEps-1:0]   data_toggle_clear_i, // Clear the data toggles for an EP
 
   /////////////
   // rx path //
@@ -74,11 +77,12 @@ module usb_fs_nb_out_pe #(
   ////////////////////////////////
   import usb_consts_pkg::*;
 
-  typedef enum logic [1:0] {
-    StIdle          = 2'h0,
-    StRcvdOut       = 2'h1,
-    StRcvdDataStart = 2'h2,
-    StRcvdDataEnd   = 2'h3
+  typedef enum {
+    StIdle,
+    StRcvdOut,
+    StRcvdDataStart,
+    StRcvdDataEnd,
+    StRcvdIsoDataEnd
   } state_out_e;
 
   state_out_e  out_xfr_state;
@@ -92,7 +96,7 @@ module usb_fs_nb_out_pe #(
   logic nak_out_transfer;
 
   // data toggle state
-  logic [NumOutEps - 1:0] data_toggle;
+  logic [NumOutEps - 1:0] data_toggle_q, data_toggle_d;
 
   // Make widths work
   logic [OutEpW - 1 : 0]    out_ep_index;
@@ -103,6 +107,9 @@ module usb_fs_nb_out_pe #(
   logic invalid_packet_received, data_packet_received, non_data_packet_received;
   logic bad_data_toggle;
 
+  // 1: If the current transfer is a SETUP, 0: OUT
+  logic current_xfer_setup_q;
+
   // More syntax so can compare with enum
   usb_pid_type_e rx_pid_type;
   usb_pid_e      rx_pid;
@@ -141,7 +148,7 @@ module usb_fs_nb_out_pe #(
 
   assign bad_data_toggle =
     data_packet_received &&
-    rx_pid_i[3] != data_toggle[rx_endp_i[0 +: OutEpW]]; // lint: rx_endp_i range was checked
+    rx_pid_i[3] != data_toggle_q[rx_endp_i[0 +: OutEpW]]; // lint: rx_endp_i range was checked
 
 
   always_ff @(posedge clk_48mhz_i or negedge rst_ni) begin
@@ -198,7 +205,10 @@ module usb_fs_nb_out_pe #(
       end
 
       StRcvdDataStart: begin
-        if (bad_data_toggle) begin
+        if (out_ep_iso_i[out_ep_index] && data_packet_received) begin
+          // ISO endpoint: Don't send a handshake, ignore toggle
+          out_xfr_state_next = StRcvdIsoDataEnd;
+        end else if (bad_data_toggle) begin
           out_xfr_state_next = StIdle;
           rollback_data = 1'b1;
           tx_pkt_start_o = 1'b1;
@@ -218,7 +228,8 @@ module usb_fs_nb_out_pe #(
         out_xfr_state_next = StIdle;
         tx_pkt_start_o = 1'b1;
 
-        if (out_ep_stall_i[out_ep_index]) begin // lint: out_ep_index range was checked
+        if (out_ep_stall_i[out_ep_index] && !current_xfer_setup_q) begin // lint: out_ep_index range was checked
+          // We only send STALL for OUT transfers, not for SETUP transfers
           tx_pid_o = {UsbPidStall}; // STALL
         end else if (nak_out_transfer) begin
           tx_pid_o = {UsbPidNak}; // NAK -- the endpoint could not accept the data at the moment
@@ -230,10 +241,25 @@ module usb_fs_nb_out_pe #(
         end
       end
 
-      // Add default if state space no longer exactly fits in bitwidth
-      // default begin
-      //  out_xfr_state_next = StIdle;
-      // end
+      StRcvdIsoDataEnd: begin
+        out_xfr_state_next = StIdle;
+
+        if (out_ep_stall_i[out_ep_index] && !current_xfer_setup_q) begin
+          // Send a STALL (something bad happened and the host needs to resolve it)
+          tx_pkt_start_o = 1'b1;
+          tx_pid_o       = {UsbPidStall}; // STALL
+        end else if (nak_out_transfer) begin
+          // We got a valid packet, but can't store it (error that the software must resolve)
+          rollback_data = 1'b1;
+        end else begin
+          // We got a valid packet, but we don't send an ACK on the bus
+          new_pkt_end    = 1'b1;
+          out_ep_acked_o = 1'b1;          
+        end
+
+      end
+
+      default: out_xfr_state_next = StIdle;
     endcase
   end
 
@@ -248,28 +274,38 @@ module usb_fs_nb_out_pe #(
     end
   end
 
+  always_comb begin : proc_data_toggle_d
+    data_toggle_d = data_toggle_q;
+
+    if (setup_token_received) begin
+      data_toggle_d[rx_endp_i[0 +: OutEpW]] = 1'b0; // lint: rx_endp_i range was checked
+    end else if (new_pkt_end) begin
+      data_toggle_d[out_ep_index] = !data_toggle_q[out_ep_index]; // lint: range was checked
+    end
+
+    data_toggle_d = data_toggle_d & ~data_toggle_clear_i;
+  end
+
   always_ff @(posedge clk_48mhz_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      data_toggle <= '0; // All endpoints
+      data_toggle_q <= {NumOutEps{1'b0}}; // All endpoints
     end else if (link_reset_i) begin
-      data_toggle <= '0; // All endpoints
+      data_toggle_q <= {NumOutEps{1'b0}}; // All endpoints
     end else begin
-      if (setup_token_received) begin
-        data_toggle[rx_endp_i[0 +: OutEpW]] <= 1'b0; // lint: rx_endp_i range was checked
-      end else if (new_pkt_end) begin
-        data_toggle[out_ep_index] <= !data_toggle[out_ep_index]; // lint: range was checked
-      end
+      data_toggle_q <= data_toggle_d;
     end
   end
 
   always_ff @(posedge clk_48mhz_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      out_ep_newpkt_o <= 1'b0;
-      out_ep_current_o <= '0;
+      out_ep_newpkt_o       <= 1'b0;
+      out_ep_current_o      <= 4'h0;
+      current_xfer_setup_q  <= 1'b0;
     end else begin
       if (out_xfr_start) begin
-        out_ep_newpkt_o <= 1'b1;
-        out_ep_current_o <= rx_endp_i;
+        out_ep_newpkt_o      <= 1'b1;
+        out_ep_current_o     <= rx_endp_i;
+        current_xfer_setup_q <= setup_token_received;
       end else begin
         out_ep_newpkt_o <= 1'b0;
       end
@@ -310,12 +346,12 @@ module usb_fs_nb_out_pe #(
 
   always_ff @(posedge clk_48mhz_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      out_ep_put_addr_o <= '0;
+      out_ep_put_addr_o <= 0;
     end else begin
       if (out_xfr_state == StRcvdOut) begin
-        out_ep_put_addr_o <= '0;
+        out_ep_put_addr_o <= 0;
       end else if ((out_xfr_state == StRcvdDataStart) && increment_addr) begin
-        out_ep_put_addr_o <= out_ep_put_addr_o + 1'b1;
+        out_ep_put_addr_o <= out_ep_put_addr_o + 1;
       end
     end
   end