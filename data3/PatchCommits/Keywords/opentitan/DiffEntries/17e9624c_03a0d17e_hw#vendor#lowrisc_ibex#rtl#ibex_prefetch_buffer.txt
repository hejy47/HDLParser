17e9624c452e05f71f4ad2b7c75bf6bbb071c324
Update lowrisc_ibex to lowRISC/ibex@ee1098f
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_prefetch_buffer.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_prefetch_buffer.sv
index 64466618d..605010abd 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_prefetch_buffer.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_prefetch_buffer.sv
@@ -39,20 +39,21 @@ module ibex_prefetch_buffer (
     output logic        busy_o
 );
 
-  // Changes to the address flops would be required for > 2 outstanding requests
-  localparam int unsigned NUM_REQS = 2;
+  localparam int unsigned NUM_REQS  = 2;
 
-  logic                valid_req;
+  logic                valid_new_req, valid_req;
   logic                valid_req_d, valid_req_q;
-  logic                hold_addr_d, hold_addr_q;
+  logic                discard_req_d, discard_req_q;
   logic                gnt_or_pmp_err, rvalid_or_pmp_err;
   logic [NUM_REQS-1:0] rdata_outstanding_n, rdata_outstanding_s, rdata_outstanding_q;
-  logic [NUM_REQS-1:0] branch_abort_n, branch_abort_s, branch_abort_q;
+  logic [NUM_REQS-1:0] branch_discard_n, branch_discard_s, branch_discard_q;
+  logic [NUM_REQS-1:0] rdata_pmp_err_n, rdata_pmp_err_s, rdata_pmp_err_q;
 
-  logic [31:0]         instr_addr_q, fetch_addr;
+  logic [31:0]         stored_addr_d, stored_addr_q;
+  logic                stored_addr_en;
+  logic [31:0]         fetch_addr_d, fetch_addr_q;
+  logic                fetch_addr_en;
   logic [31:0]         instr_addr, instr_addr_w_aligned;
-  logic                addr_valid;
-  logic                pmp_err_q;
   logic                instr_or_pmp_err;
 
   logic                fifo_valid;
@@ -71,19 +72,21 @@ module ibex_prefetch_buffer (
 
   // Instruction fetch errors are valid on the data phase of a request
   // PMP errors are generated in the address phase, and registered into a fake data phase
-  assign instr_or_pmp_err = instr_err_i | pmp_err_q;
+  assign instr_or_pmp_err = instr_err_i | rdata_pmp_err_q[0];
 
   // A branch will invalidate any previously fetched instructions
   assign fifo_clear = branch_i;
 
-  ibex_fetch_fifo fifo_i (
+  ibex_fetch_fifo #(
+    .NUM_REQS (NUM_REQS)
+  ) fifo_i (
       .clk_i                 ( clk_i             ),
       .rst_ni                ( rst_ni            ),
 
       .clear_i               ( fifo_clear        ),
 
       .in_valid_i            ( fifo_valid        ),
-      .in_addr_i             ( instr_addr_q      ),
+      .in_addr_i             ( addr_i            ),
       .in_rdata_i            ( instr_rdata_i     ),
       .in_err_i              ( instr_or_pmp_err  ),
       .in_ready_o            ( fifo_ready        ),
@@ -101,55 +104,72 @@ module ibex_prefetch_buffer (
   //////////////
 
   // Make a new request any time there is space in the FIFO, and space in the request queue
-  assign valid_req = valid_req_q | (req_i & (fifo_ready | branch_i) & (~&rdata_outstanding_q));
+  assign valid_new_req = req_i & (fifo_ready | branch_i) & ~rdata_outstanding_q[NUM_REQS-1];
+  assign valid_req = valid_req_q | valid_new_req;
 
   // If a request address triggers a PMP error, the external bus request is suppressed. We might
   // therefore never receive a grant for such a request. The grant is faked in this case to make
   // sure the request proceeds and the error is pushed to the FIFO.
-  // We always use the registered version of the signal since it will be held stable throughout
-  // the request, and the penalty of waiting for an extra cycle to consume the error is irrelevant.
-  // A branch could update the address (and therefore data_pmp_err_i) on the cycle a request is
-  // issued, in which case we must ignore the registered version.
-  assign gnt_or_pmp_err = instr_gnt_i | (pmp_err_q & ~branch_i);
+  assign gnt_or_pmp_err = instr_gnt_i | instr_pmp_err_i;
 
   // As with the grant, the rvalid must be faked for a PMP error, since the request was suppressed.
-  // Since the pmp_err_q flop is only updated when the address updates, it will always point to the
-  // PMP error status of the oldest outstanding request
-  assign rvalid_or_pmp_err = rdata_outstanding_q[0] & (instr_rvalid_i | pmp_err_q);
+  assign rvalid_or_pmp_err = rdata_outstanding_q[0] & (instr_rvalid_i | rdata_pmp_err_q[0]);
 
   // Hold the request stable for requests that didn't get granted
-  assign valid_req_d = valid_req & ~instr_gnt_i;
+  assign valid_req_d = valid_req & ~gnt_or_pmp_err;
 
-  // Hold the address stable for requests that couldn't be issued, or didn't get granted.
-  // This is different to valid_req_q since there are cases where we must use addr+4 for
-  // an ungranted request rather than addr_q (where addr_q has not been updated).
-  assign hold_addr_d = (branch_i | hold_addr_q) & ~(valid_req & instr_gnt_i);
+  // Record whether an outstanding bus request is cancelled by a branch
+  assign discard_req_d = valid_req_q & (branch_i | discard_req_q);
 
   ////////////////
   // Fetch addr //
   ////////////////
 
-  // The address flop is used to hold the address steady for ungranted requests and also to
-  // push the address to the FIFO for completed requests. For this reason, the address is only
-  // updated once a request is the oldest outstanding to ensure that newer requests do not
-  // overwrite the addresses of older ones. Branches are an exception to this, since all older
-  // addresses will be discarded due to the branch.
+  // Two addresses are tracked in the prefetch buffer:
+  // 1. stored_addr_q - This is the address issued on the bus. It stays stable until
+  //                    the request is granted.
+  // 2. fetch_addr_q  - This is our next address to fetch from. It is updated on branches to
+  //                    capture the new address, and then for each new request issued.
+  // A third address is tracked in the fetch FIFO itself:
+  // 3. instr_addr_q  - This is the address at the head of the FIFO, efectively our oldest fetched
+  //                    address. This address is updated on branches, and does its own increment
+  //                    each time the FIFO is popped.
 
-  // Update the addr_q flop on any branch, or
-  assign addr_valid = branch_i |
-                      // A new request which will be the oldest, or
-                      (valid_req & instr_gnt_i & ~rdata_outstanding_q[0]) |
-                      // each time a valid request becomes the oldest
-                      (rvalid_or_pmp_err & ~branch_abort_q[0] &
-                       ((valid_req & instr_gnt_i) | rdata_outstanding_q[1]));
+  // 1. stored_addr_q
 
-  // Fetch the next word-aligned instruction address
-  assign fetch_addr = {instr_addr_q[31:2], 2'b00} + 32'd4;
+  // Only update stored_addr_q for new ungranted requests
+  assign stored_addr_en = valid_new_req & ~valid_req_q & ~gnt_or_pmp_err;
+
+  // Store whatever address was issued on the bus
+  assign stored_addr_d = instr_addr;
+
+  // CPU resets with a branch, so no need to reset these addresses
+  always_ff @(posedge clk_i) begin
+    if (stored_addr_en) begin
+      stored_addr_q <= stored_addr_d;
+    end
+  end
+
+  // 2. fetch_addr_q
+
+  // Update on a branch or as soon as a request is issued
+  assign fetch_addr_en = branch_i | (valid_new_req & ~valid_req_q);
+
+  assign fetch_addr_d = (branch_i ? addr_i : 
+                                    {fetch_addr_q[31:2], 2'b00}) +
+                        // Current address + 4
+                        {{29{1'b0}},(valid_new_req & ~valid_req_q),2'b00};
+
+  always_ff @(posedge clk_i) begin
+    if (fetch_addr_en) begin
+      fetch_addr_q <= fetch_addr_d;
+    end
+  end
 
   // Address mux
-  assign instr_addr = branch_i    ? addr_i :
-                      hold_addr_q ? instr_addr_q :
-                                    fetch_addr;
+  assign instr_addr = valid_req_q ? stored_addr_q :
+                      branch_i    ? addr_i :
+                                    fetch_addr_q;
 
   assign instr_addr_w_aligned = {instr_addr[31:2], 2'b00};
 
@@ -161,31 +181,43 @@ module ibex_prefetch_buffer (
     // Request 0 (always the oldest outstanding request)
     if (i == 0) begin : g_req0
       // A request becomes outstanding once granted, and is cleared once the rvalid is received.
-      // Outstanding requests shift down the queue towards entry 0. Entry 0 considers the PMP
-      // error cases while newer entries do not (pmp_err_q is only valid for entry 0)
+      // Outstanding requests shift down the queue towards entry 0.
       assign rdata_outstanding_n[i] = (valid_req & gnt_or_pmp_err) |
                                       rdata_outstanding_q[i];
       // If a branch is received at any point while a request is outstanding, it must be tracked
       // to ensure we discard the data once received
-      assign branch_abort_n[i]      = (branch_i & rdata_outstanding_q[i]) | branch_abort_q[i];
+      assign branch_discard_n[i]    = (valid_req & gnt_or_pmp_err & discard_req_d) |
+                                      (branch_i & rdata_outstanding_q[i]) | branch_discard_q[i];
+      // Record whether this request received a PMP error
+      assign rdata_pmp_err_n[i]     = (valid_req & ~rdata_outstanding_q[i] & instr_pmp_err_i) |
+                                      rdata_pmp_err_q[i];
 
     end else begin : g_reqtop
+    // Entries > 0 consider the FIFO fill state to calculate their next state (by checking
+    // whether the previous entry is valid)
 
-      assign rdata_outstanding_n[i] = (valid_req & instr_gnt_i &
-                                       (&rdata_outstanding_q[i-1:0])) |
+      assign rdata_outstanding_n[i] = (valid_req & gnt_or_pmp_err &
+                                       rdata_outstanding_q[i-1]) |
                                       rdata_outstanding_q[i];
-      assign branch_abort_n[i]      = (branch_i & rdata_outstanding_q[i]) | branch_abort_q[i];
+      assign branch_discard_n[i]    = (valid_req & gnt_or_pmp_err & discard_req_d &
+                                       rdata_outstanding_q[i-1]) |
+                                      (branch_i & rdata_outstanding_q[i]) | branch_discard_q[i];
+      assign rdata_pmp_err_n[i]     = (valid_req & ~rdata_outstanding_q[i] & instr_pmp_err_i &
+                                       rdata_outstanding_q[i-1]) |
+                                      rdata_pmp_err_q[i];
     end
   end
 
   // Shift the entries down on each instr_rvalid_i
   assign rdata_outstanding_s = rvalid_or_pmp_err ? {1'b0,rdata_outstanding_n[NUM_REQS-1:1]} :
                                                    rdata_outstanding_n;
-  assign branch_abort_s      = rvalid_or_pmp_err ? {1'b0,branch_abort_n[NUM_REQS-1:1]} :
-                                                   branch_abort_n;
+  assign branch_discard_s    = rvalid_or_pmp_err ? {1'b0,branch_discard_n[NUM_REQS-1:1]} :
+                                                   branch_discard_n;
+  assign rdata_pmp_err_s     = rvalid_or_pmp_err ? {1'b0,rdata_pmp_err_n[NUM_REQS-1:1]} :
+                                                   rdata_pmp_err_n;
 
-  // Push a new entry to the FIFO once complete (and not aborted by a branch)
-  assign fifo_valid = rvalid_or_pmp_err & ~branch_abort_q[0];
+  // Push a new entry to the FIFO once complete (and not cancelled by a branch)
+  assign fifo_valid = rvalid_or_pmp_err & ~branch_discard_q[0];
 
   ///////////////
   // Registers //
@@ -194,22 +226,16 @@ module ibex_prefetch_buffer (
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       valid_req_q          <= 1'b0;
-      hold_addr_q          <= 1'b0;
+      discard_req_q        <= 1'b0;
       rdata_outstanding_q  <= 'b0;
-      branch_abort_q       <= 'b0;
+      branch_discard_q     <= 'b0;
+      rdata_pmp_err_q      <= 'b0;
     end else begin
       valid_req_q          <= valid_req_d;
-      hold_addr_q          <= hold_addr_d;
+      discard_req_q        <= discard_req_d;
       rdata_outstanding_q  <= rdata_outstanding_s;
-      branch_abort_q       <= branch_abort_s;
-    end
-  end
-
-  // CPU resets with a branch, so no need to reset these
-  always_ff @(posedge clk_i) begin
-    if (addr_valid) begin
-      instr_addr_q <= instr_addr;
-      pmp_err_q    <= instr_pmp_err_i;
+      branch_discard_q     <= branch_discard_s;
+      rdata_pmp_err_q      <= rdata_pmp_err_s;
     end
   end
 
@@ -217,18 +243,7 @@ module ibex_prefetch_buffer (
   // Outputs //
   /////////////
 
-  assign instr_req_o          = valid_req;
-  assign instr_addr_o         = instr_addr_w_aligned;
-
-  ////////////////
-  // Assertions //
-  ////////////////
-
-`ifndef VERILATOR
-  // Code changes required to support > 2 outstanding requests
-  assert property (
-    @(posedge clk_i) disable iff (!rst_ni)
-    (NUM_REQS <= 2) );
-`endif
+  assign instr_req_o  = valid_req;
+  assign instr_addr_o = instr_addr_w_aligned;
 
 endmodule