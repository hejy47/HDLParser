======Commit: ff6797b2======
======Short Message======
[ibex/ml] add CSR/mem_error tests to ml_testlist
======Full Message======
[ibex/ml] add CSR/mem_error tests to ml_testlist

Signed-off-by: Udi <udij@google.com>



======Commit: 31b2f6c8======
======Short Message======
[rtl] Fix retired instruction counters
======Full Message======
[rtl] Fix retired instruction counters

When the writeback stage is present the retired instruction counter
(minstret) and the retired compressed instruction counter could see an
off by one error when an instruction was in the writeback stage when
reading the counters. With this fix the ID stage observes the
incremented value of the counters when an instruction that would
increment them is in writeback.



======Commit: 6cbd7d21======
======Short Message======
[dv] Fix transaction ordering in ibex_mem_intf_monitor
======Full Message======
[dv] Fix transaction ordering in ibex_mem_intf_monitor

Previously the monitor would emit write transactions the cycle the
request is seen and emit read transactions the cycle the response is
seen. This allowed later write transactions to be emitted before earlier
reads (where a new write transaction is started the cycle a read
response returns).

Now both read and write transactions are emitted when their response is
seen.

In addition the error field from the response is copied into the
transaction.



======Commit: be27bc8b======
======Short Message======
[style] Fix whitespace issues around operators
======Full Message======
[style] Fix whitespace issues around operators

Our style guide typically require a single whitespace around operators.



======Commit: 3f9022a1======
======Short Message======
[rtl] Fix mtval for unaligned accesses
======Full Message======
[rtl] Fix mtval for unaligned accesses

Previously the raw incremented address was used which is the calculated
address + 4. This is confusing as it refers to a byte that wouldn't be
accessed (e.g. a lw at 0x8000009e which faults on the access to
0x8000000a0, would report an mtval of 0x8000000a2). With this change
mtval will refer to the first byte on the other half of the word
boundary the unaligned access crosses.



======Commit: 270cd91b======
======Short Message======
Fix the verible-format CI job
======Full Message======
Fix the verible-format CI job

The toplevel core file got renamed, but the experimental verible-format
CI job wasn't updated in sync. Fix that.



======Commit: 7506d4da======
======Short Message======
[sw] Fix GNU GCC toolchain component substitution for file path case.
======Full Message======
[sw] Fix GNU GCC toolchain component substitution for file path case.

This invocation would break:

make -C examples/sw/led/ CC=/opt/lowrisc-toolchain-gcc-rv32imc-20210412-1/bin/riscv32-unknown-elf-gcc

because the "-gcc" occurence inside the directory name would also be replaced.

Fix by first deriving CROSS_COMPILE from CC, then conditionally build other tool file names/paths.

Signed-off-by: Leon Woestenberg <leon@sidebranch.com>



======Commit: 6daae350======
======Short Message======
[rtl] Modify fetch_en_i behavior
======Full Message======
[rtl] Modify fetch_en_i behavior

This signal used to be a one shot enable out of reset. We need an option
to pause execution for OpenTitan, so fetch_enable is extended to cover
that.

The signal is already driven low by the testbench at the end of test.
This is moved after the performance counter reads to ensure they can
complete.

Fixes #1105

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 8a4c1b9e======
======Short Message======
[dv/uvm/core] Fix a minor reset issue
======Full Message======
[dv/uvm/core] Fix a minor reset issue

Fix the reset polarity in the irq driver (clears irq signals to zero
on reset rather than them being x) plus remove an unused signal.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 62aa2bca======
======Short Message======
[dv/uvm/core_ibex] Fix timeout issue in wfi tests
======Full Message======
[dv/uvm/core_ibex] Fix timeout issue in wfi tests

The test loops around waiting for the core to sleep then sending
interrupts to wake it. In some cases, the sequence sends an interrupt
that isn't enabled. It never gets back to try again with a new interrupt
since the test is waiting to see wfi first. This change removes that
requirement since it is redundant anyway (have to see wfi to sleep).

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 8dd21e49======
======Short Message======
Append logs for tests to regr.log
======Full Message======
Append logs for tests to regr.log

Commit 700f29b changed things so that details of the various tests
that ran ended up in separate files. This is nice (and important for
running things in parallel), but isn't massively helpful if you use
regr.log to understand what happened from a CI run!

This patch adds the logs again, splitting them up so that failing
tests come before passing ones (since you usually just care about the
failures).



======Commit: a8e17579======
======Short Message======
[rtl] Fix decode values for B Operand mux select
======Full Message======
[rtl] Fix decode values for B Operand mux select

With data-independent timing enabled and BranchTargetALU configured,
branches will stall for a cycle causing an illegal value to be decoded
for the B Operand. No functional impact of this, but an assertion fires
so we might as well tie it off properly.

Fixes #1367

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: f3b163af======
======Short Message======
[rtl] Add reset to lockstep delayed inputs
======Full Message======
[rtl] Add reset to lockstep delayed inputs

In tests with multiple resets, these signals could hold onto spurious
values through reset (since the clock is also gated) which caused
assertion failures on resumption.

Fixes #1368

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 700f29b7======
======Short Message======
[uvm,core_ibex] Run comparisons in parallel
======Full Message======
[uvm,core_ibex] Run comparisons in parallel

This patch teaches Make which tests we're actually running (via the
list_tests.py script), which means that we can compare the ISS and RTL
results in parallel rather than serially.

There's a bit of duplicated code (both list_tests.py and sim.py
currently contain the code to get a list of tests and then filter by
Ibex configuration), but this should go away with a later patch that
runs the RTL simulations in parallel in a similar way.

Note: This might seem a little silly: trace comparison takes way less
time than the RTL simulation! The point is that it's probably easier
to work "from the bottom" than to start by parallelising the
simulations themselves.



======Commit: 6c44070b======
======Short Message======
[dv] Fix icache formal tb after recent parameter changes
======Full Message======
[dv] Fix icache formal tb after recent parameter changes



======Commit: e716b5ad======
======Short Message======
Add the Width parameter to prim_buf module
======Full Message======
Add the Width parameter to prim_buf module

The prim_buf.sv file in Ibex is a manual copy of a file which is
typically auto-generated by FuseSoC/primgen. However, Ibex DV doesn't
yet run FuseSoC, and we provide a pregenerated copy instead. The
auto-generated file and its copy got out of sync. Fix that by adding the
new Width parameter.



======Commit: e0b47706======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@7117c349d
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@7117c349d

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
7117c349d5465b5152d3bb774079013924a3e9ba

* [dv/common] Improve coverage exclusion method (Cindy Chen)
* [prim] Waive unused parameter warnings for an FPGA-specific param
  (Rupert Swarbrick)
* [dpi] Fix indexing bug in ecc32_mem_area (Rupert Swarbrick)
* [dv, xcelium] Dump covergroup report (Srikrishna Iyer)
* [dvsim] Testplanner refactor & covergroup support (Srikrishna Iyer)
* [otp_ctrl] Workaround for generated prim depending on generated prim
  (Michael Schaffner)
* [dpi_memutil] Fix bug in RegisterMemoryArea (Rupert Swarbrick)
* [rom_ctrl/dv] Add skeleton testbench (Tom Roberts)
* [dvsim/verilator] Remove FUSESOC_IGNORE (Michael Schaffner)
* [checklists] Update all checklists for consistency (Srikrishna Iyer)
* [dv] Add integrity generation to backdoor memory loading (Greg
  Chadwick)
* [prim_secded] Add C reference models for Hsiao encode (Greg
  Chadwick)
* [rtl/prim_async_fifo] Fix async fifo typo when depth <= 2 (Cindy
  Chen)
* [dv/unr] Fix unr clk rst ports (Cindy Chen)
* [pads] - added AnalogIn1 pads for OTP supply (Arnon Sharlin)
* [dv/common] add ECC support to mem_bkdr_if (Udi Jonnalagadda)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: 71a87635======
======Short Message======
[doc] Fix building with sphinxcontrib-wavedrom 3.x
======Full Message======
[doc] Fix building with sphinxcontrib-wavedrom 3.x

sphinxcontrib-wavedrom 3.x uses wavedrom-cli by default, which can't be
installed on ReadTheDocs. Use the wavedrompy library again instead.



======Commit: c7cb958f======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@ca950b43a
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@ca950b43a

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
ca950b43a0e9ef5013b8e2e5de765bc34fb59b74

Two updates to the Ibex code were required:
* Adjust the prim_secded port names to match the changes in
  OpenTitan.
* Replace `has_ral` in `ibex_icache_env_cfg.sv` and
  `ibex_icache_base_test.sv` with its newer equivalent, matching
  https://github.com/lowRISC/opentitan/pull/5932 and the additional
  updates in https://github.com/lowRISC/opentitan/pull/5951.

Upstream changes include:
* [prim_secded] Use _i/_o suffix for port names (Philipp Wagner)
* [tl,dv] Allow bits to be set in responses regardless of mask (Rupert
  Swarbrick)
* [push_pull agent] Driver code refactor (Srikrishna Iyer)
* [dv/dvsim] Group failures per test in buckets (Guillermo Maturana)
* [dv/uvmdvgen] Flag error for paths in block name (Guillermo
  Maturana)
* [prim_fifo_async] Style fixes (Philipp Wagner)
* Remove non-ASCII characters from SV code and meson.build (Rupert
  Swarbrick)
* [dv/spi_device] Fix spi_device_csr_wr_with_rand_reset timeout issue
  (Cindy Chen)
* [otp] Update to match latest foundry wrapper (Timothy Chen)
* [flash] update to match latest foundry wrapper (Timothy Chen)
* [top] Latest ast integration (Timothy Chen)
* [lint] Strengthen Verible lint check to 100-character lines (Rupert
  Swarbrick)
* [ prim ] Suppress unneeded assertion when clearing prim_packer_fifo
  (Martin Lueker-Boden)
* [dv/otp_ctrl] Add coverage exclusions (Cindy Chen)
* [dv/dvsim] Add "^Error:" as a run fail pattern. (Guillermo Maturana)
* [dvsim] Fix column bug in DV summary report (Srikrishna Iyer)
* [dvsim] Fix testplan test counts (Srikrishna Iyer)
* [dvsim] Fix lowRISC/opentitan#6061 (Srikrishna Iyer)
* [prim_clock_div] Update waiver (Michael Schaffner)
* [fpv] dvsim script error (Cindy Chen)
* [prim_otp] Update interface (Michael Schaffner)
* [dvsim] update edacloudlauncher imports (Udi Jonnalagadda)
* [dv/doc] Minor fix on dv_doc (Cindy Chen)
* [dvsim] Scheduler updates - max_parallel, max_poll (Srikrishna Iyer)
* [dvsim] Set `Deploy.job_name` more robustly (Srikrishna Iyer)
* [prim] Make SECDED prim generation deterministic (Rupert Swarbrick)
* [tool, xcel] Support dumpping the array of struct in shm/vcd (Tung
  Hoang)
* [dv/otp_ctrl] OTP_CTRL DV doc (Cindy Chen)
* [dv/dv_macros] Fix DV_PRINT_ARR_CONTENTS (Guillermo Maturana)
* [prim_pad_attr/prim_flop_en] Add waiver files (Michael Schaffner)
* [prim_usb_diff] Minor lint fix (Michael Schaffner)
* [prim_clock_div] Update waiver file (Michael Schaffner)
* [top] change prim_generic usage into prim (Timothy Chen)
* [formal/conn] Support dvsim to publish regression result summary
  (Cindy Chen)
* Add formatting changes from allow list (Rafal Kapuscik)
* [prim] Add generic and Xilinx-specific xor2 primitives (Pirmin
  Vogel)
* [prim] Add Width parameter to buffer primitives (Pirmin Vogel)
* [prim] Add generic and Xilinx-specific enable-FF primitives (Pirmin
  Vogel)
* [prim] Remove temporary workaround in parameter list related to
  primgen (Pirmin Vogel)
* [dv/dvsim] Provides more context on some failures. (Guillermo
  Maturana)
* [dvsim] Fix local run error. (Eunchan Kim)
* [dv] Support multi-ral (part 4) (Weicai Yang)
* [dv/dvsim] Adds failure bucketizer for triage. (Guillermo Maturana)
* [lint/docs] Update ascentlint dvsim command in readme (Michael
  Schaffner)
* [top] Various top level lint fixes (Timothy Chen)
* [pinmux/padring] Wire up the pad attribute WARL behavior modules
  (Michael Schaffner)
* [dv] Fix tl_error failure (Weicai Yang)
* [pinout] Update flash test mode and voltage signals/pads (Michael
  Schaffner)
* [pad_wrapper] Extend the generic and Xilinx pad wrapper models
  (Michael Schaffner)
* [dv] Update scb for all blocks (Weicai Yang)
* [dv] Support multi-ral (part 3) (Weicai Yang)
* [prim_arbiter,lint] Tell Verilator to split variables for scheduling
  (Rupert Swarbrick)
* [prim] Fix lint warnings, replace inline AscentLint waivers (Pirmin
  Vogel)
* [dvsim] Scratch root default to $REPO_TOP/scratch (Srikrishna Iyer)
* [dv] Update `process_tl_access` args for all blocks (Weicai Yang)
* [dv] Support multi-ral (part 2) (Weicai Yang)
* [formal] Clean up some formal warnings (Cindy Chen)
* [topgen] Rework pinmux datastructure and templatize tops (Michael
  Schaffner)
* [otp_ctrl] Several small lint fixes (Michael Schaffner)
* [prim_fifo_async] Make async FIFO output zero when empty (Noah
  Moroze)
* [flash] Improve flash ECC handling based on transasction attribute
  (Timothy Chen)
* [dv] Remove toggle coverage excl for a_user/d_user (Weicai Yang)
* [dvsim] Fix remaining comments  from lowRISC/opentitan#5876
  (Srikrishna Iyer)
* [dv] Support multi-ral (part 1) (Weicai Yang)

Signed-off-by: Philipp Wagner <phw@lowrisc.org>



======Commit: 8ef06de7======
======Short Message======
[rtl] Fix lint issues
======Full Message======
[rtl] Fix lint issues



======Commit: 6c047083======
======Short Message======
[ibex] Fix buffer instantiations
======Full Message======
[ibex] Fix buffer instantiations

Signed-off-by: Timothy Chen <timothytim@google.com>



======Commit: 1b59c67b======
======Short Message======
[dv] Remove MISA from csr_description.yaml
======Full Message======
[dv] Remove MISA from csr_description.yaml

The value of `misa` will change depending on whether M or B are enabled.
The presence and read values of other CSRs may also depend upon the Ibex
configuration. A fix is required to allow riscv_csr_test to deal with
different CSR descriptions for different Ibex configurations. For now
just comment out `misa` from the descriptions file to enable
riscv_csr_test to run on a wider range of configurations.



======Commit: 07c04bc3======
======Short Message======
Fix a couple of synthesis bugs
======Full Message======
Fix a couple of synthesis bugs

1. Missing prim_assert in ibex_top.sv (more of an rtl bug but only found
in running synthesis scripts)
2. Write out the pre-mapped netlist before mapping latches

Relates to #1335

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: ed5f12c9======
======Short Message======
[rtl] Fix RF read enables for illegal instruction/fetch error
======Full Message======
[rtl] Fix RF read enables for illegal instruction/fetch error

The read enables should only be asserted where an actual RF read will
occur. Where there is an illegal instruction or a fetch error the raw
decoder signals might still be asserted but should be squashed before
they become the true enable signals.



======Commit: 55048761======
======Short Message======
[dv] Add known failure detection to riscv_debug_ebreakmu_test
======Full Message======
[dv] Add known failure detection to riscv_debug_ebreakmu_test



======Commit: 25cd6600======
======Short Message======
[dv] Don't kill regression on sim error
======Full Message======
[dv] Don't kill regression on sim error

When the simulator terminates with an error code that is reported as a
test failure and the regression continues. A new check for a plain
'Error' message is required to catch simulator reported errors that
don't become a UVM_FATAL or UVM_ERROR message (e.g. hitting an illegal
coverage bin). Previously any such simulation error would kill the whole
regression.



======Commit: b106001d======
======Short Message======
[rtl/icache] Move various parameters into the pkg
======Full Message======
[rtl/icache] Move various parameters into the pkg

No functional change. These parameters are effectively fixed. Moving
them to the pkg eases top-level wiring of RAM signals.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 8d37af27======
======Short Message======
Update google_riscv-dv to google/riscv-dv@59dcd8c
======Full Message======
Update google_riscv-dv to google/riscv-dv@59dcd8c

Update code from upstream repository https://github.com/google/riscv-
dv to revision 59dcd8c813484eb6dcca67e7e36089fe772b9cc8

* Update scripts for Metrics CI regression:  bug fixes, change ISS to
  spike in CI regression (Aimee Sutton)
* Add illegal and load store instruction (aneels3)
* Avoid generating hint instruction when RV32C is turned off
  (google/riscv-dv#787) (taoliug)
* Fix illegal opcode issue in the cov_test (google/riscv-dv#786)
  (taoliug)
* [questa] Remove -access=rwc from vlog command line arguments (Rupert
  Swarbrick)
* [ci] temporarily disable CI flow (Udi Jonnalagadda)
* fix issue with rcs for num_of_harts (aneels3)
* fix multi-hart label issue (aneels3)
* add multi_hart test (ishita71)
* Fix minor issues (aneels3)
* Add riscv_signature_pkg (aneels3)
* add gen_signature_handshake (ishita71)
* Add gen_interrupt_vector_table (aneels3)
* Remove the unnecessary lines (Anil Sharma)
* fix issue with riscv_rand_instr_test (aneels3)
* Add multiprocessing code block (aneels3)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: c7f44557======
======Short Message======
Fix initialisation in ibex_icache_env_cfg.sv
======Full Message======
Fix initialisation in ibex_icache_env_cfg.sv



======Commit: 7d61def9======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@f29a0f7a7
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@f29a0f7a7

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
f29a0f7a7115e03fba734b1c00691c253aceb07e. The list of OpenTitan
changes that are merged in appears at the bottom of the commit.

There are some manual changes needed to adapt the code to work with
these changes.

 - The ICache monitors need some extra types to adapt to the (rather
   odd) data model that the OpenTitan dv_lib code now uses, where a
   monitor needs to know an agent's associated sequence type.

 - Verilator simulations now use MemArea slightly differently

OpenTitan changes:

* [dv] Allow monitor items to have different types from sequence items
  (Rupert Swarbrick)
* [dvsim] Fix primary_cfg handling (Srikrishna Iyer)
* [dvsim] Deal with non unicode chars in log files (Srikrishna Iyer)
* [dvsim] Added common build fail patterns (Srikrishna Iyer)
* [dvsim] Minot cleanup to the lint flow (Srikrishna Iyer)
* [dvsim] Minor cleanups to to formal flow (Srikrishna Iyer)
* [dvsim] Fixes to UNR and cov analysis flows (Srikrishna Iyer)
* [dvsim] Very minor cleanup of Deploy class (Srikrishna Iyer)
* [dvsim] LsfLauncher report early errors as F (Srikrishna Iyer)
* [dvsim] Minor fix in clean_odirs function (Srikrishna Iyer)
* [chip dv] Set +sw_images as comma-separated list (Srikrishna Iyer)
* [flash_ctrl] Split tl intefaces for flash_ctrl and prim_flash_cfg
  (Timothy Chen)
* [keymgr] Fix input value checks (Timothy Chen)
* [formal/script] Update generic formal flow naming from `fpv` to
  `formal` (Cindy Chen)
* [top, prim] Address wmask and data width mismatch issue (Timothy
  Chen)
* [dvsim] Add GUI mode for running simulations (Srikrishna Iyer)
* [dv] Fix reg backdoor (Weicai Yang)
* [dpi] Make an "ECC32" flavour of MemArea (Rupert Swarbrick)
* [uvmdvgen] Fix has_interrupts in env_cfg (Cindy Chen)
* [dvsim] Keep dependencies list (Srikrishna Iyer)
* [prim_prince] Reverse the k0||k1 mapping to match with the paper
  (Michael Schaffner)
* [dvsim] Fix printing of last 10 lines (Srikrishna Iyer)
* [primgen] Minor fix to enable types with underscores (Michael
  Schaffner)
* [dvsim] Prevent command echo suppression (Srikrishna Iyer)
* [dvsim] Spot fixes for LSF and internal launcher (Srikrishna Iyer)
* [sva] csr assertion dependency update (Cindy Chen)
* [memutil] Change DpiMemUtil so that it no longer owns MemAreas
  (Rupert Swarbrick)
* [memutil] Factor out MemArea as a class (Rupert Swarbrick)
* [prim] Split out PRESENT and PRINCE support from prim:all (Rupert
  Swarbrick)
* [fpv/otp_ctrl] Disable assertions due to lc_esc_en (Cindy Chen)
* [prim_prince] Annotate some arrays to avoid UNOPTFLAT warnings
  (Rupert Swarbrick)
* [top] Hook up latest ast ports and complete a few other integration
  (Timothy Chen)
* Eliminate `#pragma once` in favor of include guards (Chris Frantz)
* [sw,dv] Update headers to pass fix_include_guards.py (Alex Bradbury)
* [xbar/dv] Fix assertion error due to short reset (Weicai Yang)
* [sram] Add memory initialization (Timothy Chen)
* [uvmdvgen] Update links in checklist template (Philipp Wagner)
* [dv/uvmdvgen] Add comment for testplan (Cindy Chen)
* [dv/top_earlgrey] chip csr_aliasing timeout (Cindy Chen)
* [dvsim] Cosmetic updates to launcher methods (Srikrishna Iyer)
* [dv] Update csr_wr to support field write (Weicai Yang)
* [dv/common] Fix regression warnings (Cindy Chen)
* [dv] Get blocks with multiple device interfaces working with chip DV
  (Rupert Swarbrick)
* [doc] Use relative links in Hjson-related shortcodes (Philipp
  Wagner)
* [dvsim] minor enhancement to clean_odir (Srikrishna Iyer)
* [dvsim] Statically display jobs' status (Srikrishna Iyer)
* [dvsim] Do weighted scheduling of jobs (Srikrishna Iyer)
* [dvsim] Schedule jobs by dependency (Srikrishna Iyer)
* [dv] Xcelium UNR typo (Srikrishna Iyer)
* [dvsim] Implement LsfLauncher (Srikrishna Iyer)
* [dv/chip] solve same_csr_outstanding_timeout (Cindy Chen)
* [dv] make dv_base_agent work for high-level agent (Weicai Yang)
* [tools/dv] added UNR flow for xcelium (Rasmus Madsen)
* [prim] Split prim:subreg out of prim:all (Rupert Swarbrick)
* [prim] Split prim_alert_* out of prim:all (Rupert Swarbrick)
* [prim] Split out fifos into a prim_fifo core (Rupert Swarbrick)
* [prim] Split out arbiters into a prim_arbiter core (Rupert
  Swarbrick)
* [prim] Make prim:flop_2sync depend on prim:flop (Rupert Swarbrick)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: 907a3f6e======
======Short Message======
[dv] Fix name of ELF file in report
======Full Message======
[dv] Fix name of ELF file in report

The name of the ELF file was wrong in the regr.log file, it should be
e.g. `riscv_debug_ebreakmu_test_9.o`, not
`riscv_debug_ebreakmu_test.9.o`.



======Commit: c1e287e1======
======Short Message======
[dv] Fix riscv_nested_interrupt_test
======Full Message======
[dv] Fix riscv_nested_interrupt_test

This broke due to changes in IRQ sequences. It relies on the inner
interrupt being an NMI. This alters the test to use the specific NMI
sequence.



======Commit: 2c3c474c======
======Short Message======
[dv] Fix riscv_irq_in_debug_mode_test
======Full Message======
[dv] Fix riscv_irq_in_debug_mode_test

Test wasn't handling a case where the IRQ remains raised after DRET so
IRQ should be handled.



======Commit: 4b43afa5======
======Short Message======
[doc] Fix table rendering for `mseccfg`
======Full Message======
[doc] Fix table rendering for `mseccfg`



======Commit: d78e0d9a======
======Short Message======
[rtl] Hard wire dcsr.stepie to 0
======Full Message======
[rtl] Hard wire dcsr.stepie to 0

This indicates interrupts do not occur in single step mode.

Fixes #1279



======Commit: 50be9752======
======Short Message======
[rtl] Fix hardware breakpoints and exceptions interaction
======Full Message======
[rtl] Fix hardware breakpoints and exceptions interaction

This change will cause the ID stage to stall if there is a potential
debug mode entry until instructions in both ID and WB have completed.
This fixes an issue with incorrect behaviour around hardware breakpoints
and exceptions that could cause exception entry to be missed, hardware
breakpoints to be triggered incorrectly or missed entirely.

In addition single step control logic is altered to work correctly with
the new debug mode entry behaviour.



======Commit: 62b1a30c======
======Short Message======
Fix spacing for bullet points to appear
======Full Message======
Fix spacing for bullet points to appear

Bullet points now appear properly for the last paragraph under the Data Independent Timing section.


======Commit: 6576247a======
======Short Message======
[ci/ibex] temporarily remove pmp_full_random_test
======Full Message======
[ci/ibex] temporarily remove pmp_full_random_test

this test is arbitrarily failing in regressions on a Spike timeout,
temporarily remove this to avoid blocking.

@udinator to fix this in the near future.

Signed-off-by: Udi Jonnalagadda <udij@google.com>



======Commit: 2c75c2b2======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@1ae03937f
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@1ae03937f

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
1ae03937f0bb4b146bb6e736bccb4821bfda556b

* [prim/fifo_async] Add assertions on pointers (Tom Roberts)
* [prim/fifo_async] Add support for Depth <= 2 (Tom Roberts)
* [prim/fifo_async] Code tidy-up (Tom Roberts)
* [top / ast] Continued ast integration (Timothy Chen)
* [dvsim] Use bash when running make underneath (Srikrishna Iyer)
* [prim] Increase maximum width for prim_util_memload to 312 (Greg
  Chadwick)
* [sram_ctrl] Fix potential back-to-back partial write bug (Michael
  Schaffner)
* [dvsim] Fix for lowRISC/opentitan#5527 (Srikrishna Iyer)
* [lint] Waive Verilator UNUSED warnings for packages (Rupert
  Swarbrick)
* [uvmdvgen] Update DV doc path and terminology (Srikrishna Iyer)
* [clkmgr] Fix dft issues (Timothy Chen)
* [util] add `dec` types to prim_secded_pkg (Udi Jonnalagadda)
* [util] minor updates to secded_gen (Udi Jonnalagadda)
* [lint] Fix a bunch of lint warnings related to long lines (>100
  chars) (Michael Schaffner)
* [dv] Update common intr_test seq (Weicai Yang)
* [util] Slight refactor of secded_gen.py (Timothy Chen)
* [tlul] Add memory transmission integrity checks (Timothy Chen)
* [dvsim] Move clean_odirs to `util.py` (Srikrishna Iyer)
* [dvsim] Split Deploy into Deploy and Launcher (Srikrishna Iyer)
* [dvsim] Add utils.TS_FORMAT* vars (Srikrishna Iyer)
* [dv/lock_reg] Update IPs to adopt the lock_reg changes (Cindy Chen)
* [dv/enable_regs] Support enable registers have more than one field
  (Cindy Chen)
* [dv/base_reg] use m_field instead of accessing field (Cindy Chen)
* [dv/sram] add SRAM scrambling model for DV (Udi Jonnalagadda)
* [dv/tools] Updated Coverage flow for xcelium (Rasmus Madsen)

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 50f09b71======
======Short Message======
[rtl] Fix lint issues
======Full Message======
[rtl] Fix lint issues



======Commit: 6d9e1aca======
======Short Message======
[rtl] Minor lint fix in ibex_core.sv
======Full Message======
[rtl] Minor lint fix in ibex_core.sv

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 6e617c40======
======Short Message======
[vendor] Remove fcov patch from dv_utils
======Full Message======
[vendor] Remove fcov patch from dv_utils

This code is now upstream in the source repository.
Also amend dv_utils patch to apply cleanly.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: faa1e98a======
======Short Message======
[dv] Fix bug in sim.py and type in testlist
======Full Message======
[dv] Fix bug in sim.py and type in testlist



======Commit: 3e7720e4======
======Short Message======
[rtl] Lint fixes for Ascent lint issues
======Full Message======
[rtl] Lint fixes for Ascent lint issues



======Commit: c3bd4fa7======
======Short Message======
[rtl] Remove paths between dmem and imem signals
======Full Message======
[rtl] Remove paths between dmem and imem signals

Prior to this change Ibex had multiple feedthrough paths from the data
memory interface to the instruction memory interface. This existed
because Ibex would hold off doing a instruction fetch for a jump or
branch if there was a outstanding memory request. It would wait for the
response to be available so either the jump or branch would occur or an
exception was taken.

With this change the branch or jump will speculatively begin the
instruction fetch whilst there is an outstanding memory request. Should
an exception result from the memory request the fetch will be discarded
and the exception taken as normal.

An alternative fix would not factor the data error response
(data_err_i) directly into the controller logic for branches and jumps.
With this option new stall cycles would be introduced anywhere a branch
or jump immediately follows a memory instruction which would have an
adverse impact on performance.



======Commit: 6ebc6bcb======
======Short Message======
[simple_system] Fix type for mhpmcounter_get
======Full Message======
[simple_system] Fix type for mhpmcounter_get

It's probably clearer if this 64-bit counter is treated as a uint64_t,
not an int64_t (the code using it downstream expects non-negative
values).



======Commit: 99b8f612======
======Short Message======
[rtl] Debug mode controller changes
======Full Message======
[rtl] Debug mode controller changes

* `if` in `DBG_TAKEN_IF` is needless as the conditions it checks will be
  true if controller enters `DBG_TAKEN_IF` state

* flop `enter_debug_mode` so `FLUSH` state looks at what
  `enter_debug_mode` was when it was seen in `DECODE` state rather than
  what it has become. In particular the controller could enter `FLUSH`
  on the basis of performing a WFI then divert down the debug control
  path due to a new debug request being raised. In this instance it is
  preferable for the WFI to complete entering `SLEEP` before the debug
  request wakes the core back up.



======Commit: 65287f7d======
======Short Message======
Fix deprecated sphinx html_context usage in conf.py
======Full Message======
Fix deprecated sphinx html_context usage in conf.py

We were using the old html_context which has been deprecated
for a while. This PR switches to html_css_files instead.
See sphinx-doc/sphinx#8885 for more information.



======Commit: 7cee76bf======
======Short Message======
[dv] Reorder checks in sim.py
======Full Message======
[dv] Reorder checks in sim.py

The UVM log should be checked for failures before attempting to process
the core trace log. A simulation failure could mean the trace log
doesn't exist and is is preferable to report the simulation error from
the log rather than trace not found as a failure cause.



======Commit: 0cb2afff======
======Short Message======
Update google_riscv-dv to google/riscv-dv@0b62525
======Full Message======
Update google_riscv-dv to google/riscv-dv@0b62525

Update code from upstream repository https://github.com/google/riscv-
dv to revision 0b625258549e733082c12e5dc749f05aefb07d5a

* Add a knob to use rounding mode from the instruction (google/riscv-
  dv#767) (taoliug)
* Add rounding mode support for floating point arithmetic instructions
  (google/riscv-dv#766) (taoliug)
* Fix syntax issue (google/riscv-dv#765) (taoliug)
* Add riscv_amo_instr (aneels3)
* convert string to enum type (ishita71)
* Remove unintended errors in the coverage flow (google/riscv-dv#757)
  (taoliug)
* Fix c_test handling in the YAML testlist (google/riscv-dv#756)
  (taoliug)
* Add support for new Spike trace format (google/riscv-dv#755) (Daniel
  Bates)
* Fix google/riscv-dv#751 for floating point coverage (Weicai Yang)
* Fix issues with implemented TODO's (aneels3)
* fix randomize_gpr (aneels3)
* Add file riscv_b_instr.py (ishita71)
* add std_randomize todo (pvipsyash)
* Add todo for floating_point test (ShraddhaDevaiya)
* Add scripts to integrate with Metrics regression platform (Aimee
  Sutton)

Includes a fix to dv/uvm/core_ibex/sim.py to use `asm_test` rather than
`asm_tests` due to changes in RISCV-DV

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: 860b085e======
======Short Message======
[dv] Add RISCV-DV patch to fix csr_test
======Full Message======
[dv] Add RISCV-DV patch to fix csr_test

The assembly for the  CSR test is generated by a script from RISCV-DV. A
.org directive is required to put the generated code at the correct
start address for the instantiated Ibex core.



======Commit: aa3067cf======
======Short Message======
[dv] Fix MISA CSR reset value
======Full Message======
[dv] Fix MISA CSR reset value

MISA reset value now indicates B extension support



======Commit: d8b2cb0a======
======Short Message======
[dv] Fix issues with timeout on WFI
======Full Message======
[dv] Fix issues with timeout on WFI

riscv_interrupt_instr_test and riscv_debug_instr_test aim to produce
interrupt and debug requests once per unique instruction they've seen.
One exception to this is WFI instructions, as these always require an
interrupt or debug request to wake the core. This fixes two timeout
issues with WFI instructions.

1. The return value of `decode_instruction` is used to determine whether
   an instruction should have an interrupt or debug request generated
   for it. For WFI this must always happen or the test will hang.

2. Before calling check_stimulus in a test the testbench waits for 50
   clock cycles. For the riscv_interrupt_instr_test and
   riscv_debug_instr_test if a WFI is executed during these 50 cycles
   the test will hang. This adds a check to see if the core has gone to
   sleep in those tests and if so sends interrupt/debug stimulus to wake
   it up.



======Commit: c8c3c550======
======Short Message======
[dv] Fix race condition in cs_registers testbench
======Full Message======
[dv] Fix race condition in cs_registers testbench

The `driver_tick` DPI call drove inputs directly but was being scheduled
in an undefined order with other always_ff blocks.  This results in a
race condition where some always_ff blocks see old inputs and others see
new in the same clock tick. Instead use values from `driver_tick` to
perform NBA updates and avoid the race condition.



======Commit: 373212ee======
======Short Message======
[dv] Improve sim.py error reporting
======Full Message======
[dv] Improve sim.py error reporting

* Handle missing log files with error messages rather than terminating
  on unhandled exceptions
* Output potential failure causes from sim log file into regression log
* Alter per test output to make it clearer what line corresponds to what
  test
* Only output [PASSED] or [FAILED] a single time per test
* Don't output [PASSED] where sim log is good but ISS comparison is not



======Commit: f291d1be======
======Short Message======
[dv] Rename stored copy of run phase
======Full Message======
[dv] Rename stored copy of run phase

In UVM 1.2, at least, uvm_component (a base class of
core_ibex_base_test) still has a method called run(). Ironically, this
has been renamed to "run_phase" to avoid conflicting with user names,
but the old-style phase names still exist at the moment.

Rename our copy of the phase object to cur_run_phase, which doesn't
conflict. Also, set it back to null at the end of the run_phase()
task. We shouldn't ever use it afterwards, and it's probably a good
idea to explode with a null object error if we do.



======Commit: 8d43b854======
======Short Message======
[dv] Be explicit about the target priv_mode in wait_ret test
======Full Message======
[dv] Be explicit about the target priv_mode in wait_ret test

The previous code contained

    wait (dut_vif.dut_cb.priv_mode === select_mode())

and VCS warns that this wait block will only trigger on changes to
explicit arguments. That is, if the in_nested_trap field changes, so
the return value of the select_mode() method would change to match
priv_mode, the wait statement won't finish.

This patch explicitly stores a snapshot of the value of select_mode()
just before the wait line. I think this is the intended behaviour, and
will no longer trigger warnings from VCS.



======Commit: 6ab3e4a9======
======Short Message======
[dv] Wire up alerts to dut probe interface
======Full Message======
[dv] Wire up alerts to dut probe interface

This silences VCS warnings about the DUT having missing port
connections. It doesn't add any actual testing for these signals.

The patch also re-orders the signals to match the order in
ibex_core_tracing.sv, to make it easier to spot what's going on by
eye.



======Commit: 07b65abb======
======Short Message======
[rtl] Fix lint "fix" with DbgTriggerEn
======Full Message======
[rtl] Fix lint "fix" with DbgTriggerEn

The previous change was wrong: it was trying to define a signal with
DbgHwNumLen bits that contained DbgHwBreakNum - 1. Unfortunately, '1
is *not* the same as a zero-extended version of 1'b1.



======Commit: 76244819======
======Short Message======
[rtl] Fix lint warning when DbgTriggerEn parameter is set
======Full Message======
[rtl] Fix lint warning when DbgTriggerEn parameter is set

DbgHwBreakNum - 1 is an int, so generates a warning if it's assigned
to tselect_d (of type logic [DbgHwNumLen-1:0]). Explicitly generate
the value we need as a localparam.

This lint warning doesn't appear by default in the Ibex repository,
because DbgTriggerEn is disabled. It does, however, appear in
OpenTitan because we enable it there.



======Commit: d717e238======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@7aa5c2b89
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@7aa5c2b89

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
7aa5c2b890fa5d4e3d0b43e0f5e561cb7743a01d

* [flash] updated flash wrapper md file (Dana Agur)
* [flash / top / ast] functional updates (Timothy Chen)
* [ralgen, dv] Associated changes to ralgen (Srikrishna Iyer)
* [prim_sync_reqack_data] Fix SVA checking DST-to-SRC data stability
  (Pirmin Vogel)
* [dv/keymgr] temp disable alert checking in scb (Cindy Chen)
* [dvsim] Fix a wrong path in print message (Weicai Yang)
* [prim] Teach verilator to recognise a clock gate (Rupert Swarbrick)
* [prim_lc_sync] Add AsyncOn parameter to enable/disable the sync
  flops (Michael Schaffner)
* [clkmgr / top] Add clock divider step down to support lc_ctrl
  transition (Timothy Chen)
* [prim_sync_reqack] Use NRZ protocol internally for increased
  throughput (Pirmin Vogel)
* [prim] correct interface documentation. (Timothy Chen)
* [flash_ctrl] Add tlul configuration interface to prim_flash (Timothy
  Chen)
* [flash_ctrl] Use hamming code for 64b ECC (Timothy Chen)
* [prim/edn] Fix lint error (width mismatch) (Eunchan Kim)

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: 698cf931======
======Short Message======
[dv] Patch for fcov macros in dv_utils
======Full Message======
[dv] Patch for fcov macros in dv_utils



======Commit: c69fc8b6======
======Short Message======
[rtl] Fix overlapping encodings of immediate instructions in tracer package
======Full Message======
[rtl] Fix overlapping encodings of immediate instructions in tracer package

This commit modifies the encoding of SROI, RORI, SBEXTI, GREVI and GORCI by
forcing Bit 26 to zero to prevent overlapping encodings with FSRI.

The bitmanip draft spec doesn't explicitly state that Bit 26 for those
instructions must be zero. However, those instructions only ever use
log2(XLEN) LSBs of the immediate. This means they don't use Bit 26 in RV32.
Instead, whenever Bit 26 is set, these instructions are instead decoded as
FSRI.



======Commit: e64f94e7======
======Short Message======
[rtl] Fix encoding of ZIP/UNZIP pseudo-instrcutions in tracer package
======Full Message======
[rtl] Fix encoding of ZIP/UNZIP pseudo-instrcutions in tracer package

Just like for the corresponding base instructions SHFLI/UNSHFLI the MSBs of
all these pseudo-instructions must be 6'b0000_10.



======Commit: 760baa1e======
======Short Message======
[rtl] Fix encoding for ORC16/REV16 instructions in tracer package
======Full Message======
[rtl] Fix encoding for ORC16/REV16 instructions in tracer package

This bug was originally found by @micprog.



======Commit: 75e1c281======
======Short Message======
[syn] Fix timing reports in synthesis flow
======Full Message======
[syn] Fix timing reports in synthesis flow

This fixes a bug where .csv.rpt files weren't being generated properly.
OpenSTA was outputting a simple 'Q' or 'D' for start and end path points
where the full instance name was required (which is then fed to yosys to
translate to a human readable name). The issue was in the `timing_report`
proc in syn/tcl/sta_utils.tcl which needed to request the full name of
the start and end points.

The syn README is updated to note which tool versions have been used to
test the flow.

Fixes #1193



======Commit: 6a61e0ec======
======Short Message======
[rtl] Fix PMP NAPOT matching for 0 PMPGranularity
======Full Message======
[rtl] Fix PMP NAPOT matching for 0 PMPGranularity



======Commit: d315c385======
======Short Message======
[dv] Verilator unused parameter handling
======Full Message======
[dv] Verilator unused parameter handling

Forward a currently unused parameter.

Disable error exit for warnings. Newer Verilator versions will fail if
for example parameters are unused. As this test does not cover
everything, allow those warning to be printed, but not fail the build.



======Commit: 0f2dc5c6======
======Short Message======
[rtl] Avoid latch creation
======Full Message======
[rtl] Avoid latch creation

Following Verilator warning set default value to avoid the creation of a
latch.



======Commit: 625ea266======
======Short Message======
Revert "Clear MAKEFLAGS when running dvsim.py"
======Full Message======
Revert "Clear MAKEFLAGS when running dvsim.py"

This reverts commit 31a18ad: the problem that it was working around
was fixed in OpenTitan with commit 249a544, vendored into Ibex as
b1daf9e.



======Commit: b1daf9e4======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@c277e3a8
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@c277e3a8

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
7e131447da6d5f3044666a17974e15df44f0328b

Updates to Ibex code to match this import:
* Include str_utils in the imported code.
* List new source files in dv/uvm/core_ibex/ibex_dv.f
* Update patches to resolve merge conflicts.
* Update tb_cs_registers.cc and ibex_riscv_compliance.cc to match the
  new return code of simctrl.Exec().

Imported updates:
* Do not require pyyaml >= 5.1 (Philipp Wagner)
* [prim_edn_req] Forward fips signal to consumer (Pirmin Vogel)
* [prim_edn_req] Use prim_sync_reqack_data primitive (Pirmin Vogel)
* [prim_edn_req] De-assert EDN request if packer FIFO has data
  available (Pirmin Vogel)
* [cleanup] Mass replace tabs with spaces (Srikrishna Iyer)
* [lc_ctrl] Add script to generate the LC state based on the ECC poly
  (Michael Schaffner)
* [dvsim] Use list for rsync command (Eunchan Kim)
* [verilator] Only control the reset line when necessary (Rupert
  Swarbrick)
* [dv/csr_utils] Add debug msg for UVM_NOT_OK err (Cindy Chen)
* [dvsim] Add exclude hidden files when needed (Eunchan Kim)
* [prim_sync_reqack] Add variant with associated data and optional
  data reg (Pirmin Vogel)
* [DV, Xcelium] Fix for lowRISC/opentitan#4690 (Srikrishna Iyer)
* [dvsim] Remote copy update (Srikrishna Iyer)
* [prim_edn_req] Add EDN sync and packer gadget primitive (Michael
  Schaffner)
* [prim] Add hamming code as ECC option (Timothy Chen)
* [DV] Cleanup lint warnings with Verible lint (¨Srikrishna)
* [prim_ram] Rearrange parity bit packing and fix wrong wmask settings
  (Michael Schaffner)
* [lc_sync/lc_sender] Absorb flops within lc_sender (Michael
  Schaffner)
* [prim_otp_pkg] Move prim interface constants into separate package
  (Michael Schaffner)
* [sram_ctrl] Pull scr macro out of sram_ctrl (Michael Schaffner)
* [top] Move alert handler to periphs and attach escalation clock to
  ibex (Michael Schaffner)
* [prim_esc_rxtx/rv_core_ibex] Add default values and NMI
  synchronization (Michael Schaffner)
* [dvsim] Fix regression publish result link with --remote switch
  (Cindy Chen)
* [vendor/ibex] Remove duplicate check tool requirements files
  (Michael Schaffner)
* [prim_ram_1p_scr] Fix sequencing bug in scrambling logic (Michael
  Schaffner)
* [prim_ram*_adv] Qualify error output signals with rvalid (Michael
  Schaffner)
* [dvsim] Fix purge not delete remote repo_top (Cindy Chen)
* [lc/otp/alerts] Place size-only buffers on all multibit signals
  (Michael Schaffner)
* [prim_buf] Add generic and Xilinx buffer primitive (Michael
  Schaffner)
* [prim] Packer to add byte hint assertion (Eunchan Kim)
* [dvsim] Logic to copy repo to scratch area (Srikrishna Iyer)
* [dv/lc_ctrl] enable lc_ctrl alert_test (Cindy Chen)
* [prim] documentation update for flash (Timothy Chen)
* [flash_ctrl] Add additional interface support (Timothy Chen)
* [dvsim] Fix publish report path (Weicai Yang)
* [top_earlgrey] Instantiate LC controller in toplevel (Michael
  Schaffner)
* [doc] Fix checklist items in V1 (Michael Schaffner)
* [dv/csr_excl] Fix VCS warning (Cindy Chen)
* [dv/doc] cleaned up checkist alignment (Rasmus Madsen)
* [doc/dv] cleanup (Rasmus Madsen)
* [dv/doc] updated dv_plan links to new location (Rasmus Madsen)
* [dv/doc] changed testplan to dv_plan in markdown files (Rasmus
  Madsen)
* [dv/doc] changed dv plan to dv doc (Rasmus Madsen)
* Remove redundant ascentlint options (Olof Kindgren)
* Add ascentlint default options for all cores depending on
  lint:common (Olof Kindgren)
* [flash] documentation update (Timothy Chen)
* [flash / top] Add info_sel to flash interface (Timothy Chen)
* [otp] lci interface assertion related fix (Cindy Chen)
* [dv/uvmdvgen] Add switch to auto-gen edn (Cindy Chen)
* [util] Rejig how we load hjson configurations for dvsim.py (Rupert
  Swarbrick)
* added changes required by sriyerg (Dawid Zimonczyk)
* update riviera.hjson (Dawid Zimonczyk)
* [flash_ctrl] Add high endurance region attribute (Timothy Chen)
* Change VerilatorSimCtrl::Exec to handle --help properly (Rupert
  Swarbrick)
* Simplify handling of exit_app in VerilatorSimCtrl::ParseCommandArgs
  (Rupert Swarbrick)
* [sram_ctrl] Rtl lint fix (Michael Schaffner)
* [keymgr] Add edn support (Timothy Chen)
* [dv] Make width conversion explicit in dv_base_env_cfg::initialize
  (Rupert Swarbrick)
* [dvsim] Allow dvsim.py to be run under Make (Rupert Swarbrick)
* [dvsim[ rename revision_string to revision (Srikrishna Iyer)
* [dvsim] Update log messages (Srikrishna Iyer)
* [dvsim] fix for full verbosity (Srikrishna Iyer)
* [dv] Fix Questa warning and remove unused var (Weicai Yang)
* [dvsim] Add alias for --run-only (Weicai Yang)
* [keymgr] Hook-up random compile time constants (Timothy Chen)
* [dvsim] Add support for UVM_FULL over cmd line (Srikrishna Iyer)
* [dv common] Enable DV macros in non-UVM components (Srikrishna Iyer)
* [DVsim] Add support for Verilator (Srikrishna Iyer)
* [DVSim] Fix how sw_images is treated (Srikrishna Iyer)
* [DV common] Fixes in sim.mk for Verilator (Srikrishna Iyer)
* [DV Common] Split DV test status reporting logic (Srikrishna Iyer)
* [prim_arbiter_ppc] Fix lint error (Philipp Wagner)
* [DV common] Factor `sim_tops` out of build_opts (Srikrishna Iyer)
* [dvsim] run yapf to fix style (Weicai Yang)
* [dv/common] VCS UNR flow (Weicai Yang)
* [dv] Add get_max_offset function in dv_base_reg_block (Weicai Yang)
* [otp_ctrl] Fix warnings from VCS (Cindy Chen)
* [lint] Change unused_ waiver (Eunchan Kim)
* [dv/alert_test] Add alert_test IP level automation test (Cindy Chen)
* [DV] Update the was SW is built for DV (Srikrishna Iyer)
* [dvsim] Replace `sw_test` with `sw_images` (Srikrishna Iyer)
* [chip dv] Move sw build directory (Srikrishna Iyer)
* [dv common] Update dv_utils to use str_utils_pkg (Srikrishna Iyer)
* [DVSim] Method to add pre/post build/run steps (Srikrishna Iyer)

Signed-off-by: Philipp Wagner <phw@lowrisc.org>



======Commit: 0199bbae======
======Short Message======
Use overlapping implications for Xcelium 19.03
======Full Message======
Use overlapping implications for Xcelium 19.03

Xcelium 19.03 doesn't support the `->` (binary logical) operator, but
using `|->` (overlapping implication) is equivalent here and supported;
use this operator instead.

Fixes #1213



======Commit: e71494fd======
======Short Message======
Add issue templates to GitHub project
======Full Message======
Add issue templates to GitHub project

Add two issue templates to the GitHub project: one for questions, and
one for reporting bugs. These templates are not mandatory, users can
freely change them, or get a blank issue template instead.

To avoid having too much description/example text in the final issue the
instructions are written in HTML comments (which is not beautiful, but
should do the trick and seen commonly in projects).



======Commit: afb21c20======
======Short Message======
[dv] Make sure the req_i interface is never asserted in reset
======Full Message======
[dv] Make sure the req_i interface is never asserted in reset

Amusingly, there was also actually a bug in the combo sequence logic:
it took seq_idx to be the number of sequences that we'd run so far,
but it is actually an index that chooses which sequence we're about to
run.



======Commit: 1efe7a03======
======Short Message======
[syn] Fix path in synthesis script
======Full Message======
[syn] Fix path in synthesis script

Path to primitives has been updated

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 31a18ad1======
======Short Message======
Clear MAKEFLAGS when running dvsim.py
======Full Message======
Clear MAKEFLAGS when running dvsim.py

dvsim.py runs make as a subprocess, which gets rather confused if
MAKEFLAGS appears in its environment. The proper fix is to clear them
from the environment in the dvsim command: we'll do that on the
OpenTitan side[1] and can revert this patch once that change is vendored
in.

[1] https://github.com/lowRISC/opentitan/pull/4325



======Commit: 3d804159======
======Short Message======
Delete dv/uvm/data and point DV code at the vendored version
======Full Message======
Delete dv/uvm/data and point DV code at the vendored version

This teaches the DV environment to use the vendored code that we set
up in the previous patch.



======Commit: 623402cf======
======Short Message======
Vendor in hw/dv/{data,tools} from OpenTitan
======Full Message======
Vendor in hw/dv/{data,tools} from OpenTitan

This gets the rest of the support code needed for dvsim (which we
currently duplicate). The patch:

  - adds the relevant directories to the vendoring file
  - adds a patch to rewrite some OpenTitan-specific bits
  - adds a "common_project_cfg.hjson"
  - re-runs the vendoring tool

This patch won't yet change how DV code runs; we also need to redirect
a couple of paths and delete dv/uvm/data for that. This will happen in
the next patch.

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: 77d80100======
======Short Message======
Improve ibex_config command line handling with missing output_fn
======Full Message======
Improve ibex_config command line handling with missing output_fn

We need to check that the output type is actually supplied, otherwise
we spit out a rather mysterious error a few lines later.



======Commit: 86084b9d======
======Short Message======
Fix Xcelium warnings
======Full Message======
Fix Xcelium warnings

(Likely) fix the following warnings from Xcelium (we cannot actually
confirm that without the tool):

```
                      |fill_ext_req;
                      |
xmvlog: *W,DUPBWO (../src/lowrisc_ibex_ibex_icache_0.1/rtl/ibex_icache.sv,830|22): error prone bit-wise OR ('|') sequence detected [4.1.11(IEEE)].
  `ASSERT_IF(BranchInsTypeOneHot, $onehot0({instr_j, instr_b, instr_cj, instr_cb}), fetch_valid_i);
                                                                                                  |
xmvlog: *W,UEXPSC (../src/lowrisc_ibex_ibex_core_0.1/rtl/ibex_branch_predict.sv,91|98): Ignored unexpected semicolon following SystemVerilog description keyword (end).
    `ASSERT(NoPredictSkid, instr_skid_valid_q |-> ~predict_branch_taken);
                                                                        |
xmvlog: *W,UEXPSC (../src/lowrisc_ibex_ibex_core_0.1/rtl/ibex_if_stage.sv,488|72): Ignored unexpected semicolon following SystemVerilog description keyword (end).
    `ASSERT(NoPredictIllegal, predict_branch_taken |-> ~illegal_c_insn);
                                                                       |
xmvlog: *W,UEXPSC (../src/lowrisc_ibex_ibex_core_0.1/rtl/ibex_if_stage.sv,489|71): Ignored unexpected semicolon following SystemVerilog description keyword (end).
```



======Commit: 4a64abdf======
======Short Message======
[doc] Update info on simulators for verification
======Full Message======
[doc] Update info on simulators for verification

A few tweaks to fix broken links, make explanations more clear and
update the information to reflect the present (e.g. Spike master now
implements bit-manip, the seperate branch is gone).



======Commit: c10a0505======
======Short Message======
Update google_riscv-dv to google/riscv-dv@3da32bb
======Full Message======
Update google_riscv-dv to google/riscv-dv@3da32bb

Update code from upstream repository https://github.com/google/riscv-
dv to revision 3da32bbf6080d3bf252a7f71c5e3a32ea4924e49

* fix location of custom CSR setup (google/riscv-dv#747) (udinator)

Signed-off-by: Udi Jonnalagadda <udij@google.com>



======Commit: 62405f93======
======Short Message======
[rtl] Fix performance counter bug
======Full Message======
[rtl] Fix performance counter bug

- Make sure performance counters only count retired, non-trapping
  instructions excluding ebrk/ecall
- Rewire some signalling through the writeback stage to allow
  instruction retire to be signalled from one place
- Relates to #1132

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 25fde8fc======
======Short Message======
[dv] Fixes for disabling forks, for Cadence Xcelium
======Full Message======
[dv] Fixes for disabling forks, for Cadence Xcelium
This makes changes to support Cadence Xcelium 20.09.001.

Cadence recommends that disabling forks should be done using a "disable fork;" statement, not the "disable fork_process_label;" construct.
The "disable fork_process_label" construct for forks is not defined in the IEEE Std 1800-2017 LRM. See section 9.6.2 of the LRM (2017).
For a more detailed explanation, please see the description from my colleague in Issue #1174: https://github.com/lowRISC/ibex/issues/1174.

In many cases, Xcelium will ignore a disable statement if it is not in the "disable fork;" form.
This causes problems in many tests, most notably in the riscv_reset_test.
Processes not being disabled when reset is asserted cause not just test failures, but the entire regression to crash.

Most changes here are simple substitutes of "disable fork;" where "disable label;" was.
Some changes in core_ibex_test_lib.sv require the layout of the fork to be adjusted.

Signed-off-by: CathalMCrevinn <cathal_minnock@crevinn.com>



======Commit: 94c87ba9======
======Short Message======
[ibex/dv] Modify EOT ecall check
======Full Message======
[ibex/dv] Modify EOT ecall check

This PR slightly modifies how we wait for the end of an Ibex sim.
Currently we wait on dut_vif.dut_cb.ecall, which will be delayed by a
cycle as it is in a clocking block.
However we should end the test immediately when an ecall is seen, so we
should rather wait on dut_vif.ecall instead to be more accurate and
prevent potential race conditions caused by irq/debug stimulus being
sent on the same cycle as an ecall instruction is executed by the core.

Signed-off-by: Udi Jonnalagadda <udij@google.com>



======Commit: 6fb378c4======
======Short Message======
[rtl] Reduce size of PMP addr CSRs to minimum
======Full Message======
[rtl] Reduce size of PMP addr CSRs to minimum

- Reduce the size of the PMP address configuration registers to the
  permissible minimum depending on granularity.
- Ensure consistency between PMP address CSR reads and the addresses
  forwarded to the PMP module.
- Follow the specification more strictly, by returning bits
  pmpaddr[G-2:0] as all ones when pmpcfg.A[1] is set (i.e. mode is
  NAPOT or NA4, though the latter is invalid for G > 0) and bits
  pmpaddr[G-1:0] as all zeros when pmpcfg.A[0] is clear (i.e. mode is
  OFF or TOR).
- Fixes #1181



======Commit: 9b0d78cf======
======Short Message======
[rtl] Fix NAPOT address matching
======Full Message======
[rtl] Fix NAPOT address matching

- Generate correct masks for NAPOT range addresses covering the entire
  granule. When PMPGranularity > 0, then a NAPOT range can span the
  whole granule, which requires the next-lowest bit (i.e. highest bit
  that is not part of the granule) to be 0.
- Fixes #1178



======Commit: 1f3b462b======
======Short Message======
[dv] Fix riscv_debug_single_step_test
======Full Message======
[dv] Fix riscv_debug_single_step_test

Testbench computation of next PC when single stepping was broken. A
branch may stall before branch_set is asserted and this wasn't being
taken into account. Where the branch target ALU is present branch_set
can be set on the first cycle of the branch so this bug wasn't apparent.
Even with the branch target ALU the branch may stall awaiting the result
of a load when the writeback stage is present.

To make matters more complicated for a jump the PC being jumped to is
only available when jump_set is asserted which happens whilst the jump
instruction is stalling.

This alters the riscv_debug_single_step_test so when waiting for a
single step it looks for either a branch_set or jump_set signal being
asserted. Otherwise it waits until the instruction has unstalled. This
should give correct behaviour in all scenarios (potentially further
thought required where exceptions and interrupts occur).

Fixes #1167

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: c1cfb210======
======Short Message======
[rtl] Lint fix for unused signal in multdiv
======Full Message======
[rtl] Lint fix for unused signal in multdiv

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: 163cd814======
======Short Message======
[simple-system] always_comb should be always
======Full Message======
[simple-system] always_comb should be always

Previous lint fix was incorrect. The 'always_comb' block here should be
an 'always'. It is not combinational logic but rather an infinite loop
to generate a clock when running in a simulator that isn't verilator
(e.g.  under simple-system under VCS) so the use of 'always' is
appropriate.

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: bf2476c1======
======Short Message======
Add VCS compile option for unicode
======Full Message======
Add VCS compile option for unicode

Similar to simulator.yaml, this changes has to be applied to rtl_simulation as well to avoid weird compilation errors.


======Commit: 7aeb2072======
======Short Message======
Update google_riscv-dv to google/riscv-dv@3467c37
======Full Message======
Update google_riscv-dv to google/riscv-dv@3467c37

Update code from upstream repository https://github.com/google/riscv-
dv to revision 3467c3777cb428b2e30b30b7f895a8fd73873d4f

* add VCS compile option for unicode (Udi Jonnalagadda)
* Add missing license header (aneels3)
* [Docs] Fix broken links and typos (db434)
* Add support for RV32D (ishita71)
* Fix google/riscv-dv#733 (aneels3)
* Fix Spike Issue (aneels3)
* add riscv_reg and riscv_privil_reg (pvipsyash)
* fix target issue for foating point (pvipsyash)
* add rv32fc target (pvipsyash)
* add riscv_floating_point_instr (pvipsyash)
* Add defines for floating point instructions (ShraddhaDevaiya)

Signed-off-by: Udi Jonnalagadda <udij@google.com>



======Commit: 999140de======
======Short Message======
Fix lint issues
======Full Message======
Fix lint issues



======Commit: 09f6d4f5======
======Short Message======
[ibex/dv/rtl] Updates to run Cadence Xcelium
======Full Message======
[ibex/dv/rtl] Updates to run Cadence Xcelium

This PR makes changes to support Cadence Xcelium 20.09.001

Compile error 1: Fixed the following rtl compile error in ibex_cs_registers.sv

assign tselect_rdata = {'b0, tselect_q};
                          |
xmvlog: *E,NONOWD (/proj/riscv_ibex/users/paulok/lowRISC/ibex_1/rtl/ibex_cs_registers.sv,1288|30): Illegal use of a constant without an explicit width specification [4.1.14(IEEE)].

Compile error 2: Fixed the following DV compile error in ibex_mem_intf.sv
.data_req_o (data_mem_vif.request ),
|
xmelab: *E,ICDCBA (./tb/core_ibex_tb_top.sv,89|14): Illegal combination of driver and output clockvar to variable 'request' detected (output clockvar found in clocking block at line 25 in file ./common/ibex_mem_intf_agent/ibex_mem_intf.sv).

Simulation probes: Fixed issue with probing in yaml for xrun and added licqueue.

Signed-off-by: Paul OKeeffe <paul_okeeffe@crevinn.com>



======Commit: a6126502======
======Short Message======
Pass -fno-extended-identifiers to VCS
======Full Message======
Pass -fno-extended-identifiers to VCS

For some bizarre reason VCS includes DPI code that has smart
quotes (yes, smart quotes) around some #error macros. Recent GCC
versions (g++ >= 10.2) have got proper support for UTF-8, which is
nice but makes them choke on these input files.

Passing -fno-extended-identifiers tells GCC to go back to the days of
yore and pretend that everything is ASCII, and all is well again!

Obviously the right fix is not to embed smart quotes in C++ code, but
that's not something in our control :-(



======Commit: aceb7766======
======Short Message======
Avoid spurious rebuilds in core_ibex Makefile with OUT = sim
======Full Message======
Avoid spurious rebuilds in core_ibex Makefile with OUT = sim

We have an order-only dependency on the output directory in the rule
for $(sim-cfg-mk). If that output directory happens to be called
"sim", we now have a dependency on "sim". But that's the name of a
phony rule that runs the simulation, which means we end up doing stuff
in a strange order and defeating the variable dumping in the
dependency tracking, causing a spurious rebuild.

This patch defines a variable called OUT-DIR, which is OUT with a
trailing '/' appended. We use it uniformly in the rest of the file
but (I think) it's probably only actually needed in the dependency for
$(sim-cfg-mk). Now, the rule depends on "sim/", which isn't the name
of a phony rule, and all is well.



======Commit: 58e3cb5b======
======Short Message======
Tie off branch predictor signals when icache is used
======Full Message======
Tie off branch predictor signals when icache is used

Fix two Verilator lint warnings if icache is used. The branch predictor
is currently only used together with the prefetch buffer, and those
signals are unused in the icache configuration.



======Commit: d977e146======
======Short Message======
[rtl] Various small lint fixes
======Full Message======
[rtl] Various small lint fixes

- Move various unused signal fixes from the waiver file to the rtl, so
  that all tools can pick them up.
- Fix some oversize line issues.
- Fix some signed / unsigned casting issues.
- Remove some extraneous semicolons.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 7e041d36======
======Short Message======
Enable Verible lint
======Full Message======
Enable Verible lint

Turns out, just having a nice error message with the correct tool
invocation isn't enough: you actually need to call the tool with the
arguments you document.

Let's do that and actually run Verilator lint and Verible lint, and not
just Verilator lint twice.



======Commit: 7558ecc7======
======Short Message======
Update Spike to a version with icache support
======Full Message======
Update Spike to a version with icache support

DV now requires a version of Spike with two patches for icache support,
use this version.



======Commit: 9b656a0a======
======Short Message======
Update google_riscv-dv to google/riscv-dv@39797b2
======Full Message======
Update google_riscv-dv to google/riscv-dv@39797b2

Update code from upstream repository https://github.com/google/riscv-
dv to revision 39797b2f07784e775149a4f05c90fee2427124e5

* coverage flow updates (Udi Jonnalagadda)
* Update src/riscv_debug_rom_gen.sv (Tom Roberts)
* debug_rom_gen: Fix return address issue (Tom Roberts)
* Add sfence.vma after PTE process (google/riscv-dv#731) (taoliug)
* generate gen_config data in tabular format (aneels3)
* Fix coverage issue for ml target (google/riscv-dv#729) (taoliug)
* Fix index offset constraint conflict (google/riscv-dv#728) (taoliug)
* Fix rcs import and create_instr function (aneels3)
* Fix setup_misa and formatting issue (aneels3)
* Fix SPIKE ISSUE google/riscv-dv#722 (aneels3)
* Fix coverage issue (aneels3)
* fix google/riscv-dv#725 (Udi Jonnalagadda)
* Fix formatting and linting issue (aneels3)
* Add function setup_misa (ShraddhaDevaiya)
* Fix gen_trap_handler_section (aneels3)
* Add constraint (ShraddhaDevaiya)
* Fixed push_gpr_to_kernel def (Saurabh Singh)
* Add ic file to the target dir (aneels3)
* Fix timeout issue (aneels3)
* add mtvec constraint (pvipsyash)
* Fix create_instr issue (aneels3)
* Add function push_gpr_to_kernel (ishitapvips)
* Fix invalid CSR test for RV64GCV target (google/riscv-dv#720)
  (taoliug)
* Fix solve...before... on non-rand variables issue (google/riscv-
  dv#719) (taoliug)
* Add rv32c instructions (aneels3)
* Modify riscv_instr class fields (aneels3)
* Fix import issue (aneels3)
* Significantly improves performance of pyflow functional coverage
  (through changing the way that covergroups are instantiated & data
  are sampled) (Hodjat Asghari Esfeden)
* fix jumps to `test_done` and `init_[m/s/u]_mode` (google/riscv-
  dv#710) (udinator)
* Fix multi-harts program generation with PMP enabled (google/riscv-
  dv#716) (taoliug)
* Fix google/riscv-dv#681 (google/riscv-dv#715) (taoliug)
* Add initial support for rv32imc (aneels3)
* resolve conflicts (aneels3)
* add rv32imc core setting (pvipsyash)
* changes for core settings (pvipsyash)
* add riscv_compressed_instr (aneels3)
* Convert code to be PEP8 compliant (Hodjat Asghari Esfeden)
* Add riscv_data_page_gen (aneels3)
* Integrates functional coverage side of pyflow into cov.py
  (google/riscv-dv#708) (Hodjat Asghari Esfeden)
* Workaround of the SV compilation problem caused by assigning the
  const array variable with the empty concatenation. (google/riscv-
  dv#704) (Dariusz Stachańczyk)
* Add rv32m and rv32c instr defines (ShraddhaDevaiya)
* Fix logging issue along with other minor fixes (Hodjat Asghari
  Esfeden)
* Add push_stack and pop_stack instr. (ShraddhaDevaiya)
* Fix minor issues (aneels3)
* Add a target for RV32IMC with SV32 address translation
  (google/riscv-dv#699) (taoliug)
* Fixes a minot import issue (Hodjat Asghari Esfeden)
* Fix LR/SC sequence issue (google/riscv-dv#698) (taoliug)
* fix ebreak generation bug (google/riscv-dv#689) (udinator)
* Update vector extension to v0.9 (google/riscv-dv#697) (taoliug)
* Fixes a few issues in riscv_asm_program_gen and
  riscv_instr_gen_config (Hodjat Asghari Esfeden)
* fix iterate over args dict (pvipsyash)
* fix parse_args (pvipsyash)
* fix cmdline argparse for directed stream (pvipsyash)
* [pygen/riscv_instr_stream] Fix ebreak generation (Udi Jonnalagadda)
* Fix flake8 related formatting (aneels3)
* Add jal instr (aneels3)
* Fixes for same rd for main instructions (Saurabh Singh)
* Fixes to resolve label issue for directed class (Saurabh Singh)
* Add constraint on jump_start (ShraddhaDevaiya)
* Add Constraint for jump instructions. (ShraddhaDevaiya)
* fix minor issue in directed_lib (pvipsyash)
* Add riscv_jal_instr to directed_lib (pvipsyash)
* Fix forward branch label compilation error (aneels3)

Signed-off-by: Udi Jonnalagadda <udij@google.com>



======Commit: 5d4c9aeb======
======Short Message======
[ibex/dv] return non-zero exit code upon failure
======Full Message======
[ibex/dv] return non-zero exit code upon failure

Currently the Ibex run scripts return 0 no matter what the test result
is.
To get Ibex sims correctly integrated into CI, the Makefile needs to
return 1 upon seeing a log comparison failure to indicate an error.

Signed-off-by: Udi Jonnalagadda <udij@google.com>



======Commit: 931b2917======
======Short Message======
[doc] Mark icache verification as "done for now"
======Full Message======
[doc] Mark icache verification as "done for now"

The icache verification is complete until new bugs are found, let's mark
it as such in the docs.



======Commit: 44310235======
======Short Message======
Add support for additional HW breakpoints
======Full Message======
Add support for additional HW breakpoints

Add parameter `DbgHwBreakNum` to configure the number of HW breakpoints.
The parameters controls the number of trigger registers available if
debug support is enabled with `DbgTriggerEn`.

Closes #1070



======Commit: dbd92c5d======
======Short Message======
[rtl] Fix illegal write to DCSR cause field
======Full Message======
[rtl] Fix illegal write to DCSR cause field

- This field is read-only to software, and so should retain its previous
  value on a write. This fixes #1134.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 8953d82c======
======Short Message======
[rtl] Various security feature bugfixes
======Full Message======
[rtl] Various security feature bugfixes

- Document that SecureIbex cannot be used without a multiplier and add
  an assertion in the rtl. This fixes #1080.
- Move the PC checking hardware onto its own parameter to match all the
  other individual security features.
- Make the PC increment behavior more sensible on fetch errors (and make
  it match the icache behavior). Factor this into the PC increment check
  to prevent false triggering, fixes #1094.
- Stop the PC mismatch checker firing on dummy instructions, fixes
  #1095.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: adc574b8======
======Short Message======
[rtl] Fix missing else branch in decoder
======Full Message======
[rtl] Fix missing else branch in decoder

- Without the B extension, a gorci instruction should decode as an
  illegal instruction.
- Relates to #1129

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: bcbf1a7a======
======Short Message======
[rtl] Add plusarg to disable trace log
======Full Message======
[rtl] Add plusarg to disable trace log

Option to control the state of the Ibex tracer.
Defaults to enable, but allows a setting to disable the trace log.

In long running simulations this file can get quite big and the contents
might not be needed. Use the argument `+ibex_tracer_enable=0` to prevent
the creation of the file.



======Commit: abff9a88======
======Short Message======
[doc] Fix broken link to examples description
======Full Message======
[doc] Fix broken link to examples description

The documentation restructure in #1119 resulted in a new URL for the
documentation on Ibex system examples. This commit updates the in-tree
link to reference that new URL.

Signed-off-by: Alex Bradbury <asb@lowrisc.org>



======Commit: cb2ef154======
======Short Message======
[doc] Fix image link
======Full Message======
[doc] Fix image link



======Commit: 2cb1efb9======
======Short Message======
[simple-system] Add missing linker sections
======Full Message======
[simple-system] Add missing linker sections

Adding the "small" sections to the example linker script. This ensures
that all sections of memory needing to be zeroed are captured.

Fixes #1092

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 2c22c1ee======
======Short Message======
[rtl] Fix debug step over EBREAK issue
======Full Message======
[rtl] Fix debug step over EBREAK issue

- If there is a request to enter debug mode (either due to a halt
  request or single stepping mode) on the same cycle as an EBREAK
  instruction, continue with the EBREAK and capture the ID PC rather
  than the IF PC.
- relates to #1106

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: c31d0661======
======Short Message======
Fix "no invalidate" logic in ICache sequence
======Full Message======
Fix "no invalidate" logic in ICache sequence

Some sequences run in "no invalidate" mode. Unfortunately, sometimes
we *have* to invalidate, either because we have a stale seed, or
because we're at the start of a sequence.

It turns out that "no invalidate" is a soft requirement, so we can
weaken it here. This patch also renames the flag to
"avoid_invalidation" to make it clear that this is allowed to be
violated occasionally.

Closes #1101.



======Commit: fb5d87b2======
======Short Message======
Port ICache formal core file to final Edalize design
======Full Message======
Port ICache formal core file to final Edalize design

The PR that I pushed up to add sby support to
Edalize (https://github.com/olofk/edalize/pull/173) ended up with a
different input format from the one it started with.

That's now merged into master, so this patch updates the Ibex code to
match the final syntax.



======Commit: 9eebf525======
======Short Message======
Fix `RegFile` parameter overriding in ArtyA7 example
======Full Message======
Fix `RegFile` parameter overriding in ArtyA7 example

Signed-off-by: Pirmin Vogel <vogelpi@lowrisc.org>



======Commit: 23e21c94======
======Short Message======
[rtl] Fix FENCE comment in decoder
======Full Message======
[rtl] Fix FENCE comment in decoder

- Clarify FENCE treatment rationale
- Update comment around ICache flushing
- Fixes #1048

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: ab1e6d4d======
======Short Message======
Fix PRJ_DIR in DV Makefile
======Full Message======
Fix PRJ_DIR in DV Makefile

PRJ_DIR is presumably meant to point to the root of the git repository;
instead, it was pointing one directory higher up in the hierarchy. This
worked as long as the repository was checked out into a directory called
"ibex" -- but not otherwise, as in CI.



======Commit: 9c099671======
======Short Message======
[ibex/dv] Add dependency on bus_params_pkg
======Full Message======
[ibex/dv] Add dependency on bus_params_pkg

This patch updates the Ibex environment's dependency on the old top_pkg
to now depend on bus_params_pkg.

Signed-off-by: Udi <udij@google.com>



======Commit: d71aaeee======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@92e92424
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@92e92424

The shortlog from the vendor tool's automated patch is reproduced at
the bottom of this commit message.

The automated commit is squashed with one to update how we depend on
bus parameters. Before, we had to provide an "Ibex top package". This
behaved the same as OpenTitan's "lowrisc:constants:top_pkg", but
avoided having to vendor in that file.

On the OpenTitan side, this has been tidied up with commit
d266c68 ("[dv] Update dv_utils sources to use bus_params_pkg"). This
changes the dependency of dv_utils to
"lowrisc:opentitan:bus_params_pkg". We still have to provide our
own (now called "lowrisc:ibex:bus_params_pkg") and need to patch the
dv_utils dependency, but this is a bit cleaner because dv_utils is
less likely to accidentally include dependencies on OpenTitan
internals.

On our side, we have to update the vendoring patch for dv_utils (and
change its name). We also need an equivalent patch for dv_lib. Then we
rename our hacky "Ibex top package" to "bus_params_pkg". The ICache DV
environment also needs patching to use the bus parameters properly.
Phew!

* [dv] Update prim_present cov opt (Srikrishna Iyer)
* [dv] Align VCS and Xcelium cov var names (Srikrishna Iyer)
* [dv] Split coverage for functional and auto tests (Srikrishna Iyer)
* [dvsim] Do builds smartly (Srikrishna Iyer)
* [syn] Carry over synthesis flow updates from bronze (Michael
  Schaffner)
* [dvsim] Lint cleanup (Srikrishna Iyer)
* [dvsim] Allow testplan to be omitted (Srikrishna Iyer)
* [dvsim] Address lowRISC/opentitan#3071 comments (Srikrishna Iyer)
* [dvsim] lint cleanup (Srikrishna Iyer)
* [dvsim] Add support for second-level indirection (Srikrishna Iyer)
* [dvsim] Change cores-root to avoid conflicts with autogen'd core
  files (Michael Schaffner)
* [dvsim] Update `tests` key behavior in regressions (Srikrishna Iyer)
* [lint] Minor update of ERROR patterns in parser script (Michael
  Schaffner)
* [packer] Revise the implementation (Eunchan Kim)
* [flow] Remove lint makefile (Timothy Chen)
* [flows] Various updates to tools and documents to suppose top/ip
  select (Timothy Chen)
* [dv/shadow_reg] shadow_reg update error (Cindy Chen)
* [rtl/alert] change the naming from _en_i to _req_i (Cindy Chen)
* [dvsim] Tidy up config file loading in FlowCfg.py (Rupert Swarbrick)
* [dvsim] Make it simpler to derive from FlowCfg (Rupert Swarbrick)
* [lint] Update warning/error exclusions in parser scripts (Michael
  Schaffner)
* [dvsim] Fix for `--tool` override (Srikrishna Iyer)
* [dvsim] Bug fix in LintCfg.py (Srikrishna Iyer)
* [prim/dv] Integrate LFSR TB with dvsim (Udi Jonnalagadda)
* [uvmdvgen] Update template to reflect bind reorg (Srikrishna Iyer)
* [dv] remove prim_lfsr_bind (Srikrishna Iyer)
* [dv] Cleanup lint warnings in csr_utils_pkg (Srikrishna Iyer)
* [dv] Cleanup lint warnings in clk_rst_if (Srikrishna Iyer)
* [dvsim] Fix coverage dashboard link (Srikrishna Iyer)
* [prim] Rename prim_util_memload.sv to svh (Philipp Wagner)
* [lint/doc] Update linting readme to reflect recent updates (Michael
  Schaffner)
* [lint] Remove legacy Makefile flow for linting tools (Michael
  Schaffner)
* [dvsim/lint] Enable Verilator lint in Dvsim (Michael Schaffner)
* [prim_arbiter_fixed/fpv] Add generated FPV testbench (Michael
  Schaffner)
* [prim_arbiter_fixed] This adds a fixed priority arbiter (Michael
  Schaffner)
* [prim] Domain-Oriented Masking AND logic (Eunchan Kim)
* [dv] Update dv_utils sources to use bus_params_pkg (Srikrishna Iyer)
* [dv] Update mem_model to use bus-params_pkg (Srikrishna Iyer)
* [dv]  Update dv_lib sources to use bus_params_pkg (Srikrishna Iyer)
* [uvmdvgen] Support for setting vendor name in VLNV (Srikrishna Iyer)



======Commit: 21ad6624======
======Short Message======
[rtl] remove lsu_req_in_id signal
======Full Message======
[rtl] remove lsu_req_in_id signal

This signal aimed to ensure loads/stores completed succesfully when an
interrupt or debug request appeared at the same time they were being
executed when the writeback stage is present. However other stall logic
suffices for this purpose (debug/interrupt will wait for instruction to
unstall in ID/EX which only happens once request has been sent out, then
first instruction of debug/interrupt handler will stall until load/store
response has been seen based on the generic stall logic for lsu requests
in the writeback stage).

With this signal in place debug single stepping was broken around loads
and stores.

Fixes #1029



======Commit: 6df64c6f======
======Short Message======
[doc] Fix table rendering in README
======Full Message======
[doc] Fix table rendering in README



======Commit: 7eaf0e4a======
======Short Message======
[ibex/rtl] Fix pmpaddr write enable signal
======Full Message======
[ibex/rtl] Fix pmpaddr write enable signal

Updates the write enable for `pmpaddr[i]` CSRs to deny writes if
`pmpcfg[i+1].lock == 1` and `pmpcfg[i+1].mode == TOR`, as per the
spec.



======Commit: e37c81a1======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@067272a2
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@067272a2

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
067272a253f4eeed4ae58a9171ee266256528117

* [dv/common] initial support for shadow register (Cindy Chen)
* [rtl/prince] Small fixes for PRINCE cipher logic (Udi Jonnalagadda)
* [dv doc] Fix rendered testplan table (Srikrishna Iyer)
* [prim/dv] Enable coverage collection for PRESENT (Udi Jonnalagadda)
* [dvsim/syn] Minor fix in message reporting (Michael Schaffner)
* [prim] Make prim_clock_inverter a tech specific prim (Michael
  Schaffner)
* [vsg] fix _i/_o for several modules (Scott Johnson)
* [doc] Update Licence Headers to fit agreed style (Sam Elliott)
* [vsg] fix _i/_o usage on sram_arbiter (Scott Johnson)
* [vsg] fix _i/_o usage on prim_fifo (Scott Johnson)
* switch to host, primary, or over-arching as appropriate (Scott
  Johnson)
* [dvsim/lint/syn] Properly set the errors_seen value to return
  nonzero status (Michael Schaffner)
* [dvsim] Fix open() call with Pathlib for older Python versions
  (Michael Schaffner)
* [style-lint] Last round of minor fixes to get all targets clean
  (Michael Schaffner)
* [prim] Add shadow register primitive (Pirmin Vogel)
* [flash_ctrl] Cosmetic updates enum literals (Srikrishna Iyer)
* [tool/script] delete clean section in make files (Cindy Chen)
* [dvsim] Add git commit and branch info to reports (Michael
  Schaffner)
* [dvsim/syn/lint] Add options to selectively sanitize reports
  (Michael Schaffner)
* [lint] Update waiver file for prim_generic_pad_wrapper (Michael
  Schaffner)
* [prim_pad_wrapper] Update pad wrapper (Michael Schaffner)
* [alert_handler/rtl] priority between ping_ok and sig_int_err (Cindy
  Chen)
* [prim] Add a few prim cells needed for clock / resets (Timothy Chen)
* [dv] added default timeout message to DV_SPINWAIT (Srikrishna Iyer)
* [dv] Add mechanism to configure vseq via knobs (Srikrishna Iyer)
* Make the wmask assertion in prim_generic_ram_*p only apply to writes
  (Rupert Swarbrick)
* [prim_gate_gen] Recalibrate gate generator for new std cells
  (Michael Schaffner)
* [primgen] Use SafeDumper for YAML (Philipp Wagner)
* [primgen] Fix some flake8-reported style issues (Philipp Wagner)
* [prim] Improve extraction of parameter port list (Philipp Wagner)
* [prim] Remove outdated comment from primgen (Philipp Wagner)
* Added missing include prim_assert.sv (Dawid Zimonczyk)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: 94d50571======
======Short Message======
Track mem_err_shift better in the ICache scoreboard
======Full Message======
Track mem_err_shift better in the ICache scoreboard

This fixes a test failure that I was seeing when following a "many
errors" test by something different. To reproduce,

  make -C dv/uvm/icache/dv \
       SEED=1465832714 \
       TESTS=ibex_icache_stress_all_with_reset

There are actually two different ways this can come unstuck:

(1) Memory request goes out and gets put into the response queue.
    req_i goes low. Sequence changes. req_i goes high and we get the
    response from the previous request (but mem_err_shift has changed
    in the meantime).

    To fix this, we pair up the memory seed and its associated
    mem_err_shift in the scoreboard queue, rather than retrieving
    mem_err_shift from the config object when the response comes in.

(2) Memory request goes out. Sequence changes. Memory request is
    handled (with new mem_err_shift). Scoreboard sees the result. New
    sequence generates its first item.

    In this case, the scoreboard will expect the old mem_err_shift and
    see the new one. To fix this, we add an extra entry to the list of
    valid states in the scoreboard if needed so that we also check the
    mem_err_shift currently in the config object.

You might worry about what happens if we have two back-to-back
sequence changes that change mem_err_shift without ever changing seed:
what happens if we have a situation like (1), but for the "middle"
sequence. To avoid this problem, we actually add the extra entry in
the fix for (2), so it will look like a new seed arrived as part of
the middle sequence, so long as we have read at least one
result (always true in the core sequence).



======Commit: 1619ea2b======
======Short Message======
[dv/ibex] Enhance riscv_debug_single_step test
======Full Message======
[dv/ibex] Enhance riscv_debug_single_step test

As pointed out by @tomroberts-lowrisc in #983, the current
implementation of riscv_debug_single_step_test cannot handle
single-stepping over instructions that change the PC.
This PR aims to introduce this functionality, utilizing the
new instr_monitor_if.

Now, if the core single-steps onto a branch/jump instruction, the
testbench will log the new target PC and compare it against the actual
target address stored in `dpc`.
"Normal" instructions are checked as usual by incrementing the
instruction's PC by either 2 or 4 (depending whether it is compressed)
and comparing that against `dpc`.



======Commit: aae437d7======
======Short Message======
[rtl] Add alert outputs
======Full Message======
[rtl] Add alert outputs

- Add a major and minor alert output which can be used by the system to
  react to fault injection attacks

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 1dfddee5======
======Short Message======
Value passed to UVM set_timeout is calculated as 1000000000 basing on 1ns/1ps timescale.
======Full Message======
Value passed to UVM set_timeout is calculated as 1000000000 basing on 1ns/1ps timescale.
But if you are using precompiled UVM it may be compiled with other timescale depending on compilation option used when it was compiled or tools default timescale value (uvm does not set timescale int the code).
In this case for us precompiled UVM timescale is 1ps/1ps - so UVM gets 1000000000 in set timeout but interprets it as ps. As a result timeout is 1000 times smaller that you expect. That is why we are getting timeouts.
It is hard to find perfect solution. One of them is to recompile the UVM with -timescale 1ns/ps (or whatever you will use for your design).



======Commit: 4223803d======
======Short Message======
Lint: Fix some line length warnings
======Full Message======
Lint: Fix some line length warnings

AscentLint complains about lines longer than 100 characters, as seen in
the nightly lint reports. Fix some (all?) of them.



======Commit: d0923fa5======
======Short Message======
ibex_counter: Use always_ff
======Full Message======
ibex_counter: Use always_ff

Fix a lint error reported by AscentLint:

```
E   ALWAYS_SPEC:   ibex_counter.sv:59   Edge triggered block may be more accurately modeled as always_ff                 New
```



======Commit: 85d0ce36======
======Short Message======
Specify data type for all parameters in simple_system
======Full Message======
Specify data type for all parameters in simple_system

Fixes a lint warning.



======Commit: f688c795======
======Short Message======
Clarifications to the README of the simple system
======Full Message======
Clarifications to the README of the simple system

* Mention the need to install `libelf-dev`. Thanks to Bert Pieters for
  reporting this.
* Guide users to install our Python dependencies, including fusesoc and
  edalize, from `python-requirements.txt`, to ensure they have the
  right version.
* Prefer ELF files for Verilator simulations. This makes it easier to
  use existing ELF files from another software build system.

Fixes #1019



======Commit: ee0a1cf2======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@ebf4663b
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@ebf4663b

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
ebf4663b42a9d81d026db5821b5c8249d54f23a7

* [prim_lfsr] Fix description in core file for FPV (Philipp Wagner)
* [prim_lfsr] Factor out into a separate core file (Philipp Wagner)

Signed-off-by: Philipp Wagner <phw@lowrisc.org>



======Commit: 75dadb5a======
======Short Message======
[dv/ibex] Add two new interrupt/debug tests
======Full Message======
[dv/ibex] Add two new interrupt/debug tests

As a result of lowRISC/opentitan#2405 and lowRISC/ibex#928 (reporting
that interrupts that came in while a load instruction was in the ID
stage caused some incorrect behavior in Ibex), this PR adds some new
directed interrupt and debug tests to check that the core behaves
properly during execution of each supported instruction when some
external irq/debug stimulus comes in.

To do this, we use the two new functions `decode_instr(...)` and
`decode_compressed_instr(...)` in `core_ibex_test_list.sv` to "decode"
every instruction that the `core_ibex_instr_monitor_if` sees in the ID
stage of the pipeline. Once the testbench decodes an instruction that
we have not seen before, it can then drive interrupt or debug stimulus
into the core.

Once any given instruction has been detected by the testbench (and
stimulus driven), it will no longer drive stimulus if this instruction
is seen in the decode pipeline (e.g. if we have previously detected a
`c.addi` instruction in the ID stage and have driven irq/debug stimulus,
we will no longer drive stimulus if we see another `c.addi` instruction,
no matter the operands). This is to avoid driving irq/debug stimulus
after every single instruction as this will add a huge unwanted amount
of simulation latency.

A few notes:

- We drive irq/debug stimulus into the core every time we see a
  `wfi` instruction, as otherwise we will timeout as the core waits
  infinitely for some stimulus from the outside world.
- We ignore some system-level instructions (ebreak/mret/dret) and
  illegal instructionsfor now, as driving stimulus during these
  instructions will result in a nested trap, which requires special
  handling.
- The interrupt agent was modified slightly to drive stimulus by
  default on the falling edge of the clock, so this way we can "catch"
  instructions that are in the ID pipeline for only a single cycle.
- The duration for which the testbench raises `debug_req_i` for the core
  is also increased to avoid edge cases where we lower the debug line
  too early (e.g. while long multicycle instructions like `div` are
  executing in the ID stage).



======Commit: 414ff7ee======
======Short Message======
[doc] Fix spelling of CoreMark
======Full Message======
[doc] Fix spelling of CoreMark

Signed-off-by: Pirmin Vogel <vogelpi@lowrisc.org>



======Commit: 0335b69e======
======Short Message======
Clean up Verilator sections in core files
======Full Message======
Clean up Verilator sections in core files

- The "PINCONNECTEMPTY" waiver is part of our normal waiver file, no need
  to add it to the tool invocation.
- Recent versions of Verilator choose good defaults for MAKE_OPTS,
  passing it explicitly overrides the settings.
- All Verilator code is now lint clean, we can remove `-Wno-fatal`.
- FST traces are not much slower then VCD traces any more in recent
  Verilator versions, remove the respective comment.
- Align comment about the compile/sim time for tracing with other files
  and OpenTitan.



======Commit: 9e3bec0d======
======Short Message======
Fix and waive Verilator lint errors in tb_cs_registers
======Full Message======
Fix and waive Verilator lint errors in tb_cs_registers

Add a waiver for top-level parameters passed in through the command
line, and fix the use within the file.



======Commit: 3bc10549======
======Short Message======
Simplify lint targets
======Full Message======
Simplify lint targets

The only core which needs lint waivers is ibex_core.core; it will then
inherit those waivers to other cores, such as ibex_core_tracing.core,
and higher-up users of these cores (such as the simple system).

Also remove the Verible lint configuration, which happens to be the
default by now. This fixes #736 by making it unnecessary.



======Commit: a126e4ce======
======Short Message======
Fix Ibex description in core file
======Full Message======
Fix Ibex description in core file

Ibex has moved on since these descriptions were written.



======Commit: 006617f9======
======Short Message======
Fix SRAM initialisation for fpga/artya example
======Full Message======
Fix SRAM initialisation for fpga/artya example

This now gets passed to the underlying primitive as a
parameter (instead of a define).



======Commit: 711505a1======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@976d9b9c
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@976d9b9c

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
976d9b9c1f563173d9e4571c775b38e70cb1c5d4

* [lint] Add blanket waiver for DECLFILENAME with blackboxes (Philipp
  Wagner)
* [prim_ram_1p_scr] Add a memory scrambling draft implementation
  (Michael Schaffner)
* [prim_subst_perm] Add simple substitution/permutation network
  (Michael Schaffner)
* [dvsim] Fix for lowRISC/opentitan#2686 - missing else (Srikrishna
  Iyer)

Signed-off-by: Philipp Wagner <phw@lowrisc.org>



======Commit: 6ca325fa======
======Short Message======
Remove outdated documentation
======Full Message======
Remove outdated documentation

By now, ibex depends not only on the a clock gating cell, but also on
assert macros and a LFSR; there will be more to come. This removed piece
of documentation was from the early days, when only a clock gating cell
was to be provided (and we didn't ship one).

Today, users need to either use FuseSoC, or run fusesoc on the simple
system and "harvest" the resulting files if they want to copy-paste Ibex
into their build system. That's not ideal, but not something we can very
easily fix -- so let's remove the outdated documentation first to at
least reduce the confusion.



======Commit: 4ee8b244======
======Short Message======
Add a waiver file for Verible lint
======Full Message======
Add a waiver file for Verible lint

The waiver files currently don't support comments, and require the
"empty" regex; bugs have been filed to get that resolved upstream.

But beyond that, waivers are now functional.



======Commit: 67e74177======
======Short Message======
Fix Verible lint issues
======Full Message======
Fix Verible lint issues

Fix all remaining issues reported by Verible lint.

It turns out that #965 undid some of the fixes in `ibex_alu.sv`
that were done in #980 around the `SHUFFLE_*`/`FLIP_*` signals.



======Commit: 49c9113d======
======Short Message======
Formal protocol checking for icache <-> core interface
======Full Message======
Formal protocol checking for icache <-> core interface

This turns out to be quite complicated, because the icache has a lot
of different counters that all track addresses or fill buffer state.
For an inductive proof to go through, you need to make the relations
between them explicit, which takes lots of assertions.

All of the signals defined in the formal_tb are prefixed with 'f_'.
This isn't strictly necessary, but it makes it much easier to see what
came from the design (since we are "bound in", our ports don't have _o
or _i suffixes).

We add a couple of protocol assumptions:

ICache <-> Core:

  - Branch target addresses are half-word aligned
  - The branch_spec signal is driven if branch is

ICache <-> Memory:

  - The bus doesn't respond unless there is an outstanding request
  - The bus doesn't grant more than 4 billion outstanding requests(!)

There's also some protocol state tracking:

  - f_addr_valid tracks whether the ICache currently has an
    architectural address. It goes high with branch_i (which gives the
    cache an address) and goes low when the cache completes a
    transaction with err_o set (since the data is bad, there's no
    notion of a "next address").

  - f_reqs_on_bus tracks the number of requests currently outstanding
    on the bus. This is used for the ICache <-> Memory assumptions
    above. We have some internal assertions that check this equals the
    sum of the "ext" counters minus the sum of the "rvd" counters.

With these assumptions, we can prove:

  - Once asserted, valid_o stays high until a transaction is completed
    by ready_i or until branch_i is asserted (which cancels the
    transaction).

  - While the transaction is pending, addr_o remains stable.

  - While the transaction is pending, err_o remains stable and, if
    err_o is asserted, so does err_plus2_o.

  - While the transaction is pending, if err_o and err_plus2_o are
    high then bottom 16 bits of the returned instruction data imply an
    uncompressed instruction.

  - While the transaction is pending, if err_o is low then the bottom
    16 bits of the returned instruction remain stable.

  - While the transaction is pending, if err_o is low and the bottom
    16 bits of the returned instruction imply an uncompressed
    instruction then the top 16 bits of the returned instruction
    remain stable.



======Commit: ee1ca61f======
======Short Message======
A simple formal flow for the ICache based on SymbiYosys
======Full Message======
A simple formal flow for the ICache based on SymbiYosys

To get this working, you need a corresponding patch in Edalize, which
adds SymbiYosys as an EDA tool.

At the moment, this proves a couple of simple bus assertions. Later
patches will add more.

There are currently some rough edges to this flow:

  (1) We use a hacky pre_build hook to run sv2v and edit the files in
      the work tree. Among other problems, this means that the any
      failure messages that come out of sby have bogus line numbers.

  (2) Since we haven't yet got bind support in Yosys, we have to
      include a fragment from the design itself.



======Commit: 40a52ab8======
======Short Message======
[doc] Add bitmanip spec to introduction page
======Full Message======
[doc] Add bitmanip spec to introduction page

We list all specifications we implement, even optional ones. Add
Bitmanip there as well.

Fixes #966



======Commit: f35a4079======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@5cae0cf1
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@5cae0cf1

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
5cae0cf1fac783e0d0df8c8597bf65322a696a56

* Allow different assertion "backends" in prim_assert.sv (Rupert
  Swarbrick)
* [prim_prince/doc] Update documentation (Michael Schaffner)
* [prim_prince] Add option to instantiate a registers half-way
  (Michael Schaffner)
* [prim_cipher_pkg] Reuse sbox4_8bit to build wider sbox layers
  (Michael Schaffner)
* [dv/prim] add PRESENT testbench (Udi Jonnalagadda)
* [uvmdvgen] Scoreboard update. (Srikrishna Iyer)
* [flash_ctrl dv] Fix V1 tests (Srikrishna Iyer)
* [prim_cipher_pkg] Replicate common subfunctions for other widths
  (Michael Schaffner)
* [prim/present] fix PRESENT decryption bugs (Udi Jonnalagadda)
* [prim/present] fix some PRESENT encryption bugs (Udi Jonnalagadda)
* [dv] Add get_mem DPI function to Verilator simutil (Stefan
  Wallentowitz)
* [lint/entropy_src] Add the entropy source to the lint regression
  (Michael Schaffner)
* [style-lint] Fix some common style lint warnings (Michael Schaffner)
* first set of security checks added to D2 checklist (Scott Johnson)
* [fpv/tooling] add FPV class extension in dvsim (Cindy Chen)
* [dvsim/lint] Minor fixes for printout issues and result parser
  status (Michael Schaffner)
* [syn] Print detailed messages to .md if publication is disabled
  (Michael Schaffner)
* [prim_util] Do not use $clog2() in Xcelium (Philipp Wagner)
* [prim] Update ResetValue parameter in prim_flop_2sync (Timothy Chen)
* Modified some command-line arguments for DSim (Aimee Sutton)
* [prim_util] Make prim_util a package (Philipp Wagner)
* [dv] Move mem checking to scb (Weicai Yang)
* [lint] Make PINCONNECTEMPTY Verilator waiver common (Philipp Wagner)
* [prim] - Fix generic flash enum reference (Timothy Chen)
* [prim_ram_*adv] Mark cfg port as unused (Philipp Wagner)
* [prim_fifo_sync] Use vbits() for simpler code (Philipp Wagner)
* [prim_flash] Add reset to held_part (Eunchan Kim)
* [lint] Add more lint waivers (Philipp Wagner)
* [dv] Add random backdoor for csr_hw_reset (Weicai Yang)
* [dv] Add set_freq_khz in clk_rst_if (Weicai Yang)
* [prim] Close GAPI file handle in primgen (Philipp Wagner)
* [fpv/prim_packer] fix CI failure due to index out of bound (Cindy
  Chen)
* [prim_arbiter_*] Propagate parameter changes (Michael Schaffner)
* [prim_arbiter_tree] Fix incorrect arbitration behavior (Michael
  Schaffner)
* [prim_arbiter_ppc] Add more FPV fairness checks (Michael Schaffner)
* [prim_ram*] Add an assertion that checks wmask consistency (Michael
  Schaffner)
* [memutil] Increase max memory width to 256bit (Tom Roberts)
* [flash] - Add flash info page support (Timothy Chen)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: 71b34747======
======Short Message======
[rtl] Fix icache xprop issue
======Full Message======
[rtl] Fix icache xprop issue

- invalidate all ways on a tag error to prevent xprop from the data
  error signal and reduce the likelyhood of multi-way allocations

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 684d4205======
======Short Message======
Prevent writing CSR_SECURESEED to get the seed of dummy instruction
======Full Message======
Prevent writing CSR_SECURESEED to get the seed of dummy instruction

Although CSR_SECURESEED is unreadable, an attacker can write a new seed,
which brings convenience to the attack. This patch is used to XOR the
historical seed, so that even if the attacker writes a new value to
CSR_SECURESEED , he cannot know the value of the seed.

Signed-off-by: Xiang Wang <merle@hardenedlinux.org>



======Commit: ae547c8d======
======Short Message======
[top_pkg] Fix style lint warnings
======Full Message======
[top_pkg] Fix style lint warnings

Signed-off-by: Michael Schaffner <msf@google.com>



======Commit: 962fc802======
======Short Message======
Invalidate in an ICache sequence after a change to mem_err_shift
======Full Message======
Invalidate in an ICache sequence after a change to mem_err_shift

When we chain sequences together, we are careful to pass seeds between
neighbouring sequences. However, I didn't think to check
mem_err_shift. Before this patch, you see problems if you have a
"caching" sequence followed by a "many_errors" sequence with no reset
and no change of seed and they both happen to pick the same address
range.

The problem is that if the data at address A is cached in the first
sequence, the icache will merrily return it when address A comes up in
the second. However, the change to mem_err_shift might mean that this
would cause a memory error if it hadn't been cached, causing the
scoreboard to get upset.

This patch ensures that we always start a sequence with an
invalidation if there was a previous sequence with a different value
of mem_err_shift.

To do this cleanly, the patch also moves some of the "grab the guts of
the old sequence and put it in the new one" logic from
ibex_icache_combo_vseq and into the underlying sequence classes. The
trick is that a sequence now has a handle to the previous sequence (if
there was one), and can use that to extract whatever information it
needs.



======Commit: e243ab26======
======Short Message======
Fix ICache caching window test with combination sequences
======Full Message======
Fix ICache caching window test with combination sequences

This fixes several problems. Firstly, the window_reset function was
switching off tracking until it next saw busy_o go low, which is
correct at the start of time, but not what we want after we've
started. This patch splits that behaviour into a new tracking_reset
function (which calls window_reset). This is called on reset or
invalidate.

Secondly, this check was occasionally failing where we'd have an ECC
sequence (which should disable the check) immediately followed by a
caching sequence with similar addresses. If the window ended in the
caching sequence, we'd see a high fetch ratio and conclude that
something had gone wrong.

Now we clear the window completely whenever we fetch an instruction
when the check is disabled, which should avoid the problem (at worst,
you might get 1 instruction overlap, which is unlikely to matter).

Finally, we move the call to tracking_reset up to the end of the reset
sequence. It doesn't usually matter, but if there's a pending item
from the core monitor with busy = 0, we need to make sure that item
comes in before we set not_invalidating = 1. Otherwise, the scoreboard
incorrectly thinks it's seen the end of the invalidation
sequence (before it's even started) and starts tracking fetch ratios
too early.



======Commit: e7c9b52c======
======Short Message======
Add ibex_icache_stress_all test
======Full Message======
Add ibex_icache_stress_all test

This runs sequences back-to-back, occasionally resetting between
sequences.

Because our virtual sequences are composed of several smaller
sequences, we have to stop them when the core sequence finishes (see
the calls to kill() in ibex_icache_base_vseq). We also have to make
sure that we don't drop items in the memory sequence, which can be
pre-empted as part of sending a response (see the peek/get code
there).

Finally, the memory sequence also has a current seed and a list of
pending grants: this patch has to copy those across between sequences
to make everything work correctly.



======Commit: ad80b0b2======
======Short Message======
Configure ICache mem_error tests from the vseq (not a test class)
======Full Message======
Configure ICache mem_error tests from the vseq (not a test class)

As with the ECC sequence, it turns out that you don't actually need
the separate test class for this, so this commit gets rid of it. The
advantage of doing this is that we can now chain this vseq with
others.



======Commit: b49f153a======
======Short Message======
Pass mem_err_shift to the ICache memory model on each error check
======Full Message======
Pass mem_err_shift to the ICache memory model on each error check

This has no immediate effect, but it means that the memory agent's
config's "mem_err_shift" value can be changed in the middle of the
test, rather than being fixed in the build_phase.



======Commit: fdfdcc04======
======Short Message======
[rtl] disable clock between reset and fetch_enable_i
======Full Message======
[rtl] disable clock between reset and fetch_enable_i

Fixes lowRISC#957

Signed-off-by: Bert Pieters <bert.pieters@gmail.com>



======Commit: 4a748eb5======
======Short Message======
Enable ICache ECC in the way dvsim.py requires
======Full Message======
Enable ICache ECC in the way dvsim.py requires

It seems that dvsim.py doesn't actually use fusesoc to do things like
pass parameters. Instead, we have to set the tool-specific options in
the hjson file by hand.

Fixes issue #964.



======Commit: 8fe04c69======
======Short Message======
Fix ordering in ICache core monitor start-up
======Full Message======
Fix ordering in ICache core monitor start-up

Unsurprisingly, if you only start monitoring for something after
finishing the run phase, you don't see it very often. Oops!



======Commit: 2cd77e57======
======Short Message======
Correct "cancelled_valid" sequence in ICache UVM core coverage
======Full Message======
Correct "cancelled_valid" sequence in ICache UVM core coverage

This is supposed to spot when the valid signal drops without a ready
signal from the core. This is only allowed to happen if the core sends
a branch. The previous sequence was bogus: it didn't work for
back-to-back accesses (because it required $rose(valid)) and it didn't
check that valid actually dropped (which doesn't always happen). The
new one is simpler, and correct!

Note that we still don't see coverage of the sequence. I'll fix that
in the next patch.



======Commit: e8a71c8a======
======Short Message======
Update google_riscv-dv to google/riscv-dv@6cf6b4f
======Full Message======
Update google_riscv-dv to google/riscv-dv@6cf6b4f

Update code from upstream repository https://github.com/google/riscv-
dv to revision 6cf6b4f389272d8ff5e2b397af43ac6c0dfba2e2

* Update init value for floating point reg (google/riscv-dv#615)
  (weicaiyang)
* temporarily comment out 4 vector instructions to re-enable coverage
  flow (google/riscv-dv#616) (udinator)
* Fix vector load/store instruction encoding (google/riscv-dv#614)
  (taoliug)
* Add user_init.s to allow custom initialization routine
  (google/riscv-dv#613) (taoliug)
* Fix vector extension config register initialization (google/riscv-
  dv#610) (taoliug)
* Add floating point coverage part2 (google/riscv-dv#600) (weicaiyang)
* Add MAX LMUL configure (google/riscv-dv#609) (taoliug)
* Fix vector unit strided load/store instruction stream name
  (google/riscv-dv#608) (taoliug)
* Update pygen source files (google/riscv-dv#602) (ANIL SHARMA)
* Add vector strided load/store test (google/riscv-dv#601) (taoliug)
* make <main> 4-byte aligned when enabling PMP (google/riscv-dv#596)
  (udinator)
* Fix ius compilation issue (google/riscv-dv#599) (taoliug)
* Integrate Andes's vector extension work to upstream (google/riscv-
  dv#598) (taoliug)
* Fix kernal setcion  PTE setting issue (google/riscv-dv#594)
  (taoliug)
* Add flake8 check for pygen (google/riscv-dv#589) (Hai Hoang Dang)
* Fix MPRV setting issue, it's causing problem for exception handling
  with virtual address translation on (google/riscv-dv#593) (taoliug)
* Fix VSETVL generation issue (google/riscv-dv#591) (taoliug)
* Fix jump instruction stream label issue (google/riscv-dv#590)
  (taoliug)
* Add pygen_src files (aneels3)

Signed-off-by: Udi <udij@google.com>



======Commit: b302b6da======
======Short Message======
Fix documentation markup for tracer
======Full Message======
Fix documentation markup for tracer

The unordered list wasn't rendered properly due to a missing empty line
before it. Purely editorial change.



======Commit: 4eece988======
======Short Message======
[rtl] Remove use of `define in decoder
======Full Message======
[rtl] Remove use of `define in decoder

Fixes #30

Signed-off-by: Bert Pieters <bert.pieters@gmail.com>



======Commit: 356fb55f======
======Short Message======
Increase priority of failure messages in ICache scoreboard
======Full Message======
Increase priority of failure messages in ICache scoreboard

A few of these messages get printed out just before an error. It's
much more helpful for debugging if you see them with the default
verbosity. They only appear when something goes wrong, so let's just
turn them on.



======Commit: eaa74e96======
======Short Message======
Fix verbosity in ECC UVM driver
======Full Message======
Fix verbosity in ECC UVM driver

This should have been UVM_HIGH (which disables the messages most of
the time).



======Commit: a2194a72======
======Short Message======
[dv] Fix DUT probe IF paths
======Full Message======
[dv] Fix DUT probe IF paths

- The testbench probes signals that are unqualified by instr_valid
- This causes events to trigger due to instructions that are not
  actually executed, leading to false timeout failures
- Note this fix alone doesn't eliminate such failures due to another
  issue which will be addressed separately

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 917572c2======
======Short Message======
Define an "ECC agent" for icache testing and a test that uses it
======Full Message======
Define an "ECC agent" for icache testing and a test that uses it

The agent controls an ibex_icache_ecc_if interface, which is bound
into each prim_badbit_ram_1p module. There's a ton of painful wiring
in the environment to create an agent for each of these interfaces and
connect everything up properly.

By default, these agents don't have associated sequences (so they
don't inject read errors). You can switch them on by setting
enable_ecc_errors on the top-level virtual sequence. The patch adds a
vseq to do so (ibex_icache_ecc_vseq).

Note that we don't currently collect any specific coverage for ECC
checks. We'll probably add some uarch functional coverage points,
which will pick it up in the future, or we'll also pick it up if the
cache gets an alert output.



======Commit: 48fbea83======
======Short Message======
Add and use a 'badbit' RAM for ICache tests
======Full Message======
Add and use a 'badbit' RAM for ICache tests

This does nothing by default, just wrapping up a prim_generic_ram_1p.
But we can bind an interface into it to inject bit errors by forcing
the bad_bit_mask signal.

Note that the icache uses ECC RAMs in a reasonably unusual way (ORing
together inputs and outputs from its data RAMs), so we have to do this
ourselves, rather than piggy-backing on the implementation or testing
done for e.g. OpenTitan's prim_ram_1p_adv.



======Commit: 2569a63e======
======Short Message======
Drive the branch_spec line in ICache UVM tests
======Full Message======
Drive the branch_spec line in ICache UVM tests

This signal already got driven (to 1) when signalling a branch with
the interface's branch_to task. This patch now drives the branch_spec
line occasionally even if we don't actually do a branch. (One cycle in
64, for now).



======Commit: 8c11bd78======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@c91b50f3
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@c91b50f3

This is manually squashed with a change to import dv_base_reg too, a
new module that was created by Weicai's "csr backdoor support" patch.
It's needed because it is a dependency of dv_lib.

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
c91b50f357a76dae2ada104e397f6a91f72a33da

* [prim_ram*_adv] Update core files and add prim_util dependency
  (Michael Schaffner)
* [prim_ram*_adv] Implement Byte parity in prim_ram*_adv (Michael
  Schaffner)
* [dvsim] Run tests in "interleaved" order (Rupert Swarbrick)
* [dvsim] Remove unnecessary getattr/setattr calls from SimCfg.py
  (Rupert Swarbrick)
* [dv] Add support for multiple ral models (Srikrishna Iyer)
* [rtl] Fix prim flash dependency (Srikrishna Iyer)
* [prim_fifo_sync] Make FIFO output zero when empty (Noah Moroze)
* [dv] csr backdoor support (Weicai Yang)
* [prim] Add a "clog2 width" function (Philipp Wagner)
* [dvsim] Allow max-parallel to be set in the environment (Rupert
  Swarbrick)
* [dvsim] Fix --reseed argument (Rupert Swarbrick)
* [prim_ram/rom*_adv] Break out into individual core files (Michael
  Schaffner)
* [prim_rom] Align port naming with prim_ram* (Michael Schaffner)
* [dv] Allow a test to have "simple" timestamps (Rupert Swarbrick)
* [dvsim] Improve --help message (Rupert Swarbrick)
* [dvsim] Remove unused --local argument (Rupert Swarbrick)
* [dvsim] Small tidy-ups to mode selection in SimCfg.py (Rupert
  Swarbrick)
* [fpv] formal compile fix required by VC Formal (Cindy Chen)
* [dvsim] Fix error detection logic in Deploy.py (Rupert Swarbrick)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: d79eb58a======
======Short Message======
[rtl] Simplify I$ ECC error handling
======Full Message======
[rtl] Simplify I$ ECC error handling

- Remove the timing optimisations that delay the factoring-in of ecc
  errors into valid_o.
- Optimisations are probably unnecessary here due to the minimal logic
  hanging off valid_o, and the optimisations cause protocol checker
  violations.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 5ecaa11c======
======Short Message======
[rtl] Fix writeback stage interrupt issue
======Full Message======
[rtl] Fix writeback stage interrupt issue

- If an interrupt arrives at the same time as a load/store instruction
  is in ID stage, the interrupt must wait until load/store completes.
  Without the WB stage this happens naturally as the core stalls. With
  the WB stage, we need to allow the load/store to progress to the WB
  stage (and clear the ID stage) then hold back the interrupt until it
  completes.
- Also cleaned up some lsu related stalling terms and signal naming.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: d0323618======
======Short Message======
Add a "many_errors" icache test sequence
======Full Message======
Add a "many_errors" icache test sequence



======Commit: bfa531c0======
======Short Message======
[rtl] Move some assertions around
======Full Message======
[rtl] Move some assertions around

- Prevents errors due to empty generate blocks when passed through sv2v

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 33ad42de======
======Short Message======
Spelling fix: seperate -> separate
======Full Message======
Spelling fix: seperate -> separate



======Commit: de05509c======
======Short Message======
Add test to check that disabling doesn't invalidate the icache
======Full Message======
Add test to check that disabling doesn't invalidate the icache

This is an entry in the testplan. Renaming it to "oldval", because
suffixing every class name with "disable_without_invalidation" was
getting ridiculous.



======Commit: 3c35e443======
======Short Message======
Fix Writeback stage lint errors
======Full Message======
Fix Writeback stage lint errors

- unpacked array decending order
- unspecified generate block

Signed-off-by: Eunchan Kim <eunchan@opentitan.org>



======Commit: 640a8682======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@d78da129
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@d78da129

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
d78da129c7f2b115ccabd1c3af199e0e5812f365

* [dv] Fix loop when waiting for end of run phase in dv_base_monitor
  (Rupert Swarbrick)
* [util] Remove docgen references (Tobias Wölfel)
* [dvsim] Small tidy-ups in dvsim.py command line parsing (Rupert
  Swarbrick)
* [dvsim] Tidy up wave dumping logic (Rupert Swarbrick)
* [dv/xbar] Add chip-level xbar support (Weicai Yang)
* [prim] Fix lint errors (Pirmin Vogel)
* [prim] Rework how primgen.py writes out parameter lists for
  instantiations (Pirmin Vogel)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: a56f14e0======
======Short Message======
Handle a seed change that clears a PMP error in icache memory driver
======Full Message======
Handle a seed change that clears a PMP error in icache memory driver

When the existing code in drive_pmp() decided that an error needed
signalling, it waited until the request was dropped, or the address
changed, before clearing the PMP error.

This is fine, unless the memory seed is changed (by magical means!)
under our feet. The monitor spots a new request, but the driver needs
to know to clear the PMP error. This patch forcibly tells the driver
to drop the existing item if a new one comes in.



======Commit: e79e6b58======
======Short Message======
Make sure we don't see multi-way hits in icache testbench
======Full Message======
Make sure we don't see multi-way hits in icache testbench

One aspect of (i)cache design that I didn't know about before writing
test code for this block is the problem of multi-way hits. The icache,
as implemented, stores data to parallel ways and it's possible for a
fetch to match more than one way. The data from matching ways all gets
ORed together, which doesn't matter so long as it never
changes (because V | V == V for all V).

Of course, things go poorly if you have two different values, V and W,
at an address which are both stored in the cache. Then the result is V
| W, which isn't necessarily equal to either instruction.

Avoiding this needs priority encoders, which are rather large, so it
seems the usual approach is to disallow branching to modified code
before flushing the cache. This patch teaches the testbench to do this
properly.

Sadly, this means there's now a connection between the core agent and
the memory agent: the memory agent can no longer generate new seeds
whenever it pleases.



======Commit: 2c195c59======
======Short Message======
Reorder check in icache scoreboard for more helpful error messages
======Full Message======
Reorder check in icache scoreboard for more helpful error messages

The test is the same, but the reordering means that if we see an error
that we weren't expecting, we'll complain about that, rather than
about the instruction data itself.



======Commit: c0ae8ffb======
======Short Message======
[rtl] Fix issue with ID/EX exceptions
======Full Message======
[rtl] Fix issue with ID/EX exceptions

When a potential exception occurs in ID/EX controller must wait for any
outstanding instruction in WB to complete before resolving it. The
instruction in WB may also have an exception which takes priority over
ID/EX.

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: 833bdefe======
======Short Message======
 [rtl] Fix exception priority for writeback stage
======Full Message======
 [rtl] Fix exception priority for writeback stage

With the writeback stage enabled the controller can see a load or store
error from the writeback stage whilst seeing some other fault/exception
from ID/EX (e.g. an instruction fetch error). The writeback stage fault
must take priority, however without the writeback stage the
priortisation changes.

This introduces more explicit prioritisation logic for faults/exceptions
and gives the correct prioritisation for configurations both with and
without a writeback stage.

Fixes #912

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: f190e3ab======
======Short Message======
[rtl] Fix PMP NA4 address matching
======Full Message======
[rtl] Fix PMP NA4 address matching

- Split out address matching into less than, greater than and equals to
  correctly match NAPOT, NA4 and TOR modes.
- Relates to #902

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: f4366264======
======Short Message======
Update google_riscv-dv to google/riscv-dv@1ad73cc
======Full Message======
Update google_riscv-dv to google/riscv-dv@1ad73cc

Update code from upstream repository https://github.com/google/riscv-
dv to revision 1ad73cc43f8f84d93d49040f8b2928e74efdd854

* Fixes for ML tests (Udi Jonnalagadda)
* Add missing default case to pmp_config (google/riscv-dv#583)
  (udinator)
* various PMP exception handler fixes (google/riscv-dv#581) (udinator)
* convert handshake doc to rst format (google/riscv-dv#580) (udinator)
* Update coverage (google/riscv-dv#584) (weicaiyang)

Signed-off-by: Udi <udij@google.com>



======Commit: 4b01580a======
======Short Message======
[rtl] prefetch buffer performance fix
======Full Message======
[rtl] prefetch buffer performance fix

- The prefetch buffer needs to know when space is available in the fetch
  FIFO to accept a new external request.
- This change updates that logic to look at what is in the FIFO and what
  is outstanding on the bus to decide when space is available rather
  than always assuming the maximum number of requests are outstanding.
- This improves the usage efficiency of the FIFO and fixes #574

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: b95ff21c======
======Short Message======
Update lowrisc_ip to lowRISC/opentitan@3f35d4e4
======Full Message======
Update lowrisc_ip to lowRISC/opentitan@3f35d4e4

Update code from upstream repository
https://github.com/lowRISC/opentitan to revision
3f35d4e42757aeed3f9699d7965f20af41d9d36f

* [dv] Initial flash_ctrl DV testbench (Srikrishna Iyer)
* [dv] Cleanup Xcelium warning: unconnected port (Srikrishna Iyer)
* [dv] Cleanup Xcelium warning: default arg (Srikrishna Iyer)
* [dv] Clean up for phase_read_to_end (Weicai Yang)
* [DV] Remove urandom from task port (Dawid Zimonczyk)
* [doc] Update lint commands in readme (Michael Schaffner)
* [dv] Refactor watchdog_ok_to_end (Srikrishna Iyer)

Signed-off-by: Philipp Wagner <phw@lowrisc.org>



======Commit: f26cc9bb======
======Short Message======
[dv] Add missing signal to i$ tb
======Full Message======
[dv] Add missing signal to i$ tb

- Fixes #904
- Will need a future update to drive the new signal properly

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 8b42024c======
======Short Message======
Use vendored-in primitives from OpenTitan
======Full Message======
Use vendored-in primitives from OpenTitan

Instead of using copies of primitives from OpenTitan, vendor the files
in directly from OpenTitan, and use them.

Benefits:

- Less potential for diverging code between OpenTitan and Ibex, causing
  problems when importing Ibex into OT.

- Use of the abstract primitives instead of the generic ones. The
  abstract primitives are replaced during synthesis time with
  target-dependent implementations. For simulation, nothing changes. For
  synthesis for a given target technology (e.g. a specific ASIC or FPGA
  technology), the primitives system can be instructed to choose
  optimized versions (if available).

  This is most relevant for the icache, which hard-coded the generic
  SRAM primitive before. This primitive is always implemented as
  registers. By using the abstract primitive (prim_ram_1p) instead, the
  RAMs can be replaced with memory-compiler-generated ones if necessary.

There are no real draw-backs, but a couple points to be aware of:

- Our ram_1p and ram_2p implementations are kept as wrapper around the
  primitives, since their interface deviates slightly from the one in
  prim_ram*. This also includes a rather unfortunate naming confusion
  around rvalid, which means "read data valid" in the OpenTitan advanced
  RAM primitives (prim_ram_1p_adv for example), but means "ack" in
  PULP-derived IP and in our bus implementation.

- The core_ibex UVM DV doesn't use FuseSoC to generate its file list,
  but uses a hard-coded list in `ibex_files.f` instead. Since the
  dynamic primitives system requires the use of FuseSoC we need to
  provide a stop-gap until this file is removed. Issue #893 tracks
  progress on that.

- Dynamic primitives depend no a not-yet-merged feature of FuseSoC
  (https://github.com/olofk/fusesoc/pull/391). We depend on the same
  functionality in OpenTitan and have instructed users to use a patched
  branch of FuseSoC for a long time through `python-requirements.txt`,
  so no action is needed for users which are either successfully
  interacting with the OpenTitan source code, or have followed our
  instructions. All other users will see a reasonably descriptive error
  message during a FuseSoC run.

- This commit is massive, but there are no good ways to split it into
  bisectable, yet small, chunks. I'm sorry. Reviewers can safely ignore
  all code in `vendor/lowrisc_ip`, it's an import from OpenTitan.

- The check_tool_requirements tooling isn't easily vendor-able from
  OpenTitan at the moment. I've filed
  https://github.com/lowRISC/opentitan/issues/2309 to get that sorted.

- The LFSR primitive doesn't have a own core file, forcing us to include
  the catch-all `lowrisc:prim:all` core. I've filed
  https://github.com/lowRISC/opentitan/issues/2310 to get that sorted.



======Commit: b1222719======
======Short Message======
Fix deprecation warning in ibex_config.py
======Full Message======
Fix deprecation warning in ibex_config.py

Fix a deprecation, to be removed in Python 3.10.

See https://docs.python.org/3/library/collections.html:
"Deprecated since version 3.3, will be removed in version 3.10: Moved
Collections Abstract Base Classes to the collections.abc module. For
backwards compatibility, they continue to be visible in this module
through Python 3.9."



======Commit: 3d796ee2======
======Short Message======
Fix non-standard usage of '`"` operator
======Full Message======
Fix non-standard usage of '`"` operator



======Commit: 12b39476======
======Short Message======
[rtl] Add speculative branch signal
======Full Message======
[rtl] Add speculative branch signal

- Drive a speculative version of the branch signal into the IF stage to
  drive address muxing
- The speculative signal is the same as the regular branch signal but
  assumes all conditional branches are taken
- This breaks the timing path from branch condition calculation into
  address muxing (and therefore PMP error calculation)
- When the branch is not taken, any external request we might otherwise
  have made is suppressed
- This has a minor performance cost (0.8% without I$, ~0% with I$)

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: b4d952e2======
======Short Message======
[assertions] Tweak xprop assertion qualifiers
======Full Message======
[assertions] Tweak xprop assertion qualifiers

- Tighten up enable conditions to stop properties firing when there is
  an instruction fetch error

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 99c740e5======
======Short Message======
[rtl] Prevent xprop from fetch fifo
======Full Message======
[rtl] Prevent xprop from fetch fifo

- data can be X when an error is output
- prevent X getting into the valid and address signals

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 34427990======
======Short Message======
[rtl] Fix PMP address matching
======Full Message======
[rtl] Fix PMP address matching

- For TOR matching, match should be range_low <= addr < range_high
- Adapt masking so TOR matching can still be reused for NAPOT matching
- Relates to #864

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 65b21c67======
======Short Message======
[dv/icache] Add qualifications in protocol checker
======Full Message======
[dv/icache] Add qualifications in protocol checker

The rdata driven by the cache is undefined when there is an error. There
are therefore no requirements on stability.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 84c5373c======
======Short Message======
[rtl] Various small icache bugfixes
======Full Message======
[rtl] Various small icache bugfixes

- Remove any ready -> valid dependency by allowing the skid buffer to
  accept data when the core is not ready
- Tighten-up behaviour around invalidations and cache enable/disable
- Remove xprop through output_compressed from invalid data when driving errors
- Make behaviour more consistent where speculative requests return
  different data/error conditions to existing cache hit

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 42eee90c======
======Short Message======
Make RAM size configurable in compliance test system
======Full Message======
Make RAM size configurable in compliance test system

Switch from hardcoding 64 kB in two places to a fixed parameter.



======Commit: b2dded5c======
======Short Message======
Change simple system core file to provide default files
======Full Message======
Change simple system core file to provide default files

To allow other modules to reference the simple system, it must provide
default files. In particular this is useful in DV settings where bind
is used.

Signed-off-by: Stefan Wallentowitz <stefan.wallentowitz@hm.edu>



======Commit: e3fe0c50======
======Short Message======
Search backwards for grant seeds in icache memory model
======Full Message======
Search backwards for grant seeds in icache memory model

The code before this patch maintained a mailbox, where it would add an
item for each request it saw, and then pop items off until finding the
right address whenever it saw a grant.

Most of the time, you might expect to see a sequence like this:

    request 100
    grant   100
    request 104
    grant   104
    request 108
    grant   108

This scheme is also resilient when glitches (to do with the
delta-cycle scheduling in the simulator) mean you actually see
something like:

    request 999
    request 100
    grant   100
    request 104
    grant   104
    ...

However, there's another source of "mismatch" possible too: the cache
can change the request address if the request hasn't been granted (as
opposed to a ready/valid interface, where this sort of tomfoolery is
not allowed!).

When the cache is branching all over the place, as in the sanity
sequence, this doesn't really matter. But if the branch destinations
are constrained, as in the passthru sequence, you can see things like
this:

    request 100     (1)
    request 120     (2)
    request 100     (3)
    grant   100     (4)
    request 104
    grant   104
    ...

Note that the mailbox has two entries for address 100 when searching
at point (4). This might be ok, but will cause failures if we get a
new seed at (2) or (3).

This patch replaces the mailbox with a queue. New requests get
inserted at the end, as before, but grants search from the end, rather
than the start. This means that when we get to (4) in the example
above, we'll pick the latest seed (and duplicate entries disappear
quickly).



======Commit: c385354b======
======Short Message======
Apply new seeds to memory request in icache memory model
======Full Message======
Apply new seeds to memory request in icache memory model

When the memory model sees a new fetch on the bus, it might decide to
pick a new seed for the backing memory. Before this patch, the seed
applied to every fetch strictly after this one. Now, it applies to
this fetch too.

This is what the scoreboard expects. In particular, you can trigger
problems here by disabling the cache and branching lots: things will
go wrong if we pick a new seed at the same time as handling the
branch.

To fix things, we either have to teach the scoreboard to "look one
seed backwards" when the cache is disabled, which is ugly and not as
sensitive to errors in the cache, or we have to apply the new seed
immediately. This is a little painful, because we end up having to
randomize the response item and then calculate a field based on a
possible new seed (see the logic between start_item and end_item in
take_req), but I think it's cleaner than the alternative.

As part of the patch, I've also split the "req" and "grant" handling
code into separate tasks. There's no real change there, except to get
rid of a level of indentation, but I think it makes the code a bit
easier to understand.



======Commit: b7800ba7======
======Short Message======
Use --start_seed rather than --seed in core_ibex/Makefile
======Full Message======
Use --start_seed rather than --seed in core_ibex/Makefile

The --seed argument has kept its original meaning: Run the one and
only iteration of the test with this seed. We've added another
argument, --start_seed to riscv-dv's run.py and our sim.py which says
"run the first iteration with this seed, and count up for later
iterations".

This should fix issue #859.



======Commit: f767214d======
======Short Message======
Update google_riscv-dv to google/riscv-dv@e6a63ff
======Full Message======
Update google_riscv-dv to google/riscv-dv@e6a63ff

Update code from upstream repository https://github.com/google/riscv-
dv to revision e6a63ff19ddf162a89379f9e03f76345c3558ecc

* Restructure coverage (google/riscv-dv#569) (weicaiyang)
* Add --seed_start argument and tidy up seed handling (google/riscv-
  dv#570) (Rupert Swarbrick)
*  Move `sext.b/h` bitmanip instructions to ZB_TMP (google/riscv-
  dv#573) (weicaiyang)
* PR to minor fix for running riscv_asm_program_gen.py (google/riscv-
  dv#571) (Hai Hoang Dang)
* Quickly fix broken link (google/riscv-dv#568) (weicaiyang)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: a3254309======
======Short Message======
Add a --start_seed argument to core_ibex/sim.py
======Full Message======
Add a --start_seed argument to core_ibex/sim.py

If --iterations is 1, this is equivalent to the existing --seed
argument (which we're keeping unchanged). If --iterations is
0 (reading iteration counts from the config) or positive, successive
test iterations use successive seeds. So if you pass --start_seed 123
and run ten iterations, they will run with seeds 123, 124, ... through
133.

Lots of the added code is to check that you don't do something silly
like --seed=123 --iterations=10. Since the next patch will convert the
Makefile which runs this script to using --start_seed, that's all dead
code. Maybe we should get rid of that argument at some point.



======Commit: 8934267c======
======Short Message======
[rtl] Fix instr_valid_i exception issue
======Full Message======
[rtl] Fix instr_valid_i exception issue

- The controller state machine could only progress to FLUSH to handle an
  exception if instr_valid_i was set
- When the exception comes from a load/store in the Writeback stage, and
  no new instruction has been driven into the ID stage, this could cause
  exception to be missed
- The instr_valid_i qualification is therefore removed from the state
  machine as all relevant signals inside that if block are already
  qualified by instr_valid_i anyway
- Fixes #849

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 5fd3cad9======
======Short Message======
[config] Change default PMPNumRegions
======Full Message======
[config] Change default PMPNumRegions

Change default to 4 rather than 0. Makes no difference when PMPEnable==0
and gets rid of lint failures due to 0 array referencing (0 is an
unsupported value for this parameter).

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: d19189ba======
======Short Message======
[rtl] data-independent execution for multdiv_slow
======Full Message======
[rtl] data-independent execution for multdiv_slow

- Remove all early exit's from multiply and divide operations when in
  fixed time execution mode.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 0ba0ad5a======
======Short Message======
[rtl] multdiv_slow general tidy-up
======Full Message======
[rtl] multdiv_slow general tidy-up

- Correct some typos and fix various lint / style guide issues
- No functional changes

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 0afd000a======
======Short Message======
[bitmanip] Add ZBE Instruction Group
======Full Message======
[bitmanip] Add ZBE Instruction Group

This commit implements the Bit Manipulation Extension ZBE instruction
group: bext (bit extract) and bdep (bit deposit).

Architectural details:
        * bext/bdep: A new butterfly and inverse butterfly network is
        implemented. The generation of its controlbits depend on a
        parallel prefix bitcount of the deposit / extract mask.

        * bitcounter: The path for bext / bdep instructions traverses
        the bit counter and the butterfly network, resulting in both a
        larger delay and area. To mitigate the bitcounter has been
        changed from a serial bit counter to a radix-2 tree structure.

        * grev/gorc: Zbp instructions general reverse and general
        or-combine have as of yet shared the shifters reversal
        structure. It has proven benefitial to area and timing to reuse
        the novel butterfly network instead

The butterfly network itself consumes ~3.5kGE and ~1.1kGE for synthesis
with tight and relaxed timing constraints respectively. Including the
optimizations of the bitcounter and grev/gorc, the overall change in
area consumption is +4.6kGE (+1.2kGE) and +3.3kGE (+1.1kGE) for
synthesis with tight (relaxed) timing constraints for 2- and 3-stage
configurations respectively. For tight timing constraints that is a
growth by around ~10%, for relaxed ~5%.

The impact on the maximum frequency is negligable.

Signed-off-by: ganoam <gnoam@live.com>



======Commit: 22b0609b======
======Short Message======
Weaken some checks on cache in ibex_icache_core_protocol_checker
======Full Message======
Weaken some checks on cache in ibex_icache_core_protocol_checker

Once the cache has passed an error to the core, we now allow it to
wiggle its valid, addr, rdata, err and err_plus2 lines however it sees
fit until the core issues a new branch.

Since the core isn't allowed to assert ready until then, the values
will not be read and this won't matter.

This was exposed by

  make -C dv/uvm/icache/dv run SEED=1314810947 WAVES=1



======Commit: d51d9700======
======Short Message======
Fix assertion in ibex_icache_core_protocol_checker
======Full Message======
Fix assertion in ibex_icache_core_protocol_checker

This assertion is supposed to say "the core may not request more data
from the cache when there's no valid address".

Unfortunately, I'd represented "requesting more data" by req being
high, rather than ready being high. This is wrong: req is a signal
saying "the core isn't currently asleep". ready (of a ready/valid
pair) is the one I wanted.



======Commit: 4814b677======
======Short Message======
Update google_riscv-dv to google/riscv-dv@162ea73
======Full Message======
Update google_riscv-dv to google/riscv-dv@162ea73

Update code from upstream repository https://github.com/google/riscv-
dv to revision 162ea7312d21ac0b8ae73669fb68bf284b68f851

* Add experimental python based generator (google/riscv-dv#567)
  (taoliug)
* Check return code for ovpsim (google/riscv-dv#566) (taoliug)
* fix bug in PMP handler routine (google/riscv-dv#562) (udinator)

Signed-off-by: Udi <udij@google.com>



======Commit: ff5c0c58======
======Short Message======
Always assert ready in core driver for ICache UVM testbench
======Full Message======
Always assert ready in core driver for ICache UVM testbench

This works around a bug tracked in issue #850.



======Commit: 4f349a09======
======Short Message======
Specify "-xlrm uniq_prior_final" for VCS
======Full Message======
Specify "-xlrm uniq_prior_final" for VCS

As discussed in issue #845, this tells VCS to wait for signals to
settle in combinatorial blocks before checking uniqueness in
constructs like unique case.

Otherwise things like this can cause spurious warnings:

  always_comb b = ~in;

  always_comb c = in;

  always_comb begin
    unique case (1'b1)
      b: x = 1;
      c: x = 0;
      default: x = 0;  // not that it matters, but this won't happen
    endcase
  end

For example, on a falling edge of the in signal, if the processes are
executed in the order 1, 3, 2 then the unique case block will appear
to see both b and c true at the same time.



======Commit: 15ab023e======
======Short Message======
[rtl] Stop regfile writeback for load errors
======Full Message======
[rtl] Stop regfile writeback for load errors

- A data or PMP error should stop the register file from being updated
- Fixes #832

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 7dafdf64======
======Short Message======
[dv/fcov] Fix Ibex log parsing script
======Full Message======
[dv/fcov] Fix Ibex log parsing script

Signed-off-by: Udi <udij@google.com>



======Commit: 717cb90a======
======Short Message======
Rework choosing new seeds in icache UVM memory model
======Full Message======
Rework choosing new seeds in icache UVM memory model

The flow for a memory fetch is:

  1. Cache requests data for a memory address
  2. Agent spots the request, maybe signalling a PMP error
  3. Grant line goes high, at which point the request is granted.
  4. Sometime later (in-order pipeline), agent sends a response

Occasionally, we need to pick a new seed for the backing memory.
Before this patch, we picked these seeds at point (3).

Unfortunately this was wrong in the following case:

  1. We're switching from seed S0 to seed S1.
  2. The request is spotted with seed S0 and doesn't signal a PMP error
  3. The request is granted and we switch to seed S1.
  4. We respond with data from memory based on S1, with no memory
     error either

If S1 would have caused a PMP error, the resulting fetch (no error,
but data from S1) doesn't match any possible seed and the scoreboard
gets confused.

This patch changes to picking new seeds at (2) to solve the problem.
This isn't quite enough by itself, because if a request is granted on
a clock-edge, a new request address might appear and there isn't a
guaranteed ordering in the simulation between the new request and the
old grant (both things happen at the same time). To fix this, the
response sequence now maintains a queue of requests and their
corresponding seeds to make sure that all the checks for a fetch are
done with a single seed.

The patch also gets rid of the seed state in the memory model: it
turns out that this didn't really help: the scoreboard is always
asking "what would I get with this seed?" and now the sequence is
doing something similar.



======Commit: c862f104======
======Short Message======
[rtl] icache error signalling fix
======Full Message======
[rtl] icache error signalling fix

- Data valid should only be signalled when the current beat is
  signalling an error
- PMP errors for future beats can sneak in while waiting for the
  current beat

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 5bcacb87======
======Short Message======
[rtl] Fix jump signal stuck high during stall
======Full Message======
[rtl] Fix jump signal stuck high during stall

- Stalls due to preceding memory accesses in the WB stage shouldn't
  cause the jump signal to remain high.
- The jump signal being stuck high causes repeated memory accesses to
  the same address, and unnecessary stalling.
- Fixes lowRISC/opentitan#2099

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: fd01562f======
======Short Message======
[doc] Minor fixes
======Full Message======
[doc] Minor fixes

Signed-off-by: Pirmin Vogel <vogelpi@lowrisc.org>



======Commit: 439513ba======
======Short Message======
Fixes to invalidation logic in icache core agent
======Full Message======
Fixes to invalidation logic in icache core agent

Firstly, the pulse shouldn't be zero length (since that wouldn't
actually do anything).

Also, 1 time in 500 is too rare for either invalidations or "long
invalidations", I think, so this patch also increases how often we see
each.



======Commit: f717c04a======
======Short Message======
Initial icache scoreboard
======Full Message======
Initial icache scoreboard

This correctly tracks fetch addresses and fetched data. It understands
changing memory seeds, errors, invalidations and enable/disable.

Most of the complexity is in checking whether a fetch got the right
answer, given the set of memory seeds that it might have used. This
isn't conceptually hard (use a local memory model; check each seed and
see whether it matches), but is a bit fiddly in practice. In
particular, a misaligned 4-byte load might actually correspond to two
different seeds: note the nested loops in check_compatible_2.

The general flow of these checks is:

     check_compatible
  -> check_compatible_<i>    (loop over plausible seeds)
  -> is_seed_compatible_<i>  (ask the memory what data to expect)
  -> is_fetch_compatible_<i> (compare seen/expected data)

Note that the check_compatible_<i> functions have a "chatty"
parameter. This is to help with debugging when something goes wrong:
if the check fails then the check_compatible function calls it again
with chatty=1, which dumps a list of the seeds we checked and why they
didn't match.

Other than the scoreboard itself, this patch also adds a "seed" field
to ibex_icache_mem_bus_item. This is used by the monitor to inform the
scoreboard when a new memory seed has been set. Obviously, this
doesn't correspond to any actual monitored signals, but we need some
sort of back channel, and this looked like a sensible way to do it.

The patch also stops reporting PMP responses to the scoreboard: it
turns out the scoreboard doesn't need to care about them, so we can
simplify things slightly this way.

At the moment, the scoreboard doesn't check that fetched data isn't
stored when the cache is disabled. You could see this by disabling the
cache, fetching from an address, enabling the cache and changing the
memory seed, and fetching from the address again. I think it would be
reasonably easy to make an imprecise version of the check, where a
seed gets discarded from the queue if its live period is completely
within a period where the cache was disabled, but I want to wait until
we've got some tests that actually get cache hits before I implement
this.

There's also a slight imprecision in the busy line check that needs
tightening up.

Both of these to-do items have TODO comments in the code.



======Commit: be9af77b======
======Short Message======
[dv] makefile:cov LSF arg fix
======Full Message======
[dv] makefile:cov LSF arg fix

Signed-off-by: Udi <udij@google.com>



======Commit: 7919c7db======
======Short Message======
Re-enable PMP/MEM errors in icache testbench
======Full Message======
Re-enable PMP/MEM errors in icache testbench

This reverts the top commit from PR #793, which is no longer
necessary (since our parent commit, which corrects the core's
behaviour).



======Commit: 99471e5d======
======Short Message======
Always branch after an error in icache UVM tests
======Full Message======
Always branch after an error in icache UVM tests

If the cache returns an error to the core, the core must then issue a
branch before it tries to fetch again from the cache. This patch makes
this work by getting the core driver to respond with a (newly defined)
ibex_icache_core_rsp_item containing an error flag.



======Commit: 272e3552======
======Short Message======
Fix UVM Makefiles to match updated dvsim from previous patch
======Full Message======
Fix UVM Makefiles to match updated dvsim from previous patch



======Commit: 6a557b47======
======Short Message======
Update dvsim to lowRISC/opentitan@1d17b122
======Full Message======
Update dvsim to lowRISC/opentitan@1d17b122

Update code from subdir util/dvsim in upstream repository
https://github.com/lowRISC/opentitan to revision
1d17b1225d324c81da522c69317335a83edd5ddb

* [dvsim] PEP8 fixes in dvsim (Rupert Swarbrick)
* [dvsim] Fix PEP8 error and slightly tidy code in testplan_utils.py
  (Rupert Swarbrick)
* [dvsim] Correct bug in regression creation in dvsim's Modes.py
  (Rupert Swarbrick)
* [dv] Enable xcelium coverage publish (Weicai Yang)
* [tool/dvsim] Enable Xcelium coverage and clean up email arg (Cindy
  Chen)
* [dv] add send email option to dvsim.py (Cindy Chen)
* [util/dvsim] Convert time to UTC timezone (Eunchan Kim)
* [dvsim] Fix broken link of xbar testplan (Weicai Yang)
* [dvsim] Add CTRL-C support (Weicai Yang)
* [dvsim] Initial verible lint integration (Michael Schaffner)
* [dvsim] Add control of max job submission per second (Weicai Yang)
* [dv/tool] Add support to choose sub-cfgs (Cindy Chen)
* [dvsim] Enable coverage collection with Xcelium (Srikrishna Iyer)
* [dvsim] Update lint flow due to changes in synthesis (Michael
  Schaffner)
* [dvsim] Synthesis target integration (Michael Schaffner)
* [dvsim] Added fusesoc generator for RAL (Srikrishna Iyer)
* [dvsim] Fix summary table (Greg Chadwick)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: 39b6bdf2======
======Short Message======
Update dv_lib to lowRISC/opentitan@1d17b122
======Full Message======
Update dv_lib to lowRISC/opentitan@1d17b122

Update code from subdir hw/dv/sv/dv_lib in upstream repository
https://github.com/lowRISC/opentitan to revision
1d17b1225d324c81da522c69317335a83edd5ddb

* [dv] Add excl for rstmgr, pwrmgr and fix top-level csr test (Weicai
  Yang)
* [dv] Allow dv_lib-based sequences to have different RSP/REQ types
  (Rupert Swarbrick)
* [dv] Support WO, RO type for mem (Weicai Yang)
* [dv,sw] SW -> DV tb self-checking mechanism - SV (Srikrishna Iyer)
* [dv/top] Fix csr rw test (Cindy Chen)

Signed-off-by: Rupert Swarbrick <rswarbrick@lowrisc.org>



======Commit: 3782d15b======
======Short Message======
Don't fetch on the same cycle as a branch in the icache core agent
======Full Message======
Don't fetch on the same cycle as a branch in the icache core agent

The actual core might signal ready at the same time as branching. If
it does so, it will ignore any data that comes back on that
cycle (since it's redirecting the fetch either way).

The test code monitor wasn't ignoring the fetch. In practice, this
doesn't usually matter, because the cache works correctly(!) and the
data is what we expect. However, it isn't quite right if we saw an
error on the previous cycle. In this case, the cache can carry on
responding with errors, which all gets a bit confusing, and also
confuses my prototype scoreboard.



======Commit: 8f348d73======
======Short Message======
Fix scheduling for PMP errors in icache testbench
======Full Message======
Fix scheduling for PMP errors in icache testbench

The previous approach didn't work because of possible ordering
problems that make it difficult to convert between "combinatorial
signals" and transactions.

When things are aligned with a clock edge, you solve this problem with
a clocking block (which, by default, guarantees to sample "just after"
the clock edge, once the signals have settled). Since this signal is
not aligned with a clock, we have to be a little more careful.

Before and after this patch, the code in the monitor is "eager" and
might send glitchy transactions through to the sequence, which ends up
passing the data back to the driver. This patch teaches the driver to
cope with that, by passing the address that caused a PMP error as part
of the memory response. Armed with that address, the driver can figure
out whether the error flag applies to what's currently on the bus, or
whether it's a few delta cycles behind, in which case it can safely
just drop the glitch.



======Commit: 82337cf1======
======Short Message======
Delete stray debug print from ibex_icache_mem_resp_seq
======Full Message======
Delete stray debug print from ibex_icache_mem_resp_seq



======Commit: 1b024135======
======Short Message======
[dv] Fix Xcelium compilation
======Full Message======
[dv] Fix Xcelium compilation

Need these fixes in order to pass Xcelium compile in OpenTitan

Signed-off-by: Weicai Yang <weicai@google.com>



======Commit: eb4913c8======
======Short Message======
[rtl/icache] Fix some issues in icache
======Full Message======
[rtl/icache] Fix some issues in icache

- valid_o needs qualifying with output_error to mask X's in the output
  data.
- err_plus2_o should not depend on the output data, only the alignment and
  error status are relevant. Also needs skid_valid_q to mask
  skid_error_q which is not reset.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: edd8e1d2======
======Short Message======
[bitmanip] Fix: Oversight in Tracer ZBT DV fail
======Full Message======
[bitmanip] Fix: Oversight in Tracer ZBT DV fail

Failing to read rd in tracer for fsri caused bitmanip DV test to fail.

Signed-off-by: ganoam <gnoam@live.com>



======Commit: 73155145======
======Short Message======
[rtl/lsu] Fix bug in pmp error clearing
======Full Message======
[rtl/lsu] Fix bug in pmp error clearing

- pmp_err_q needs to clear once the LSU state machine returns to idle,
  otherwise it will remain set indefinely.
- Relates to #808

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 321a3d26======
======Short Message======
[dv] fix spurious LSF enabling
======Full Message======
[dv] fix spurious LSF enabling

Signed-off-by: Udi <udij@google.com>



======Commit: 3c11c959======
======Short Message======
[doc] Link to RISC-V Debug Specification
======Full Message======
[doc] Link to RISC-V Debug Specification

Unfortunately, no versioned links to the PDF are available (at least I
couldn't find one), so only link the entry page for the spec.



======Commit: 38912e11======
======Short Message======
[doc] Add note about debug system integration
======Full Message======
[doc] Add note about debug system integration

Ibex only provides the necessary interfaces and core-internal
functionality for run-control debug. To get a fully working,
"debuggable" toplevel design, more components are needed. Describe where
to get them from, and include OpenTitan as an exemplary integration.



======Commit: cf33bfea======
======Short Message======
Temporarily disable PMP/MEM errors in icache testbench
======Full Message======
Temporarily disable PMP/MEM errors in icache testbench

This allows tests to run to completion. Unfortunately, the core agent
currently has a bug in how it handles errors (if a sequence item
terminates with an error and is followed by a 'req' sequence item, the
test hangs).

I'll fix that in a separate patch soon (and revert this commit), but
don't want the memory agent changes to depend on the fix.



======Commit: 5cd874ea======
======Short Message======
Initial memory agent for ICache UVM testbench
======Full Message======
Initial memory agent for ICache UVM testbench

As with the core agent, this doesn't yet have any proper monitoring,
and the testbench has no scoreboard, so we're not actually checking
anything.

However, it *does* implement a slave agent which can respond to
instruction fetches from the icache. This runs a test to completion,
try:

   make -C dv/uvm/icache/dv run WAVES=1

Note that the timeout in the hjson file was too small, so this bumps
it to a larger value. A later patch will replace the timeout with a
heartbeat monitor, which should be much cleaner.

The exact dance for the UVM reactive slave is complicated. See
dv/uvm/icache/dv/ibex_icache_mem_agent/README.md for the details.



======Commit: a3a1f9f4======
======Short Message======
[rtl] Fix icache PMP error handling
======Full Message======
[rtl] Fix icache PMP error handling

- Requests receiving a PMP error need to output a valid indicator, even
  though they will not have received any beats of data

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: dc8ba83d======
======Short Message======
[memutils] Add support for > 32b memories
======Full Message======
[memutils] Add support for > 32b memories

Pack > 32bit memory loads into wider RAM instances. Fixes #790

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: b4e5d918======
======Short Message======
[dv] fix PMP compile option, update basic pmp test
======Full Message======
[dv] fix PMP compile option, update basic pmp test

Signed-off-by: Udi <udij@google.com>



======Commit: d6d23917======
======Short Message======
Fix rst syntax
======Full Message======
Fix rst syntax

Signed-off-by: Michael Gielda <mgielda@antmicro.com>


======Commit: 2be109ec======
======Short Message======
Update google_riscv-dv to google/riscv-dv@42264b7
======Full Message======
Update google_riscv-dv to google/riscv-dv@42264b7

Update code from upstream repository https://github.com/google/riscv-
dv to revision 42264b7782a10848935e995063c212893820e561

* fix pmp generation in bare program mode (Udi Jonnalagadda)
* Use literal instead array concatenation (Daniel Mlynek)
* fix access rights (Daniel Mlynek)
* fix in WA fo Aldec Riviera rand cannot be defined in packed struct
  (Daniel Mlynek)
* Fix ius compile error (Weicai Yang)
* fix pmp randomization to adhere to max offset (Udi Jonnalagadda)
* Add options to enable bitmanip by group (google/riscv-dv#532)
  (weicaiyang)
* [pmp] Relative addressing scheme to configure pmpaddr (google/riscv-
  dv#534) (udinator)
* redunant variable ALDEC_PATH removed (danielmlynek)
* riviera 2020.04 beta initial support (danielmlynek)
* Removed  system function call from the gen_section() function
  arguments list. (google/riscv-dv#531) (Dariusz Stachańczyk)
* Dynamic arrays declared as parameter changed to const variables.
  (google/riscv-dv#530) (danielmlynek)
* enhance pmp configuration to make safe region configurable (Udi
  Jonnalagadda)
* Fix a typo in riscvOVPsim (google/riscv-dv#529) (weicaiyang)

Signed-off-by: Udi <udij@google.com>



======Commit: 06f50dde======
======Short Message======
Bugfix: Generate Erroneous Illegal Insn
======Full Message======
Bugfix: Generate Erroneous Illegal Insn

This commit fixes three possible cases for erroneous generation of
illegal instruction signals. Also, the bit-slices considered for
decoding ALU instructions are corrected to better reflect their
encoding specifications.

* Fix decoding of orc_b in illegal_insn generation.

* Insn[31] is no longer checked for generation of illegal instructions:
        This bit is part of the rs3 register adress for ternary
        bitmanipulation instructions (zbt).

* Correct bit-slicing for ALU reg-immediate instructions according
        to specification: immediates are encoded in the range
        insn[26:20] in all cases. Where a shift-amount is encoded, bits
        [26:25] will have no effect, but will no longer generate
        illegal instructions.

Signed-off-by: ganoam <gnoam@live.com>



======Commit: 5a188342======
======Short Message======
Add clocking blocks to the ibex_icache_core_agent
======Full Message======
Add clocking blocks to the ibex_icache_core_agent

Since this agent doesn't currently do any monitoring (will be
addressed in a later patch), the monitor_cb clocking block doesn't do
very much at the moment.

The driver_cb clocking block *is* used, though. The input lines are just
those needed to drive things correctly (ready is needed to do
ready/valid signalling properly; err is needed to abort instruction
fetches and do a branch after an error).

I've marked the output signals as negedge: this doesn't really make
any difference to simulation results, since the design samples
everything on posedge, but makes it rather easier to read dumped
waves.



======Commit: bce473b1======
======Short Message======
Fix variable names in icache scoreboard code
======Full Message======
Fix variable names in icache scoreboard code



======Commit: a93fc88f======
======Short Message======
Fix scratch-root in icache/dv/Makefile
======Full Message======
Fix scratch-root in icache/dv/Makefile



======Commit: db6f8f05======
======Short Message======
Teach check_tool_requirements to check for edalize versions
======Full Message======
Teach check_tool_requirements to check for edalize versions

We need this specific edalize version because recent verilators have
got pickier about string parameter passing, breaking the
"MultiplierImplementation" parameter.

As well as teaching check_tool_requirements.py to get the edalize
version from pip3, this patch also does a bit of tidying up, coping
better if tool_requirements.py is missing or malformed.



======Commit: 754a8f3d======
======Short Message======
Add a simple Makefile to wrap running dvsim for icache tests
======Full Message======
Add a simple Makefile to wrap running dvsim for icache tests

This patch also includes a hacky test timeout. We'll remove this (or
at least make it bigger) when we start actually running data through
the tests, but this is handy for now because it means simulations
finish without having to pkill them.



======Commit: ba9b1374======
======Short Message======
Switch from 'bool' to 'int' parameters in fusesoc core files
======Full Message======
Switch from 'bool' to 'int' parameters in fusesoc core files

Fusesoc has an unfortunate bug[1] where a boolean parameter which has
default true can't be disabled. For now, just make all our boolean
parameters back into integers again. In the future, when that's fixed,
maybe we should switch things back.

[1] https://github.com/olofk/fusesoc/issues/392



======Commit: 5da42b15======
======Short Message======
[ci] Fix multi-config CI
======Full Message======
[ci] Fix multi-config CI

Multi-config CI wasn't actually trying multiple configurations. This
fixes that issue and uses a less fragile method of producing fusesoc
options. They are generated once and stored in a variable so we cannot
accidentally break one or more steps by using an incorrect
ibex_config.py command in one step whilst using a correct
ibex_config.py in the display step (which is also intended to check the
ibex_config.py command is correct).



======Commit: 97a50d7f======
======Short Message======
[rtl] Add fixed time execution of branches
======Full Message======
[rtl] Add fixed time execution of branches

- A new parameter and a run-time control bit (DataIndTiming and
  data_ind_timing) enabling different behaviour for running security critical
  code sections.
- In the new mode, all branches act as if taken, with not-taken
  branches executing as a branch to the next instruction.
- This should give similar execution time/power characteristics
  regardless of the branch condition.
- Note that with the BranchTargetALU, branches stall an extra cycle in
  secure mode to avoid factoring the branch-taken decision into the
  branch target address mux.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 58c0e333======
======Short Message======
[dv] fix timing issue in ebreakmu_test
======Full Message======
[dv] fix timing issue in ebreakmu_test

Signed-off-by: Udi <udij@google.com>



======Commit: 47678a85======
======Short Message======
[dv] Fix running on LSF
======Full Message======
[dv] Fix running on LSF

Signed-off-by: Udi <udij@google.com>



======Commit: 1d2959e0======
======Short Message======
[dv] Record failure on log processing error
======Full Message======
[dv] Record failure on log processing error

Previous to this change the entire process would die on an issue with
processing a single log. This alters it so this will just add to the
failure count with the error logged and the log processing continued to
its end.



======Commit: 75148da5======
======Short Message======
[dv] Quit on UVM errors by default
======Full Message======
[dv] Quit on UVM errors by default



======Commit: 08521204======
======Short Message======
[rtl] Fix xprop issues in cs_registers
======Full Message======
[rtl] Fix xprop issues in cs_registers

Alter how logic for csr_wreq was written to not propagate X when using
certain more pessimistic modes of x propagation in simulation.



======Commit: e1b3cd18======
======Short Message======
[dv] fix DSim simulation command options (#760)
======Full Message======
[dv] fix DSim simulation command options (#760)

Signed-off-by: Udi <udij@google.com>


======Commit: add91d54======
======Short Message======
[dv] fix timing issue in single_step test (#749)
======Full Message======
[dv] fix timing issue in single_step test (#749)

Signed-off-by: Udi <udij@google.com>


======Commit: 230e8796======
======Short Message======
[ci] Add Ibex with RV32B to configurations
======Full Message======
[ci] Add Ibex with RV32B to configurations

Note this doesn't introduce any testing of the RV32B instructions,
simply runs existing tests on a configuration with the RV32B extension
enabled.

Fixes #745



======Commit: f90877b7======
======Short Message======
Fix destination for dumped waves in dv/uvm
======Full Message======
Fix destination for dumped waves in dv/uvm

The previous code correctly dumped to "waves.fsdb" if you had Verdi
installed. Unfortunately, it dumped to the same file name if you
didn't, which was rather confusing.

This patch passes a "DUMP_BASE" environment variable, rather than
"DUMP_FILE", which doesn't include the extension. Then it appends the
correct extension at runtime in the TCL, when we tell VCS what sort of
dumping to do.

The code now also checks for all environment variables before reading
them, allowing defaults if they don't exist. The defaults might not be
what you want, but a syntax error at this point causes VCS to sit
waiting for terminal input (with no stdin!), which is kind of annoying.

I've also removed the copy-pasted Verdi documentation. Apart from
anything else, this is probably copyright, so we shouldn't have a copy
in the repo!



======Commit: 08f2271c======
======Short Message======
[rtl] Unify top-level parameter declaration
======Full Message======
[rtl] Unify top-level parameter declaration

- Make parameter declaration order and default values in
  ibex_core_tracing.sv match the documentation

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: ea2ffe82======
======Short Message======
[rtl/pmp] Fix PMP error prioritization
======Full Message======
[rtl/pmp] Fix PMP error prioritization

- Region matches should be prioritized from 0 - N as stated in the RISCV
  Privileged Spec v1.11

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 158e9b97======
======Short Message======
Clarify a couple of points in icache documentation
======Full Message======
Clarify a couple of points in icache documentation

When a PMP error comes in, the cache doesn't quite behave as if the
request was granted (if it did: it would wait forever for a response).
Hopefully this version is a bit clearer.

Also, this makes explicit that the upper bits of a 16-bit instruction
fetch can be bogus.



======Commit: 1002b83a======
======Short Message======
Factor out ibex_pkg.sv into a separate core file
======Full Message======
Factor out ibex_pkg.sv into a separate core file

The ibex_pkg.sv file is effectively a "header" with useful defines;
we need them in ibex_tracer_pkg.sv, and in other places around Ibex.
Currently, the dependency between ibex_tracer_pkg.sv and ibex_pkg.sv
wasn't covered in a FuseSoC core file, leading to unstable behavior.

This patch adds this dependency by
- factoring out the ibex_pkg.sv file into a separate core file,
  ibex_pkg.core, and
- adding a dependency on the new ibex_pkg core to the ibex_tracer core.



======Commit: 209d7e0e======
======Short Message======
Fix description of ISA extensions in core file
======Full Message======
Fix description of ISA extensions in core file



======Commit: e1aac073======
======Short Message======
[rtl] Lint fixes
======Full Message======
[rtl] Lint fixes



======Commit: b897300c======
======Short Message======
[rtl] Branch signal timing fix
======Full Message======
[rtl] Branch signal timing fix

- Before this fix, the branch signal was qualified by the illegal
  instruction signal and the illegal csr signal.
- This patch removes both of these since the decoder already masks
  branches with illegal isntruction, and a branch cannot be a CSR op.
- This improves the worst path in the design significantly without the
  branch target ALU.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: e70213d0======
======Short Message======
Fix incorrect indentation in sim.py
======Full Message======
Fix incorrect indentation in sim.py



======Commit: bdfe8de0======
======Short Message======
Update GCC to include bitmanip patches
======Full Message======
Update GCC to include bitmanip patches

Use a toolchain in CI which has support for experimental bitmanip
patches. This toolchain is based on GCC 9.2.0 with additional bitmanip
patches, and reports itself as 10.0 experimental.

The toolchain was prepared by Luís Marques in
lowRISC/lowrisc-toolchains#11. Thanks!

Addresses part of #703



======Commit: 3c561e41======
======Short Message======
[rtl/icache] Fix an inconsistency in data output
======Full Message======
[rtl/icache] Fix an inconsistency in data output

- valid_o could be asserted for one cycle then dropped when receiving
  rvalid data for a request which has branched into  the middle of a
  line.
- This fix keeps valid_o asserted by using the offset version of
  fill_rvd_cnt_q (fill_rvd_beat) to compare against fill_out_cnt_q
  (which is also offset by the branch).

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 2c198383======
======Short Message======
Update google_riscv-dv to google/riscv-dv@5baf82a (#723)
======Full Message======
Update google_riscv-dv to google/riscv-dv@5baf82a (#723)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 5baf82a24347dae3cb71c8ab66a66494666d2291

* Fix illegal func3/func7 instruction generation for B-extension
  (google/riscv-dv#525) (taoliug)
* more tightly constrain pmpaddr values (google/riscv-dv#524)
  (udinator)
* Update style check (Weicai Yang)
* Bump verible (Tomasz Gorochowik)
* Add target for B-extension (google/riscv-dv#521) (taoliug)
* [cov] tag coverage database directories with <test_id> (Udi
  Jonnalagadda)
* Add bit manipulation (google/riscv-dv#518) (weicaiyang)
* Don't change input file in spike_log_to_trace_csv.py (google/riscv-
  dv#504) (Rupert Swarbrick)
* Fix ius constraint solver failure (google/riscv-dv#515) (taoliug)
* Fix AMO sequence address generation issue (google/riscv-dv#514)
  (taoliug)
* Remove alignment constraint (google/riscv-dv#513) (taoliug)
* Add section for each data region (google/riscv-dv#512) (taoliug)

Signed-off-by: Udi <udij@google.com>


======Commit: 3af3e72b======
======Short Message======
[dv] fix irq timing in irq_in_debug_mode_test (#720)
======Full Message======
[dv] fix irq timing in irq_in_debug_mode_test (#720)

Signed-off-by: Udi <udij@google.com>


======Commit: 0a540cff======
======Short Message======
[rtl/icache] Fix a couple of icache bugs
======Full Message======
[rtl/icache] Fix a couple of icache bugs

- Speculative requests observing a PMP error shouldn't increment the
  external request counter
- Remove redundant logic on fill_rvd_exp

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: e9171001======
======Short Message======
[verilator] Fix --term-after-cycles
======Full Message======
[verilator] Fix --term-after-cycles

The option to limit the verilator simulation's maximum number of cycles was
implemented in terms of the `time_` variable, which counts half cycles. This
patch makes the limit respect the requested number of full cycles.

The patch divides `time_` by 2, instead of multiplying `term_after_cycles_`
by 2, as that better conveys the intended semantics, and slightly increases
the range of the limit. Related computations were modified for consistency.



======Commit: 56e4f48b======
======Short Message======
[dv] workaround for dsim compile error (#716)
======Full Message======
[dv] workaround for dsim compile error (#716)

Signed-off-by: Udi <udij@google.com>


======Commit: 42aa761c======
======Short Message======
[rtl] Fix mtval for unaligned instr errors
======Full Message======
[rtl] Fix mtval for unaligned instr errors

mtval should record which half of the instruction caused the error
rather than just recording the PC.
An extra signal is added in the IF stage to indicate when an error is
caused by the second half of an unaligned instruction. This signal is
then used to increment the PC by 2 for mtval capture on an error.

Fixes #709



======Commit: 8bb649e4======
======Short Message======
[rtl/icache] Fix PMP error logic
======Full Message======
[rtl/icache] Fix PMP error logic

Instruction requests triggering PMP errors have their external request
suppressed. The beat counting logic therefore needs to know that these
requests will never receive any rvalid data responses.

This fix stops the external request counter from incrementing, and marks
all external requests complete as soon as any error is received.

The data in the cache line beyond the error is not required since the
core cannot access it without consuming the error first.



======Commit: 4fcf72db======
======Short Message======
Add Verible lint as one lint option
======Full Message======
Add Verible lint as one lint option

This extends the core file to be able to call Verible for lint.

This requires an updated version of edalize with
https://github.com/olofk/edalize/issues/95 fixed. For the time being, we
use the same 'ot' branches of those tools as we do in OpenTitan. Once
Verible becomes officially supported we need to ensure that released
versions of fusesoc and edalize exist, and that this requirement is
properly documented.



======Commit: 854faeda======
======Short Message======
[rtl/icache] Make age matrix more consistent
======Full Message======
[rtl/icache] Make age matrix more consistent

The design currently relies on fill_done remaining set in the cycle
after the fill buffer completes to ensure the fill_older_q entry gets
cleared (when a fill buffer completes in the same cycle that one is
allocated). This fix makes the behaviour a bit more consistent and easy
to reason about.



======Commit: e03aeb1f======
======Short Message======
[CI] Add explicit trigger for branches/PRs
======Full Message======
[CI] Add explicit trigger for branches/PRs

Azure pipelines has stopped triggering, the issue is being fixed but
this works around it for now.



======Commit: efbfecbb======
======Short Message======
Add missing dependencies in uvm/core_ibex/Makefile
======Full Message======
Add missing dependencies in uvm/core_ibex/Makefile

When we run sim.py, we get commands to run the simulator from the YAML
file named by the --simulator_yaml argument, which defaults to
yaml/rtl_simulation.yaml.

This patch makes the argument explicit in the Makefile and adds a
dependency on that file for commands that read it.



======Commit: 5773a1cd======
======Short Message======
Explicitly pass directory for waves to VCS's UCLI TCL
======Full Message======
Explicitly pass directory for waves to VCS's UCLI TCL

This fixes a bug mentioned in issue #674, where dumped wave files were
ending up in dv/uvm/core_ibex, rather than a test-specific output
directory.

It turns out that this is because of my change in commit 08fc2a4,
which runs the simulator in the top core_ibex directory, rather than
changing directories each time. We have to do this to make the
parallel LSF flow work (which presumably has never actually been run,
otherwise we'd have noticed it was broken).

There are two ways I can think of getting this to work. Probably the
cleanest approach is to generate a script for each test, which looks
something like "cd test_dir; setup_stuff; run_simulator". This would
work (and is how I've seen it done in the past), but doesn't really
fit in with the string interpolation/YAML stuff we've got here.

Instead, this patch goes for a hackier approach, where we prefix the
simulation command with "env SIM_DIR=<out>" and then use the SIM_DIR
environment variable in the TCL scripts to figure out where to put the
wave file. This is kind of icky long-term, but should work for now.

I've also got rid of the code that appends some extra plusargs and a
log argument to the simulation command; now, the relevant variables
get substituted in and the actual command is found in
rtl_simulation.yaml.



======Commit: fd0d93dd======
======Short Message======
Explicitly use bash in UVM Makefile
======Full Message======
Explicitly use bash in UVM Makefile

This fixes issue #700



======Commit: 89318059======
======Short Message======
Resolve Questa: Defaulting port to var rather than wire
======Full Message======
Resolve Questa: Defaulting port to var rather than wire

For packed structs used as input/output port, Questa reports
"Defaulting port 'irqs_i' kind to 'var' rather than 'wire'
due to default compile option setting of -svinputport=relaxed."

The relevant help message says:

```
verror 13314:

vlog Message # 13314:
An input port that is declared with a type but without the 'var' keyword
should default to 'wire' for strict LRM conformance. The default compile
option of -svinputport=relaxed is not LRM compliant, and only defaults
4-state scalar or 4-state single dimension vector types to 'wire'.
Consider using -svinputport=net for strict conformance. See the vlog -help
text for other behaviors available with the -svinputport option.
```

In our code base we can rely on the LRM-compliant handling of this
construct and opt into that using `-svinputport=net`.

Fixes #670



======Commit: 1c82c201======
======Short Message======
Remove property from assert message
======Full Message======
Remove property from assert message

Assert macros in prim_assert.sv report the asserted property as part of
the error message if the assertion fails. Doing that requires us to
stringify the property. If the property is multi-line in the source
code, this produces a multi-line string. According to the
SystemVerilog standard, a multi-line string requires a backslash (`\`)
at the end of a line. Adding this backslash through a macro is not
possible (at least to my knowledge), giving us no way to produce a
standards-compliant implementation of the `ASSERT` macros that report
the property as string.

This commit therefore removes the property from the error message if an
assertion fails. It makes these messages less useful, but the
information can still be recovered in a less convenient way through the
name of the assertion, and the file and line numbers. File and line
number were missing from the non-UVM code path before, this commit adds
them there as well.

Fixes #669



======Commit: 39ce39e3======
======Short Message======
Questa qrun: Extra checking for conflicts with
======Full Message======
Questa qrun: Extra checking for conflicts with
always_comb and always_latch variables is done
at vopt time.

Suppress warning vlog-2583 to silence warning
Fixed: #696



======Commit: e89a939b======
======Short Message======
[syn] Place result directories in sub-directory
======Full Message======
[syn] Place result directories in sub-directory

syn/ filling up with result directories is a little annoying, this sets
up the default so everything ends up generated under syn/syn_out/. Flow
users can easily change this to meet their personal requirements.



======Commit: a28170d6======
======Short Message======
[doc] Fix paths in verification documentation
======Full Message======
[doc] Fix paths in verification documentation

The files moved; also add an explicit `cd` to the command listing to
help people only skimming the docs.



======Commit: 4f31a0e6======
======Short Message======
[rtl] Fixes for single-cycle mutiply
======Full Message======
[rtl] Fixes for single-cycle mutiply

* single cycle multiplier configuration needlessly stalled for a cycle
* mult_hold wasn't being set in mult state machine in single cycle
  multiplier



======Commit: 2a90ef94======
======Short Message======
[rtl] IF stage timing fix
======Full Message======
[rtl] IF stage timing fix

- ready_i input to the prefetch buffer factored both it's own valid_o
  output and the pc_set branch signal, neither of which are required.
- Refactoring the ready_i signal to just id_in_ready_i improves timing
  significantly for the icache.
- Also removed offset_in_init signal which appeared to serve no purpose.



======Commit: 73658abb======
======Short Message======
Fixup module docstring in sim.py
======Full Message======
Fixup module docstring in sim.py

The copyright notice should surely be in a comment, rather than the
docstring. And change the docstring itself to match what the file
does.



======Commit: 08fc2a4a======
======Short Message======
Various cleanups in sim.py's rtl_sim function
======Full Message======
Various cleanups in sim.py's rtl_sim function

This is a bit more verbose, but I think it's a bit more obvious what's
going on, and quite a lot of the added lines are docstrings explaining
the code.

We now split "find the list of commands to run" from "run the
commands" with or without LSF.

The other major change is that the --lsf_cmd parameter defaults to
None, rather than the empty string. The patch also updates the
Makefile accordingly.

Finally, since we're now a little more careful with passing paths
around, we don't have to change cwd for each run. I'm not convinced
that the LSF mode actually worked before, since we needed to run each
command in a different directory. It should probably work now, but I
don't have access to LSF to check.

The only sad thing is that UVM leaves a 'tr_db.log' file lying around
in the current directory. I don't think we really care about the
contents, but can't see how to disable it, so I've added it to
gitignore.



======Commit: cbe58b36======
======Short Message======
Pick a seed per run in sim.py
======Full Message======
Pick a seed per run in sim.py

Before this patch, the default behaviour picked a different random
seed for each test run (and didn't store it anywhere). I think this is
a bit confusing: you can't reproduce the test without digging around
in log files. Now, we pick a seed at the start of the program, print
it, and use it for each test (not as crazy as this sounds: the seed
controls things like random stalls, but the tested program will be
different each time).

Note that this patch won't actually have any effect, since we
currently only use sim.py from dv/uvm/core_ibex/Makefile, which
specifies the seed every time.



======Commit: d934a448======
======Short Message======
Tidy up path name arguments in sim.py
======Full Message======
Tidy up path name arguments in sim.py

Now the defaults for --testlist and --simulator_yaml should work, no
matter where it's called from.



======Commit: 341abb9a======
======Short Message======
Move main program of sim.py into a function
======Full Message======
Move main program of sim.py into a function

This means we can wrap main() in a try/except block. That way, future
patches can change code that fails to throw an exception, rather than
having to do the ugly "write to stderr; exit 1" dance.

This also catches a global (cwd) which we were passing implicitly to
rtl_sim. Fortunately, we already have that value in _CORE_IBEX, so can
just use that.



======Commit: 32ba3cd9======
======Short Message======
It should give error message instead of info message for failure
======Full Message======
It should give error message instead of info message for failure



======Commit: ea654b76======
======Short Message======
[ml] fix irq test for ML (#675)
======Full Message======
[ml] fix irq test for ML (#675)

Signed-off-by: Udi <udij@google.com>


======Commit: 19173290======
======Short Message======
Update google_riscv-dv to google/riscv-dv@6344e95 (#673)
======Full Message======
Update google_riscv-dv to google/riscv-dv@6344e95 (#673)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 6344e951fef22b383551a85365ebb7d6aa74eb34

* fix incorrect initialization routine (Udi Jonnalagadda)
* Add coverage for single precision floating (Part 1) (google/riscv-
  dv#488) (weicaiyang)
* Add load/store shared memory test (google/riscv-dv#508) (taoliug)
* Fix hart id assignment for load/store instruction stream
  (google/riscv-dv#507) (taoliug)

Signed-off-by: Udi <udij@google.com>


======Commit: 57c97536======
======Short Message======
[syn] Synthesis fixes
======Full Message======
[syn] Synthesis fixes

Correcting some small issues that cause newer versions of OpenSTA to
fail (previously it issued an error and continued).

- ABC/OpenSTA disagree how set_driving_cell command works so introduce
  seperate ABC SDC file
- Run clean before generating STA netlist, otherwise yosys generates
  some assignements to unused wires that OpenSTA's verilog parser dislikes



======Commit: 2d1b07a5======
======Short Message======
[ci] Fix removal of vendored files from C/C++ lint
======Full Message======
[ci] Fix removal of vendored files from C/C++ lint



======Commit: 89e5fc11======
======Short Message======
[RTL] Add configurable third pipeline stage
======Full Message======
[RTL] Add configurable third pipeline stage

The third pipeline stage is a new writeback stage. Ibex can now be
configured as the original two stage design or the new three stage
design using the `WritebackStage` parameter in ibex_core. This defaults
to 0 (giving the original two stage design).

The three stage design is *EXPERIMENTAL*

In the three stage design all register write back occurs in the third,
final stage. This allows a cycle for responses to loads and stores so
when the memory system can respond in a single cycle there will be no
stall. This offers significant performance benefits.

Documentation of the three stage design is still to be written so
existing documentation applies to the two stage design only as various
aspects of Ibex behaviour will change in the three stage design.

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: e4b8851b======
======Short Message======
Revert "Re-instate an 0x in dv/uvm/core_ibex/Makefile"
======Full Message======
Revert "Re-instate an 0x in dv/uvm/core_ibex/Makefile"

This reverts commit c32a088f0cd0bdf903d38eb9772e55fd670e08cb.

The bug fixed by this was also fixed in riscv-dv leading to two 0x being
inserted into generated .S files.

Fixes #661



======Commit: 3d827e1d======
======Short Message======
Update google_riscv-dv to google/riscv-dv@4583049 (#660)
======Full Message======
Update google_riscv-dv to google/riscv-dv@4583049 (#660)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 4583049cc2b3469ba9dea56b5e2d75809a89d8f3

* Allow running compile command in LSF (google/riscv-dv#506) (taoliug)
* improve documentation of config options (Udi Jonnalagadda)
* Update AMO region and data sections (google/riscv-dv#503) (taoliug)
* Avoid jumping to a sub program of other harts (google/riscv-dv#502)
  (taoliug)
* Use .section for data sections by default (google/riscv-dv#501)
  (taoliug)
* create PMP accessible region for exception handlers and start/end
  sections (Udi Jonnalagadda)
* minor change to signature_addr passed to generator (google/riscv-
  dv#497) (udinator)
* Solve before cconstraints modified (google/riscv-dv#476) (Dariusz
  Stachańczyk)
* Move instruction sections together for multi-harts (google/riscv-
  dv#495) (taoliug)
* add seed capability to CSR test generation (Udi Jonnalagadda)
* fix pmp/shifted_addr compile warning (google/riscv-dv#493)
  (udinator)
* User long jump to switch between different harts (google/riscv-
  dv#491) (taoliug)
* Fix s_region generation (google/riscv-dv#487) (taoliug)
* update rv32imc/riscv_pmp_test testlist options (google/riscv-dv#486)
  (udinator)
* Fix default value of num_of_harts (google/riscv-dv#485) (taoliug)
* Add shared memory region for multi-harts AMO (google/riscv-dv#484)
  (taoliug)
* Add a runtime option num_of_harts (google/riscv-dv#483) (taoliug)
* Add multi-thread support (google/riscv-dv#482) (taoliug)

Signed-off-by: Udi <udij@google.com>


======Commit: f870acca======
======Short Message======
Remove stray semicolon
======Full Message======
Remove stray semicolon

This seems to cause lint errors with ncsim (see bug #650).



======Commit: c32a088f======
======Short Message======
Re-instate an 0x in dv/uvm/core_ibex/Makefile
======Full Message======
Re-instate an 0x in dv/uvm/core_ibex/Makefile

The --end_signature_addr argument doesn't go to Verilog; instead it
makes it through run.py (vendored-in, so hard to change) and
eventually gets inserted into some assembly code.

Before this patch,

    make ITERATIONS=1 TEST=riscv_csr_test ISS=spike SEED=123

failed with:

  out/seed-123/instr_gen/asm_tests/riscv_csr_test_0.S: Assembler messages:
  out/seed-123/instr_gen/asm_tests/riscv_csr_test_0.S:526: Error: illegal operands `li x2,8ffffffc'
  out/seed-123/instr_gen/asm_tests/riscv_csr_test_0.S:533: Error: illegal operands `li x2,8ffffffc'



======Commit: 88f1a7e3======
======Short Message======
Fix qrun compile warning
======Full Message======
Fix qrun compile warning



======Commit: b932a8bb======
======Short Message======
[rtl] Break path from data_err_o -> instr_req_o
======Full Message======
[rtl] Break path from data_err_o -> instr_req_o

Fixes #649



======Commit: cc402d80======
======Short Message======
[lint] Fix lint waiver
======Full Message======
[lint] Fix lint waiver



======Commit: 98c8cd39======
======Short Message======
Add missing flop to bus error checking in riscv_testutil.sv
======Full Message======
Add missing flop to bus error checking in riscv_testutil.sv

This caused a (verbose!) combinatorial loop error in Verilator.



======Commit: 21063458======
======Short Message======
Fix last verilator warning for ibex_simple_system; add waiver
======Full Message======
Fix last verilator warning for ibex_simple_system; add waiver

If you just build simple_system a fusesoc line like

  fusesoc --cores-root=. run --target=sim --setup \
          --build lowrisc:ibex:ibex_simple_system

then the change to ibex_simple_system.sv suffices, but if you
explicitly set a parameter in fusesoc like this:

  fusesoc --cores-root=. run --target=sim --setup \
          --build lowrisc:ibex:ibex_simple_system \
		  --RV32M=1

then it overrides the default parameter with a literal 1. We declare
the parameter as an 'int', so I guess that's quite a reasonable
behaviour from fusesoc. Anyway, this check only triggers when a 1-bit
parameter is set with a literal 1, so should be safe. (If you do
something buggy like setting it to 2, it will still moan at you). This
patch adds a waiver file in examples/simple_system that silences the
warning.

This patch also makes the equivalent change to riscv_compliance,
adding a waiver file in dv/riscv_compliance/lint and fixing up the
default parameters.



======Commit: 53ecd977======
======Short Message======
Simplify the logic in check_ibex_uvm_log
======Full Message======
Simplify the logic in check_ibex_uvm_log

Also fix a minor nit: if something had gone really weird and we saw
a pass message followed by a fail message, the previous code would
have treated the test as a pass. Now it is treated as a failure.



======Commit: d260dea9======
======Short Message======
Simplify usage of ibex_log_to_trace_csv.py
======Full Message======
Simplify usage of ibex_log_to_trace_csv.py

The previous version died with a confusing error if you ran it with no
arguments (because the compulsory input and output file paths are
specified as --option arguments).

I've left the arguments optional, but they now default to
stdin/stdout (which means you can now use this script in a pipe).

I've also reformatted the code I touched to look a little more like
PEP8 Python.



======Commit: 7df14341======
======Short Message======
Avoid unneccessary rebuilding in dv/uvm/core_ibex/Makefile
======Full Message======
Avoid unneccessary rebuilding in dv/uvm/core_ibex/Makefile

Before this patch, running the Makefile's default target deleted
everything and then ran the whole flow. This sometimes does
unnecessary work (if I've just changed the design, there's no need to
rebuild and re-run the instruction generator). It also definitely
won't work with Make's -j flag, since it depends on the targets being
built in order.

This patch keeps the same stages in the Makefile, but makes each stage
generate a stamp file, adding dependencies between the stages. This
way, you can make a small change to the design and re-run the
simulation without having to generate the random inputs again.

This doesn't make much difference if you're running lots of tests with
no LSF (since VCS is very slow, its runtime for simulation completely
dominates), but it can make a significant difference if you're
debugging a single test, have made a change to the design and want to
re-run.

One significant change is that running 'make' doesn't automatically
delete existing files any more. To make this possible (and useful!),
we generate random data and test results in a directory keyed by the
seed. For example

  make SEED=123

will generate results in out/seed-123/regr.log (rather than
out/regr.log as before).

To make sure we rebuild things properly if you change something like
the number of iterations or the tests to run, we dump some variables
describing the mode in which we were running. If these don't match the
nnext time around, we'll rebuild stuff if necessary.

Advanced (or hurried) users of the existing Makefile might have done
things like change the design and then run

  make SEED=123 compile rtl_sim

Now, the rtl_sim target depends on its logical dependencies. On the
plus side, this means that you won't accidentally simulate out-of-date
code. On the minus side, cunning tricks to avoid having to re-run
stuff after touching a design file won't work. (If you're feeling
really determined to do something like that, it's still possible with
make -t).

The seed-specific stamp files and dumped Make variables go into
$(OUT-SEED)/.metadata directory, rather than $(OUT-SEED)/instr_gen or
$(OUT-SEED)/rtl_sim. This is because of a review comment (to avoid
extra clutter in the output directories).



======Commit: 5a208a04======
======Short Message======
[dv] Increase timeouts to fix failures
======Full Message======
[dv] Increase timeouts to fix failures



======Commit: 8f24ce12======
======Short Message======
[dv] fix qrun compile warnings (#639)
======Full Message======
[dv] fix qrun compile warnings (#639)

Signed-off-by: Udi <udij@google.com>


======Commit: 59b3f7f4======
======Short Message======
Set the ELF entry point in simple system linker script
======Full Message======
Set the ELF entry point in simple system linker script

This is part of work to run binaries created for the simple system
under Spike. Spike's default behaviour (after a weird 'rom' trampoline
at 0x1000) is to obey the entry point given in the ELF file. So let's
set it correctly.



======Commit: 38d6932a======
======Short Message======
Improve docs for getting started in verification.rst
======Full Message======
Improve docs for getting started in verification.rst

The important change is that we now tell the user to configure spike
with --enable-misaligned. This is needed because Ibex handles
misaligned loads and stores rather than jumping to a trap handler (the
default behaviour in spike).

There's also a little more information about where you can find the
various tools and how to set them up.

Note that the existing deep links to riscv-dv's documentation
bit-rotted at the start of February.



======Commit: ade64300======
======Short Message======
Dump to VPD in dv/uvm if Verdi is not available (#630)
======Full Message======
Dump to VPD in dv/uvm if Verdi is not available (#630)

If VERDI_HOME is not set, calling fsdbDumpfile makes VCS hang with an
error message. This patch checks whether we think FSDB dumping is
actually going to work and, if not, dumps with the default VCD+
format (also called VPD) instead.


======Commit: 03efdaaf======
======Short Message======
Tiny docs fix in examples/simple_system
======Full Message======
Tiny docs fix in examples/simple_system

Missing "can" (which sounds a bit like a pirate!) and full stop.



======Commit: 77ecffc3======
======Short Message======
Fix previous gitignore change for uvm directory rejig
======Full Message======
Fix previous gitignore change for uvm directory rejig

I'd written the original patch (b157573) on a branch that didn't
include commit 2431551 (which moves stuff that was in dv/uvm into
dv/uvm/core_ibex). Apparently, I'd fixed up the rule for the output
directory, but I'd missed the ucli.key file.



======Commit: fde40564======
======Short Message======
Tracer: Mark all functions "automatic"
======Full Message======
Tracer: Mark all functions "automatic"

By default, variables in functions are static in SystemVerilog. This caused `string desc = "";` in `get_fence_description` to be executed only once, i.e. the text was continuously extended from the last call.

Mark all functions `automatic` to get behavior as one would expect from normal functions.


======Commit: 0af48120======
======Short Message======
VCS compile fix (#616)
======Full Message======
VCS compile fix (#616)

Signed-off-by: Udi <udij@google.com>


======Commit: f98cd607======
======Short Message======
Update google_riscv-dv to google/riscv-dv@6bd3233 (#617)
======Full Message======
Update google_riscv-dv to google/riscv-dv@6bd3233 (#617)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 6bd323385d454858ea5e50dedd42a563b37931fe

* VCS compile option fix (Udi Jonnalagadda)
* Improve pmp config object - enable cmdline args (Udi Jonnalagadda)
* Fix ovpsim setting (google/riscv-dv#478) (taoliug)
* IUS - enable rand structs in simulation (google/riscv-dv#477)
  (udinator)
* fix macro definition compile issue (Udi Jonnalagadda)
* add ISS command line options (google/riscv-dv#474) (udinator)
* Add style check (Weicai Yang)

Signed-off-by: Udi <udij@google.com>


======Commit: 77c93f1e======
======Short Message======
[doc] Fix reference link
======Full Message======
[doc] Fix reference link



======Commit: aab15bc9======
======Short Message======
CI: Pin riscv-compliance repo to specific commit
======Full Message======
CI: Pin riscv-compliance repo to specific commit

Recently changes in the RISC-V compliance repo have caused our tests to
fail. That indicent highlighted the issue that we use the latest master
version of the compliance suite without pinning the version.

This PR fixes that by pinning to a specific version where our tests
still succeeded.

Upstream PR to fix actual failure: https://github.com/riscv/riscv-compliance/pull/92
Works around #608



======Commit: dfd7f9e4======
======Short Message======
Doc: Fix broken table in integration docs
======Full Message======
Doc: Fix broken table in integration docs



======Commit: 3a078865======
======Short Message======
Check for supported tool versions
======Full Message======
Check for supported tool versions

Define supported tool versions in tool_requirements.py, and check them
in a fusesoc run. If an unsupported tool version is found, fusesoc
outputs an error like this:

```
$ fusesoc --cores-root . run --target=lint lowrisc:ibex:ibex_core
INFO: Preparing lowrisc:ibex:check_tool_requirements:0.1
INFO: Preparing lowrisc:prim:assert:0.1
INFO: Preparing lowrisc:ibex:sim_shared:0
INFO: Preparing lowrisc:ibex:ibex_core:0.1
INFO: Setting up project

INFO: Running pre_build script check_tool_requirements
ERROR: verilator is too old: found version 4.010, need at least 4.028
ERROR: Tool requirements not fulfilled. Please update the tools and retry.
ERROR: Failed to build lowrisc:ibex:ibex_core:0.1 : pre_build script 'check_tool_requirements' exited with error code 1
```

The only version checked at this point is Verilator, which is set
somewhat arbitrarily to the version used by me (and I know it works). CI
uses a slightly newer version. As we are about to merge changes soon
which require a newer Verilator version, there's not much point in
finding the oldest supported version right now.



======Commit: 8e28ba0b======
======Short Message======
[syn] Fix synthesis script
======Full Message======
[syn] Fix synthesis script

* prim_assert now an include so add appropriate include dir
* remove FPGA reg file from synthesised files



======Commit: 24cbc322======
======Short Message======
[rtl] Fix assertion issues
======Full Message======
[rtl] Fix assertion issues

Fixes #548



======Commit: f24ffa56======
======Short Message======
Update setuptools and pip to parse more metadata
======Full Message======
Update setuptools and pip to parse more metadata

The Ubuntu xenial-provided versions of setuptools and pip don't parse
all metadata present in Python packages, especially not the "minimum
required Python version" bit. More and more packages are using this
information to limit Python 3.5-support to older versions of their
packages. In this case, the problem was caused by the "zipp" package,
which is a very remote dependency of fusesoc.

Fixes #597



======Commit: 5d16a5b1======
======Short Message======
[rtl] Introduce default clk/reset to prim_assert
======Full Message======
[rtl] Introduce default clk/reset to prim_assert

This mirrors the change made in OpenTitan
(https://github.com/lowRISC/opentitan/pull/1485)



======Commit: a97b7b7b======
======Short Message======
Update google_riscv-dv to google/riscv-dv@6e2bc2e (#589)
======Full Message======
Update google_riscv-dv to google/riscv-dv@6e2bc2e (#589)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 6e2bc2e01fb20799c9eff29a26852eb1917b977a

* fix a missed syntax error in pmp_cfg (Udi Jonnalagadda)

Signed-off-by: Udi <udij@google.com>


======Commit: 2be7413a======
======Short Message======
Update google_riscv-dv to google/riscv-dv@e63c542 (#587)
======Full Message======
Update google_riscv-dv to google/riscv-dv@e63c542 (#587)

Update code from upstream repository https://github.com/google/riscv-
dv to revision e63c5427b0bf543aebb9c62bba8217065b029a76

* Add pmp configuration object (Udi Jonnalagadda)
* add path for the prebuilt document (google/riscv-dv#469) (taoliug)
* Update document for directed assembly/C test (google/riscv-dv#467)
  (taoliug)
* Fix broken document link (google/riscv-dv#466) (taoliug)
* Add a runtime option to fix stack pointer (google/riscv-dv#465)
  (taoliug)
* Fix LR/SC instruction issue for RV32A (google/riscv-dv#464)
  (taoliug)

Signed-off-by: Udi <udij@google.com>


======Commit: 3f0b730d======
======Short Message======
[doc] Riviera-PRO instructions for Simple System
======Full Message======
[doc] Riviera-PRO instructions for Simple System

Fixes #578

Signed-off-by: Greg Chadwick <gac@lowrisc.org>



======Commit: 36eec8e4======
======Short Message======
Fix incdirs of src_files.yml
======Full Message======
Fix incdirs of src_files.yml



======Commit: ed8bcc0d======
======Short Message======
[verilator] Fix ELF loading
======Full Message======
[verilator] Fix ELF loading

In `VerilatorMemUtil::WriteElfToMem`, the verilator memory is written
with the ELF segment data, 4 bytes at a time . If the segment size isn't
a multiple of 4 (e.g. when using the RISC-V C extension) the last word
wouldn't be written. This patch rounds the size up to a multiple of 4,
solving that issue.



======Commit: bfba13bb======
======Short Message======
Fix FPGA part number for Arty A7-100T
======Full Message======
Fix FPGA part number for Arty A7-100T

For some reason the part number between the Arty A7-35T and the Arty
A7-100T differs by 1 letter (TICSG vs TCSG). This patch fixes the part
number for the Arty A7-100T to remove the "i".

Signed-off-by: Stephano Cetola <scetola@linuxfoundation.org>



======Commit: 86c1775a======
======Short Message======
[rtl] Timing fix for pc_mux_o in ibex_controller
======Full Message======
[rtl] Timing fix for pc_mux_o in ibex_controller



======Commit: 32a69899======
======Short Message======
[dv] Fix a missed Riviera compile warning (#576)
======Full Message======
[dv] Fix a missed Riviera compile warning (#576)

Signed-off-by: Udi <udij@google.com>


======Commit: b90b1aa6======
======Short Message======
Work around Riviera 2019.10 issue
======Full Message======
Work around Riviera 2019.10 issue

This is a Riviera issue and will be fixed in a next release. Add a
workaround in the meantime.

Riviera issue reference: DZI370



======Commit: 2e258c85======
======Short Message======
Riviera compile warnings (#572)
======Full Message======
Riviera compile warnings (#572)

* [dv] fix compilation +incdir option

Signed-off-by: Udi <udij@google.com>

* [dv] Fix missing enum cast issues in Riviera compile

Signed-off-by: Udi <udij@google.com>



======Commit: 43752a6c======
======Short Message======
[DV] Test debug requests during interrupt handler execution (#565)
======Full Message======
[DV] Test debug requests during interrupt handler execution (#565)

Signed-off-by: Udi <udij@google.com>


======Commit: 3d8089c2======
======Short Message======
Update google_riscv-dv to google/riscv-dv@a655f34 (#564)
======Full Message======
Update google_riscv-dv to google/riscv-dv@a655f34 (#564)

Update code from upstream repository https://github.com/google/riscv-
dv to revision a655f34eb5058da442b38ca010b0d008291c11b5

* Support running C test (google/riscv-dv#453) (Hai Hoang Dang)
* run.py: Do not compare csv file when specified -debug switch
  (google/riscv-dv#451) (Hai Hoang Dang)
* adjust location of nested interrupt mstatus.mie enable
  (google/riscv-dv#444) (udinator)
* Implement storing the commands that would be executed as a script
  (google/riscv-dv#450) (Hai Hoang Dang)
* Move document from README to docs, add HTML preview for the new doc
  (google/riscv-dv#448) (taoliug)
* Use single HTML format (google/riscv-dv#447) (taoliug)
* Update HTML document (google/riscv-dv#446) (taoliug)
* Add framework for custom extensions (google/riscv-dv#442) (taoliug)

Signed-off-by: Udi <udij@google.com>


======Commit: f95518a4======
======Short Message======
Improve wording in README of simple system
======Full Message======
Improve wording in README of simple system

Small editorial fixes.



======Commit: 9d7b07f0======
======Short Message======
[DV] Add test to assert interrupts during debug execution (#524)
======Full Message======
[DV] Add test to assert interrupts during debug execution (#524)




======Commit: 9c6ddae6======
======Short Message======
[rtl] Don't elaborate unused mhpmcounter flops
======Full Message======
[rtl] Don't elaborate unused mhpmcounter flops

Refactors performance counters so only flops that are required from the
given parameters are explicitly elaborated without relying on
optimization to remove unused flops.

Fixes #473



======Commit: f1683e3f======
======Short Message======
[ci] Add clang-format checking to CI
======Full Message======
[ci] Add clang-format checking to CI

- Only checks changed C source files
- Also add a note on C/C++ style to README
- Fixes #304

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 6885c9e9======
======Short Message======
[verilator] Fix ELF processing
======Full Message======
[verilator] Fix ELF processing

As described in https://github.com/lowRISC/opentitan/issues/1245,
the Ibex Verliator ELF processing does not exactly follow the algorithm
for the "binary" target of objcopy (which it is intended to mimic).
In particular, sections as denoted by program headers are laid down
strictly sequentially, ignoring their specified p_paddr -- and
resulting in a corrupted in-memory image for ELF images that have
unordered program headers.



======Commit: 7fe01cc2======
======Short Message======
SimCtrlExtension: Add a default destructor
======Full Message======
SimCtrlExtension: Add a default destructor

This base class needs a default destructor for potential future extensions.

Signed-off-by: Philipp Wagner <phw@lowrisc.org>



======Commit: e45e3146======
======Short Message======
[verilator] Separate out memory loading utilities
======Full Message======
[verilator] Separate out memory loading utilities

- Split memory utils out of VerilatorSimCtrl
- Allows VerilatorSimCtrl to be used in systems not requiring memory loading
- Fixes #317



======Commit: 347b80f6======
======Short Message======
[make] Fix target reference
======Full Message======
[make] Fix target reference



======Commit: e9a6295e======
======Short Message======
[rtl] By default, forward incoming instruction in C decoder
======Full Message======
[rtl] By default, forward incoming instruction in C decoder

This commit modifies the compressed decoder to forward the incoming
instruction to the output. It is marked as legal, unless:
1) the decoder cannot determine if the instruction is compressed (e.g.
   because of unknown selector bits), or
2) the instruction is compressed but
    a) it cannot be successfully decompressed (e.g. because of unknown
       selector bits), or
    b) it is indeed illegal.

In the case of 2b) the compressed decoder may output an illegal
decompressed instruction instead of the incoming instruction.

Signed-off-by: Pirmin Vogel <vogelpi@lowrisc.org>



======Commit: a28bcfa4======
======Short Message======
[DV] Fix TB read responses (#531)
======Full Message======
[DV] Fix TB read responses (#531)

Signed-off-by: Udi <udij@google.com>


======Commit: 45e7522d======
======Short Message======
Update google_riscv-dv to google/riscv-dv@9ecee87 (#530)
======Full Message======
Update google_riscv-dv to google/riscv-dv@9ecee87 (#530)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 9ecee87bbc41650ca0f8846de9a277bec2783e18

* fix mmu_stress_test generation failure (Udi Jonnalagadda)

Signed-off-by: Udi <udij@google.com>


======Commit: 5c07ced1======
======Short Message======
Update google_riscv-dv to google/riscv-dv@74b8cb6 (#529)
======Full Message======
Update google_riscv-dv to google/riscv-dv@74b8cb6 (#529)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 74b8cb65838f575d6e59e1c80a145d305fbca381

* fix ebreak generation in debug ROM (Udi Jonnalagadda)
* enable nested traps (Udi Jonnalagadda)

Signed-off-by: Udi <udij@google.com>


======Commit: 7fef1b5a======
======Short Message======
[DV] fix incorrect irq_seq handle name (#525)
======Full Message======
[DV] fix incorrect irq_seq handle name (#525)

Signed-off-by: Udi <udij@google.com>


======Commit: 328aabb5======
======Short Message======
[RTL] Only restore from mstack in nmi mode
======Full Message======
[RTL] Only restore from mstack in nmi mode

Fixes #492



======Commit: 0d6ccbf1======
======Short Message======
Update google_riscv-dv to google/riscv-dv@5b1dd4e (#523)
======Full Message======
Update google_riscv-dv to google/riscv-dv@5b1dd4e (#523)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 5b1dd4e2eb11d49d3275da80953efc0c50f90447

* Add compliance mode to coverage model (google/riscv-dv#361)
  (taoliug)
* Revert " Make assign_operand become a method of class
  RiscvInstructionTraceEntry  (google/riscv-dv#357)" (google/riscv-
  dv#360) (taoliug)
* Fix script issue (google/riscv-dv#358) (taoliug)
*  Make assign_operand become a method of class
  RiscvInstructionTraceEntry  (google/riscv-dv#357) (Hai Hoang Dang)
* Remove unused variable (google/riscv-dv#348) (Hai Hoang Dang)
* Functional coverage improvement (google/riscv-dv#356) (taoliug)
* Fix list access exception thrown when parsing ovpsim illegal
  instruction (Udi Jonnalagadda)
* Add compliance mode and RTL mode to the coverage model
  (google/riscv-dv#354) (taoliug)
* Fix lr/sc sequence (google/riscv-dv#353) (taoliug)
* Fix minor illegal instruction issue (google/riscv-dv#351) (taoliug)
* Migrate to new instruction class (google/riscv-dv#350) (taoliug)
* misc issue fixes (google/riscv-dv#349) (taoliug)
* Update README to add contact info for the collaboration request
  (google/riscv-dv#347) (taoliug)
* Support running specific multiple tests (google/riscv-dv#346) (Hai
  Hoang Dang)
* Fix rv64 coverage model issue (google/riscv-dv#344) (taoliug)
* Fix the link for yaml/base_testlist.yaml (google/riscv-dv#343) (Hai
  Hoang Dang)
* refactor debug ROM generation (Udi Jonnalagadda)
* Add a runtime option to run with experimental features
  (google/riscv-dv#341) (taoliug)
* Fix a few issues with the new instruction class (google/riscv-
  dv#340) (taoliug)
* Improve performance of new experimental instruction class
  (google/riscv-dv#339) (taoliug)
* Fix CSR randomization bug when generating loops (google/riscv-
  dv#337) (udinator)
* Add support coverage flow for qrun, and minor fix for cov.py
  (google/riscv-dv#335) (Hai Hoang Dang)
* [ovpsim] Coding style fixes, fix floating point compare mismatch
  (google/riscv-dv#334) (taoliug)
* Fix ius flow issue (google/riscv-dv#333) (taoliug)
* Fix a few new instruction class issues (google/riscv-dv#332)
  (taoliug)
* Added two includes and starting variables for adding bitmanip
  extension (google/riscv-dv#328) (simond-imperas)
* Integrate experimental instruction class (google/riscv-dv#331)
  (taoliug)
* Minor fixes to run.py (google/riscv-dv#330) (taoliug)
* Run.py: minor refactor the code for compile, and simulate
  (google/riscv-dv#326) (Hai Hoang Dang)
* Add requirements for install dependencies (google/riscv-dv#325) (Hai
  Hoang Dang)
* Adding support qrun simulator (google/riscv-dv#324) (Hai Hoang Dang)
* Add new experimental instruction class (google/riscv-dv#323)
  (taoliug)
* Added command line control of coverage and added hooks for vector
  coverage development (google/riscv-dv#317) (simond-imperas)
* Fix compilation issue (google/riscv-dv#322) (taoliug)

Signed-off-by: Udi <udij@google.com>


======Commit: f23b3f39======
======Short Message======
[DV] Fix xRET wait checks (#515)
======Full Message======
[DV] Fix xRET wait checks (#515)

Signed-off-by: Udi <udij@google.com>


======Commit: b2bbe507======
======Short Message======
[doc] Add a comment on mhpmcounter optimization
======Full Message======
[doc] Add a comment on mhpmcounter optimization

- fixes #473

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: 088cd115======
======Short Message======
[dbg] Add minimal hardware breakpoint support
======Full Message======
[dbg] Add minimal hardware breakpoint support

- Add the minimum amount of trigger system to support GDB hbreak
- Only a single trigger is implemented
- Only instruction address matching
- Only break into debug mode (no native debug)
- Fixes #382

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>



======Commit: cd39a314======
======Short Message======
[verilator] Clarify ELF BSS handling
======Full Message======
[verilator] Clarify ELF BSS handling

Add a requirement for the software loaded by the simulator for zero-ing
the BSS section.

Fixes lowRISC/ibex#496



======Commit: 6793dc05======
======Short Message======
[examples] Fix spelling for description type
======Full Message======
[examples] Fix spelling for description type



======Commit: cead1868======
======Short Message======
Add Synopsys VCS Support for Ibex Simple System
======Full Message======
Add Synopsys VCS Support for Ibex Simple System

Add VCS to core description. Add stimuli. Fix compile error for assigmnet from multiple blocks.



======Commit: 71a635ec======
======Short Message======
Reverse return code of simutil_verilator_set_mem()
======Full Message======
Reverse return code of simutil_verilator_set_mem()

All functions in simutil_verilator return booleans to indicate
success/failure, where 1 == true, and 0 == false.
simutil_verilator_set_mem() returns an int due to DPI interface
restrictions. Before, 0 meant success, and 1 meant error.

To keep things nice and consistent, turn things around and align with
the bool meaning.



======Commit: ce7e3835======
======Short Message======
[DV] Add Verilator memory initialization from ELF
======Full Message======
[DV] Add Verilator memory initialization from ELF

Support initialization of memory by loading content from ELF files.
All segments of the ELF file with the type `PT_LOAD` are merged into a
temporary buffer and then forwarded to a predefined memory.
This is an addition for setting the memories with VMEM files.

Memories must implement `simutil_verilator_set_mem` to support the
setting of values with a width of 32 bits. A return value of 0 must
indicate a successful operation and 1 an error.

Memories are defined by a call to `RegisterMemoryArea()` before the
execution of the simulation, at which point the arguments are parsed and
the initialization is started. The memories are identified by unique
name. The design specific location is used to set the SystemVerilog
scope.

Registered memories can be printed by using `-l list`. The unique name
is used for `-l name,file.elf` together with the file path.
An optional part of the argument is the type of the file, `elf` or
`vmem`, and if not provided it is attempted to detect the type by
looking at the file extension.
The memory specific arguments which already existed accept now also ELF
files. They use predefined names and are included to keep the interface
stable.

Contents of an ELF segment which has a bigger memory size than file size
are not set. This is typically required for BSS sections for zero-ing
the memory.



======Commit: 11749c7e======
======Short Message======
[rtl] Implement FENCE.I
======Full Message======
[rtl] Implement FENCE.I

Fixes #391



======Commit: bb7acbdb======
======Short Message======
Update google_riscv-dv to google/riscv-dv@d691906 (#491)
======Full Message======
Update google_riscv-dv to google/riscv-dv@d691906 (#491)

Update code from upstream repository https://github.com/google/riscv-
dv to revision d69190682078470bc6d5661d72f873ae9850ae53

* enable CSR randomization only for csr instructions (google/riscv-
  dv#321) (udinator)
* fix csr test script pathname (Udi Jonnalagadda)

Signed-off-by: Udi <udij@google.com>


======Commit: 6a582cc1======
======Short Message======
Update google_riscv-dv to google/riscv-dv@39ca859 (#486)
======Full Message======
Update google_riscv-dv to google/riscv-dv@39ca859 (#486)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 39ca85903eea94350d3a610256307346da407e5b

* Add directed stream to access higher privilege CSRs (google/riscv-
  dv#316) (udinator)
* add config knob for mstatus.tw (Udi Jonnalagadda)
* Fix ovpsim floating point instruction parsing issue (google/riscv-
  dv#313) (taoliug)
* Fix SATP configure issue (google/riscv-dv#312) (taoliug)
* Support import testlist (google/riscv-dv#311) (taoliug)
* Add a rand address load/store test (google/riscv-dv#310) (taoliug)
* Fix ovpsim log parsing issue (google/riscv-dv#309) (taoliug)
* Add a generic approach to check command return value (google/riscv-
  dv#308) (taoliug)
* Fix compile issue (google/riscv-dv#307) (taoliug)
* Basic U-mode support (Udi Jonnalagadda)

Signed-off-by: Udi <udij@google.com>


======Commit: 46608d9f======
======Short Message======
[doc] Document debug CSRs
======Full Message======
[doc] Document debug CSRs

This resolves lowRISC/ibex#307.

Signed-off-by: Pirmin Vogel <vogelpi@lowrisc.org>



======Commit: d117b24a======
======Short Message======
[rtl] Do not update CSRs upon exceptions in debug mode
======Full Message======
[rtl] Do not update CSRs upon exceptions in debug mode

In debug mode, exceptions shall not update any CSRs including `mcause`,
`mepc`, `mtval`, `dpc` and `mstatus`, see Debug Spec v0.13.2, p.39.

This resolves lowRISC/ibex#168.

Signed-off-by: Pirmin Vogel <vogelpi@lowrisc.org>



======Commit: 76f6a3d4======
======Short Message======
Use shared code for Arty A7-100T example
======Full Message======
Use shared code for Arty A7-100T example

Move Xilinx specific code into shared folder so it can be re-used by
different examples.
Use the shared RAM code and make use of byte enable signal.
Fixes lowrisc/ibex#144



======Commit: 6be1e8af======
======Short Message======
Delay simulator finish
======Full Message======
Delay simulator finish

The tracer needs time to log the final instruction.
Introduce a counter to delay calling the simulation finish.

Fixes lowrisc/ibex#468



======Commit: 0243e081======
======Short Message======
[rtl] Switch to M mode on debug entry
======Full Message======
[rtl] Switch to M mode on debug entry

- Core should operate as if in M-mode while in debug mode
- Previous priv level is restored from dcsr on DRET
- Fixes #463



======Commit: 9b390c5d======
======Short Message======
Fix formatting of table in simple system
======Full Message======
Fix formatting of table in simple system

Fixes #454


======Commit: 6ce8b6ec======
======Short Message======
Update google_riscv-dv to google/riscv-dv@4b333ba (#462)
======Full Message======
Update google_riscv-dv to google/riscv-dv@4b333ba (#462)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 4b333ba1ef285ec4508c606efa64610136154a5e

* cg instantion based on supported_isa (google/riscv-dv#303)
  (udinator)
* Fix coverage collection issue, change default target to rv32imc
  (google/riscv-dv#302) (taoliug)
* Integrate whisper(swerv-ISS) (google/riscv-dv#301) (taoliug)
* Fix cov.py, set UVM_VERBOSITY to UVM_HIGH for verbose mode
  (google/riscv-dv#299) (taoliug)
* Fix jalr handling issue for ovpsim (google/riscv-dv#298) (taoliug)
* Add noclean option, change default output directory of coverage
  collection (google/riscv-dv#297) (taoliug)
* Enable using core trace logs for coverage collection (google/riscv-
  dv#291) (udinator)
* Fix isa/mabi setup issue for RV64GC target (google/riscv-dv#296)
  (taoliug)
* fixed line widths (x2) and check error returns for any questa
  simalator (google/riscv-dv#293) (simond-imperas)
* Unknown instruction fix (google/riscv-dv#290) (simond-imperas)
* Fix ovpsim log process issue (google/riscv-dv#289) (udinator)
* adding riscvOVPsim vector instruction trace to csv processing -
  start (3rd Attempt) (google/riscv-dv#288) (simond-imperas)

Signed-off-by: Udi <udij@google.com>


======Commit: 1cc48314======
======Short Message======
Add rv32Zicsr target in azure
======Full Message======
Add rv32Zicsr target in azure

Fixes lowrisc/ibex#459



======Commit: 7ea79ae3======
======Short Message======
[funct_cov] Fix GPR assignment bug (#456)
======Full Message======
[funct_cov] Fix GPR assignment bug (#456)




======Commit: 0a1a8514======
======Short Message======
[rtl] Rework access to performance counter CSRs
======Full Message======
[rtl] Rework access to performance counter CSRs

This commit reworks the code section describing how the performance
counter CSRs are accessed by CSR instructions. Instead of using an
address mask inside the default case, and excluding CSRs in the same
address range previously handled (like `mcycle(h)`, `minstret(h)`,
`mcountinhibit`), all performance counter CSRs are now explicitly
enumerated. This enhances readability of the code and enhances
compatibility with some tools without changing behavior or causing
lint problems.

This commit is based on suggestions from @MarekPikula. It replaces the
proposal in lowRISC/ibex#336.



======Commit: f3f3f3de======
======Short Message======
Update google_riscv-dv to google/riscv-dv@cce71d2 (#445)
======Full Message======
Update google_riscv-dv to google/riscv-dv@cce71d2 (#445)

Update code from upstream repository https://github.com/google/riscv-
dv to revision cce71d24b56f641d994fbf69b8b50aa3756b9322

* Add handshake documentation (Udi)
* Fix coverage debug mode (google/riscv-dv#281) (taoliug)
* Fix coverage script issue (google/riscv-dv#280) (taoliug)
* code block highlight (google/riscv-dv#279) (taoliug)
* Replace setting directory with a default target (google/riscv-
  dv#278) (taoliug)
* fixed trace handling issues (google/riscv-dv#274) (eroom)
* Allow running the script from other directory (google/riscv-dv#277)
  (taoliug)
* Add dummy writes to status and ie CSRs (Udi)
* Script typo fix (google/riscv-dv#272) (Dan Petrisko)
* Fix misa setup issue (google/riscv-dv#271) (taoliug)
* Enable mie.mtie for timer interrupts (Udi)
* Update illegal system instr generation (Udi)
* Fix duplicate (google/riscv-dv#268) (taoliug)
* Add experimental instruction distribution control (google/riscv-
  dv#267) (taoliug)
* Update README to clarify the flow setup instructions (google/riscv-
  dv#265) (taoliug)
* Remove debug logging (google/riscv-dv#264) (taoliug)
* Fix compressed instruction test setup (google/riscv-dv#263)
  (taoliug)
* adding __init__ in the scripts dir since python3.7 requires that for
  directories to be recognized as modules (google/riscv-dv#252)
  (Jielun Tan)
* Fix riscvOVPsim.ic (google/riscv-dv#261) (taoliug)
* Fix ovpsim sim problem (google/riscv-dv#260) (taoliug)
* Add alternative command options for directed instruction stream
  (google/riscv-dv#254) (taoliug)
* Fix dsim compilation issue (google/riscv-dv#253) (taoliug)


======Commit: 48adda0b======
======Short Message======
[verilator] Fix a few verilator DV issues
======Full Message======
[verilator] Fix a few verilator DV issues

- Speed up compile time by only optimizing hot code
- Fix some incorrect references in tb_cs_registers
- Add a comment for FST vs VCD tracing



======Commit: e5cf0c0f======
======Short Message======
Error synthesis in Vivado
======Full Message======
Error synthesis in Vivado



======Commit: c89e4319======
======Short Message======
Update google_riscv-dv to google/riscv-dv@46ec4bc (#417)
======Full Message======
Update google_riscv-dv to google/riscv-dv@46ec4bc (#417)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 46ec4bc48bc1eebc5a2bcd48fe4ce4c77105fead

* Incorrect deletion (google/riscv-dv#249) (eroom)
* Updated OVPsim log processing for coverage (google/riscv-dv#248)
  (eroom)
* Improve illegal/hint test coverage (google/riscv-dv#247) (taoliug)
* Coverage model fixes (google/riscv-dv#246) (taoliug)
* Add back-to-back jump instruction test (google/riscv-dv#244)
  (taoliug)
* Functional coverage improvement (google/riscv-dv#243) (taoliug)
* Functional coverage improvement (google/riscv-dv#242) (taoliug)
* Support c.jr,c.jalr, fix coverage sampling issues (google/riscv-
  dv#241) (taoliug)
* allow select a random GPR for JALR op (google/riscv-dv#240)
  (taoliug)
* Fix coverage definition/sampling issue (google/riscv-dv#239)
  (taoliug)
* Testlist clean up, add RV32I target (google/riscv-dv#238) (taoliug)
* Consolidate the coverage collection script (google/riscv-dv#234)
  (taoliug)
* Fixed default values, and trailing blank lines (google/riscv-dv#233)
  (eroom)
* Refine README structure (google/riscv-dv#231) (taoliug)
* Add pre-defined target: RV32IMC, RV64IMC (google/riscv-dv#230)
  (taoliug)


======Commit: 023b7b68======
======Short Message======
[RTL/Tracer] Fix compressed jump RD write (#416)
======Full Message======
[RTL/Tracer] Fix compressed jump RD write (#416)




======Commit: 1c3903e2======
======Short Message======
Tracer: Decode an all-zero instruction as c.unimp
======Full Message======
Tracer: Decode an all-zero instruction as c.unimp

Fixes #396



======Commit: b2e36ec3======
======Short Message======
Update google_riscv-dv to google/riscv-dv@033fccf (#406)
======Full Message======
Update google_riscv-dv to google/riscv-dv@033fccf (#406)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 033fccfbd50f6412e66b448a1d04245d787004bd

* Add more ebreak generation control (google/riscv-dv#229) (udinator)
* Fix timemout, misc update to README (google/riscv-dv#228) (taoliug)
* Fix CSR test setup (Udi)
* Update spike setup instruction for commit log (google/riscv-dv#226)
  (taoliug)
* Fix spike arguments to generate commit log (google/riscv-dv#225)
  (Greg Chadwick)
* Minor README typo (google/riscv-dv#219) (Dan Petrisko)
* Add random FCSR programing, add RV32FC/DC support (google/riscv-
  dv#221) (taoliug)
* Add floating point load/store support (google/riscv-dv#220)
  (taoliug)
* Fix floating point comparison issue (google/riscv-dv#218) (taoliug)
* Add basic support for F/D extension (google/riscv-dv#217) (taoliug)
* Generate the ucdb file inside output directory (google/riscv-dv#215)
  (Hai Hoang Dang)
* cov.py: Allow coverage to run with different simulator
  (google/riscv-dv#214) (Hai Hoang Dang)


======Commit: fc80203a======
======Short Message======
[DV] Debug_ebreak test fix (#405)
======Full Message======
[DV] Debug_ebreak test fix (#405)




======Commit: cc94bc8d======
======Short Message======
[RTL] Fix single stepping on exceptions
======Full Message======
[RTL] Fix single stepping on exceptions

When we single step over an instruction that causes an exception DPC
should be set to point to the exception handler (where we would have
gone were we not single stepping).



======Commit: b9496140======
======Short Message======
[RTL] Fix ebreak behaviour in U-mode
======Full Message======
[RTL] Fix ebreak behaviour in U-mode

Fixes #370

Whether EBREAK enters debug mode is controlled by the
ebreaku and ebreakm dcsr fields. Which is relevant depends upon the
privilege level.



======Commit: 7aa87156======
======Short Message======
[RTL] Fix ebreak and cleanup debug
======Full Message======
[RTL] Fix ebreak and cleanup debug

Fixes #393

When entering debug mode in controller need to ensure ID doesn't get
flushed until the relevant debug state can see the contents of ID and
perform the appropriate actions. ID is flushed at that point.

Also cleaned up some code replication around entering debug mode
(debug_req vs single step look very similar so can use the same code
paths).



======Commit: 6b8b3762======
======Short Message======
[DV] Fix bugs in mem_error test to circumvent test deadlock (#400)
======Full Message======
[DV] Fix bugs in mem_error test to circumvent test deadlock (#400)




======Commit: 2bc785e7======
======Short Message======
[RTL] Prevent CSR write on any illegal CSR reason
======Full Message======
[RTL] Prevent CSR write on any illegal CSR reason

Debug register access sets illegal_csr if not in debug mode but CSR
write still went ahead. This modifies the CSR write to ensure that
anything that results in an illegal CSR instruction being signalled will
prevent a CSR write.



======Commit: bbb688a2======
======Short Message======
[DV] Fix lint warnings (#397)
======Full Message======
[DV] Fix lint warnings (#397)




======Commit: 0abe5cca======
======Short Message======
[CI] Stop pinning an old attrs version
======Full Message======
[CI] Stop pinning an old attrs version

simplesat (required by fusesoc) was broken by an update to the attrs
library. Now simplesat 0.8.2 has been released which fixes the issue, we
can remove the explicit pinning of the old attrs version.



======Commit: 90ff45ab======
======Short Message======
Avoid self-determined bit length of signals
======Full Message======
Avoid self-determined bit length of signals

This works around a lint error we get; the old and the new version are
equally wrong or right, but it doesn't seem to be worth fighting with a tool.



======Commit: c33525ae======
======Short Message======
[RTL LSU] Change unaligned error behaviour
======Full Message======
[RTL LSU] Change unaligned error behaviour

- If an error is signalled in the first part of an unaligned
  transaction, the second part is issued anyway (to avoid a
  timing loop from data_err_i -> data_req_o)
- Previously, the error was signalled and an exception was taken
  as soon as the first transaction completed. This commits makes
  the core wait until both transactions have completed.
- This prevents strange behaviour caused by the lsu and controller
  being out of sync (fixes #374).



======Commit: 9824342c======
======Short Message======
[DV] Added unaligned memory error test (#378)
======Full Message======
[DV] Added unaligned memory error test (#378)




======Commit: ee1098f9======
======Short Message======
Tracer: Reference Verilator bug for miscompilation
======Full Message======
Tracer: Reference Verilator bug for miscompilation

This miscompilation is now reported and fixed, mention it in the code to
refer back to it when we can revert back to the old code (which will
take a couple months until we can require a newer Verilator version).

Fixes #372



======Commit: d8e4852f======
======Short Message======
Include rs1 and rd in trace of c.addi16sp
======Full Message======
Include rs1 and rd in trace of c.addi16sp

New output looks like this:

118         55      00000154        6121    c.addi16sp      x2,64     x2:0x00000030  x2=0x00000070

Fixes #322



======Commit: 29d66a7f======
======Short Message======
[Doc] Fix for table wrapping in RTD theme
======Full Message======
[Doc] Fix for table wrapping in RTD theme

This causes wide tables to wrap content within their cells rather than
producing a table with a scroll bar see
https://github.com/readthedocs/sphinx_rtd_theme/issues/117 for details.



======Commit: 6aae5fe9======
======Short Message======
[Doc] Fix some rendering issues in cs_registers
======Full Message======
[Doc] Fix some rendering issues in cs_registers

- fixes #306



======Commit: f35db04b======
======Short Message======
[RTL PMP] Fix address matching bugs
======Full Message======
[RTL PMP] Fix address matching bugs

- Partial matching not relevant for 32bit only accesses
- Apply region size masking correctly



======Commit: 2aacd2b9======
======Short Message======
[Priv modes] Add support for U-Mode
======Full Message======
[Priv modes] Add support for U-Mode

- General changes to suport U-mode (fixes #88)
- Update documentation
- Add priv mode flops to CSRs module
- Propagate correct priv mode to PMP module
- Implement CSR priv-mode permission checking
- Implement illegal U-mode instruction checking
- Add extra mstatus bits for U-mode (MPRV and TW)



======Commit: f54dfe5d======
======Short Message======
RISC-V Compliance test: Enable tracing
======Full Message======
RISC-V Compliance test: Enable tracing

Use the tracing-enabled core wrapper when executing the RISC-V
compliance test suite to help with debugging it.



======Commit: 09088179======
======Short Message======
Tracer: Fix default file name
======Full Message======
Tracer: Fix default file name

We document the default file name to be trace_core_00000000.log, but
actually used trace_core__00000000.log. Fix that.



======Commit: 74780e7e======
======Short Message======
Implement Verilator-compatible tracer, and use it
======Full Message======
Implement Verilator-compatible tracer, and use it

The ibex_tracer module implements an execution tracer, observing the
execution flow and writing a human-readable execution trace. The trace
information is coming from the RVFI signals, as specified at
https://github.com/SymbioticEDA/riscv-formal/blob/master/docs/rvfi.md.

The existing implementation was tailored for use in ModelSim and other
commercial simulators, and used SystemVerilog features which are not
supported in Verilator or Icarus Verilog, such as classes, queues and
non-standard format specifiers (e.g. the `-` specifier for right-aligned
output). Being unable to see an execution trace when using Verilator
significantly reduced productivity and its usefulness.

This commit refactors the tracer to only use SystemVerilog constructs
which are supported in Verilator. While doing so, multiple improvements
were made for correctness and style.

Major changes:

- Improve compatibility with Verilator. Remove many non-synthesizable
  SystemVerilog constructs, such as classes and queues.
  Use casez instead of casex for better Verilator support (Verilator
  doesn't support X).
- Make the decoded output of the tracer match objdump from binutils
  exactly. Doing so is beneficial for two reasons: we can easily
  cross-check the decoded output from the tracer against the disassembly
  produced by objdump (and we did that), and users don't need to get
  used to another slighly different disassembly format.
- A plusarg "+ibex_tracer_file_base=ibex_my_trace" can be used to set a
  different basename for the trace log file.

Smaller cleanups:

- Remove decoding of reg-reg loads, which were leftover from a PULP
  extension.
- Make better use of the data available on the RVFI. Pass all of RVFI
  to the tracer, and use the provided data instead of manually
  recreating it, e.g. to get register data or the jump target.
- Rename all "instr" abbreviations to "insn". "insn" is what RVFI uses
  (and we cannot change that), so for consistency we now always use this
  abbreviation across the file.

All CSR names have been imported from binutils' riscv-opc.h file, available at
https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob_plain;f=include/opcode/riscv-opc.h
using this small C program:

  #include <stdio.h>

  #define STR(s) #s

  int main(int argc, char **argv) {
    printf("unique case (csr_addr)\n");
  #define DECLARE_CSR(name, csraddr) \
    printf("  12'd%d: return \"%s\";\n", csraddr, STR(name));
  #include "riscv-opc.h"
    printf("  default: return $sformatf(\"0x%%x\", csr_addr);\n");
    printf("endcase\n");
    return 0;
  }

The RISC-V compliance test suite for the RV32 I, M, and C extensions has
been executed and traced. The disassembly of all traces have been
compared against traces produced by objdump to ensure identical output.

This PR is based on work by Rahul Behl <raulbehl@gmail.com> in #280.
Thank you Rahul for providing a great starting point for this work!



======Commit: 2a947c5e======
======Short Message======
[RTL] Fix timing path around exceptions and pc_set
======Full Message======
[RTL] Fix timing path around exceptions and pc_set

When an exception occurs controller goes into the flush state and then
does a pc_set to go the exception handler.  So there is no need for the
incoming signals that indicate an exception to factor directly into
pc_set_o.  This flops exc_req and illegal_insn to break long timing
paths that were occurring because of this.

Fixes #305



======Commit: 47505c21======
======Short Message======
Docs: Fix Sphinx warnings and errors
======Full Message======
Docs: Fix Sphinx warnings and errors



======Commit: f2048ea8======
======Short Message======
[DV] Debug single step test (#362)
======Full Message======
[DV] Debug single step test (#362)




======Commit: e6b42a15======
======Short Message======
Tracer: Update copyright notice to match other files
======Full Message======
Tracer: Update copyright notice to match other files

In this file I missed updating the ETH/UniBo copyright notice to include
a reference to the CREDITS.md. Fixing that for consistency.



======Commit: f2fccaad======
======Short Message======
[Prefetch buffer] - various bug fixes
======Full Message======
[Prefetch buffer] - various bug fixes

- Fix incorrect address output to mepc on interrupt (fixes #320)
- Fix instruction address changing before grant (fixes #296)
- Suppress requests and reg writes on fetch error (fixes #340)
- Remove excess address flops in fetch_fifo
- Remove restriction on outstanding requests



======Commit: 074e637b======
======Short Message======
[DV] Fix ovpsim compare issue (#355)
======Full Message======
[DV] Fix ovpsim compare issue (#355)

* [DV] Fix ovpsim compare issue

* Update some test descriptions to avoid timeouts, update debug test



======Commit: 1615969b======
======Short Message======
[DV] Refactor debug stress stimulus to avoid race conditions (#354)
======Full Message======
[DV] Refactor debug stress stimulus to avoid race conditions (#354)




======Commit: 95a82f8b======
======Short Message======
Update google_riscv-dv to google/riscv-dv@d341944 (#353)
======Full Message======
Update google_riscv-dv to google/riscv-dv@d341944 (#353)

Update code from upstream repository https://github.com/google/riscv-
dv to revision d3419444ca2fdb499a204587b2d36c6f5c1e0c44

* Update README (Udi)
* Add knob to enable full CSR randomization, fix mstatus.spp (Udi)


======Commit: 6bae3f2d======
======Short Message======
Tighten debug stimulus assertion (#351)
======Full Message======
Tighten debug stimulus assertion (#351)




======Commit: 83178c69======
======Short Message======
Update google_riscv-dv to google/riscv-dv@e3e1e30 (#349)
======Full Message======
Update google_riscv-dv to google/riscv-dv@e3e1e30 (#349)

Update code from upstream repository https://github.com/google/riscv-
dv to revision e3e1e308cfc3d718aeb94bb3463371979d9a31ae

* Disable full trace in the run script (google/riscv-dv#180) (taoliug)
* Fix spike logging issue (google/riscv-dv#179) (taoliug)
* Add functional coverage for HINT instructions (google/riscv-dv#177)
  (taoliug)
* Add functional coverage for various hazard conditions (google/riscv-
  dv#176) (taoliug)


======Commit: 1e8381bf======
======Short Message======
Update google_riscv-dv to google/riscv-dv@4450592 (#347)
======Full Message======
Update google_riscv-dv to google/riscv-dv@4450592 (#347)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 44505927a70a6234b996d15f2e51bd1e2632b68e

* Dump performance counters to testbench at EOT (Udi)
* Fix a constraint issue (google/riscv-dv#174) (taoliug)
* Allow split a long test to small batches (google/riscv-dv#173)
  (taoliug)
* Fix ius compile problem (google/riscv-dv#172) (taoliug)
* Add basic functional coverage for RV64IMC (google/riscv-dv#171)
  (taoliug)
* Initial prototype of functional coverage (google/riscv-dv#169)
  (taoliug)


======Commit: ec02461b======
======Short Message======
[DV] Fix implemented_csr[] compile issue (#346)
======Full Message======
[DV] Fix implemented_csr[] compile issue (#346)




======Commit: 717bf1ae======
======Short Message======
Fix memory error test logic (#344)
======Full Message======
Fix memory error test logic (#344)




======Commit: 83d2185c======
======Short Message======
Tracing: Wrap fatal error message with `$fatal()`
======Full Message======
Tracing: Wrap fatal error message with `$fatal()`

The syntax of this statement is not correct without the `$fatal()` SV
construct. This causes errors in some tools even if the error condition
is not met.



======Commit: 2f120d4a======
======Short Message======
Update google_riscv-dv to google/riscv-dv@80d4294 (#333)
======Full Message======
Update google_riscv-dv to google/riscv-dv@80d4294 (#333)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 80d429475138b4b94d863030246a06980c89889d

* Fix mstatus randomization issue (google/riscv-dv#168) (taoliug)
* Lower the percentage of JAL instruction (google/riscv-dv#167)
  (taoliug)
* Add an option to run a directed assembly test with ISS
  (google/riscv-dv#166) (taoliug)
* Add memory fault handlers (Udi)


======Commit: e694fa05======
======Short Message======
Add memory error testing (#330)
======Full Message======
Add memory error testing (#330)




======Commit: fa31484a======
======Short Message======
Lint: Fix signal width in tracer
======Full Message======
Lint: Fix signal width in tracer

These width warnings are only visible if RVFI is enabled and reported by
Verilator lint.



======Commit: 80e231dd======
======Short Message======
Add interrupt testing, and update some debug test checks (#324)
======Full Message======
Add interrupt testing, and update some debug test checks (#324)




======Commit: 2c71a266======
======Short Message======
Update google_riscv-dv to google/riscv-dv@0d2b5b7 (#321)
======Full Message======
Update google_riscv-dv to google/riscv-dv@0d2b5b7 (#321)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 0d2b5b7b8b1cdbce74d9e123a427052b12accd7b

* Add user extension support (google/riscv-dv#163) (taoliug)
* Update README (google/riscv-dv#162) (taoliug)
* Fix compilation issue (google/riscv-dv#161) (taoliug)
* Fix compilation issue (google/riscv-dv#160) (taoliug)
* Adding dsim support (google/riscv-dv#159) (taoliug)
* Fix RV64A typo (google/riscv-dv#158) (taoliug)


======Commit: 9958d300======
======Short Message======
[DV] Fix latch in simple bus
======Full Message======
[DV] Fix latch in simple bus

Fixes #297



======Commit: 72803013======
======Short Message======
Fix ELF section name (#314)
======Full Message======
Fix ELF section name (#314)




======Commit: 54eb5c24======
======Short Message======
Fix regression failure (#313)
======Full Message======
Fix regression failure (#313)




======Commit: f025236a======
======Short Message======
[I-side] - Fix issues found in tracing example
======Full Message======
[I-side] - Fix issues found in tracing example

- Fixes #288
- Add missing grant qualification to stop incorrect address updates
- Make RTL robust to spurious rvalid signalling
- Make sure a request is held until granted
- Remove incorrect assertion



======Commit: 85ae06d0======
======Short Message======
Controller: fix `nmi_mode` default assignment
======Full Message======
Controller: fix `nmi_mode` default assignment

Without this commit, the `nmi_mode` register is continuously cleared and
set again, and the core can never handle the NMI.

This resolves lowRISC/ibex#300 reported by @udinator.



======Commit: 8d3d87ae======
======Short Message======
Controller: Fix exception cause ID of fast interrupts
======Full Message======
Controller: Fix exception cause ID of fast interrupts

This commit fixes the generation of the exception cause ID for fast
interrupts. Without this commit, the core tries to handle fast
interrupts using the handlers of other interrupts like external,
software, and timer interrupts.

This commit resolves lowRISC/ibex#290 reported by @udinator.



======Commit: b87ed7c8======
======Short Message======
[I-side] - Fix assertion error
======Full Message======
[I-side] - Fix assertion error

- Assertion was added in the wrong file



======Commit: 7ddee54f======
======Short Message======
Fix syntax error
======Full Message======
Fix syntax error



======Commit: 60de915d======
======Short Message======
Adding Compressed Instruction support in tracer
======Full Message======
Adding Compressed Instruction support in tracer

Added compressed instruction decoder in the tracer to correctly
trace compressed instructions with their mnemonics. Fixes #197



======Commit: 1162b995======
======Short Message======
CSRs: reset `dcsr.XDEBUGVER` to `XDEBUGVER_STD` instead of 0
======Full Message======
CSRs: reset `dcsr.XDEBUGVER` to `XDEBUGVER_STD` instead of 0

This field is read only and should be set to the right value straight
away.

This fixes lowRISC/ibex#285.



======Commit: 16177fe8======
======Short Message======
[RTL] Fix I-side timing loop
======Full Message======
[RTL] Fix I-side timing loop

- See issue #265 (partially fixes)
- Remove path from instr_rvalid_i to instr_req_o
- Prefetch buffer unit can now issue up to two outstanding requests
- Structure moved from state machine to request queue
- Change fetch fifo to use an unaligned flag rather than updating
  the address each time



======Commit: bec84ca2======
======Short Message======
Add core_sleep_o to ibex interface
======Full Message======
Add core_sleep_o to ibex interface

Signals the core is totally idle (WFI with no outstanding memory
transactions).  Fixes #258



======Commit: 36db1041======
======Short Message======
[RTL] - Remove timing loop in LSU
======Full Message======
[RTL] - Remove timing loop in LSU

- Relates to issue #265
- External signals data_rvalid_i and data_err_i were factored
  into the external data_req_o signal
- To improve timing, these signals are decoupled
- The second part of an unaligned transaction will now be issued
  even if the first received an error response
- The state machine will service the abandoned requests
- pmp_err_q fixed to only update at specific times



======Commit: 9b51b114======
======Short Message======
CSR: Access checks on Debug CSRs
======Full Message======
CSR: Access checks on Debug CSRs

  - The RISC-V Debug Spec v.0.13.2 (p.41) mandates that the core
    debug CSRs dcsr, dpc, dscratch0 and dscratch1 must not be
    accessible if not in debug mode. Fixes #275



======Commit: 892ad8a6======
======Short Message======
[RTL] - Add PMP module
======Full Message======
[RTL] - Add PMP module

- Instantiate generic PMP module
- Wire up I-side and D-side PMP faults
- The output of the PMP check is used to gate external bus requests from the
  I-side and LSU
- Each of those units progresses with their request as-if it was granted
  externally and registers the PMP error
- The error is then sent to the controller at the appropriate time to trigger
  an exception



======Commit: d79722ba======
======Short Message======
Controller: change behavior of DRET instruction
======Full Message======
Controller: change behavior of DRET instruction

Executing a DRET instruction outside of debug mode now causes an
illegal instruction exception as mandated by the Debug Spec v0.13.2
p.41.

This resolves lowRISC/ibex#270.



======Commit: 68b17063======
======Short Message======
Update interrupt mode, add debug mode WFI test (#268)
======Full Message======
Update interrupt mode, add debug mode WFI test (#268)




======Commit: 2b934758======
======Short Message======
Lint: Update Verilator waiver file
======Full Message======
Lint: Update Verilator waiver file

PR #236 broke the Verilator lint since lines changed. Fix that.



======Commit: 6a88d1ed======
======Short Message======
Update google_riscv-dv to 102791d (#266)
======Full Message======
Update google_riscv-dv to 102791d (#266)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 102791dbb7eb992d3bc22336d2e4e5f0d688e761

* Merge pull request #104 from google/flow (taoliug)
* Remove debug print (Tao Liu)
* Merge pull request #103 from google/flow (taoliug)
* Improve randomization performance (Tao Liu)
* Merge pull request #102 from udinator/debug (taoliug)
* Prevent x0 from being used as load adress register (Udi)


======Commit: 14b8f889======
======Short Message======
Replace author credits in files with CREDITS.md
======Full Message======
Replace author credits in files with CREDITS.md

We currently have a documentation block at the beginning of each file,
containing author credits and module-level documentation. The
module-level documentation is retained for historic reasons and
duplicated with the newer comments below it.

For the authors, maintaining author credits in the file is error-prone,
as this information gets outdated very soon. A more reliable way to see
who modified a file is to use the history information in git.
Additionally, we now have the CREDITS.md file, which lists all
contributors, even the ones which don't appear in the git history (e.g.
because the code was copied and commited by someone else).



======Commit: ce8be4f2======
======Short Message======
Update google_riscv-dv to google/riscv-dv@faddfa4 (#263)
======Full Message======
Update google_riscv-dv to google/riscv-dv@faddfa4 (#263)

Update code from upstream repository https://github.com/google/riscv-
dv to revision faddfa49f456f3f8ef8c4231865994b7b13aa96d

* Obsolete test clean up (Tao Liu)
* Remove the old flow (Tao Liu)
* minor fix, update README for A extension support (Tao Liu)
* Add basic atomic instruction test (Tao Liu)
* Add RV32A/RV64A instructions (google/riscv-dv#95) (Tao Liu)
* Fix the missing GPR save operations for exception handling (Tao Liu)
* Generate handshake sequence to communicate with testbench (Udi)
* Fix compare error (Tao Liu)
* Fix compare error (Tao Liu)
* Initial signature enum for handshake protocol (Udi)


======Commit: 399f0b7e======
======Short Message======
Update documentation how to run riscv-compliance
======Full Message======
Update documentation how to run riscv-compliance

Upstream has now included ibex support, we don't need to use a custom
fork any more. Update the documentation for that.

Fixes #214



======Commit: e2b9c17c======
======Short Message======
Update google_riscv-dv to e81acc9 (#257)
======Full Message======
Update google_riscv-dv to e81acc9 (#257)

Update code from upstream repository https://github.com/google/riscv-
dv to revision e81acc9ab4f692ff205a207c2dc3d9f2b0284d39

* Merge pull request #89 from google/dev (taoliug)
* Fix mtvec alignement (Tao Liu)


======Commit: a7522772======
======Short Message======
Update google_riscv-dv to 73274f2 (#254)
======Full Message======
Update google_riscv-dv to 73274f2 (#254)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 73274f227000f1316cb201a8503aad437e427948

* Merge pull request #88 from google/dev (taoliug)
* Fix spike log processing issue (Tao Liu)
* Merge pull request #87 from google/dev (udinator)
* Add vectored interrupt support (Tao Liu)
* Merge pull request #85 from udinator/debug (udinator)
* Add debug sub-programs, and extra options to generator (Udi)
* Merge pull request #84 from imphil/fix-apache-urls (taoliug)
* Fix license URLs in comments (Philipp Wagner)


======Commit: 9311b25f======
======Short Message======
Consolidate some debug generation options, and make the signature_addr handshake optional (#253)
======Full Message======
Consolidate some debug generation options, and make the signature_addr handshake optional (#253)




======Commit: 3bc83365======
======Short Message======
Add more debug tests (#251)
======Full Message======
Add more debug tests (#251)




======Commit: 501cc2bb======
======Short Message======
ram_1p.sv: Fix rvalid_o generation
======Full Message======
ram_1p.sv: Fix rvalid_o generation

This signal must also be set in case of write transactions as it is
a request valid and not a read valid.



======Commit: 6ccd2b69======
======Short Message======
Update google_riscv-dv to google/riscv-dv@7cce16c (#246)
======Full Message======
Update google_riscv-dv to google/riscv-dv@7cce16c (#246)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 7cce16c0a212c8713a82516fbf8f2570d3dc4505

* Update spike log processing script to include full trace information
  (Tao Liu)
* Add new tests (Tao Liu)
* Add basic debug test functionality (Udi)
* fix spelling error, fix output directory arg (Udi)
* Add shorten option (dang hai)
* Support SAIL-RISCV ISSi, update README (Tao Liu)
* Fix CSR map copy issue (Tao Liu)


======Commit: e4260dd0======
======Short Message======
Add basic debug test and modify sim flow (#243)
======Full Message======
Add basic debug test and modify sim flow (#243)




======Commit: 7eecbd1b======
======Short Message======
Update google_riscv-dv to 63fa0ca (#241)
======Full Message======
Update google_riscv-dv to 63fa0ca (#241)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 63fa0ca922ecf10f3cd733d15a0a79a7937a591e

* Merge pull request #74 from google/dev (taoliug)
* Add gcc compile options, fix unaligned load/store (Tao Liu)
* Merge pull request #72 from google/dev (taoliug)
* Properly disable branch instruction in push/pop stack operations
  (Tao Liu)


======Commit: e087e324======
======Short Message======
Update google_riscv-dv to google/riscv-dv@07599f6 (#240)
======Full Message======
Update google_riscv-dv to google/riscv-dv@07599f6 (#240)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 07599f689a385794cb73932922008bdbe8131d82

* Fix introduced TypeError in run.py (Udi)


======Commit: 9309621f======
======Short Message======
Fix the verbose logging issue, fix coverage/waveform options (#235)
======Full Message======
Fix the verbose logging issue, fix coverage/waveform options (#235)




======Commit: 44b033cf======
======Short Message======
[rtl] Add support for instruction fetch errors
======Full Message======
[rtl] Add support for instruction fetch errors

- Add required signals to top-level
- Propagate error through fetch stages
- Add new exception type
- Update documentation for new exception type
- Resolves issue #109



======Commit: ca97cfb5======
======Short Message======
CSRs: add `irq_` prefix to `Interrupts_t` members
======Full Message======
CSRs: add `irq_` prefix to `Interrupts_t` members

This commit adds a prefix to the members of the `Interrupts_t` struct
to avoid linting errors in AMS mode.



======Commit: 48f77c6a======
======Short Message======
Fix broken links in the verification doc (#230)
======Full Message======
Fix broken links in the verification doc (#230)




======Commit: bf78a88e======
======Short Message======
Fix linting warning
======Full Message======
Fix linting warning



======Commit: ea0296d7======
======Short Message======
Fix IF stalls preventing deassertion of regfile write enable (#222)
======Full Message======
Fix IF stalls preventing deassertion of regfile write enable (#222)

* ID stage: make single-cycle instr clear `instr_multicycle_done_q`

Previously, this signal was only cleared when starting the next
multi-cycle instruction.

* ID stage: only eval `instr_multicycle_done_q` for multi-cycle instr

This signal should only be evaluated if the ID/EX stage currently
executes a multi-cycle instruction. Without this commit, the signal
is also evaluated for single-cycle instructions and can for example
cause the register file write enable to not be de-asserted in case of
stalls in the IF stage.

This bug was repored by @udinator. This resolves lowrisc/ibex#216.



======Commit: 50f8cbd4======
======Short Message======
Fix waveform/coverage dump mode (#215)
======Full Message======
Fix waveform/coverage dump mode (#215)




======Commit: 3c5e9984======
======Short Message======
Document specifications we aim to support
======Full Message======
Document specifications we aim to support

Fixes #124



======Commit: 187f6c9c======
======Short Message======
Fixed broken URL in readme.
======Full Message======
Fixed broken URL in readme.



======Commit: cee2e939======
======Short Message======
Remove `csr_restore_dret_i` signal
======Full Message======
Remove `csr_restore_dret_i` signal

This signal was used to restore `mstatus` when executing DRET.
But this is not needed as `mstatus` is not modified when entering
debug mode.



======Commit: a7f344b0======
======Short Message======
Avoid linting errors
======Full Message======
Avoid linting errors



======Commit: 6d72aebc======
======Short Message======
Correct cause number for illegal instruction exception
======Full Message======
Correct cause number for illegal instruction exception

This bug has beed reported by @taoliug. This resolves #195.



======Commit: 2bf1ab92======
======Short Message======
Fix interrtup test (#189)
======Full Message======
Fix interrtup test (#189)

Update TB for the new interrupt interface


======Commit: bcaead3e======
======Short Message======
ibex_tracer: Remove Verilator gating
======Full Message======
ibex_tracer: Remove Verilator gating

We want people to get an error when compiling the tracer with Verilator:
this file should not be used with Verilator. An error is better than
silently getting the wrong result.



======Commit: bc61f0bf======
======Short Message======
Fix compile issue caused by design changes (#179)
======Full Message======
Fix compile issue caused by design changes (#179)




======Commit: 74e841b0======
======Short Message======
Update google_riscv-dv to 4e0d063 (#178)
======Full Message======
Update google_riscv-dv to 4e0d063 (#178)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 4e0d063fea574cfae55c5bb627771b69d9899899

* Merge pull request #38 from google/dev (taoliug)
* Fix illegal instruction test issue Fix Xcelium compile failure #37
  (Tao Liu)


======Commit: 428d057c======
======Short Message======
Rename ibex_[tracer_]define to ibex_[tracer_]pkg
======Full Message======
Rename ibex_[tracer_]define to ibex_[tracer_]pkg

This file doesn't contain defines any more, but a normal SV package.

The diff is best viewed without whitespace changes, as the reindents
cause a lof of diff noise.

Fixes lowrisc/ibex#173



======Commit: 04f4cd44======
======Short Message======
Decoder: avoid setting PC upon illegal JALR instructions
======Full Message======
Decoder: avoid setting PC upon illegal JALR instructions

Without this commit, the PC is still set to a possible wrong jump
target on illegal JALR instructions ultimately causing the wrong PC
being saved to `mepc` during the illegal instruction exception.

This bug has been reported by @taoliug. This commit resolves #170.



======Commit: 63702b3e======
======Short Message======
ID/EX stage: do not write to register file upon load errors
======Full Message======
ID/EX stage: do not write to register file upon load errors

This commit fixes the write back FSM to not store values returned from
memory to the register file when the LSU is reporting a load error.

This bug was reported by @ivanmgribeiro. This commit resolves #162.



======Commit: 010985a3======
======Short Message======
Controller: save next PC to dpc CSR upon a halt request
======Full Message======
Controller: save next PC to dpc CSR upon a halt request

This commit changes the controller to save the PC of the next
instruction to the dpc CSR when entering debug mode upon a halt
request instead of the PC of the current instruction (only valid
for EBREAK instructions).

This bug was reported by @taoliug. This resolves #164.



======Commit: 59254498======
======Short Message======
Decoder: fix signaling and detection of illegal instructions
======Full Message======
Decoder: fix signaling and detection of illegal instructions

This commit fixes two bugs in the decoder:

1. For illegal branch condition selections, the illegal instruction
condition must be signaled as long as the instruction is being executed
and not just during the first cycle, as the controller cannot interrupt
multicycle instructions.

2. Illegal instructions should also be signaled when `instr[28]` is set
for register-register ALU operations. Previously, these were not
signaled as the original design used `instr[28]` to encode custom bit-
manipulation instructions.

These bugs were discovered by @taoliug. This resolves issue #163.



======Commit: c96ece04======
======Short Message======
fix ibex regression script (#165)
======Full Message======
fix ibex regression script (#165)




======Commit: d059979a======
======Short Message======
RVFI based on core state (#151, fix #147)
======Full Message======
RVFI based on core state (#151, fix #147)

The RVFI implementation make use of signals from the decoder and
controller to detect the state of the processor.
Especially the signal for a new and retired instruction.



======Commit: a38389e3======
======Short Message======
Remove linting errors for RVFI-related signals
======Full Message======
Remove linting errors for RVFI-related signals



======Commit: 30f2d6db======
======Short Message======
debug mode related TB updates (#160)
======Full Message======
debug mode related TB updates (#160)




======Commit: 6b49f320======
======Short Message======
Update google_riscv-dv to 2e5a401 (#159)
======Full Message======
Update google_riscv-dv to 2e5a401 (#159)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 2e5a40145a367ac3b04f78fee02c5011022719fd

* Merge pull request #36 from google/dev (taoliug)
* Add basic debug mode support (Tao Liu)


======Commit: 4eaa5704======
======Short Message======
fix debug_seq runtime options, update trace processing script (#158)
======Full Message======
fix debug_seq runtime options, update trace processing script (#158)




======Commit: a775abd9======
======Short Message======
Fix dpc CSR not updated (#157)
======Full Message======
Fix dpc CSR not updated (#157)

* Controller: remove impossible condition for `DBG_TAKEN_IF`

There is no way to jump into `DBG_TAKEN_IF` because of an EBREAK
instruction. Thus, this case also does not need to be checked.

* Controller: do not enter debug when `debug_req_i` goes low

With this commit, the core is prevented from entering debug mode when
the debug request signal is deasserted during that procedure.
Previously, the core would still enter debug mode but not updating the
debug CSR.

This resolves #153 reported by @taoliug.

* Update ibex_controller.sv



======Commit: c4370083======
======Short Message======
CSRs: replace `_n` suffix of register signals by `_d`
======Full Message======
CSRs: replace `_n` suffix of register signals by `_d`



======Commit: b1df8369======
======Short Message======
Controller FSM: simplify `debug_mode_q`-related control
======Full Message======
Controller FSM: simplify `debug_mode_q`-related control

The FSM now uses input signals for interrupt and debug request handling
that depend on whether the core is in debug mode. This avoids the need
for many `debug_mode_q` guards and somewhat simplifies the FSM.

If in debug mode, the core shall not handle interrupts according to the
spec anyway.



======Commit: b0d2c0ff======
======Short Message======
Add support for debug mode and interrupt test (#146)
======Full Message======
Add support for debug mode and interrupt test (#146)




======Commit: 35a5a737======
======Short Message======
Do not set PC when setting exceptions registers in single stepping
======Full Message======
Do not set PC when setting exceptions registers in single stepping

In the next state, the PC is set to jump into debug anyway.



======Commit: 95c0dc05======
======Short Message======
Fix handling of single stepping
======Full Message======
Fix handling of single stepping

Single stepping should execute exactly one more instruction, not abort
any running (multicycle) instructions, and only enter debug mode after
the current instruction is finished. In case the current instruction
leads to an exception, the exception registers must be set accordingly,
but the core must jump into debug mode instead of the exception
handler.

Previous to this commit, single stepping would immediately jump into
debug mode and ignore any exceptions.



======Commit: 9ef3c13f======
======Short Message======
Fix control for interrupts, debug request and multicycle instr
======Full Message======
Fix control for interrupts, debug request and multicycle instr

This commit makes sure that interrupts and debug requests do not
interrupt currently running multicycle instructions. Priority is
given 1) to the currently running instruction, possible exceptions
caused by this instruction, 2) debug requests, 3) interrupt
requests.

Previously, currently running instructions were aborted upon
incoming debug and interrupt requests, which could corrupt the
processor state and lead to exceptions being ignored.

This commit resolves #108 and #121.



======Commit: 205db5e6======
======Short Message======
Change return to exit in sim script (fixes #137)
======Full Message======
Change return to exit in sim script (fixes #137)



======Commit: b203a0f7======
======Short Message======
Add bash shebang to sim script(fixes #133) (#135)
======Full Message======
Add bash shebang to sim script(fixes #133) (#135)




======Commit: 8b4e3371======
======Short Message======
Decoder: fix drive conflict, set `jump_set_o` for JALR
======Full Message======
Decoder: fix drive conflict, set `jump_set_o` for JALR

This commit solves problems reported by @jeanlouismaquet in #130.



======Commit: 81db2eb1======
======Short Message======
Fix doc typo introduced in #128
======Full Message======
Fix doc typo introduced in #128



======Commit: ce042bd3======
======Short Message======
Document that misa is hard-wired
======Full Message======
Document that misa is hard-wired

Fixes #123.



======Commit: ec89314a======
======Short Message======
Update google_riscv-dv to 949552f (#127)
======Full Message======
Update google_riscv-dv to 949552f (#127)

Update code from upstream repository https://github.com/google/riscv-
dv to revision 949552f964eec9d058c7c90889bdd5b80d1e60ad

* Merge pull request #33 from google/dev (taoliug)
* Add control for the privileged CSR checking (Tao Liu)
* Merge pull request #32 from google/dev (taoliug)
* Fix minor issue in comparing script (Tao Liu)


======Commit: 73e94fb6======
======Short Message======
Comment on RV32E register address check in compressed decoder
======Full Message======
Comment on RV32E register address check in compressed decoder

It is not necessary to do this check in the compressed decoder. If a
compressed instruction in RV32E tries to access any register x16 - x31,
the regular decoder triggers an illegal instruction exception and the
controller writes the actual faulting (compressed) instruction to
`mtval`.



======Commit: 5093e0a0======
======Short Message======
Explicitly set `alu_op_x_mux_sel` in decoder
======Full Message======
Explicitly set `alu_op_x_mux_sel` in decoder

To make the regfile address check in RV32E not triggering false alarms
when accessing reg x16 - x31, the decoder should only set the muxes
for the regfile output when the instruction actually requires the
regfile output.

It is cleaner to explicitly set the `alu_op_x_mux_sel` signals to
`OP_X_REG_X` instead of relying on the default assignment if they
are really needed.



======Commit: 6a1ac272======
======Short Message======
Fix linting errors
======Full Message======
Fix linting errors



======Commit: 8613e880======
======Short Message======
LSU cleanup, abort misaligned ops if first part fails
======Full Message======
LSU cleanup, abort misaligned ops if first part fails

This commit cleans up the LSU and fixes two bugs:

1. If a misalgned transaction creates an error during the first
   part of the transaction, the second part is not pushed out and
   the transaction is aborted. Previously, the LSU tried to output
   also the second part but did not adhere to the defined
   protocol.

2. Misaligned operations are again working correctly. Previously,
   the generation of the byte enable and the alignment of read
   data was broken as these operations rely on the updated
   address from the AGU to have the same alignment as the
   original address.

This partially resolves #121.



======Commit: 2d66834f======
======Short Message======
Integrate riscv-dv upstream changes (#107)
======Full Message======
Integrate riscv-dv upstream changes (#107)

* Remove all local patches

* Update google_riscv-dv to 00739df

Update code from upstream repository https://github.com/google/riscv-
dv to revision 00739df0ec744986934097bebcde3ebf5a4fdf81

* Merge pull request #30 from google/dev (taoliug)
* Fix LSF options (Tao Liu)
* Refactoring to make extension easier (Tao Liu)
* Merge pull request #29 from google/dev (taoliug)
* Add a sample program (Tao Liu)
* Merge pull request #28 from google/dev (taoliug)
* Move riscv_core_setting to a separate folder (Tao Liu)
* Merge pull request #27 from google/dev (taoliug)
* Add ebreak/wfi test, more regression control (Tao Liu)
* Merge pull request #26 from google/dev (taoliug)
* Add support for GPR based comparison (Tao Liu)

* Add ibex extensions for riscv_dv



======Commit: 08f535eb======
======Short Message======
Fix updated signal name
======Full Message======
Fix updated signal name



======Commit: b8be9989======
======Short Message======
Fix RVFI rd write enable
======Full Message======
Fix RVFI rd write enable



======Commit: b22a6a10======
======Short Message======
Add `mtval` CSR
======Full Message======
Add `mtval` CSR

`mtval` can provide additional information to trap handlers.
In case of load/store errors, it holds the failing address.
For illegal instruction exceptions, it holds the illegal instruction.



======Commit: d00db652======
======Short Message======
Avoid WIDTH lint warnings in Verilator
======Full Message======
Avoid WIDTH lint warnings in Verilator

Verilator displays the following lint warnings:

%Warning-WIDTH: ../src/lowrisc_ibex_ibex_0.1/rtl/ibex_cs_registers.sv:100: Operator SHIFTL expects 32 bits on the LHS, but LHS's VARREF 'RV32E' generates 1 bits.
                ... Use "/* verilator lint_off WIDTH */" and lint_on around source to disable this message.
%Warning-WIDTH: ../src/lowrisc_ibex_ibex_0.1/rtl/ibex_cs_registers.sv:103: Operator SHIFTL expects 32 bits on the LHS, but LHS's VARREF 'RV32M' generates 1 bits.
%Warning-WIDTH: ../src/lowrisc_ibex_ibex_0.1/rtl/ibex_cs_registers.sv:108: Operator SHIFTL expects 32 bits on the LHS, but LHS's VARREF 'MXL' generates 2 bits.
%Warning-WIDTH: ../src/lowrisc_ibex_ibex_0.1/rtl/ibex_register_file_ff.sv:63: Operator EQ expects 32 bits on the LHS, but LHS's VARREF 'waddr_a_i' generates 5 bits.

It's not quite clear (to me) from reading the SV spec if this is a bug
in Verilator lint, or if this is actually a code bug.

Alternative proposal for #92



======Commit: d811c04c======
======Short Message======
Disable performance counters by default
======Full Message======
Disable performance counters by default

Performance counters are an optional feature. Disable them by default to
avoid users having them enabled unknowingly and paying the (rather
large) area price for it.



======Commit: b3c6c7dd======
======Short Message======
Correct LSU assertion
======Full Message======
Correct LSU assertion

Errors are signaled with `rvalid` and not with `gnt`.



======Commit: 157eb5bc======
======Short Message======
Fix performance counters
======Full Message======
Fix performance counters

Without this commit, the performance counters mhpmcounter3(h)-
mhpmcounter31(h) are optimized away during synthesis due to
`X`-values in the address decoder masks. This commit replaces
these masks with offsets and instead masks the input address
before comparison.

To enable the synthesizer optimizing away unused counters,
the masks for these counters are set to zero.



======Commit: ec3b246f======
======Short Message======
Doc: Add `debug_req_i` to blockdiagram
======Full Message======
Doc: Add `debug_req_i` to blockdiagram



======Commit: 826da152======
======Short Message======
Fix vim setting suggestion
======Full Message======
Fix vim setting suggestion



======Commit: d363a3d3======
======Short Message======
Fix linting errors
======Full Message======
Fix linting errors



======Commit: 8bada6a0======
======Short Message======
Fix RVFI signal name
======Full Message======
Fix RVFI signal name



======Commit: cc8aed4e======
======Short Message======
Fix tcl path (#73)
======Full Message======
Fix tcl path (#73)




======Commit: d77bc495======
======Short Message======
Import riscv-dv @b4bd0c6cff0456111be966a11c1bd0aeec2d96e4 (#69)
======Full Message======
Import riscv-dv @b4bd0c6cff0456111be966a11c1bd0aeec2d96e4 (#69)

* update ibex patch file

* Update google_riscv-dv to b4bd0c6

Update code from upstream repository https://github.com/google/riscv-
dv to revision b4bd0c6cff0456111be966a11c1bd0aeec2d96e4

* Merge pull request #24 from google/dev (taoliug)
* Add option to skip reading scratch register (Tao Liu)



======Commit: 6d81447d======
======Short Message======
Doc: Switch back to upstream Sphinx
======Full Message======
Doc: Switch back to upstream Sphinx

Upstream has now released a new version which includes Stefan's patch to
correctly build the PDFs.

Fixes #41



======Commit: 50c73dcf======
======Short Message======
fix ibex TB top compilation issue (#58)
======Full Message======
fix ibex TB top compilation issue (#58)




======Commit: 7a5c8ef5======
======Short Message======
Fix clear operation for performance counters in CSR.
======Full Message======
Fix clear operation for performance counters in CSR.

This operation was not properly implemented. Resolves #16.



======Commit: 53197341======
======Short Message======
Fix decoding of C.LI, C.LUI, C.SRLI, C.SRAI, C.SSLI
======Full Message======
Fix decoding of C.LI, C.LUI, C.SRLI, C.SRAI, C.SSLI

Hints encoded in these compressed instructions must decode into hints
in the corresponding base instructions. This resolves #51.



======Commit: cd15ce88======
======Short Message======
Add riscv-dv vendor in script and patches (#52)
======Full Message======
Add riscv-dv vendor in script and patches (#52)

Add riscv-dv vendor configuration and patches as basis for including the RISC-V DV code in a follow-up commit.


======Commit: 382a6c09======
======Short Message======
Fix non-unique case bug .
======Full Message======
Fix non-unique case bug .

The `nop` instruction ( `32'h00_00_00_13` ) cannot be distinguished from masked `addi` ( `17'b?, 3'b000, 5'b?, 7'h13` ) in `unique casex` statement. The other way around is not a problem, as `addi` cannot have both registers as 0x0. 
This can be also fixed by replacing `unique casex` with `priority casex`. However, in my opinion, it is not a good solution as it may hide future bugs like this.


======Commit: ab4c8699======
======Short Message======
Simplify default assignments to enum types
======Full Message======
Simplify default assignments to enum types

This commit simplifies the assignment of literals to enum types in
default cases by:
- defining or using existing enum values for all-zero values,
- feeding a single `1'bX` into the type cast instead of exact width
  (the tools are fine with that).



======Commit: 409892ec======
======Short Message======
Fix handling of C.MV and C.JR
======Full Message======
Fix handling of C.MV and C.JR

- Decoding must give precedence to rs2 (i.e. instr_i[6:2]) to
  switch between C.MV and C.JR.
  "C.MV is only valid when rs2̸=x0; the code points with rs2=x0
   correspond to the C.JR instruction. The code points with rs2̸=x0
   and rd=x0 are HINTs."

- C.JR is only valid with rs1==x0. Throw an illegal instruction
  exception if that's not the case.
  "C.JR is only valid when rs1̸=x0; the code point with rs1=x0
   is reserved." RV32 Spec, p103

All spec references based on RISC-V Unprivileged ISA
V20190305-Base-Ratification



======Commit: 3de95df0======
======Short Message======
Fix decoding of C.ADD and C.EBREAK
======Full Message======
Fix decoding of C.ADD and C.EBREAK

The RV32C Specification, p106 (RISC-V Unprivileged ISA
V20190305-Base-Ratification) states:

C.ADD adds the values in registers rd and rs2 and writes the result to
register rd. C.ADD expands into add rd, rd, rs2. C.ADD is only valid
when rs2̸=x0; the code points with rs2=x0 correspond to the C.JALR and
C.EBREAK instructions. The code points with rs2̸=x0 and rd=x0 are HINTs.

This essentially says: rs2 == x0 takes precedence when decoding, that's
instr[6:2]. The current code was written with the assumption of
instr[11:7] taking precedence, thus incorrectly decoding a C.ADD HINT.

Fixes lowrisc/ibex#64



======Commit: 145269fd======
======Short Message======
Replace non-unique `case` with `unique case` + `default`
======Full Message======
Replace non-unique `case` with `unique case` + `default`



======Commit: 0305803e======
======Short Message======
Fix alignment in tracer, add `INSTR_LOAD/STORE` parameter
======Full Message======
Fix alignment in tracer, add `INSTR_LOAD/STORE` parameter



======Commit: 3cb86859======
======Short Message======
Remove unnecessary `{}` to avoid linting errors
======Full Message======
Remove unnecessary `{}` to avoid linting errors



======Commit: db75d305======
======Short Message======
Replace non-unique `case` constructs by `unique case`
======Full Message======
Replace non-unique `case` constructs by `unique case`

Our coding guidelines require the usage of `unique case` constructs with
proper `default` cases. This commit implements this change and also makes sure
that potential `'X` are propagated.



======Commit: 74abc47b======
======Short Message======
Add missing `default` in `unique case`, propagate `'X` in FSM states
======Full Message======
Add missing `default` in `unique case`, propagate `'X` in FSM states

This commit adds a `default` to all `unique case` statements. Also, in case
FSMs reach an undefined state, the `'X` is propagated to ease detection
in simulation. Both these changes are required by our coding guidelines.



======Commit: 76cd32e9======
======Short Message======
Add capability to detect and react on load/store errors
======Full Message======
Add capability to detect and react on load/store errors



======Commit: 7728b7b6======
======Short Message======
Typo fix in muldiv: Reminder->Remainder
======Full Message======
Typo fix in muldiv: Reminder->Remainder

I am pretty sure this is about the remainder of the operation.



======Commit: 62185d05======
======Short Message======
Temporarily switch to custom sphinx
======Full Message======
Temporarily switch to custom sphinx

Using figures in admonitions did not work so far. A patch was created
and merge is pending. As long as it is not merged, use custom sphinx.

Fixes #24



======Commit: 29107c52======
======Short Message======
Use unsigned type for part select to avoid linting errors
======Full Message======
Use unsigned type for part select to avoid linting errors



======Commit: 2e697121======
======Short Message======
Specify width of literals cast to enums to avoid linting errors
======Full Message======
Specify width of literals cast to enums to avoid linting errors



======Commit: ac7436f4======
======Short Message======
Align `_Q`/`_q` suffix to coding style guidelines
======Full Message======
Align `_Q`/`_q` suffix to coding style guidelines



======Commit: 5d419cbf======
======Short Message======
Fix wavedrom versions
======Full Message======
Fix wavedrom versions

Ensure to pickup the correct versions for wavedrom.



======Commit: 967834db======
======Short Message======
Use cast before assignment to enum type to avoid Vivado errors
======Full Message======
Use cast before assignment to enum type to avoid Vivado errors



======Commit: c26d89d1======
======Short Message======
Fix linting errors due to `default` in fully-specified case statements
======Full Message======
Fix linting errors due to `default` in fully-specified case statements

This commit replaces fully-specified, binary case statements with default
case by a simple one-line assignment to avoid linting errors. Removing the
default would also work but is more error prone if at a later point more
case are added and the statement is no longer fully-specified.



======Commit: c5f32e47======
======Short Message======
Specify bitlength of bit literal to avoid linting error
======Full Message======
Specify bitlength of bit literal to avoid linting error



======Commit: 1d1ace35======
======Short Message======
Cast enum to logic before bit range select to avoid linting errors
======Full Message======
Cast enum to logic before bit range select to avoid linting errors



======Commit: aa5c3d11======
======Short Message======
Move type cast out of case selector to avoid linting error
======Full Message======
Move type cast out of case selector to avoid linting error



======Commit: 708f9287======
======Short Message======
Declare result of signed arithmetic as signed to avoid linting error
======Full Message======
Declare result of signed arithmetic as signed to avoid linting error



======Commit: a2184f9e======
======Short Message======
Align ALU comparison op naming to instruction names
======Full Message======
Align ALU comparison op naming to instruction names

By default, ops are signed in RISC-V. As opposed to the U suffix for
designating an op as being unsigned, there is no suffix for designating
ops as being signed.



======Commit: af77da96======
======Short Message======
Fix lint issues in ibex_tracer
======Full Message======
Fix lint issues in ibex_tracer



======Commit: fb05a65b======
======Short Message======
Adjust documentation for new debug support
======Full Message======
Adjust documentation for new debug support



======Commit: bae56557======
======Short Message======
Prevent sleep mode on debug request
======Full Message======
Prevent sleep mode on debug request

Debug requests are essentially interrupts and we need to prevent sleep
(or wake up the core) if we get a debug request.



======Commit: 48c0b34b======
======Short Message======
Various fixes to debug implementation
======Full Message======
Various fixes to debug implementation

This commit updates the RISC-V debug spec-compliant debug implementation
by incorporating changes mostly done by Robert Balas on the RI5CY core.

Most notably, single stepping works after this patch is applied.

With this patch the RISC-V debug compliance test built into OpenOCD
passes fully.



======Commit: 401e7e1e======
======Short Message======
Switch to execution-based debug
======Full Message======
Switch to execution-based debug

This commit switches the ibex core from a custom debug system to an
execution-based, standard RISC-V debug system. The port is based on a
port done for the RI5CY core.



======Commit: 6b047574======
======Short Message======
Code cleanup
======Full Message======
Code cleanup

Fix errors and warnings reported by lint tools, and clean up the code
according to our coding style. Move all imports into the module.



======Commit: 3a42f12e======
======Short Message======
Rename zeroriscy to ibex
======Full Message======
Rename zeroriscy to ibex

This commit was prepared by the following script, followed by manual
fixes as needed.

```sh
sed -e 's/zeroriscy/ibex/g' -i.bak *.sv *.md *.yml
sed -e 's/zero-riscy/ibex/g' -i.bak *.sv *.md *.yml
sed -e 's/zeroriscy/ibex/g' -i.bak include/*.sv
sed -e 's/zero-riscy/ibex/g' -i.bak include/*.sv
sed -e 's/cluster_clock_gating/clock_gating/g' -i.bak *.sv
rm -f *.bak
rm -f include/*.bak

find . -name 'zeroriscy_*' -exec bash -c 'file={}; git mv $file ${file/zeroriscy/ibex}' \;
```



======Commit: 99964c84======
======Short Message======
Doc: Inline documentation of waveforms
======Full Message======
Doc: Inline documentation of waveforms

So far I used wavedrom for rendering, but that required external
tooling. After patching the extension, sphinx can now render inline
waveforms!



======Commit: 27e4dd84======
======Short Message======
Merge pull request #10 from isarrider/patch-1
======Full Message======
Merge pull request #10 from isarrider/patch-1

Update README.md


======Commit: d4d46971======
======Short Message======
FIXED:
======Full Message======
FIXED:
step on a jal instruction (from Olivier Montfort)
ra register not update when single step debug #3



======Commit: d899348f======
======Short Message======
fixed fetch fifo [broken after last commit]
======Full Message======
fixed fetch fifo [broken after last commit]



======Commit: 3dca6828======
======Short Message======
fix for verilator by Olivier Montfort
======Full Message======
fix for verilator by Olivier Montfort



======Commit: b018eb43======
======Short Message======
fixed header
======Full Message======
fixed header



======Commit: 3b1d8943======
======Short Message======
fixed tracer
======Full Message======
fixed tracer



======Commit: a6d33442======
======Short Message======
fix misalignement memory access
======Full Message======
fix misalignement memory access



======Commit: b6fd7105======
======Short Message======
Modified wfi to go back to normal execution after debug request and ebreak generates always a request to debug now
======Full Message======
Modified wfi to go back to normal execution after debug request and ebreak generates always a request to debug now



======Commit: 0efaf095======
======Short Message======
fixed wake up from wfi
======Full Message======
fixed wake up from wfi



======Commit: 2c09a9eb======
======Short Message======
Integrated fix from Davide to allow taking interrupts between irq enable and irq disable
======Full Message======
Integrated fix from Davide to allow taking interrupts between irq enable and irq disable



======Commit: 3c645728======
======Short Message======
fix syntax issues raised by Altera Quartus
======Full Message======
fix syntax issues raised by Altera Quartus



======Commit: e97d18e8======
======Short Message======
fixed perf counters
======Full Message======
fixed perf counters



======Commit: f7c2b642======
======Short Message======
decoupled irq, debug with instr mem
======Full Message======
decoupled irq, debug with instr mem



======Commit: 27151a3f======
======Short Message======
fixed multdiv_fast
======Full Message======
fixed multdiv_fast



======Commit: 040a8082======
======Short Message======
added VERILATOR ifdef and fix regfile ff
======Full Message======
added VERILATOR ifdef and fix regfile ff



======Commit: 538ad537======
======Short Message======
Merge branch 'patch-1' into 'master'
======Full Message======
Merge branch 'patch-1' into 'master'

Update README.md

See merge request !1


======Commit: 57ee5542======
======Short Message======
fixed tracer
======Full Message======
fixed tracer



======Commit: 495a05c7======
======Short Message======
fixed jumps
======Full Message======
fixed jumps



======Commit: ab7b00fb======
======Short Message======
fixed sleep after mret
======Full Message======
fixed sleep after mret



======Commit: 480a02a4======
======Short Message======
small fix in branch
======Full Message======
small fix in branch



======Commit: 1f0eb756======
======Short Message======
small fixes
======Full Message======
small fixes



======Commit: 68f89f18======
======Short Message======
Fixed debug and changed controller
======Full Message======
Fixed debug and changed controller



======Commit: c59865d7======
======Short Message======
fixed mimpid csr
======Full Message======
fixed mimpid csr



======Commit: c24081a1======
======Short Message======
cleaning and small fixes
======Full Message======
cleaning and small fixes



======Commit: f80a14b7======
======Short Message======
disabled lsu error and fixed misaligned
======Full Message======
disabled lsu error and fixed misaligned



======Commit: ca07ae77======
======Short Message======
fix in tracer
======Full Message======
fix in tracer



======Commit: a7b7aa39======
======Short Message======
fix synthax
======Full Message======
fix synthax



======Commit: 9c68effb======
======Short Message======
fixed decoder
======Full Message======
fixed decoder



======Commit: 11f0e455======
======Short Message======
fixed ret and misaligned memory accesses
======Full Message======
fixed ret and misaligned memory accesses



======Commit: 84cc5498======
======Short Message======
fixed csr operations
======Full Message======
fixed csr operations



======Commit: ef852e2c======
======Short Message======
fixed shifter
======Full Message======
fixed shifter



======Commit: ff8b7f3e======
======Short Message======
Fix ALU
======Full Message======
Fix ALU



======Commit: 946c31ab======
======Short Message======
Fix deadlock
======Full Message======
Fix deadlock



======Commit: 8cee19ae======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 8c38f040======
======Short Message======
Try to fix misaligned
======Full Message======
Try to fix misaligned



======Commit: 21f393a9======
======Short Message======
Fix bug in branch_taken_ex
======Full Message======
Fix bug in branch_taken_ex

If we are in branch_2nd_stage, do not deassert branch_taken_ex as it is
needed by the CSR and Debugger



======Commit: 616ea917======
======Short Message======
Fix last
======Full Message======
Fix last



======Commit: 891a0740======
======Short Message======
Fix branch_in_ex never going high when MERGE_ID_EX
======Full Message======
Fix branch_in_ex never going high when MERGE_ID_EX



======Commit: 3a74a160======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: f575b56e======
======Short Message======
Fix controller saving branch target rather than IF target
======Full Message======
Fix controller saving branch target rather than IF target



======Commit: 672e0282======
======Short Message======
Try to fix debugger
======Full Message======
Try to fix debugger



======Commit: 33617c66======
======Short Message======
Try to fix npc ppc problem
======Full Message======
Try to fix npc ppc problem



======Commit: 5dfa2687======
======Short Message======
Try to fix PPC/NPC
======Full Message======
Try to fix PPC/NPC



======Commit: 013b010f======
======Short Message======
Fix EX running multiple times when write or load at memory is delayed (SPI)
======Full Message======
Fix EX running multiple times when write or load at memory is delayed (SPI)




======Commit: fc1bb02a======
======Short Message======
Fix time loop and some wrong eret address in controller
======Full Message======
Fix time loop and some wrong eret address in controller



======Commit: b6829445======
======Short Message======
Remove potential timing loop
======Full Message======
Remove potential timing loop

When data memory reports error on access, exc_req will deassert the
data_we and this will cause to error to disappear, meaning there would
be no store/load error anymore meaning data_we gets asserted again and
then the data memory might report an error again, closing the loop.



======Commit: aeec729b======
======Short Message======
Fix bug in config
======Full Message======
Fix bug in config



======Commit: bf6d09fe======
======Short Message======
Fix configs
======Full Message======
Fix configs



======Commit: c6f2cacb======
======Short Message======
Fix wrong jump calculation in case of JALR
======Full Message======
Fix wrong jump calculation in case of JALR



======Commit: e339efd5======
======Short Message======
Fix bug in branch
======Full Message======
Fix bug in branch



======Commit: 5173d347======
======Short Message======
Fix and rename branch_2nd_stage signal
======Full Message======
Fix and rename branch_2nd_stage signal



======Commit: 567c0c80======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 7ade9867======
======Short Message======
Some syntax fix
======Full Message======
Some syntax fix



======Commit: 6eeeb11b======
======Short Message======
Fix
======Full Message======
Fix



======Commit: 4a79c9f2======
======Short Message======
Try to fix timing loop
======Full Message======
Try to fix timing loop



======Commit: 2536f1e8======
======Short Message======
Smaller fix
======Full Message======
Smaller fix



======Commit: 175366f5======
======Short Message======
Fix missing config region declarations
======Full Message======
Fix missing config region declarations



======Commit: 1e4223ab======
======Short Message======
Fix config
======Full Message======
Fix config



======Commit: 14ba362e======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 0c9d6386======
======Short Message======
Fix syntax ex stage
======Full Message======
Fix syntax ex stage



======Commit: 4f7a80bd======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: a1ac1ca6======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 85fd5ecc======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 4fa38974======
======Short Message======
Fix config
======Full Message======
Fix config



======Commit: a2f4e65e======
======Short Message======
Fix clock extraction
======Full Message======
Fix clock extraction



======Commit: 1e04a06a======
======Short Message======
Fix scripts
======Full Message======
Fix scripts



======Commit: 23eda1d0======
======Short Message======
Patch python script
======Full Message======
Patch python script



======Commit: 25273056======
======Short Message======
Fix
======Full Message======
Fix



======Commit: 4f71899e======
======Short Message======
fix
======Full Message======
fix



======Commit: 98c47b59======
======Short Message======
Fix
======Full Message======
Fix



======Commit: 4f3d647a======
======Short Message======
Fix
======Full Message======
Fix



======Commit: 82c0250a======
======Short Message======
Try fix
======Full Message======
Try fix



======Commit: 4494615a======
======Short Message======
Try fix
======Full Message======
Try fix



======Commit: d7631c31======
======Short Message======
Fix flipflop logic of buffer regs
======Full Message======
Fix flipflop logic of buffer regs



======Commit: fc0bf251======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 60457ff5======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 7de6ba7a======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 22eaa496======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 88082be2======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 4a048874======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 28778ff4======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 7a63a0dd======
======Short Message======
Maybe fix time loop in ID
======Full Message======
Maybe fix time loop in ID



======Commit: 7ee4f097======
======Short Message======
Fix wrong config in load_store_unit
======Full Message======
Fix wrong config in load_store_unit



======Commit: e3787b2c======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 909ad7d4======
======Short Message======
Fix default configuration
======Full Message======
Fix default configuration



======Commit: f7820757======
======Short Message======
Fix syntax in ID
======Full Message======
Fix syntax in ID



======Commit: a0b0b764======
======Short Message======
Fix syntax in load_store_unit.sv
======Full Message======
Fix syntax in load_store_unit.sv



======Commit: 0b180fc6======
======Short Message======
Fix last
======Full Message======
Fix last



======Commit: 704ee953======
======Short Message======
Fix syntax last
======Full Message======
Fix syntax last



======Commit: e287d3fa======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: f6941be2======
======Short Message======
Fix
======Full Message======
Fix



======Commit: c8aa6f9e======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 0ef801ae======
======Short Message======
Fix bug when splitted adder was not finished when writing back return address in JAL
======Full Message======
Fix bug when splitted adder was not finished when writing back return address in JAL



======Commit: 29a4967e======
======Short Message======
Fix jump when splitted adder not ready
======Full Message======
Fix jump when splitted adder not ready



======Commit: fab22a70======
======Short Message======
Fix bug in splitted ALU
======Full Message======
Fix bug in splitted ALU



======Commit: a10f68eb======
======Short Message======
Fix bug in splitted adder
======Full Message======
Fix bug in splitted adder



======Commit: 72a96d45======
======Short Message======
Fix load store unit when using splitted ALU
======Full Message======
Fix load store unit when using splitted ALU



======Commit: 0ff19b31======
======Short Message======
Fix multiple driven signal in id
======Full Message======
Fix multiple driven signal in id



======Commit: 05215e6e======
======Short Message======
Fix some syntax
======Full Message======
Fix some syntax



======Commit: 19a3ad96======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 537fbae9======
======Short Message======
Fix last
======Full Message======
Fix last



======Commit: 14d70430======
======Short Message======
Fix bug in EX
======Full Message======
Fix bug in EX



======Commit: 269d058a======
======Short Message======
Fix syntax in splitted adder
======Full Message======
Fix syntax in splitted adder



======Commit: 05c4646c======
======Short Message======
Fix syntax and add option to default config
======Full Message======
Fix syntax and add option to default config



======Commit: b38841f8======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 76c737c1======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 9f04bd90======
======Short Message======
Fix last syntax
======Full Message======
Fix last syntax



======Commit: 8b54984c======
======Short Message======
Fix last
======Full Message======
Fix last



======Commit: 0d2fca15======
======Short Message======
Fix last
======Full Message======
Fix last



======Commit: 34471155======
======Short Message======
Try fix futher
======Full Message======
Try fix futher



======Commit: 1e77556d======
======Short Message======
Try to fix ret jump loop bug in controller
======Full Message======
Try to fix ret jump loop bug in controller



======Commit: 17ac38aa======
======Short Message======
Fix naming
======Full Message======
Fix naming



======Commit: bfde0cee======
======Short Message======
Fix signal names of last commit
======Full Message======
Fix signal names of last commit



======Commit: 1f30d750======
======Short Message======
Fix logic loop concerning illegal_reg_addr
======Full Message======
Fix logic loop concerning illegal_reg_addr



======Commit: 792ccf7e======
======Short Message======
Fix logic bug in ID
======Full Message======
Fix logic bug in ID



======Commit: 71b55f32======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 42504c95======
======Short Message======
Fix some syntax in ID
======Full Message======
Fix some syntax in ID



======Commit: 8520c1e8======
======Short Message======
Fix syntax in EX stage
======Full Message======
Fix syntax in EX stage



======Commit: d1c3f456======
======Short Message======
Fix syntax in controller
======Full Message======
Fix syntax in controller



======Commit: a696658a======
======Short Message======
Set default littleRISCV setting to RV32E with misaligned access
======Full Message======
Set default littleRISCV setting to RV32E with misaligned access



======Commit: a0670d73======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: c161668a======
======Short Message======
Fix logi
======Full Message======
Fix logi



======Commit: f694059a======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: ac23085c======
======Short Message======
Fix wrong area report being read in case of multiple area reports
======Full Message======
Fix wrong area report being read in case of multiple area reports



======Commit: 6b1b60ff======
======Short Message======
Fix clock detection in ri5cly-manage.py
======Full Message======
Fix clock detection in ri5cly-manage.py



======Commit: e3e7ae0d======
======Short Message======
Fix bug in ri5cly-manage.py where test_all did not get example configs
======Full Message======
Fix bug in ri5cly-manage.py where test_all did not get example configs



======Commit: c2abe72d======
======Short Message======
Fix missing fetch reg assignment
======Full Message======
Fix missing fetch reg assignment



======Commit: 9ce07710======
======Short Message======
Fix missing register cycle
======Full Message======
Fix missing register cycle



======Commit: 289d874a======
======Short Message======
Syntax fix
======Full Message======
Syntax fix



======Commit: 4fb3b82c======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 65503bae======
======Short Message======
Try to patch prefetch buffer to not reaccess same instruction memory again if in stall
======Full Message======
Try to patch prefetch buffer to not reaccess same instruction memory again if in stall



======Commit: 6141ffad======
======Short Message======
Minor fixes when no synthesized version found
======Full Message======
Minor fixes when no synthesized version found



======Commit: 87c4f51f======
======Short Message======
Fix syntax in python script
======Full Message======
Fix syntax in python script



======Commit: 7a8123bd======
======Short Message======
Fix Offset
======Full Message======
Fix Offset



======Commit: edb00022======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: bb3dbd78======
======Short Message======
More fixes to compressed
======Full Message======
More fixes to compressed



======Commit: ab812ee3======
======Short Message======
Fix further
======Full Message======
Fix further



======Commit: 503bb05f======
======Short Message======
Fix misaligned detection
======Full Message======
Fix misaligned detection



======Commit: c64fbf6b======
======Short Message======
Fix further
======Full Message======
Fix further



======Commit: 3d2c4336======
======Short Message======
Fix some bug
======Full Message======
Fix some bug



======Commit: 042cc850======
======Short Message======
Fix compressed instruction logic in small prefetch buffer
======Full Message======
Fix compressed instruction logic in small prefetch buffer

When we directly jump to an misaligned address with a C instruction, the
register cache is output, rather than the instruction memory output



======Commit: 0be37479======
======Short Message======
Fix bug in prefetcher assigning wrong input to last_address register
======Full Message======
Fix bug in prefetcher assigning wrong input to last_address register



======Commit: ad4603bc======
======Short Message======
Fix folder overwrite bug
======Full Message======
Fix folder overwrite bug



======Commit: 346d14c5======
======Short Message======
Fix some issues and cleanup
======Full Message======
Fix some issues and cleanup



======Commit: caa47030======
======Short Message======
Fix system call output
======Full Message======
Fix system call output



======Commit: 334e22e4======
======Short Message======
Fix
======Full Message======
Fix



======Commit: 7f17101f======
======Short Message======
Fix
======Full Message======
Fix



======Commit: 26c1b81d======
======Short Message======
Add new synthesize method and fix synthesize_all
======Full Message======
Add new synthesize method and fix synthesize_all



======Commit: 79ea1c29======
======Short Message======
Fix bug bug concerning folder creation
======Full Message======
Fix bug bug concerning folder creation



======Commit: cdf7a20c======
======Short Message======
Fix bug in ri5cly-manage.py
======Full Message======
Fix bug in ri5cly-manage.py



======Commit: 7c991611======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: 5f0e9b2b======
======Short Message======
Fix comparator
======Full Message======
Fix comparator

If-else-logic is flipped



======Commit: b7365a63======
======Short Message======
Fix simplified ALU not doing correct summand negation in each comparator case
======Full Message======
Fix simplified ALU not doing correct summand negation in each comparator case



======Commit: e0d92e7e======
======Short Message======
Fix last further
======Full Message======
Fix last further



======Commit: 286d7fbe======
======Short Message======
Fix branch in WAIT_GNT not getting processed instantly
======Full Message======
Fix branch in WAIT_GNT not getting processed instantly

branch_i will not hold for more than 1 cycle (bug?), resulting in a lock



======Commit: ca9d5a9d======
======Short Message======
Try to fix bug in prefetch buffer
======Full Message======
Try to fix bug in prefetch buffer

When we have a branch request in WAIT_GNT, branch gets ignored. This
commit tries to fix this behaviour.



======Commit: 238194a2======
======Short Message======
Fix syntax of last commit
======Full Message======
Fix syntax of last commit



======Commit: 8426041d======
======Short Message======
Fix syntax in debug unit
======Full Message======
Fix syntax in debug unit



======Commit: 8d9e8da6======
======Short Message======
Fix syntax of last
======Full Message======
Fix syntax of last



======Commit: f19e23df======
======Short Message======
Add to RV32E to debug unit
======Full Message======
Add to RV32E to debug unit



======Commit: bd1ad87c======
======Short Message======
Fix last
======Full Message======
Fix last



======Commit: ca07f1f5======
======Short Message======
Fix changing wrong parameter from last commit
======Full Message======
Fix changing wrong parameter from last commit



======Commit: 4ffa60c2======
======Short Message======
Try to fix syntax
======Full Message======
Try to fix syntax



======Commit: 05b20947======
======Short Message======
Try to fix time loop in prefetch buffer
======Full Message======
Try to fix time loop in prefetch buffer



======Commit: a473a92c======
======Short Message======
Fix syntax and mask instruction memory address by default.
======Full Message======
Fix syntax and mask instruction memory address by default.



======Commit: bc608ece======
======Short Message======
Fix a bug in prefetch buffer where stall reset the address input of instruction memory
======Full Message======
Fix a bug in prefetch buffer where stall reset the address input of instruction memory



======Commit: 6d667912======
======Short Message======
Fix problem with jump getting handled one cycle late in prefetch buffer
======Full Message======
Fix problem with jump getting handled one cycle late in prefetch buffer



======Commit: 8d0dd813======
======Short Message======
Fix some potential bugs concerning the address in prefetch buffer
======Full Message======
Fix some potential bugs concerning the address in prefetch buffer



======Commit: 30326c7a======
======Short Message======
Again some fixes
======Full Message======
Again some fixes



======Commit: 11b34b86======
======Short Message======
Fix block syntax
======Full Message======
Fix block syntax



======Commit: 58e77f21======
======Short Message======
Fix more syntax bugs
======Full Message======
Fix more syntax bugs



======Commit: 025cc1f3======
======Short Message======
Fix some syntax in new prefetch buffer
======Full Message======
Fix some syntax in new prefetch buffer



======Commit: 3e5f6177======
======Short Message======
Hotfix last commit
======Full Message======
Hotfix last commit



======Commit: 20efbaf4======
======Short Message======
Fix syntax of last commit
======Full Message======
Fix syntax of last commit



======Commit: 0b706da5======
======Short Message======
Fix problem with LSU not stalling
======Full Message======
Fix problem with LSU not stalling



======Commit: aa760468======
======Short Message======
Fix ALU further
======Full Message======
Fix ALU further



======Commit: 57b20e7b======
======Short Message======
Fix forwarding of ALU to ID not working anymore
======Full Message======
Fix forwarding of ALU to ID not working anymore



======Commit: b08a46d1======
======Short Message======
Fix bug concerning alu write address not set on littleRISCV
======Full Message======
Fix bug concerning alu write address not set on littleRISCV



======Commit: bbe4d4ba======
======Short Message======
Fix problem concerning operand c being undefined
======Full Message======
Fix problem concerning operand c being undefined



======Commit: 0733e7e1======
======Short Message======
Fix syntax
======Full Message======
Fix syntax



======Commit: f2a673c3======
======Short Message======
Fix wrong support region for bit count operations
======Full Message======
Fix wrong support region for bit count operations



======Commit: 87045fc1======
======Short Message======
Fix bug in ALU concerning adder and rounding introduced by false commenting
======Full Message======
Fix bug in ALU concerning adder and rounding introduced by false commenting



======Commit: 83f10713======
======Short Message======
Possibly fix last
======Full Message======
Possibly fix last



======Commit: 0f74c425======
======Short Message======
Potentially fix LS instruction bug introduced with last commit
======Full Message======
Potentially fix LS instruction bug introduced with last commit



======Commit: e978cce4======
======Short Message======
Fix potential bug with ALU opcode not being set when disabling multiplier
======Full Message======
Fix potential bug with ALU opcode not being set when disabling multiplier



======Commit: 72d4f0e8======
======Short Message======
Fix syntax to be configurable as full RI5CY
======Full Message======
Fix syntax to be configurable as full RI5CY



======Commit: adb58c4c======
======Short Message======
Fix merge typo
======Full Message======
Fix merge typo



======Commit: b0be60b0======
======Short Message======
Fix syntax in simplified ALU
======Full Message======
Fix syntax in simplified ALU



======Commit: bd48b97f======
======Short Message======
Fix syntax in riscv config
======Full Message======
Fix syntax in riscv config



======Commit: 99b1849f======
======Short Message======
Fix last
======Full Message======
Fix last



======Commit: 89cb4a7b======
======Short Message======
Fix last commit
======Full Message======
Fix last commit



======Commit: 8dad2dce======
======Short Message======
Fix wrong assertion due to removing hardware loop support
======Full Message======
Fix wrong assertion due to removing hardware loop support



======Commit: 5caf622c======
======Short Message======
Fix wrong syntax in prefetch buffer due to removal of hardware loop
======Full Message======
Fix wrong syntax in prefetch buffer due to removal of hardware loop



======Commit: 2d0152af======
======Short Message======
Fix missing parameter due to removing of hardware loop
======Full Message======
Fix missing parameter due to removing of hardware loop



======Commit: 7c5dff2c======
======Short Message======
Small fix in exc controller
======Full Message======
Small fix in exc controller



======Commit: 2d5f2365======
======Short Message======
Fix MUL_SUPPORT section in controller
======Full Message======
Fix MUL_SUPPORT section in controller



======Commit: 7e9c3744======
======Short Message======
small fix in lsu but not tested yet because data_err is not connected to the system
======Full Message======
small fix in lsu but not tested yet because data_err is not connected to the system



======Commit: 8e452c33======
======Short Message======
Fixed external interrupt request during invalid instruction
======Full Message======
Fixed external interrupt request during invalid instruction



======Commit: 557f1815======
======Short Message======
Merge branch 'fix-typos' into 'master'
======Full Message======
Merge branch 'fix-typos' into 'master'

Fix some typos

/cc @pasquale.schiavone 

See merge request !8


======Commit: 63666b31======
======Short Message======
Fix some typos
======Full Message======
Fix some typos



======Commit: d805b5ad======
======Short Message======
fix shuffle.sci.h
======Full Message======
fix shuffle.sci.h



======Commit: 15a7ef00======
======Short Message======
Revert "fixes for new ipstools"
======Full Message======
Revert "fixes for new ipstools"

This reverts commit d14327c1b863c175637099aa0058e5d7bbcec045.



======Commit: 55d66013======
======Short Message======
fixed issue with include file
======Full Message======
fixed issue with include file



======Commit: 7f8389cb======
======Short Message======
Merge branch 'master' into 'sv-packages'
======Full Message======
Merge branch 'master' into 'sv-packages'

Fixed misalignment memory access



See merge request !2


======Commit: d14327c1======
======Short Message======
fixes for new ipstools
======Full Message======
fixes for new ipstools



======Commit: 3277a983======
======Short Message======
Fixed misalignment memory access
======Full Message======
Fixed misalignment memory access



======Commit: 59708f44======
======Short Message======
fixed NCSIM simulation issue related to riscv_tracer
======Full Message======
fixed NCSIM simulation issue related to riscv_tracer



======Commit: 4b70a0ff======
======Short Message======
Fixed vectorial comparison
======Full Message======
Fixed vectorial comparison



======Commit: 25a77050======
======Short Message======
Fixed clip and clipu
======Full Message======
Fixed clip and clipu



======Commit: ccdf02ec======
======Short Message======
Fixed pv.insert
======Full Message======
Fixed pv.insert



======Commit: 5bf76abb======
======Short Message======
Fix new behaviour for clb
======Full Message======
Fix new behaviour for clb



======Commit: b2591ce9======
======Short Message======
add an external resume signal for debug
======Full Message======
add an external resume signal for debug



======Commit: d548ea57======
======Short Message======
Add sleeping bit to debug register
======Full Message======
Add sleeping bit to debug register



======Commit: 7de2b84e======
======Short Message======
Possibility to enter debug when never started yet
======Full Message======
Possibility to enter debug when never started yet



======Commit: 3f538883======
======Short Message======
Fix code style in debug_unit.sv
======Full Message======
Fix code style in debug_unit.sv



======Commit: 1dca1ec7======
======Short Message======
Fix bug in the debug_unit
======Full Message======
Fix bug in the debug_unit



======Commit: 3b766501======
======Short Message======
Merge branch_pc_ex and data_pc_ex, allow debugging during p.elw
======Full Message======
Merge branch_pc_ex and data_pc_ex, allow debugging during p.elw



======Commit: a20c6e09======
======Short Message======
Allow debugging during sleep
======Full Message======
Allow debugging during sleep



======Commit: cb972274======
======Short Message======
Fix wfi + sleep in debug mode
======Full Message======
Fix wfi + sleep in debug mode



======Commit: df014ec3======
======Short Message======
Fix issue #1 on github, byte address should always be 0
======Full Message======
Fix issue #1 on github, byte address should always be 0



======Commit: 1284e315======
======Short Message======
Some fixes to debug
======Full Message======
Some fixes to debug



======Commit: 57b77ba3======
======Short Message======
Fix some smallish issues
======Full Message======
Fix some smallish issues



======Commit: 5e304932======
======Short Message======
Started work on MMIO debug
======Full Message======
Started work on MMIO debug



======Commit: cf5815a5======
======Short Message======
Fix a small bug in the short multiplier
======Full Message======
Fix a small bug in the short multiplier



======Commit: 9278b0eb======
======Short Message======
Silence unique warnings by either adding defaults or removing unique
======Full Message======
Silence unique warnings by either adding defaults or removing unique
where unnecessary



======Commit: e899af43======
======Short Message======
Fix syntax error for RTL compiler
======Full Message======
Fix syntax error for RTL compiler



======Commit: 8edb4224======
======Short Message======
Fix a compressed instruction decoding error
======Full Message======
Fix a compressed instruction decoding error

If the register 0b01000 was selected for srai and srli for a compressed
instruction, it was considered an illegal instruction which is wrong

This is a legacy from the specification changes from >6 months ago



======Commit: 6ee9f3fe======
======Short Message======
Fix wrong ordering of instructions in tracer in some cases
======Full Message======
Fix wrong ordering of instructions in tracer in some cases



======Commit: d06042d7======
======Short Message======
Fix some synthesis warnings
======Full Message======
Fix some synthesis warnings



======Commit: aa28fac1======
======Short Message======
Fix a nasty L0 buffer bug that happens with hardware loops
======Full Message======
Fix a nasty L0 buffer bug that happens with hardware loops



======Commit: 1f2eef76======
======Short Message======
Disabled simchecker per default again
======Full Message======
Disabled simchecker per default again



======Commit: 4401708f======
======Short Message======
Add preliminary version of shuffle/pack
======Full Message======
Add preliminary version of shuffle/pack

There are still some bugs in it, but the data path is done



======Commit: 4ff7d58f======
======Short Message======
Comment simchecker, should not be enabled per default
======Full Message======
Comment simchecker, should not be enabled per default



======Commit: 09d6de8e======
======Short Message======
Fixed vector opcode and added vectorial shifts
======Full Message======
Fixed vector opcode and added vectorial shifts



======Commit: f436596e======
======Short Message======
fixed src_files.yml
======Full Message======
fixed src_files.yml



======Commit: f46dbaef======
======Short Message======
Fix two issues when the core is not getting the grant immediatly after
======Full Message======
Fix two issues when the core is not getting the grant immediatly after
sending the request



======Commit: d5a262cf======
======Short Message======
fixed src_files.yml
======Full Message======
fixed src_files.yml



======Commit: 9858198e======
======Short Message======
Fix a bug in the LSU by making sure that branches can be finished
======Full Message======
Fix a bug in the LSU by making sure that branches can be finished
correctly in the EX stage without impacting the WB stage

Also align simchecker and tracer to this



======Commit: 18f5ffcd======
======Short Message======
Fix wait_gnt signal for prefetcher if transaction was aborted
======Full Message======
Fix wait_gnt signal for prefetcher if transaction was aborted



======Commit: 6b224413======
======Short Message======
Fix handling of packed/unpacked structs in the riscv tracer
======Full Message======
Fix handling of packed/unpacked structs in the riscv tracer



======Commit: 3d768d27======
======Short Message======
Fix issues in instruction tracer and align with virtual platform
======Full Message======
Fix issues in instruction tracer and align with virtual platform



======Commit: 53f0dbda======
======Short Message======
Fix net declaration
======Full Message======
Fix net declaration



======Commit: dc8144a4======
======Short Message======
Added more information about debug to documentation
======Full Message======
Added more information about debug to documentation



======Commit: 79cff74d======
======Short Message======
Fix a problem in the normal prefetch buffer, some instructions were performed twice
======Full Message======
Fix a problem in the normal prefetch buffer, some instructions were performed twice



======Commit: ee89618b======
======Short Message======
Fix a couple of errors regarding hwloops
======Full Message======
Fix a couple of errors regarding hwloops



======Commit: ac384a23======
======Short Message======
Fix write enable on cs registesr in hwlp
======Full Message======
Fix write enable on cs registesr in hwlp



======Commit: af8343d3======
======Short Message======
Fix hardware loops, reimplement prefetch buffer for pulp
======Full Message======
Fix hardware loops, reimplement prefetch buffer for pulp
Change encoding of hardware loop setup instructions, displacement by one
bit and unsigned



======Commit: 371a211b======
======Short Message======
Fix bugs introduced in the last two commits
======Full Message======
Fix bugs introduced in the last two commits



======Commit: 45ceee59======
======Short Message======
Fixed issue that hardware loops with same endpoint did not work
======Full Message======
Fixed issue that hardware loops with same endpoint did not work



======Commit: 116379e0======
======Short Message======
Fix instruction tracing, removed collision between custom* and our opcodes
======Full Message======
Fix instruction tracing, removed collision between custom* and our opcodes



======Commit: 5da32ba5======
======Short Message======
This should fix most of the debug features
======Full Message======
This should fix most of the debug features

Basic test passes now, next step is to try and test it with an
interactive gdb



======Commit: b0a9e37c======
======Short Message======
Fix hwloops, registers were stalled when they should have been active
======Full Message======
Fix hwloops, registers were stalled when they should have been active



======Commit: f5d408d7======
======Short Message======
Add an instr_valid_id signal to completely decouple the pipeline stages,
======Full Message======
Add an instr_valid_id signal to completely decouple the pipeline stages,
hopefully fixes the exception controller



======Commit: 8a8b406a======
======Short Message======
Finally restyle the debug unit
======Full Message======
Finally restyle the debug unit



======Commit: cb73d88e======
======Short Message======
Fix a bug in the PCER CSR registers, it was not possible to activate more than the basic performance counter
======Full Message======
Fix a bug in the PCER CSR registers, it was not possible to activate more than the basic performance counter



======Commit: 98eb2cc0======
======Short Message======
Fix debug breakpoints and single-step with branches in ID
======Full Message======
Fix debug breakpoints and single-step with branches in ID



======Commit: a770811a======
======Short Message======
Fix debug breakpoints (dbg_set_npc)
======Full Message======
Fix debug breakpoints (dbg_set_npc)



======Commit: 82cf8ec2======
======Short Message======
Fix PPC/NPC tracking of debug unit
======Full Message======
Fix PPC/NPC tracking of debug unit



======Commit: 9efbaeba======
======Short Message======
Add register for last branch PC
======Full Message======
Add register for last branch PC

Needed in the debug unit, could be reused for precise exceptions.



======Commit: 05b44f97======
======Short Message======
Fix CSR access for debug unit
======Full Message======
Fix CSR access for debug unit



======Commit: 6773f4e3======
======Short Message======
Fix indentation in debug unit
======Full Message======
Fix indentation in debug unit



======Commit: d574cac2======
======Short Message======
Fix problem with debug not working
======Full Message======
Fix problem with debug not working



======Commit: 0b0b4c0c======
======Short Message======
Fix performance counter access
======Full Message======
Fix performance counter access



======Commit: f8dbb7ed======
======Short Message======
Fix bug with hardware loops
======Full Message======
Fix bug with hardware loops



======Commit: 9ee009a2======
======Short Message======
Fix exc controller ack not being sent
======Full Message======
Fix exc controller ack not being sent



======Commit: d2c8159a======
======Short Message======
Fix bug in csrrc instruction
======Full Message======
Fix bug in csrrc instruction



======Commit: 9f5beb52======
======Short Message======
Fix comparison bug in ALU
======Full Message======
Fix comparison bug in ALU



======Commit: 459e34f7======
======Short Message======
Add error signals to LSU
======Full Message======
Add error signals to LSU



======Commit: 906b5130======
======Short Message======
Fix irq_enable
======Full Message======
Fix irq_enable



======Commit: 30318e69======
======Short Message======
Fix interrupt not executed early enough after sleep
======Full Message======
Fix interrupt not executed early enough after sleep



======Commit: 8d4c069d======
======Short Message======
Fix exceptions during stalls
======Full Message======
Fix exceptions during stalls



======Commit: c28ca444======
======Short Message======
Fix exc wiring (not working yet)
======Full Message======
Fix exc wiring (not working yet)



======Commit: 26394abc======
======Short Message======
Fix/Update compressed decoder for newest RVC 1.8 draft
======Full Message======
Fix/Update compressed decoder for newest RVC 1.8 draft



======Commit: 7936609c======
======Short Message======
Fix a bug in the load store unit which allowed to send requests when the
======Full Message======
Fix a bug in the load store unit which allowed to send requests when the
last one was waiting for rvalid. This may increase critical path
slightly, but otherwise it is simply not correct...

Added assertions to catch those cases



======Commit: 7d06e4ab======
======Short Message======
Fix c.addi16sp and RVC B immediates
======Full Message======
Fix c.addi16sp and RVC B immediates



======Commit: bb09eeeb======
======Short Message======
Fix c.j & c.jal immediate encoding
======Full Message======
Fix c.j & c.jal immediate encoding



======Commit: 7223cb5e======
======Short Message======
Fix wrongly used unique case
======Full Message======
Fix wrongly used unique case



======Commit: 06cf9f1d======
======Short Message======
Prefix all modules with riscv_ to avoid future conflicts
======Full Message======
Prefix all modules with riscv_ to avoid future conflicts



======Commit: 35f88d72======
======Short Message======
Fix indentation in riscv_core
======Full Message======
Fix indentation in riscv_core



======Commit: fbd897a2======
======Short Message======
Fix forwarding of rs3
======Full Message======
Fix forwarding of rs3



======Commit: efb607a7======
======Short Message======
Fix exception problem after stages are more independent
======Full Message======
Fix exception problem after stages are more independent



======Commit: cc90e854======
======Short Message======
Fix RVC handling in prefetch_L0_buffer
======Full Message======
Fix RVC handling in prefetch_L0_buffer

The code is not so nice and should be further cleaned up



======Commit: d988f06f======
======Short Message======
Fixed synopsis syntax error
======Full Message======
Fixed synopsis syntax error



======Commit: 88614ea1======
======Short Message======
Fix id_valid signal propagation to exception controller
======Full Message======
Fix id_valid signal propagation to exception controller



======Commit: a3256c4d======
======Short Message======
Fix small error in prefetcher where GNT occur one cycle after we wanted
======Full Message======
Fix small error in prefetcher where GNT occur one cycle after we wanted
to prefetch



======Commit: 9ceeb15b======
======Short Message======
This fixes the instruction fetch miss performance counter
======Full Message======
This fixes the instruction fetch miss performance counter



======Commit: d27a2a3f======
======Short Message======
Various debug related improvements
======Full Message======
Various debug related improvements

Implemented c.ebreak instruction
Debugging with rvc seems to work properly now



======Commit: d2a549bf======
======Short Message======
Fix misaligned access, they did not correctly forward and used the wrong
======Full Message======
Fix misaligned access, they did not correctly forward and used the wrong
increment...



======Commit: 84ea2c90======
======Short Message======
Fix aborting on instr core interface
======Full Message======
Fix aborting on instr core interface



======Commit: db82a7ab======
======Short Message======
Fix problem with unaligned compressed access
======Full Message======
Fix problem with unaligned compressed access



======Commit: 21636236======
======Short Message======
Fix hwloop we
======Full Message======
Fix hwloop we



======Commit: a6dc8271======
======Short Message======
Wire up hwloops correctly, other small fixes
======Full Message======
Wire up hwloops correctly, other small fixes



======Commit: 2c2ad21c======
======Short Message======
Reroute hwloops signals, fix counter mux
======Full Message======
Reroute hwloops signals, fix counter mux



======Commit: b81c7c6c======
======Short Message======
Fix indentation in riscv_core.sv, better defaults
======Full Message======
Fix indentation in riscv_core.sv, better defaults



======Commit: 3a7d4044======
======Short Message======
Fix width of irq_enable signal
======Full Message======
Fix width of irq_enable signal



======Commit: a617bc49======
======Short Message======
Fix compile errors from last commit, fix synthesis warnigns and remove
======Full Message======
Fix compile errors from last commit, fix synthesis warnigns and remove
unused signals



======Commit: 3a4ddb2a======
======Short Message======
New CSR implementation, fix irq_enable signal
======Full Message======
New CSR implementation, fix irq_enable signal

Interrupts can now be switched on and off via CSR write, the current
status can be queried by a CSR read.

Pending interrupts still TBD.



======Commit: bb693c8e======
======Short Message======
Add support to debug unit to set the Program Counter
======Full Message======
Add support to debug unit to set the Program Counter



======Commit: bc51ae93======
======Short Message======
Add sensible default in compressed decoder for one case
======Full Message======
Add sensible default in compressed decoder for one case



======Commit: 116b5f46======
======Short Message======
Debug support: Make single-stepping work again
======Full Message======
Debug support: Make single-stepping work again



======Commit: 6cdfde93======
======Short Message======
Fix hwloop code indentation
======Full Message======
Fix hwloop code indentation



======Commit: 387642f0======
======Short Message======
Fix WFI instruction
======Full Message======
Fix WFI instruction

It repeated instructions after it multiple times when not going to sleep



======Commit: b84dde00======
======Short Message======
Fix potential problem with core_busy_o, it is now also set when an
======Full Message======
Fix potential problem with core_busy_o, it is now also set when an
instruction request is in flight and not only when we are decoding



======Commit: 1cbbcfb9======
======Short Message======
Fix linting errors/warnings and remove dead signals
======Full Message======
Fix linting errors/warnings and remove dead signals
Part #2



======Commit: d0f4ac75======
======Short Message======
Fix linting warnings and errors
======Full Message======
Fix linting warnings and errors
Remove lots of dead code
Part #1



======Commit: 6cf4b2f2======
======Short Message======
Fix PCMR for synthesis...
======Full Message======
Fix PCMR for synthesis...



======Commit: f54b1647======
======Short Message======
Fix external performance counters
======Full Message======
Fix external performance counters

Parameter was not propagated to csr



======Commit: 8c4a99b5======
======Short Message======
Fix jalr stall and make jump more efficient
======Full Message======
Fix jalr stall and make jump more efficient

Jumps now use only one cycle instead of two. This is the optimum we can
achieve, we cannot get any better without a delay slot



======Commit: 302747b9======
======Short Message======
Fix c.sllr and c.srlr decoding
======Full Message======
Fix c.sllr and c.srlr decoding



======Commit: 5b3ba2d1======
======Short Message======
Works, but bug in compressed decoder for sll
======Full Message======
Works, but bug in compressed decoder for sll



======Commit: 793d45f2======
======Short Message======
Fix illegal instruction exception throwed when not actually decoding an instruction
======Full Message======
Fix illegal instruction exception throwed when not actually decoding an instruction



======Commit: 9efada0f======
======Short Message======
Fix last commit, small cleanup
======Full Message======
Fix last commit, small cleanup



======Commit: 84bec09a======
======Short Message======
Fix illegal RVC instructions not causing exceptions
======Full Message======
Fix illegal RVC instructions not causing exceptions



======Commit: 8bdb4579======
======Short Message======
Fix jump_in_id signal should only be set in DECODE in controller
======Full Message======
Fix jump_in_id signal should only be set in DECODE in controller



======Commit: 96b5d194======
======Short Message======
Fix issue with cross line access and stalls, cleanup
======Full Message======
Fix issue with cross line access and stalls, cleanup



======Commit: 08f23117======
======Short Message======
Fix ack latching for jumps/branches
======Full Message======
Fix ack latching for jumps/branches



======Commit: 6f536747======
======Short Message======
Fix ack handling in IF
======Full Message======
Fix ack handling in IF



======Commit: 67425b0f======
======Short Message======
Fix LUI/AUIPC output of tracer
======Full Message======
Fix LUI/AUIPC output of tracer



======Commit: 0da283fb======
======Short Message======
Fix instruction corruption issue in IF
======Full Message======
Fix instruction corruption issue in IF



======Commit: 0042daa8======
======Short Message======
Fix jump/branch problem in IF
======Full Message======
Fix jump/branch problem in IF



======Commit: a08f5392======
======Short Message======
Fix basic incr PC flow, ID PC miscalculation
======Full Message======
Fix basic incr PC flow, ID PC miscalculation



======Commit: 39daf538======
======Short Message======
Move debug from CS registers to debug unit as they do not need to be
======Full Message======
Move debug from CS registers to debug unit as they do not need to be
accessible from the core anyway



======Commit: 73dd948f======
======Short Message======
Working on debug support
======Full Message======
Working on debug support

Most features have a preliminary support now, i.e. software breakpoints
work in general, NPC and PPC SPR are integrated and fully working, so it
is possible to set a new PC from the debugger

There are probably still some bugs in corner cases, and I'm pretty sure
jumps are not working nicely in single-stepping mode



======Commit: 69b2473d======
======Short Message======
Fix instruction trace displaying immediates wrong
======Full Message======
Fix instruction trace displaying immediates wrong



======Commit: 7c211e0d======
======Short Message======
Fix constant names
======Full Message======
Fix constant names



======Commit: 10bc9838======
======Short Message======
More cleanup, fixed more warnings
======Full Message======
More cleanup, fixed more warnings



======Commit: f908f34f======
======Short Message======
More warnings fixed
======Full Message======
More warnings fixed



======Commit: da7c7408======
======Short Message======
Fixed Verilator width warnings where appropriate
======Full Message======
Fixed Verilator width warnings where appropriate



======Commit: a1430b33======
======Short Message======
Fixed typo/error in ex stage from last commit
======Full Message======
Fixed typo/error in ex stage from last commit



======Commit: 0d59ca91======
======Short Message======
More compressed instructions and fixes for existing ones
======Full Message======
More compressed instructions and fixes for existing ones



======Commit: 5c93a289======
======Short Message======
Fixed warning in id_stage
======Full Message======
Fixed warning in id_stage



======Commit: 27490109======
======Short Message======
Added default case to RISCV main controller, fixed indentation
======Full Message======
Added default case to RISCV main controller, fixed indentation



======Commit: aa1821ba======
======Short Message======
Fixed inferred latches in RV
======Full Message======
Fixed inferred latches in RV



======Commit: b9e0bd9c======
======Short Message======
Fixed missing signal declaration in id_stage
======Full Message======
Fixed missing signal declaration in id_stage



======Commit: 29012978======
======Short Message======
Fixed bug in branch code, wrong vector size
======Full Message======
Fixed bug in branch code, wrong vector size



======Commit: 10d9a75f======
======Short Message======
Fixed space/tab mixture and indentation in instr_core_interface
======Full Message======
Fixed space/tab mixture and indentation in instr_core_interface



======Commit: af8b2080======
======Short Message======
Fixed Jumps and Branches (jump target now calculated in ID, up for debate) and some general code cleanups
======Full Message======
Fixed Jumps and Branches (jump target now calculated in ID, up for debate) and some general code cleanups



======Commit: c974349b======
======Short Message======
Fixed indentation in riscv_core (partially), some changes for to fix jumps/branches
======Full Message======
Fixed indentation in riscv_core (partially), some changes for to fix jumps/branches



======Commit: 5d96d3e7======
======Short Message======
Started implementing JAL/JALR target calculation in ALU, improved a few defaults
======Full Message======
Started implementing JAL/JALR target calculation in ALU, improved a few defaults



======Commit: d7e8aba2======
======Short Message======
Fixed JAL/JALR instruction check, added pretty print function for invalid instructions
======Full Message======
Fixed JAL/JALR instruction check, added pretty print function for invalid instructions



======Commit: a960d85c======
======Short Message======
Fixed indentation in controller (1 level = 2 spaces)
======Full Message======
Fixed indentation in controller (1 level = 2 spaces)



