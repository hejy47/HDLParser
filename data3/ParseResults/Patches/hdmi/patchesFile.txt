CommitId: 78044ea3560a8437e093dc072963f32ca0e54ac6
Optimize for speed, fix some incorrect operations in tmds channel
--- a/counter/modules/hdmi/verilog/hdmi.v
+++ b/counter/modules/hdmi/verilog/hdmi.v
@@ -32,7 +32,7 @@ reg [BIT_HEIGHT:0] screen_height;
 reg [BIT_WIDTH:0] screen_start_x;
 reg [BIT_HEIGHT:0] screen_start_y;
 
-always @*
+always @(posedge clk_pixel)
 begin
     case (VIDEO_ID_CODE)
         1:

ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlOp@@RISING to sensitivity
    HdlOp: RISING
        list: ops
            HdlValueId: clk_pixel

UPD HdlStmProcess@@ to 
    DEL HdlAll@@ from sensitivity


CommitId: 78044ea3560a8437e093dc072963f32ca0e54ac6
Optimize for speed, fix some incorrect operations in tmds channel
--- a/counter/modules/hdmi/verilog/hdmi.v
+++ b/counter/modules/hdmi/verilog/hdmi.v
@@ -64,8 +64,8 @@ begin
             screen_height = 1080;
         end
     endcase
-    screen_start_x = frame_width - 1 - screen_width;
-    screen_start_y = frame_height - 1 - screen_height;
+    screen_start_x = frame_width - 1'b1 - screen_width;
+    screen_start_y = frame_height - 1'b1 - screen_height;
 end
 
 reg hsync;

ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlOp@@RISING to sensitivity
    HdlOp: RISING
        list: ops
            HdlValueId: clk_pixel

UPD HdlStmProcess@@ to 
    DEL HdlAll@@ from sensitivity


CommitId: 78044ea3560a8437e093dc072963f32ca0e54ac6
Optimize for speed, fix some incorrect operations in tmds channel
--- a/counter/modules/hdmi/verilog/hdmi.v
+++ b/counter/modules/hdmi/verilog/hdmi.v
@@ -114,24 +114,24 @@ tmds_channel #(.CN(2)) red_channel (.clk_pixel(clk_pixel), .video_data(rgb[23:16
 tmds_channel #(.CN(1)) green_channel (.clk_pixel(clk_pixel), .video_data(rgb[15:8]), .control_data(ctrl[1:0]), .mode(mode), .tmds(tmds_green));
 tmds_channel #(.CN(0)) blue_channel (.clk_pixel(clk_pixel), .video_data(rgb[7:0]), .control_data({vsync,hsync}), .mode(mode), .tmds(tmds_blue));
 
-reg [3:0] tmds_counter = 0;
-reg [9:0] tmds_shift_red = 0, tmds_shift_green = 0, tmds_shift_blue = 0;
+reg [3:0] tmds_counter = 4'd0;
+reg [9:0] tmds_shift_red, tmds_shift_green, tmds_shift_blue;
 
 always @(posedge clk_tmds)
 begin
-    if (tmds_counter == 4'd9)
+    if (tmds_counter == 4'd0)
     begin
-        tmds_shift_red = tmds_red;
-        tmds_shift_green = tmds_green;
-        tmds_shift_blue = tmds_blue;
-        tmds_counter = 4'd0;
+        tmds_shift_red <= tmds_red;
+        tmds_shift_green <= tmds_green;
+        tmds_shift_blue <= tmds_blue;
+        tmds_counter <= 4'd9;
     end
     else
     begin
-        tmds_shift_red = tmds_shift_red[9:1];
-        tmds_shift_green = tmds_shift_green[9:1];
-        tmds_shift_blue = tmds_shift_blue[9:1];
-        tmds_counter = tmds_counter + 1'b1;
+        tmds_shift_red <= tmds_shift_red[9:1];
+        tmds_shift_green <= tmds_shift_green[9:1];
+        tmds_shift_blue <= tmds_shift_blue[9:1];
+        tmds_counter <= tmds_counter - 1'b1;
     end
 end
 
ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to EQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: tmds_counter
                HdlValueInt: 0
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@tmds_shift_red to tmds_red
            MOV HdlValueId@@tmds_shift_red to ops
            HdlValueId: tmds_shift_red
            UPD HdlValueId@@tmds_red to tmds_shift_red
            MOV HdlValueId@@tmds_red to ops
            HdlValueId: tmds_red
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@tmds_shift_green to tmds_green
            MOV HdlValueId@@tmds_shift_green to ops
            HdlValueId: tmds_shift_green
            UPD HdlValueId@@tmds_green to tmds_shift_green
            MOV HdlValueId@@tmds_green to ops
            HdlValueId: tmds_green
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@tmds_shift_blue to tmds_blue
            MOV HdlValueId@@tmds_shift_blue to ops
            HdlValueId: tmds_shift_blue
            UPD HdlValueId@@tmds_blue to tmds_shift_blue
            MOV HdlValueId@@tmds_blue to ops
            HdlValueId: tmds_blue
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body
        DEL HdlOp@@ASSIGN from body
        DEL HdlOp@@ASSIGN from body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: tmds_shift_red
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 9
                            HdlValueInt: 1
            DEL HdlValueId@@tmds_shift_red from ops
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@tmds_shift_green to tmds_shift_red
            MOV HdlValueId@@tmds_shift_green to ops
            HdlValueId: tmds_shift_green
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: tmds_shift_green
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 9
                            HdlValueInt: 1
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@tmds_shift_blue to tmds_shift_green
            MOV HdlValueId@@tmds_shift_blue to ops
            HdlValueId: tmds_shift_blue
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: tmds_shift_blue
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 9
                            HdlValueInt: 1
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@tmds_counter to tmds_shift_blue
            MOV HdlValueId@@tmds_counter to ops
            HdlValueId: tmds_counter
            UPD HdlOp@@ADD to SUB
            MOV HdlOp@@ADD to ops
            HdlOp: ADD
                list: ops
                    HdlValueId: tmds_counter
                    HdlValueInt: 1
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body
        DEL HdlOp@@ASSIGN from body
        DEL HdlOp@@ASSIGN from body
        DEL HdlOp@@ASSIGN from body
    DEL HdlOp@@EQ from 
    HdlOp: EQ
        list: ops
            HdlValueId: tmds_counter
            HdlValueInt: 9

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 9
    HdlValueId: tmds_counter

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

UPD HdlStmAssign@@ to 
    INS HdlValueId@@tmds_counter to 

UPD HdlIdDef@@tmds_shift_red to tmds_shift_red
    DEL HdlValueInt@@0 from tmds_shift_red

UPD HdlIdDef@@tmds_shift_green to tmds_shift_green
    DEL HdlValueInt@@0 from tmds_shift_green

UPD HdlIdDef@@tmds_shift_blue to tmds_shift_blue
    DEL HdlValueInt@@0 from tmds_shift_blue


CommitId: d9bd2be6a1e9440f0fc4b6cdf62be59b1e3aac73
Fix audio padding for non 24-bit audio, closes #6
--- a/src/packet_picker.sv
+++ b/src/packet_picker.sv
@@ -78,7 +78,7 @@ generate
         for (j = 0; j < 2; j++)
         begin: inner_pad
             if (MAX_SAMPLES_PER_PACKET >= i + 1)
-                assign audio_sample_word_buffer_padded[i][j] = {(24-AUDIO_BIT_WIDTH)'(0), audio_sample_word_buffer[i][j]};
+                assign audio_sample_word_buffer_padded[i][j] = {audio_sample_word_buffer[i][j], (24-AUDIO_BIT_WIDTH)'(0)};
             `ifdef MODEL_TECH
             else
                 assign audio_sample_word_buffer_padded[i][j] = 24'd0;
ParseResult:
UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@CONCAT to CONCAT
        MOV HdlOp@@CALL to ops
        HdlOp: CALL
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlValueInt: 24
                        HdlValueId: AUDIO_BIT_WIDTH
                HdlValueInt: 0


CommitId: 59d1289cee127e3f4f5e5166a956cf18aa79b2f7
Handle Vivado synthesis errors, fixes #8
--- a/src/packet_picker.sv
+++ b/src/packet_picker.sv
@@ -7,8 +7,8 @@ module packet_picker
     parameter real VIDEO_RATE,
     parameter int AUDIO_BIT_WIDTH,
     parameter int AUDIO_RATE,
-    parameter string VENDOR_NAME,
-    parameter string PRODUCT_DESCRIPTION,
+    parameter bit [8*8-1:0] VENDOR_NAME,
+    parameter bit [8*16-1:0] PRODUCT_DESCRIPTION,
     parameter bit [7:0] SOURCE_DEVICE_INFORMATION
 )
 (

ParseResult:
UPD HdlIdDef@@VENDOR_NAME to VENDOR_NAME
    INS HdlOp@@PARAMETRIZATION to VENDOR_NAME
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        INS list@@ops to PARAMETRIZATION
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlValueInt: 8
                        HdlValueInt: 1
                HdlValueInt: 0

UPD HdlIdDef@@PRODUCT_DESCRIPTION to PRODUCT_DESCRIPTION
    INS HdlOp@@PARAMETRIZATION to PRODUCT_DESCRIPTION
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        INS list@@ops to PARAMETRIZATION
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlValueInt: 16
                        HdlValueInt: 1
                HdlValueInt: 0

UPD HdlIdDef@@VENDOR_NAME to VENDOR_NAME
    UPD HdlValueId@@string to bit
    MOV HdlValueId@@string to VENDOR_NAME
    HdlValueId: string

UPD HdlIdDef@@PRODUCT_DESCRIPTION to PRODUCT_DESCRIPTION
    UPD HdlValueId@@string to bit
    MOV HdlValueId@@string to PRODUCT_DESCRIPTION
    HdlValueId: string


CommitId: 59d1289cee127e3f4f5e5166a956cf18aa79b2f7
Handle Vivado synthesis errors, fixes #8
--- a/src/packet_picker.sv
+++ b/src/packet_picker.sv
@@ -69,11 +69,11 @@ always_ff @(posedge clk_pixel)
 localparam int MAX_SAMPLES_PER_PACKET = AUDIO_RATE <= 48000 ? 2 : AUDIO_RATE <= 88200 ? 3 : 4;
 logic [(MAX_SAMPLES_PER_PACKET == 4 ? 2 : 1):0] samples_remaining = 1'd0;
 logic [23:0] audio_sample_word_buffer [MAX_SAMPLES_PER_PACKET-1:0] [1:0];
-logic [AUDIO_BIT_WIDTH-1:0] audio_sample_word_transfer_mux [1:0];
+logic [23:0] audio_sample_word_transfer_mux [1:0];
 always_comb
 begin
     if (audio_sample_word_transfer_control_synchronizer_chain[0] ^ audio_sample_word_transfer_control_synchronizer_chain[1])
-        audio_sample_word_transfer_mux = audio_sample_word_transfer;
+        audio_sample_word_transfer_mux = '{{audio_sample_word_transfer[1], {(24-AUDIO_BIT_WIDTH){1'b0}}}, {audio_sample_word_transfer[0], {(24-AUDIO_BIT_WIDTH){1'b0}}}};
     else
         audio_sample_word_transfer_mux = audio_sample_word_buffer[samples_remaining];
 end
ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ to ops
        INS HdlOp@@CONCAT to 
        INS HdlOp@@CONCAT to 
        HdlOp: CONCAT
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: audio_sample_word_transfer
                        HdlValueInt: 0
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueInt: 24
                                HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
        UPD HdlOp@@CONCAT to CONCAT
            INS list@@ops to CONCAT
            INS HdlOp@@INDEX to ops
            INS HdlOp@@REPL_CONCAT to ops
            HdlOp: REPL_CONCAT
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueInt: 24
                            HdlValueId: AUDIO_BIT_WIDTH
                    HdlValueInt: 0
            UPD HdlOp@@INDEX to INDEX
                INS list@@ops to INDEX
                INS HdlValueInt@@1 to ops

UPD HdlIdDef@@audio_sample_word_transfer_mux to audio_sample_word_transfer_mux
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueInt@@1 to 23
                    MOV HdlValueInt@@1 to ops
                    HdlValueInt: 1
                    DEL HdlValueId@@AUDIO_BIT_WIDTH from ops
                    DEL list@@ops from SUB
                DEL HdlOp@@SUB from ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueId@@audio_sample_word_transfer to ops
        HdlValueId: audio_sample_word_transfer


CommitId: c4129db679b35fca9d8891b9aef2e76dc1a36ca2
Remove 1 clock delay on hsync/vsync + fix some warnings
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -40,8 +40,8 @@ module hdmi
     output logic tmds_clock_p,
     output logic [2:0] tmds_n,
     output logic tmds_clock_n,
-    output logic [BIT_WIDTH-1:0] cx = 0,
-    output logic [BIT_HEIGHT-1:0] cy = 0,
+    output logic [BIT_WIDTH-1:0] cx = BIT_WIDTH'(0),
+    output logic [BIT_HEIGHT-1:0] cy = BIT_HEIGHT'(0),
     output logic packet_enable
 );
 

ParseResult:
UPD HdlIdDef@@cx to cx
    INS HdlOp@@CALL to cx
    UPD HdlOp@@CALL to CALL
        INS list@@ops to CALL
        INS HdlValueId@@BIT_WIDTH to ops

UPD HdlIdDef@@cy to cy
    INS HdlOp@@CALL to cy
    UPD HdlOp@@CALL to CALL
        INS list@@ops to CALL
        INS HdlValueId@@BIT_HEIGHT to ops

UPD HdlIdDef@@cx to cx
    MOV HdlValueInt@@0 to cx
    HdlValueInt: 0

UPD HdlIdDef@@cy to cy
    MOV HdlValueInt@@0 to cy
    HdlValueInt: 0


CommitId: c4129db679b35fca9d8891b9aef2e76dc1a36ca2
Remove 1 clock delay on hsync/vsync + fix some warnings
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -161,12 +160,12 @@ wire video_guard = !DVI_OUTPUT && (cx >= screen_start_x - 2 && cx < screen_start
 wire video_preamble = !DVI_OUTPUT && (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy >= screen_start_y;
 
 // See Section 5.2.3.1
+logic [4:0] num_packets;
 logic data_island_guard;
 logic data_island_preamble;
 logic data_island_period;
-logic [4:0] num_packets;
 
-assign num_packets = (((frame_width - screen_start_x - 2) - ((frame_width - screen_start_x - 2) % 32)) / 32 > 18) ? 5'd18 : ((frame_width - screen_start_x - 2) - ((frame_width - screen_start_x - 2) % 32)) / 32; // See 5.2.3.2 -- limited to 18 or fewer.
+assign num_packets = (((frame_width - screen_start_x - 2) - ((frame_width - screen_start_x - 2) % 32)) / 32 > 18) ? 5'd18 : 5'(((frame_width - screen_start_x - 2) - ((frame_width - screen_start_x - 2) % 32)) / 32); // See 5.2.3.2 -- limited to 18 or fewer.
 assign data_island_guard = !DVI_OUTPUT && ((cx >= screen_start_x - 2 && cx < screen_start_x) || (cx >= screen_start_x + num_packets * 32 && cx < screen_start_x + num_packets *32 + 2)) && cy < screen_start_y;
 assign data_island_preamble = !DVI_OUTPUT && (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy < screen_start_y;
 assign data_island_period = !DVI_OUTPUT && (cx >= screen_start_x && cx < screen_start_x + num_packets * 32) && cy < screen_start_y;

ParseResult:
MOV HdlIdDef@@num_packets to objs
HdlIdDef: num_packets
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        INS HdlOp@@CALL to ops
        UPD HdlOp@@CALL to CALL
            INS list@@ops to CALL
            INS HdlValueInt@@5 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@DIV to ops
        HdlOp: DIV
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: frame_width
                                        HdlValueId: screen_start_x
                                HdlValueInt: 2
                        HdlOp: MOD
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: frame_width
                                                HdlValueId: screen_start_x
                                        HdlValueInt: 2
                                HdlValueInt: 32
                HdlValueInt: 32


CommitId: 41d01e7c44e9ed8a86fdecc4100ff238d051b4c8
Fix timing for first clock tmds output
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -20,14 +20,14 @@ wire clk_pixel;
 pll pll(.inclk0(CLK_50MHZ), .c0(clk_tmds), .c1(clk_pixel));
 
 localparam AUDIO_BIT_WIDTH = 16;
-wire [AUDIO_BIT_WIDTH-1:0] audio_in;
-wire [AUDIO_BIT_WIDTH-1:0] audio_out;
+logic [AUDIO_BIT_WIDTH-1:0] audio_in;
+logic [AUDIO_BIT_WIDTH-1:0] audio_out;
 sawtooth #(.BIT_WIDTH(AUDIO_BIT_WIDTH)) sawtooth (.clk_audio(CLK_32KHZ), .level(audio_in));
 
 logic [6:0] remaining;
-wire packet_enable;
+logic packet_enable;
 logic [7:0] packet_type;
-buffer #(.CHANNELS(1), .BIT_WIDTH(AUDIO_BIT_WIDTH)) buffer (.clk_audio(CLK_32KHZ), .clk_pixel(clk_pixel), .packet_enable(packet_enable && packet_type == 8'd2), .audio_in('{audio_in}), .audio_out('{audio_out}), .remaining(remaining));
+// buffer #(.CHANNELS(1), .BIT_WIDTH(AUDIO_BIT_WIDTH)) buffer (.clk_audio(CLK_32KHZ), .clk_pixel(clk_pixel), .packet_enable(packet_enable && packet_type == 8'd2), .audio_in('{audio_in}), .audio_out('{audio_out}), .remaining(remaining));
 
 logic audio_clock_regeneration_sent = 1'b0;
 logic audio_info_frame_sent = 1'b0;

ParseResult:
UPD HdlIdDef@@audio_in to audio_in
    UPD HdlOp@@PARAMETRIZATION to INDEX
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@wire to logic

UPD HdlIdDef@@audio_out to audio_out
    UPD HdlOp@@PARAMETRIZATION to INDEX
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@wire to logic


CommitId: 41d01e7c44e9ed8a86fdecc4100ff238d051b4c8
Fix timing for first clock tmds output
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -56,7 +56,10 @@ begin
             audio_info_frame_sent <= 1'b1;
         end
         else if (remaining > 0)
+        begin
             packet_type <= 8'd2;
+            audio_out <= audio_in;
+        end
         else
             packet_type <= 8'd0;
     end
ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 2
    HdlValueId: packet_type

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: audio_in
    HdlValueId: audio_out


CommitId: 05c1034f0a9b6e225dd40623ee4bff0eb1a25aaf
top_tb: keep grey box approach & read tmds values directly, fixes #9
--- a/top/pll.v
+++ b/top/pll.v
@@ -3,7 +3,6 @@
 `timescale 1 ns / 100 ps
 
 module pll (
-	input wire inclk0,
 	output reg c0 = 0,
 	output reg c1 = 1,
 	output reg c2 = 0
ParseResult:
DEL HdlIdDef@@inclk0 from ports
HdlIdDef: inclk0
    HdlDirection: IN


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -161,7 +161,7 @@ begin
 end
 
 logic [8:0] packet_data;
-logic packet_enable_fanout [255:0];
+logic [7:0] frame_counter;
 
 logic [23:0] headers [255:0];
 logic [55:0] subs [255:0] [3:0];

ParseResult:
INS HdlIdDef@@frame_counter to objs
HdlIdDef: frame_counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@packet_enable_fanout from objs
HdlIdDef: packet_enable_fanout
    HdlOp: INDEX
        list: ops
            type
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 255
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -172,29 +172,30 @@ logic [55:0] sub [3:0];
 // See Section 5.3
 
 // NULL packet
-assign headers[0] = 24'd0; assign subs[0] = '{56'd0, 56'd0, 56'd0, 56'd0};
+// "An HDMI Sink shall ignore bytes HB1 and HB2 of the Null Packet Header and all bytes of the Null Packet Body."
+assign headers[0] = {8'dX, 8'dX, 8'd0}; assign subs[0] = '{56'dX, 56'dX, 56'dX, 56'dX};
 
-audio_clock_regeneration_packet #(.VIDEO_ID_CODE(VIDEO_ID_CODE), .VIDEO_RATE(VIDEO_RATE), .AUDIO_RATE(AUDIO_RATE)) audio_clock_regeneration_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[1]), .header(headers[1]), .sub(subs[1]));
+audio_clock_regeneration_packet #(.VIDEO_ID_CODE(VIDEO_ID_CODE), .VIDEO_RATE(VIDEO_RATE), .AUDIO_RATE(AUDIO_RATE)) audio_clock_regeneration_packet (.header(headers[1]), .sub(subs[1]));
 
 logic [23:0] audio_sample_word_padded [1:0];
 
 assign audio_sample_word_padded = '{{(24-AUDIO_BIT_WIDTH)'(0), audio_sample_word[1]}, {(24-AUDIO_BIT_WIDTH)'(0), audio_sample_word[0]}};
 generate
     if (AUDIO_BIT_WIDTH < 16 || AUDIO_BIT_WIDTH > 24)
-        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH(-1))                                    audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH(-1))                                    audio_sample_packet (.frame_counter(frame_counter), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
     else if (AUDIO_BIT_WIDTH == 20)
-        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'b101, 1'b0}))                        audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'b101, 1'b0}))                        audio_sample_packet (.frame_counter(frame_counter), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
     else if (AUDIO_BIT_WIDTH < 20)
     begin : audio_bit_width_block
         localparam word_length = 3'(20 - AUDIO_BIT_WIDTH);
-        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({{word_length[0], word_length[1], word_length[2]}, 1'b0})) audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({{word_length[0], word_length[1], word_length[2]}, 1'b0})) audio_sample_packet (.frame_counter(frame_counter), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
     end
     else if (AUDIO_BIT_WIDTH == 24)
-        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'b101, 1'b1}))                        audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'b101, 1'b1}))                        audio_sample_packet (.frame_counter(frame_counter), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
     else if (AUDIO_BIT_WIDTH < 24)
     begin
         localparam word_length = 3'(24 - AUDIO_BIT_WIDTH);
-        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({{word_length[0], word_length[1], word_length[2]}, 1'b1})) audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({{word_length[0], word_length[1], word_length[2]}, 1'b1})) audio_sample_packet (.frame_counter(frame_counter), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
     end
 endgenerate
 

ParseResult:
INS HdlStmAssign@@ to objs

UPD HdlStmAssign@@ to 
    INS HdlOp@@CONCAT to 
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlValueInt: x
                HdlValueInt: x

UPD HdlStmAssign@@ to 
    INS list@@src to 
    list: src
        HdlValueInt: x
        HdlValueInt: x
        HdlValueInt: x
        HdlValueInt: x

UPD HdlStmAssign@@ to 
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: subs
            HdlValueInt: 0
    DEL list@@src from 
    list: src
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0

UPD HdlStmAssign@@ to 
    MOV HdlValueInt@@0 to 
    HdlValueInt: 0

DEL HdlStmAssign@@ from objs


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -204,9 +205,8 @@ audio_info_frame audio_info_frame(.header(headers[132]), .sub(subs[132]));
 // See Section 5.2.3.4
 assign packet_enable = !DVI_OUTPUT && (cx >= screen_start_x && cx < screen_start_x + num_packets * 32) && cy < screen_start_y && ((cx - screen_start_x) % 32 == 0); // Based on instantaneous data island period
 
-logic prev_packet_enable; // One clock behind the user-facing packet_enable
-packet_assembler packet_assembler (.clk_pixel(clk_pixel), .data_island_period(data_island_period), .header(header), .sub(sub), .packet_data(packet_data), .packet_enable(prev_packet_enable));
-packet_picker packet_picker (.packet_enable(prev_packet_enable), .packet_type(packet_type), .headers(headers), .subs(subs), .packet_enable_fanout(packet_enable_fanout), .header(header), .sub(sub));
+packet_assembler packet_assembler (.clk_pixel(clk_pixel), .packet_type(packet_type), .data_island_period(data_island_period), .header(header), .sub(sub), .packet_data(packet_data), .frame_counter(frame_counter));
+packet_picker packet_picker (.packet_type(packet_type), .headers(headers), .subs(subs), .header(header), .sub(sub));
 
 logic [2:0] mode = 3'd1;
 logic [23:0] video_data = 24'd0;
ParseResult:
DEL HdlIdDef@@prev_packet_enable from objs
HdlIdDef: prev_packet_enable
    HdlDirection: INTERNAL


CommitId: 603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -1,6 +1,7 @@
 module packet_picker
 #(
     parameter VIDEO_ID_CODE = 1,
+    parameter VIDEO_RATE = 0,
     parameter BIT_WIDTH = 12,
     parameter BIT_HEIGHT = 11,
     parameter AUDIO_BIT_WIDTH = 16,

ParseResult:
INS HdlIdDef@@VIDEO_RATE to params
HdlIdDef: VIDEO_RATE
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -27,22 +28,13 @@ assign sub = subs[packet_type];
 
 // NULL packet
 // "An HDMI Sink shall ignore bytes HB1 and HB2 of the Null Packet Header and all bytes of the Null Packet Body."
+`ifdef MODEL_TECH
+assign headers[0] = {8'd0, 8'd0, 8'd0}; assign subs[0] = '{56'd0, 56'd0, 56'd0, 56'd0};
+`else
 assign headers[0] = {8'dX, 8'dX, 8'd0}; assign subs[0] = '{56'dX, 56'dX, 56'dX, 56'dX};
+`endif
 
-
-localparam REGEN_WIDTH = $clog2(AUDIO_RATE/100);
-logic [REGEN_WIDTH-1:0] regen_counter = 0;
-always @(posedge clk_audio)
-    regen_counter <= regen_counter == REGEN_WIDTH'(AUDIO_RATE/100 - 1) ? 1'd0 : regen_counter + 1'd1;
-
-logic [19:0] cts_counter = 20'd0, cts = 20'd0;
-always @(posedge clk_pixel)
-    cts_counter <= regen_counter == REGEN_WIDTH'(0) ? 20'd0 : cts_counter + 1'd1;
-
-
-audio_clock_regeneration_packet #(.AUDIO_RATE(AUDIO_RATE)) audio_clock_regeneration_packet (.cts(cts), .header(headers[1]), .sub(subs[1]));
-
-// Audio Sample packet
+// Audio Clock Regeneration Packet
 localparam SAMPLING_FREQUENCY = AUDIO_RATE == 32000 ? 4'b0011
     : AUDIO_RATE == 44100 ? 4'b0000
     : AUDIO_RATE == 88200 ? 4'b1000

ParseResult:
MOV HdlIdDef@@SAMPLING_FREQUENCY to objs
HdlIdDef: SAMPLING_FREQUENCY
    HdlOp: TERNARY
        list: ops
            HdlOp: EQ
                list: ops
                    HdlValueId: AUDIO_RATE
                    HdlValueInt: 32000
            HdlValueInt: 0011
            HdlOp: TERNARY
                list: ops
                    HdlOp: EQ
                        list: ops
                            HdlValueId: AUDIO_RATE
                            HdlValueInt: 44100
                    HdlValueInt: 0000
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: EQ
                                list: ops
                                    HdlValueId: AUDIO_RATE
                                    HdlValueInt: 88200
                            HdlValueInt: 1000
                            HdlOp: TERNARY
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: AUDIO_RATE
                                            HdlValueInt: 176400
                                    HdlValueInt: 1100
                                    HdlOp: TERNARY
                                        list: ops
                                            HdlOp: EQ
                                                list: ops
                                                    HdlValueId: AUDIO_RATE
                                                    HdlValueInt: 48000
                                            HdlValueInt: 0010
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: EQ
                                                        list: ops
                                                            HdlValueId: AUDIO_RATE
                                                            HdlValueInt: 96000
                                                    HdlValueInt: 1010
                                                    HdlOp: TERNARY
                                                        list: ops
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: AUDIO_RATE
                                                                    HdlValueInt: 192000
                                                            HdlValueInt: 1110
                                                            HdlValueInt: xxxx
    HdlDirection: INTERNAL

MOV HdlIdDef@@cts_counter to objs
HdlIdDef: cts_counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 19
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@n to n
    INS HdlOp@@TERNARY to n
    INS HdlDirection@@INTERNAL to n
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@EQ to ops
        INS HdlOp@@CALL to ops
        HdlOp: CALL
            list: ops
                HdlValueInt: 20
                HdlOp: DIV
                    list: ops
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 16
                                HdlValueId: AUDIO_RATE
                        HdlValueInt: 125
        INS HdlOp@@TERNARY to ops
        UPD HdlOp@@EQ to EQ
            INS list@@ops to EQ
            INS HdlValueInt@@0 to ops
        UPD HdlOp@@TERNARY to TERNARY
            INS list@@ops to TERNARY
            INS HdlOp@@EQ to ops
            HdlOp: EQ
                list: ops
                    HdlOp: MOD
                        list: ops
                            HdlValueId: AUDIO_RATE
                            HdlValueInt: 225
                    HdlValueInt: 0
            INS HdlOp@@CALL to ops
            INS HdlOp@@CALL to ops
            UPD HdlOp@@CALL to CALL
                INS list@@ops to CALL
                INS HdlOp@@DIV to ops
                UPD HdlOp@@DIV to DIV
                    INS HdlValueInt@@225 to ops
                    UPD HdlOp@@MUL to MUL
                        INS HdlValueInt@@196 to ops
            UPD HdlOp@@CALL to CALL
                INS list@@ops to CALL
                INS HdlValueInt@@20 to ops
                UPD HdlOp@@DIV to DIV
                    INS HdlValueInt@@125 to ops

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_audio

UPD HdlStmAssign@@body to body
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@ADD to MOD
        MOV HdlOp@@ADD to ops
        HdlOp: ADD
            list: ops
                HdlValueId: regen_counter
                HdlValueInt: 1
        UPD HdlOp@@ADD to ADD
            UPD HdlValueId@@regen_counter to AUDIO_RATE
            UPD HdlValueInt@@1 to 125
        DEL HdlOp@@EQ from ops
        HdlOp: EQ
            list: ops
                HdlValueId: regen_counter
                HdlOp: CALL
                    list: ops
                        HdlValueId: REGEN_WIDTH
                        HdlOp: SUB
                            list: ops
                                HdlOp: DIV
                                    list: ops
                                        HdlValueId: AUDIO_RATE
                                        HdlValueInt: 100
                                HdlValueInt: 1
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from body
    DEL HdlValueId@@regen_counter from body

UPD HdlIdDef@@cts to cts
    UPD HdlValueInt@@0 to 20
    MOV HdlValueInt@@0 to cts
    HdlValueInt: 0

UPD HdlStmAssign@@body to body
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to DIV
        MOV HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlValueId: regen_counter
                HdlOp: CALL
                    list: ops
                        HdlValueId: REGEN_WIDTH
                        HdlValueInt: 0
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@CALL to MUL
            UPD HdlOp@@CALL to CALL
                UPD HdlValueId@@REGEN_WIDTH to AUDIO_RATE
                UPD HdlValueInt@@0 to 16
            DEL HdlValueId@@regen_counter from ops
        MOV HdlOp@@ADD to ops
        HdlOp: ADD
            list: ops
                HdlValueId: cts_counter
                HdlValueInt: 1
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from body
    DEL HdlValueId@@cts_counter from body

UPD HdlStmProcess@@ to 
    UPD list@@sensitivity to ops
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    UPD HdlOp@@RISING to MUL
    UPD HdlOp@@RISING to RISING
        UPD HdlValueId@@clk_pixel to AUDIO_RATE

DEL HdlIdDef@@REGEN_WIDTH from objs
HdlIdDef: REGEN_WIDTH
    HdlOp: CALL
        list: ops
            HdlValueId: $clog2
            HdlOp: DIV
                list: ops
                    HdlValueId: AUDIO_RATE
                    HdlValueInt: 100
    HdlDirection: INTERNAL

DEL HdlIdDef@@regen_counter from objs
HdlIdDef: regen_counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: REGEN_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlStmAssign@@body from 

DEL HdlStmProcess@@ from objs

DEL HdlStmAssign@@body from 

DEL HdlStmProcess@@ from objs


CommitId: 603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -99,6 +165,8 @@ begin
         end
         else
             packet_type <= 8'd0;
+
+        cts_counter <= (samples_remaining == 4'd0 && wrap != last_wrap) ? 20'd0 : cts_counter + 1'd1;
     end
 end
 
ParseResult:
INS HdlStmAssign@@ to body

UPD HdlStmIf@@ to 
    UPD HdlOp@@GT to NE
    UPD HdlOp@@NEG_LOG to NE
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@audio_clock_regeneration_sent to wrap


CommitId: 7474848dc43a3a2e9aaaf5192ac72fd193efed10
Finalize first-pass audio implementation, onto debugging
--- a/modules/hdmi/verilog/audio.sv
+++ b/modules/hdmi/verilog/audio.sv
@@ -14,6 +14,7 @@ module audio_clock_regeneration_packet
     output logic [55:0] sub [3:0]
 );
 
+// See Section 7.2.3. Values taken from Tables 7-1, 7-2, 7-3.
 // Indexed by audio rate, video code, video rate, N/CTS
 logic [19:0] TABLE [0:2] [0:5] [0:1] [1:0] =
 '{

ParseResult:
UPD HdlIdDef@@sub to sub
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlIdDef@@TABLE to TABLE
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlOp@@INDEX to PARAMETRIZATION


CommitId: 7474848dc43a3a2e9aaaf5192ac72fd193efed10
Finalize first-pass audio implementation, onto debugging
--- a/modules/hdmi/verilog/audio.sv
+++ b/modules/hdmi/verilog/audio.sv
@@ -139,9 +140,10 @@ module audio_sample_packet
     parameter MODE = 2'b00,
 
     // Set to all 0s for general device.
-    parameter CATEGORY_CODE = 8'd0,
+    parameter CATEGORY_CODE = 8'b00000000,
 
-    // Not really sure what this is
+    // TODO: not really sure what this is...
+    // 0000 = "Do no take into account"
     parameter SOURCE_NUMBER = 4'b0000,
 
     // 0000 = 44.1 kHz

ParseResult:
UPD HdlIdDef@@CATEGORY_CODE to CATEGORY_CODE
    UPD HdlValueInt@@0 to 00000000


CommitId: 7474848dc43a3a2e9aaaf5192ac72fd193efed10
Finalize first-pass audio implementation, onto debugging
--- a/modules/hdmi/verilog/audio.sv
+++ b/modules/hdmi/verilog/audio.sv
@@ -172,12 +174,13 @@ module audio_sample_packet
 );
 
 // Left/right channel for stereo audio
-logic [3:0] CHANNEL_LEFT = 4'b1000;
-logic [3:0] CHANNEL_RIGHT = 4'b0100;
+const bit [3:0] CHANNEL_LEFT = 4'b1000;
+const bit [3:0] CHANNEL_RIGHT = 4'b0100;
 
+localparam CHANNEL_STATUS_LENGTH = 8'd192;
 // See IEC 60958-1 5.1, Table 2
-wire [191:0] channel_status_left = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_LEFT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
-wire [191:0] channel_status_right = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_RIGHT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
+wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_left = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_LEFT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
+wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_right = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_RIGHT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
 
 
 logic [7:0] frame_counter = 8'd0;

ParseResult:
INS HdlIdDef@@CHANNEL_STATUS_LENGTH to objs
HdlIdDef: CHANNEL_STATUS_LENGTH
    HdlValueInt: 192
    HdlDirection: INTERNAL

UPD HdlIdDef@@CHANNEL_LEFT to CHANNEL_LEFT
    UPD HdlOp@@INDEX to PARAMETRIZATION
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@logic to bit

UPD HdlIdDef@@CHANNEL_RIGHT to CHANNEL_RIGHT
    UPD HdlOp@@INDEX to PARAMETRIZATION
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@logic to bit

UPD HdlIdDef@@frame_counter to frame_counter
    UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlIdDef@@channel_status_left to channel_status_left
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlOp@@SUB to ops
            UPD HdlOp@@SUB to SUB
                INS list@@ops to SUB
                INS HdlValueId@@CHANNEL_STATUS_LENGTH to ops

UPD HdlIdDef@@channel_status_right to channel_status_right
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlOp@@SUB to ops
            UPD HdlOp@@SUB to SUB
                INS list@@ops to SUB
                INS HdlValueId@@CHANNEL_STATUS_LENGTH to ops

UPD HdlIdDef@@channel_status_left to channel_status_left
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@191 to 1
            MOV HdlValueInt@@191 to ops
            HdlValueInt: 191

UPD HdlIdDef@@channel_status_right to channel_status_right
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@191 to 1
            MOV HdlValueInt@@191 to ops
            HdlValueInt: 191


CommitId: 7474848dc43a3a2e9aaaf5192ac72fd193efed10
Finalize first-pass audio implementation, onto debugging
--- a/modules/hdmi/verilog/audio.sv
+++ b/modules/hdmi/verilog/audio.sv
@@ -186,7 +189,7 @@ wire [1:0] parity_bit = {^{audio_sample_word[1], valid_bit[1], user_data_bit[1],
 
 always @(posedge clk_packet)
 begin
-    frame_counter <= frame_counter == 8'd191 ? 8'd0 : frame_counter + 8'd1;
+    frame_counter <= frame_counter == (CHANNEL_STATUS_LENGTH-1) ? 8'd0 : frame_counter + 8'd1;
 end
 
 // See HDMI 1.4a Table 5-12: Audio Sample Packet Header.
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            UPD HdlValueInt@@191 to 1
            MOV HdlValueInt@@191 to ops
            HdlValueInt: 191


CommitId: 603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -32,7 +32,7 @@ assign packet_data = {bch[3][counter_t2_p1], bch[2][counter_t2_p1], bch[1][count
 function automatic [7:0] next_ecc;
 input [7:0] ecc, next_bch_bit;
 begin
-    next_ecc = (ecc[0] ^ next_bch_bit) ? (ecc >> 1) ^ 8'b10000011 : (ecc >> 1);
+    next_ecc = (ecc >> 1) ^ ((ecc[0] ^ next_bch_bit) ? 8'b10000011 : 8'd0);
 end
 endfunction
 
ParseResult:
UPD HdlFunctionDef@@next_ecc to next_ecc
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@TERNARY to XOR
            UPD HdlOp@@TERNARY to TERNARY
                MOV HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: ecc
                                HdlValueInt: 0
                        HdlValueId: next_bch_bit
                UPD HdlOp@@XOR to XOR
                    MOV HdlValueInt@@10000011 to ops
                    HdlValueInt: 10000011
                    DEL HdlOp@@SRL from ops
                    HdlOp: SRL
                        list: ops
                            HdlValueId: ecc
                            HdlValueInt: 1
                    DEL list@@ops from XOR
                DEL HdlOp@@XOR from ops

UPD HdlFunctionDef@@next_ecc to next_ecc
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@XOR to XOR
                INS HdlOp@@TERNARY to ops
                UPD HdlOp@@TERNARY to TERNARY
                    INS list@@ops to TERNARY
                    INS HdlValueInt@@0 to ops


CommitId: 1a6a7cd04e85440758829a71728c56e974f33dd9
Fix one-off error when buffer wraps around
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -30,7 +30,7 @@ const bit [BUFFER_WIDTH-1:0] BUFFER_END = 2 ** BUFFER_WIDTH == BUFFER_SIZE ? ~(B
 logic [BUFFER_WIDTH-1:0] insert_position = 0;
 logic [BUFFER_WIDTH-1:0] remove_position = 0;
 
-assign remaining = insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position);
+assign remaining = insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position + BUFFER_WIDTH'(1));
 
 logic [19:0] audio_buffer [BUFFER_SIZE-1:0] [CHANNELS-1:0];
 

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        INS HdlOp@@ADD to ops
        UPD HdlOp@@ADD to ADD
            INS list@@ops to ADD
            INS HdlOp@@CALL to ops
            HdlOp: CALL
                list: ops
                    HdlValueId: BUFFER_WIDTH
                    HdlValueInt: 1

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@ADD to ops
        HdlOp: ADD
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlValueId: BUFFER_END
                        HdlValueId: remove_position
                HdlValueId: insert_position


CommitId: 1a6a7cd04e85440758829a71728c56e974f33dd9
Fix one-off error when buffer wraps around
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -40,6 +40,8 @@ always @(posedge clk_audio)
 begin
     // Insert
     audio_buffer[insert_position] <= audio_in;
+    if (remaining == BUFFER_END)
+        $fatal("Audio buffer overflow");
     insert_position <= insert_position == BUFFER_END ? BUFFER_WIDTH'(0) : insert_position + 1'd1;
 end
 
ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: EQ
        list: ops
            HdlValueId: remaining
            HdlValueId: BUFFER_END
    HdlOp: CALL
        list: ops
            HdlValueId: $fatal
            str
    list: elifs


CommitId: 603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -3,22 +3,23 @@
 
 // See HDMI 1.4a Section 5.3.3.
 module audio_clock_regeneration_packet
-#(
-    parameter AUDIO_RATE = 32000
-)
 (
+    input logic [19:0] n,
     input logic [19:0] cts,
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );
 
-// See Section 7.2.1
 logic [19:0] N, CTS;
-assign N = 20'(128 * AUDIO_RATE / 1000);
+assign N = n;
 assign CTS = cts;
 
 // "An HDMI Sink shall ignore bytes HB1 and HB2 of the Audio Clock Regeneration Packet header."
+`ifdef MODEL_TECH
+assign header = {8'd0, 8'd0, 8'd1};
+`else
 assign header = {8'dX, 8'dX, 8'd1};
+`endif
 // "The four Subpackets each contain the same Audio Clock regeneration Subpacket."
 genvar i;
 generate

ParseResult:
INS HdlIdDef@@n to ports
HdlIdDef: n
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 19
                    HdlValueInt: 0
    HdlDirection: IN

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@DIV to DIV
            UPD HdlOp@@MUL to MUL
                UPD HdlValueId@@AUDIO_RATE to n
                MOV HdlValueId@@AUDIO_RATE to ops
                HdlValueId: AUDIO_RATE
                DEL HdlValueInt@@128 from ops
                DEL list@@ops from MUL
            DEL HdlOp@@MUL from ops
            DEL HdlValueInt@@1000 from ops
            DEL list@@ops from DIV
        DEL HdlValueInt@@20 from ops
        DEL HdlOp@@DIV from ops
        DEL list@@ops from CALL
    DEL HdlOp@@CALL from 

DEL HdlIdDef@@AUDIO_RATE from params
HdlIdDef: AUDIO_RATE
    HdlValueInt: 32000
    HdlDirection: INTERNAL


CommitId: 603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -77,10 +78,11 @@ module audio_sample_packet
 (
     input logic [7:0] frame_counter,
     // See IEC 60958-1 4.4 and Annex A. 0 indicates the signal is suitable for decoding to an analog audio signal.
-    input logic [1:0] valid_bit,
+    input logic [1:0] valid_bit [3:0],
     // See IEC 60958-3 Section 6. 0 indicates that no user data is being sent
-    input logic [1:0] user_data_bit,
-    input logic [23:0] audio_sample_word [1:0],
+    input logic [1:0] user_data_bit [3:0],
+    input logic [23:0] audio_sample_word [3:0] [1:0],
+    input logic [3:0] audio_sample_word_present,
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );

ParseResult:
INS HdlIdDef@@audio_sample_word_present to ports
HdlIdDef: audio_sample_word_present
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
    HdlDirection: IN

UPD HdlIdDef@@valid_bit to valid_bit
    INS HdlOp@@INDEX to valid_bit
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 3
                HdlValueInt: 0

UPD HdlIdDef@@user_data_bit to user_data_bit
    INS HdlOp@@INDEX to user_data_bit
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 3
                HdlValueInt: 0

UPD HdlIdDef@@valid_bit to valid_bit
    MOV HdlOp@@INDEX to valid_bit
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlIdDef@@user_data_bit to user_data_bit
    MOV HdlOp@@INDEX to user_data_bit
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlIdDef@@audio_sample_word to audio_sample_word
    UPD HdlOp@@INDEX to INDEX
        INS HdlOp@@INDEX to ops
        UPD HdlOp@@INDEX to INDEX
            INS list@@ops to INDEX
            INS HdlOp@@DOWNTO to ops
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0

UPD HdlIdDef@@audio_sample_word to audio_sample_word
    UPD HdlOp@@INDEX to INDEX
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: logic
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 23
                        HdlValueInt: 0


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -1,21 +1,10 @@
 module packet_picker (
-    input logic packet_enable,
     input logic [7:0] packet_type,
-    
     input logic [23:0] headers [255:0],
     input logic [55:0] subs [255:0] [3:0],
-
-    output logic packet_enable_fanout [255:0],
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );
-// Based on selected packet type, use a mux to send packet_enable to the correct packet generator.
-genvar i;
-generate
-    for (i = 0; i < 256; i++) begin: fanout
-        assign packet_enable_fanout[i] = i == packet_type && packet_enable;
-    end
-endgenerate
 
 assign header = headers[packet_type];
 assign sub = subs[packet_type];
ParseResult:
DEL HdlIdDef@@packet_enable from ports
HdlIdDef: packet_enable
    HdlValueId: logic
    HdlDirection: IN

DEL HdlIdDef@@packet_enable_fanout from ports
HdlIdDef: packet_enable_fanout
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 255
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@i from objs
HdlIdDef: i
    HdlValueId: genvar
    HdlDirection: INTERNAL

DEL HdlStmFor@@ from objs
HdlStmFor
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: i
    HdlOp: LT
        list: ops
            HdlValueId: i
            HdlValueInt: 256
    HdlOp: INCR_POST
        list: ops
            HdlValueId: i
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlValueId: i
                                HdlValueId: packet_type
                        HdlValueId: packet_enable
                HdlOp: INDEX
                    list: ops
                        HdlValueId: packet_enable_fanout
                        HdlValueId: i


CommitId: ccaa213e3dc97f3fc9dde12fc7288202b2664e27
Correct another one-off error
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -57,11 +57,13 @@ begin
     end
 end
 
-wire [23:0] rgb;
+logic [23:0] rgb;
 wire [9:0] cx, cy;
 wire packet_enable;
 hdmi #(.VIDEO_ID_CODE(3), .AUDIO_BIT_WIDTH(AUDIO_BIT_WIDTH)) hdmi(.clk_tmds(clk_tmds), .clk_pixel(clk_pixel), .rgb(rgb), .audio_sample_word('{audio_out, audio_out}), .packet_type(packet_type), .tmds_p(tmds_p), .tmds_clock_p(tmds_clock_p), .tmds_n(tmds_n), .tmds_clock_n(tmds_clock_n), .cx(cx), .cy(cy), .packet_enable(packet_enable));
 
+// always @(posedge clk_pixel)
+    // rgb <= {cx == 138 ? ~8'd0 : 8'd0, cy == 45 ? ~8'd0 : 8'd0, cx == 857 || cy == 524 ? ~8'd0 : 8'd0};
 logic [7:0] character = 8'h30;
 logic [5:0] prevcy = 6'd0;
 always @(posedge clk_pixel)
ParseResult:
UPD HdlIdDef@@rgb to rgb
    UPD HdlOp@@PARAMETRIZATION to INDEX
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@wire to logic


CommitId: 41d01e7c44e9ed8a86fdecc4100ff238d051b4c8
Fix timing for first clock tmds output
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -43,11 +43,11 @@ generate
     for(i = 0; i < 5; i++)
     begin: parity_calc
         if (i == 4)
-            assign parity_next[i] = next_ecc(parity[i], bch4[counter]);
+            assign parity_next[i] = next_ecc(parity[i], header[counter]);
         else
         begin
-            assign parity_next[i] = next_ecc(parity[i], bch[i][counter_t2]);
-            assign parity_next_next[i] = next_ecc(parity_next[i], bch[i][counter_t2_p1]);
+            assign parity_next[i] = next_ecc(parity[i], sub[i][counter_t2]);
+            assign parity_next_next[i] = next_ecc(parity_next[i], sub[i][counter_t2_p1]);
         end
     end
 endgenerate

ParseResult:
UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@bch4 to header

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@bch to sub

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@bch to sub


CommitId: 41d01e7c44e9ed8a86fdecc4100ff238d051b4c8
Fix timing for first clock tmds output
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -56,11 +56,12 @@ always @(posedge clk_pixel)
 begin
     if (data_island_period)
     begin
-        if (counter < 5'd28) // Compute ECC only on subpacket data, not on itself
+        if (counter_t2_p1 < 56) // Compute ECC only on subpacket data, not on itself
             parity[3:0] <= parity_next_next;
+
         if (counter < 5'd24)
             parity[4] <= parity_next[4];
-        if (counter == 5'd31) // Reset ECC for next packet
+        else if (counter == 5'd31) // Reset ECC for next packet
             parity <= '{8'd0, 8'd0, 8'd0, 8'd0, 8'd0};
     end
 end
ParseResult:
UPD HdlStmIf@@ to 
    INS tuple@@ to elifs

UPD HdlStmIf@@ to 
    UPD HdlOp@@LT to LT
        UPD HdlValueId@@counter to counter_t2_p1
        UPD HdlValueInt@@28 to 56

UPD HdlStmIf@@ to 
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: counter
            HdlValueInt: 31
    DEL list@@elifs from 

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    list: src
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0
    HdlValueId: parity

DEL HdlStmIf@@ from body


CommitId: a48b2092e5d77c57bb06ed310f8d8f4b3983adf4
Fix subpacket parity calculation ending early, add testbench for assembler and assertions for subpacket parity
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -13,15 +13,22 @@ always @(posedge clk_pixel)
     if (enable)
         counter <= counter + 5'd1;
 
+// BCH packets 0 to 3 are transferred two bits at a time, see Section 5.2.3.4 for further information.
+wire [5:0] counter_t2 = {counter, 1'b0};
+wire [5:0] counter_t2_p1 = {counter, 1'b1};
+
 // Initialize parity bits to 0
 logic [7:0] parity [4:0] = '{8'd0, 8'd0, 8'd0, 8'd0, 8'd0};
 
+wire [63:0] bch [3:0] = '{{parity[3], sub[3]}, {parity[2], sub[2]}, {parity[1], sub[1]}, {parity[0], sub[0]}};
+wire [31:0] bch4 = {parity[4], header};
+
 // See Figure 5-5 Error Correction Code generator. Generalization of a CRC with binary BCH.
 // See https://en.wikipedia.org/wiki/BCH_code#Systematic_encoding:_The_message_as_a_prefix for further information.
 function automatic [7:0] next_ecc;
 input [7:0] ecc, next_bch_bit;
 begin
-    next_ecc = (ecc >> 1) ^ ((ecc[0] ^ next_bch_bit) ? 8'b10000011 : 8'd0);
+    next_ecc = (ecc[0] ^ next_bch_bit) ? (ecc >> 1) ^ 8'b10000011 : (ecc >> 1);
 end
 endfunction
 

ParseResult:
UPD HdlFunctionDef@@next_ecc to next_ecc
    UPD HdlStmBlock@@SEQ to SEQ
        MOV list@@body to SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: next_ecc
                    HdlOp: XOR
                        list: ops
                            HdlOp: SRL
                                list: ops
                                    HdlValueId: ecc
                                    HdlValueInt: 1
                            HdlOp: TERNARY
                                list: ops
                                    HdlOp: XOR
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: ecc
                                                    HdlValueInt: 0
                                            HdlValueId: next_bch_bit
                                    HdlValueInt: 10000011
                                    HdlValueInt: 0
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD list@@ops to body
            MOV list@@ops to ASSIGN
            list: ops
                HdlValueId: next_ecc
                HdlOp: XOR
                    list: ops
                        HdlOp: SRL
                            list: ops
                                HdlValueId: ecc
                                HdlValueInt: 1
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: XOR
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: ecc
                                                HdlValueInt: 0
                                        HdlValueId: next_bch_bit
                                HdlValueInt: 10000011
                                HdlValueInt: 0
            UPD HdlOp@@XOR to ASSIGN
            MOV HdlValueId@@next_ecc to ops
            HdlValueId: next_ecc
            UPD HdlOp@@XOR to XOR
                MOV HdlOp@@SRL to ops
                HdlOp: SRL
                    list: ops
                        HdlValueId: ecc
                        HdlValueInt: 1
                UPD HdlOp@@TERNARY to TERNARY
                    MOV HdlValueInt@@10000011 to ops
                    HdlValueInt: 10000011
                    DEL HdlValueInt@@0 from ops
        DEL HdlOp@@ASSIGN from body
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: next_ecc
                    HdlOp: XOR
                        list: ops
                            HdlOp: SRL
                                list: ops
                                    HdlValueId: ecc
                                    HdlValueInt: 1
                            HdlOp: TERNARY
                                list: ops
                                    HdlOp: XOR
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: ecc
                                                    HdlValueInt: 0
                                            HdlValueId: next_bch_bit
                                    HdlValueInt: 10000011
                                    HdlValueInt: 0
    DEL list@@body from next_ecc


CommitId: a48b2092e5d77c57bb06ed310f8d8f4b3983adf4
Fix subpacket parity calculation ending early, add testbench for assembler and assertions for subpacket parity
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -49,11 +56,10 @@ always @(posedge clk_pixel)
 begin
     if (enable)
     begin
-        if (counter < 5'd24) // Compute ECC only on subpacket data, not on itself
-        begin
+        if (counter < 5'd28) // Compute ECC only on subpacket data, not on itself
             parity[3:0] <= parity_next_next;
+        if (counter < 5'd24)
             parity[4] <= parity_next[4];
-        end
         else if (counter == 5'd31) // Reset ECC for next packet
         begin
             parity <= '{8'd0, 8'd0, 8'd0, 8'd0, 8'd0};

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: LT
                    list: ops
                        HdlValueId: counter
                        HdlValueInt: 24
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: parity_next_next
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity_next
                                    HdlValueInt: 4
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlValueInt: 4
                list: elifs
                    tuple
                        HdlOp: EQ
                            list: ops
                                HdlValueId: counter
                                HdlValueInt: 31
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    list: src
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                    HdlValueId: parity
    MOV HdlValueId@@enable to 
    HdlValueId: enable
    MOV list@@elifs to 
    list: elifs

INS HdlStmIf@@ to body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: enable
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: LT
                    list: ops
                        HdlValueId: counter
                        HdlValueInt: 24
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: parity_next_next
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity_next
                                    HdlValueInt: 4
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlValueInt: 4
                list: elifs
                    tuple
                        HdlOp: EQ
                            list: ops
                                HdlValueId: counter
                                HdlValueInt: 31
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    list: src
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                    HdlValueId: parity
    list: elifs

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: parity_next_next
    HdlOp: INDEX
        list: ops
            HdlValueId: parity
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0

UPD HdlStmIf@@ to 
    MOV HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: counter
            HdlValueInt: 24
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: counter
                    HdlValueInt: 31
            HdlStmBlock: SEQ
                list: body
                    HdlStmAssign
                        list: src
                            HdlValueInt: 0
                            HdlValueInt: 0
                            HdlValueInt: 0
                            HdlValueInt: 0
                            HdlValueInt: 0
                        HdlValueId: parity

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: parity_next
            HdlValueInt: 4
    HdlOp: INDEX
        list: ops
            HdlValueId: parity
            HdlValueInt: 4

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: a48b2092e5d77c57bb06ed310f8d8f4b3983adf4
Fix subpacket parity calculation ending early, add testbench for assembler and assertions for subpacket parity
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -61,13 +67,6 @@ begin
     end
 end
 
-wire [63:0] bch [3:0] = '{{parity[3], sub[3]}, {parity[2], sub[2]}, {parity[1], sub[1]}, {parity[0], sub[0]}};
-wire [31:0] bch4 = {parity[4], header};
-
-// BCH packets 0 to 3 are transferred two bits at a time, see Section 5.2.3.4 for further information.
-wire [5:0] counter_t2 = {counter, 1'b0};
-wire [5:0] counter_t2_p1 = {counter, 1'b1};
-
 assign packet_enable = counter == 5'd0 && enable;
 assign packet_data = {bch[3][counter_t2_p1], bch[2][counter_t2_p1], bch[1][counter_t2_p1], bch[0][counter_t2_p1], bch[3][counter_t2], bch[2][counter_t2], bch[1][counter_t2], bch[0][counter_t2], bch4[counter]};
 
ParseResult:
MOV HdlIdDef@@counter_t2 to objs
HdlIdDef: counter_t2
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 5
                    HdlValueInt: 0
    HdlOp: CONCAT
        list: ops
            HdlValueId: counter
            HdlValueInt: 0
    HdlDirection: INTERNAL

MOV HdlIdDef@@counter_t2_p1 to objs
HdlIdDef: counter_t2_p1
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 5
                    HdlValueInt: 0
    HdlOp: CONCAT
        list: ops
            HdlValueId: counter
            HdlValueInt: 1
    HdlDirection: INTERNAL

MOV HdlIdDef@@bch to objs
HdlIdDef: bch
    HdlOp: INDEX
        list: ops
            HdlOp: PARAMETRIZATION
                list: ops
                    HdlValueId: wire
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 63
                            HdlValueInt: 0
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
    list: value
        HdlOp: CONCAT
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: parity
                        HdlValueInt: 3
                HdlOp: INDEX
                    list: ops
                        HdlValueId: sub
                        HdlValueInt: 3
        HdlOp: CONCAT
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: parity
                        HdlValueInt: 2
                HdlOp: INDEX
                    list: ops
                        HdlValueId: sub
                        HdlValueInt: 2
        HdlOp: CONCAT
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: parity
                        HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: sub
                        HdlValueInt: 1
        HdlOp: CONCAT
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: parity
                        HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlValueId: sub
                        HdlValueInt: 0
    HdlDirection: INTERNAL

MOV HdlIdDef@@bch4 to objs
HdlIdDef: bch4
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlOp: CONCAT
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: parity
                    HdlValueInt: 4
            HdlValueId: header
    HdlDirection: INTERNAL

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: LT
                    list: ops
                        HdlValueId: counter
                        HdlValueInt: 24
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: parity_next_next
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity_next
                                    HdlValueInt: 4
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlValueInt: 4
                list: elifs
                    tuple
                        HdlOp: EQ
                            list: ops
                                HdlValueId: counter
                                HdlValueInt: 31
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    list: src
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                    HdlValueId: parity
    MOV HdlValueId@@enable to 
    HdlValueId: enable
    MOV list@@elifs to 
    list: elifs

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: enable
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: LT
                    list: ops
                        HdlValueId: counter
                        HdlValueInt: 24
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: parity_next_next
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity_next
                                    HdlValueInt: 4
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: parity
                                    HdlValueInt: 4
                list: elifs
                    tuple
                        HdlOp: EQ
                            list: ops
                                HdlValueId: counter
                                HdlValueInt: 31
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    list: src
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                        HdlValueInt: 0
                                    HdlValueId: parity
    list: elifs

UPD HdlStmIf@@ to 
    INS HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: counter
            HdlValueInt: 28
    INS list@@elifs to 

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: 3e52a1a288ac8b10d663f2106c84eda75e452f39
Make CTS assignment independent of regen packet choice to fix large jitter issue
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -215,10 +215,15 @@ generate
             casex ({data_island_guard, data_island_period, video_guard, video_data_period})
                 4'b1???: begin // DI guard
                     mode <= 3'd4;
+                    video_data <= 24'dX;
+                    control_data <= 6'dX;
+                    data_island_data <= 12'dX;
                 end
                 4'b01??: begin // DI period
                     mode <= 3'd3;
                     // See Section 5.2.3.4, Section 5.3.1, Section 5.3.2
+                    video_data <= 24'dX;
+                    control_data <= 6'dX;
                     data_island_data[11:4] <= packet_data[8:1];
                     data_island_data[3] <= cx != screen_start_x;
                     data_island_data[2] <= packet_data[0];

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: control_data

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: video_data

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: control_data

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: data_island_data

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: control_data


CommitId: 3e52a1a288ac8b10d663f2106c84eda75e452f39
Make CTS assignment independent of regen packet choice to fix large jitter issue
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -226,14 +231,21 @@ generate
                 end
                 4'b001?: begin // VD guard
                     mode <= 3'd2;
+                    video_data <= 24'dX;
+                    control_data <= 6'dX;
+                    data_island_data <= 12'dX;
                 end
                 4'b0001: begin // VD period
                     mode <= 3'd1;
                     video_data <= rgb;
+                    control_data <= 6'dX;
+                    data_island_data <= 12'dX;
                 end
                 default: begin // Control period
                     mode <= 3'd0;
+                    video_data <= 24'dX;
                     control_data <= {{1'b0, data_island_preamble}, {1'b0, video_preamble || data_island_preamble}, {vsync, hsync}}; // ctrl3, ctrl2, ctrl1, ctrl0, vsync, hsync
+                    data_island_data <= 12'dX;
                 end
             endcase
         end

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: video_data

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: data_island_data

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: x
    HdlValueId: control_data


CommitId: 3e52a1a288ac8b10d663f2106c84eda75e452f39
Make CTS assignment independent of regen packet choice to fix large jitter issue
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -268,20 +282,14 @@ endgenerate
 // See Section 5.4.1
 logic [3:0] tmds_counter = 4'd0;
 
-integer j;
-always @(posedge clk_tmds)
-begin
-    if (tmds_counter == 4'd9)
-    begin
-        tmds_shift <= tmds;
-        tmds_counter <= 4'd0;
-    end
-    else
-    begin
-        tmds_counter <= tmds_counter + 4'd1;
-        for (j = 0; j < NUM_CHANNELS; j++)
-            tmds_shift[j] <= {1'bX, tmds_shift[j][9:1]};
+generate
+    for (i = 0; i < NUM_CHANNELS; i++)
+    begin: tmds_shifting
+        always @(posedge clk_tmds)
+            tmds_shift[i] <=  tmds_counter == 4'd9 ? tmds[i] : {1'bX, tmds_shift[i][9:1]};
     end
-end
+endgenerate
+always @(posedge clk_tmds)
+    tmds_counter <= tmds_counter == 4'd9 ? 4'd0 : tmds_counter + 4'd1;
 
 endmodule
ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: i
    INS HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: i
            HdlValueId: NUM_CHANNELS
    INS HdlOp@@INCR_POST to 
    HdlOp: INCR_POST
        list: ops
            HdlValueId: i

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlValueId: tmds_counter
                        HdlValueInt: 1
                HdlValueId: tmds_counter
            HdlStmFor
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: j
                HdlOp: LT
                    list: ops
                        HdlValueId: j
                        HdlValueId: NUM_CHANNELS
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: INCR_POST
                            list: ops
                                HdlValueId: j
                HdlStmAssign: body
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: x
                            HdlOp: INDEX
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: tmds_shift
                                            HdlValueId: j
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 9
                                            HdlValueInt: 1
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: tmds_shift
                            HdlValueId: j
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: tmds_counter
            HdlValueInt: 9
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: tmds
                HdlValueId: tmds_shift
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: tmds_counter
    DEL list@@elifs from 

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_tmds
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to ops
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlValueId: tmds_counter
                        HdlValueInt: 9
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: tmds
                            HdlValueId: tmds_shift
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: tmds_counter
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: tmds_counter
                                    HdlValueInt: 1
                            HdlValueId: tmds_counter
                        HdlStmFor
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueInt: 0
                                        HdlValueId: j
                            HdlOp: LT
                                list: ops
                                    HdlValueId: j
                                    HdlValueId: NUM_CHANNELS
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: INCR_POST
                                        list: ops
                                            HdlValueId: j
                            HdlStmAssign: body
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueInt: x
                                        HdlOp: INDEX
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: tmds_shift
                                                        HdlValueId: j
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 9
                                                        HdlValueInt: 1
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: tmds_shift
                                        HdlValueId: j
    DEL HdlStmBlock@@SEQ from 

INS HdlStmAssign@@body to 

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_tmds
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlValueId: tmds_counter
                        HdlValueInt: 9
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: tmds
                            HdlValueId: tmds_shift
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: tmds_counter
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: tmds_counter
                                    HdlValueInt: 1
                            HdlValueId: tmds_counter
                        HdlStmFor
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueInt: 0
                                        HdlValueId: j
                            HdlOp: LT
                                list: ops
                                    HdlValueId: j
                                    HdlValueId: NUM_CHANNELS
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: INCR_POST
                                        list: ops
                                            HdlValueId: j
                            HdlStmAssign: body
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueInt: x
                                        HdlOp: INDEX
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: tmds_shift
                                                        HdlValueId: j
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 9
                                                        HdlValueInt: 1
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: tmds_shift
                                        HdlValueId: j

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_tmds

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: CONCAT
        list: ops
            HdlValueInt: x
            HdlOp: INDEX
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: tmds_shift
                            HdlValueId: j
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 9
                            HdlValueInt: 1
    HdlOp: INDEX
        list: ops
            HdlValueId: tmds_shift
            HdlValueId: j

UPD HdlStmAssign@@ to 
    MOV HdlOp@@ADD to 
    HdlOp: ADD
        list: ops
            HdlValueId: tmds_counter
            HdlValueInt: 1
    DEL HdlValueId@@tmds_counter from 

UPD HdlStmAssign@@body to body
    INS HdlOp@@TERNARY to body
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            INS HdlValueInt@@9 to ops

UPD HdlStmFor@@ to 
    UPD HdlOp@@LT to EQ
    MOV HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: j
            HdlValueId: NUM_CHANNELS
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@INCR_POST to INDEX
        MOV HdlOp@@INCR_POST to body
        HdlOp: INCR_POST
            list: ops
                HdlValueId: j
        UPD HdlOp@@INCR_POST to INCR_POST
            UPD HdlValueId@@j to tmds
        DEL list@@body from SEQ
    UPD HdlOp@@LT to LT
        UPD HdlValueId@@j to tmds_counter
        UPD HdlValueId@@NUM_CHANNELS to i
        MOV HdlValueId@@NUM_CHANNELS to ops
        HdlValueId: NUM_CHANNELS
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: j
    DEL HdlStmBlock@@SEQ from 

UPD HdlStmAssign@@body to body
    MOV HdlOp@@CONCAT to body
    HdlOp: CONCAT
        list: ops
            HdlValueInt: x
            HdlOp: INDEX
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: tmds_shift
                            HdlValueId: j
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 9
                            HdlValueInt: 1
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@j to i
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@j to i

DEL HdlStmIf@@ from body

DEL HdlStmAssign@@ from body

DEL HdlStmFor@@ from body


CommitId: 7995f312e508d15f923382c5ff8d3eaef97e2a62
Fix 32kHz conditional
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -26,7 +26,7 @@ module hdmi
 
     // As noted in Section 7.3, the minimal audio requirements are met: 16-bit to 24-bit L-PCM audio at 32 kHz, 44.1 kHz, or 48 kHz.
     // See Table 7-4 or README.md
-    parameter AUDIO_RATE = 32.0,
+    parameter AUDIO_RATE = 32000,
 
     // Defaults to 16-bit audio. Can be anywhere from 16-bit to 24-bit.
     parameter AUDIO_BIT_WIDTH = 16

ParseResult:
UPD HdlIdDef@@AUDIO_RATE to AUDIO_RATE
    INS HdlValueInt@@32000 to AUDIO_RATE


CommitId: 7995f312e508d15f923382c5ff8d3eaef97e2a62
Fix 32kHz conditional
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -181,7 +181,7 @@ logic [55:0] subs [255:0] [3:0];
 // "An HDMI Sink shall ignore bytes HB1 and HB2 of the Null Packet Header and all bytes of the Null Packet Body."
 assign headers[0] = {8'dX, 8'dX, 8'd0}; assign subs[0] = '{56'dX, 56'dX, 56'dX, 56'dX};
 
-localparam SAMPLING_FREQUENCY = AUDIO_RATE == 32 ? 4'b0011
+localparam SAMPLING_FREQUENCY = AUDIO_RATE == 32000 ? 4'b0011
     : AUDIO_RATE == 44100 ? 4'b0000
     : AUDIO_RATE == 88200 ? 4'b1000
     : AUDIO_RATE == 176400 ? 4'b1100
ParseResult:
UPD HdlIdDef@@SAMPLING_FREQUENCY to SAMPLING_FREQUENCY
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            UPD HdlValueInt@@32 to 32000


CommitId: 9d5c8b06b75512527b0564b78c6bea54672383c5
audio sample packet: always send 4 samples
--- a/src/packet_picker.sv
+++ b/src/packet_picker.sv
@@ -66,29 +66,38 @@ logic [1:0] audio_sample_word_transfer_control_synchronizer_chain = 2'd0;
 always_ff @(posedge clk_pixel)
     audio_sample_word_transfer_control_synchronizer_chain <= {audio_sample_word_transfer_control, audio_sample_word_transfer_control_synchronizer_chain[1]};
 
-localparam int MAX_SAMPLES_PER_PACKET = AUDIO_RATE <= 48000 ? 2 : AUDIO_RATE <= 88200 ? 3 : 4;
-logic [(MAX_SAMPLES_PER_PACKET == 4 ? 2 : 1):0] samples_remaining = 1'd0;
-logic [23:0] audio_sample_word_buffer [MAX_SAMPLES_PER_PACKET-1:0] [1:0];
+logic sample_buffer_current = 1'b0;
+logic [1:0] samples_remaining = 2'd0;
+logic [23:0] audio_sample_word_buffer [1:0] [3:0] [1:0];
 logic [AUDIO_BIT_WIDTH-1:0] audio_sample_word_transfer_mux [1:0];
 always_comb
 begin
     if (audio_sample_word_transfer_control_synchronizer_chain[0] ^ audio_sample_word_transfer_control_synchronizer_chain[1])
         audio_sample_word_transfer_mux = audio_sample_word_transfer;
     else
-        audio_sample_word_transfer_mux = '{audio_sample_word_buffer[samples_remaining][1][23:(24-AUDIO_BIT_WIDTH)], audio_sample_word_buffer[samples_remaining][0][23:(24-AUDIO_BIT_WIDTH)]};
+        audio_sample_word_transfer_mux = '{audio_sample_word_buffer[sample_buffer_current][samples_remaining][1][23:(24-AUDIO_BIT_WIDTH)], audio_sample_word_buffer[sample_buffer_current][samples_remaining][0][23:(24-AUDIO_BIT_WIDTH)]};
 end
 
-logic audio_buffer_rst = 1'b0;
+logic sample_buffer_used = 1'b0;
+logic sample_buffer_ready = 1'b0;
+
 always_ff @(posedge clk_pixel)
 begin
-    if (audio_buffer_rst)
-        samples_remaining = 1'd0;
+    if (sample_buffer_used)
+        sample_buffer_ready <= 1'b0;
 
     if (audio_sample_word_transfer_control_synchronizer_chain[0] ^ audio_sample_word_transfer_control_synchronizer_chain[1])
     begin
-        audio_sample_word_buffer[samples_remaining][0] <= {audio_sample_word_transfer_mux[0], (24-AUDIO_BIT_WIDTH)'(0)};
-        audio_sample_word_buffer[samples_remaining][1] <= {audio_sample_word_transfer_mux[1], (24-AUDIO_BIT_WIDTH)'(0)};
-        samples_remaining = samples_remaining + 1'd1;
+        audio_sample_word_buffer[sample_buffer_current][samples_remaining][0] <= {audio_sample_word_transfer_mux[0], (24-AUDIO_BIT_WIDTH)'(0)};
+        audio_sample_word_buffer[sample_buffer_current][samples_remaining][1] <= {audio_sample_word_transfer_mux[1], (24-AUDIO_BIT_WIDTH)'(0)};
+        if (samples_remaining == 2'd3)
+        begin
+            samples_remaining <= 2'd0;
+            sample_buffer_ready <= 1'b1;
+            sample_buffer_current <= !sample_buffer_current;
+        end
+        else
+            samples_remaining <= samples_remaining + 1'd1;
     end
 end
 

ParseResult:
UPD HdlIdDef@@MAX_SAMPLES_PER_PACKET to sample_buffer_current

INS HdlIdDef@@sample_buffer_used to objs
HdlIdDef: sample_buffer_used
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@audio_buffer_rst to sample_buffer_ready

UPD HdlIdDef@@MAX_SAMPLES_PER_PACKET to MAX_SAMPLES_PER_PACKET
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@LE to PARAMETRIZATION
        MOV HdlOp@@LE to ops
        HdlOp: LE
            list: ops
                HdlValueId: AUDIO_RATE
                HdlValueInt: 48000
        UPD HdlOp@@TERNARY to TERNARY
            UPD HdlOp@@LE to LE
                UPD HdlValueInt@@88200 to 0
                MOV HdlValueInt@@88200 to ops
                HdlValueInt: 88200
                DEL HdlValueId@@AUDIO_RATE from ops
                DEL list@@ops from LE
            DEL HdlOp@@LE from ops
            DEL HdlValueInt@@3 from ops
            DEL HdlValueInt@@4 from ops
            DEL list@@ops from TERNARY
        UPD HdlOp@@LE to LE
            UPD HdlValueId@@AUDIO_RATE to logic
            DEL HdlValueInt@@48000 from ops
        DEL HdlValueInt@@2 from ops
        DEL HdlOp@@TERNARY from ops
        DEL list@@ops from TERNARY
    DEL HdlValueId@@int from MAX_SAMPLES_PER_PACKET
    DEL HdlOp@@TERNARY from MAX_SAMPLES_PER_PACKET

UPD HdlIdDef@@audio_sample_word_buffer to audio_sample_word_buffer
    INS HdlOp@@INDEX to audio_sample_word_buffer
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 1
                HdlValueInt: 0
        UPD HdlOp@@INDEX to INDEX
            INS HdlOp@@DOWNTO to ops
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0

UPD HdlIdDef@@audio_sample_word_buffer to audio_sample_word_buffer
    MOV HdlOp@@INDEX to audio_sample_word_buffer
    HdlOp: INDEX
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlOp: PARAMETRIZATION
                        list: ops
                            HdlValueId: logic
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 23
                                    HdlValueInt: 0
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: MAX_SAMPLES_PER_PACKET
                                    HdlValueInt: 1
                            HdlValueInt: 0
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    UPD HdlOp@@INDEX to INDEX
        MOV HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 1
                HdlValueInt: 0
        UPD HdlOp@@INDEX to INDEX
            DEL HdlOp@@DOWNTO from ops
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: MAX_SAMPLES_PER_PACKET
                            HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmIf@@ to 
    UPD HdlValueId@@audio_buffer_rst to sample_buffer_used
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueInt@@0 to ops
        HdlValueInt: 0
        DEL HdlValueId@@samples_remaining from ops
        DEL list@@ops from ASSIGN
    DEL HdlOp@@ASSIGN from 

INS HdlStmAssign@@if_true to 

UPD HdlIdDef@@samples_remaining to samples_remaining
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@TERNARY to TERNARY
                MOV HdlValueInt@@1 to ops
                HdlValueInt: 1
                DEL HdlOp@@EQ from ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: MAX_SAMPLES_PER_PACKET
                        HdlValueInt: 4
                DEL HdlValueInt@@2 from ops
                DEL list@@ops from TERNARY
            DEL HdlOp@@TERNARY from ops

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueId@@sample_buffer_ready to if_true

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: samples_remaining
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: sample_buffer_ready
            HdlStmAssign
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: sample_buffer_current
                HdlValueId: sample_buffer_current
    INS list@@elifs to 

INS HdlStmAssign@@if_false to 

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlOp@@ADD to ops
            HdlOp: ADD
                list: ops
                    HdlValueId: samples_remaining
                    HdlValueInt: 1
            DEL HdlValueId@@samples_remaining from ops
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            INS HdlOp@@INDEX to ops
            UPD HdlOp@@INDEX to INDEX
                INS list@@ops to INDEX
                INS HdlValueId@@sample_buffer_current to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            INS HdlOp@@INDEX to ops
            UPD HdlOp@@INDEX to INDEX
                INS list@@ops to INDEX
                INS HdlValueId@@sample_buffer_current to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@INDEX to INDEX
                    INS HdlOp@@INDEX to ops
                    UPD HdlOp@@INDEX to INDEX
                        INS list@@ops to INDEX
                        INS HdlValueId@@sample_buffer_current to ops
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@INDEX to INDEX
                    INS HdlOp@@INDEX to ops
                    UPD HdlOp@@INDEX to INDEX
                        INS list@@ops to INDEX
                        INS HdlValueId@@sample_buffer_current to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            MOV HdlValueId@@audio_sample_word_buffer to ops
            HdlValueId: audio_sample_word_buffer

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            MOV HdlValueId@@audio_sample_word_buffer to ops
            HdlValueId: audio_sample_word_buffer

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@INDEX to INDEX
                    MOV HdlValueId@@audio_sample_word_buffer to ops
                    HdlValueId: audio_sample_word_buffer
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@INDEX to INDEX
                    MOV HdlValueId@@audio_sample_word_buffer to ops
                    HdlValueId: audio_sample_word_buffer


CommitId: 9d5c8b06b75512527b0564b78c6bea54672383c5
audio sample packet: always send 4 samples
--- a/src/packet_picker.sv
+++ b/src/packet_picker.sv
@@ -101,8 +110,7 @@ always_ff @(posedge clk_pixel)
 begin
     if (packet_pixel_counter == 5'd31 && packet_type == 8'h02) // Keep track of current IEC 60958 frame
     begin
-        for (k = 0; k < MAX_SAMPLES_PER_PACKET; k++)
-            frame_counter = frame_counter + audio_sample_word_present_packet[k];
+        frame_counter = frame_counter + 8'd4;
         if (frame_counter >= 8'd192)
             frame_counter = frame_counter - 8'd192;
     end

ParseResult:
UPD HdlStmFor@@ to 
    MOV HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: frame_counter
            HdlOp: ADD
                list: ops
                    HdlValueId: frame_counter
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: audio_sample_word_present_packet
                            HdlValueId: k
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@ADD to ADD
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: audio_sample_word_present_packet
                    HdlValueId: k
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: k
    DEL HdlOp@@LT from 
    HdlOp: LT
        list: ops
            HdlValueId: k
            HdlValueId: MAX_SAMPLES_PER_PACKET
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlOp: INCR_POST
                list: ops
                    HdlValueId: k

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: samples_remaining
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: sample_buffer_ready
            HdlStmAssign
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: sample_buffer_current
                HdlValueId: sample_buffer_current
    INS list@@elifs to 

UPD HdlStmAssign@@if_false to if_false
    INS HdlValueId@@samples_remaining to if_false

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@ADD to ADD
                INS HdlValueInt@@4 to ops

DEL HdlStmFor@@ from body


CommitId: 9d5c8b06b75512527b0564b78c6bea54672383c5
audio sample packet: always send 4 samples
--- a/src/packet_picker.sv
+++ b/src/packet_picker.sv
@@ -126,8 +134,8 @@ logic source_product_description_info_frame_sent = 1'b0;
 logic last_clk_audio_counter_wrap = 1'b0;
 always_ff @(posedge clk_pixel)
 begin
-    if (audio_buffer_rst)
-        audio_buffer_rst <= 1'b0;
+    if (sample_buffer_used)
+        sample_buffer_used <= 1'b0;
 
     if (video_field_end)
     begin

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlValueId@@audio_buffer_rst to sample_buffer_used

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@audio_buffer_rst to sample_buffer_used


CommitId: 9d5c8b06b75512527b0564b78c6bea54672383c5
audio sample packet: always send 4 samples
--- a/src/packet_picker.sv
+++ b/src/packet_picker.sv
@@ -138,12 +146,12 @@ begin
     end
     else if (packet_enable)
     begin
-        if (samples_remaining != 4'd0)
+        if (sample_buffer_ready)
         begin
             packet_type <= 8'd2;
-            audio_sample_word_packet[MAX_SAMPLES_PER_PACKET-1:0] <= audio_sample_word_buffer;
-            audio_sample_word_present_packet <= {samples_remaining >= 3'd4, samples_remaining >= 3'd3, samples_remaining >= 3'd2, samples_remaining >= 3'd1};
-            audio_buffer_rst <= 1'b1;
+            audio_sample_word_packet <= audio_sample_word_buffer[!sample_buffer_current];
+            audio_sample_word_present_packet <= 4'b1111;
+            sample_buffer_used <= 1'b1;
         end
         else if (last_clk_audio_counter_wrap ^ clk_audio_counter_wrap)
         begin
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@GE to EQ
                MOV HdlOp@@GE to ops
                HdlOp: GE
                    list: ops
                        HdlValueId: samples_remaining
                        HdlValueInt: 3
                DEL HdlOp@@GE from ops
                HdlOp: GE
                    list: ops
                        HdlValueId: samples_remaining
                        HdlValueInt: 4
                DEL list@@ops from CONCAT
            DEL HdlOp@@CONCAT from ops
            DEL HdlOp@@GE from ops
            HdlOp: GE
                list: ops
                    HdlValueId: samples_remaining
                    HdlValueInt: 2
            DEL list@@ops from CONCAT
        UPD HdlOp@@GE to GE
            UPD HdlValueInt@@1 to 1111
            MOV HdlValueInt@@1 to ops
            HdlValueInt: 1
            DEL HdlValueId@@samples_remaining from ops
            DEL list@@ops from GE
        DEL HdlOp@@CONCAT from ops
        DEL HdlOp@@GE from ops
        DEL list@@ops from CONCAT
    DEL HdlOp@@CONCAT from 

UPD HdlStmIf@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlValueId@@samples_remaining to sample_buffer_ready
        MOV HdlValueId@@samples_remaining to ops
        HdlValueId: samples_remaining
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from NE
    DEL HdlOp@@NE from 

UPD HdlStmAssign@@ to 
    INS HdlValueId@@audio_sample_word_packet to 

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@audio_buffer_rst to sample_buffer_used

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@audio_sample_word_packet to audio_sample_word_buffer
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to NEG_LOG
            MOV HdlOp@@SUB to ops
            HdlOp: SUB
                list: ops
                    HdlValueId: MAX_SAMPLES_PER_PACKET
                    HdlValueInt: 1
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@MAX_SAMPLES_PER_PACKET to sample_buffer_current
                DEL HdlValueInt@@1 from ops
            DEL HdlValueInt@@0 from ops
            DEL list@@ops from DOWNTO
        DEL HdlOp@@DOWNTO from ops
    DEL HdlValueId@@audio_sample_word_buffer from 


CommitId: e159237db30a65753d32a398aac5aa6832615214
Pull packet logic out of hdmi into packet picker, add generate statements to further support DVI_OUTPUT, fix CTS counter logic errors
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -4,12 +4,7 @@
 // See HDMI 1.4a Section 5.3.3.
 module audio_clock_regeneration_packet
 #(
-    parameter VIDEO_ID_CODE = 1,
-    // 59.94 Hz = 0, 60 Hz = 1
-    parameter VIDEO_RATE = 0,
-    parameter AUDIO_RATE = 32000,
-    // See Table 7-4 or README.md
-    parameter SAMPLING_FREQUENCY = 4'b0000
+    parameter AUDIO_RATE = 32000
 )
 (
     input logic [19:0] cts,

ParseResult:
DEL HdlIdDef@@VIDEO_ID_CODE from params
HdlIdDef: VIDEO_ID_CODE
    HdlValueInt: 1
    HdlDirection: INTERNAL

DEL HdlIdDef@@VIDEO_RATE from params
HdlIdDef: VIDEO_RATE
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@SAMPLING_FREQUENCY from params
HdlIdDef: SAMPLING_FREQUENCY
    HdlValueInt: 0000
    HdlDirection: INTERNAL


CommitId: e159237db30a65753d32a398aac5aa6832615214
Pull packet logic out of hdmi into packet picker, add generate statements to further support DVI_OUTPUT, fix CTS counter logic errors
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -22,12 +17,16 @@ logic [19:0] N, CTS;
 assign N = 20'(128 * AUDIO_RATE / 1000);
 assign CTS = cts;
 
-logic [55:0] single_sub;
-assign single_sub = {N[7:0], N[15:8], {4'd0, N[19:16]}, CTS[7:0], CTS[15:8], {4'd0, CTS[19:16]}, 8'd0};
 // "An HDMI Sink shall ignore bytes HB1 and HB2 of the Audio Clock Regeneration Packet header."
 assign header = {8'dX, 8'dX, 8'd1};
 // "The four Subpackets each contain the same Audio Clock regeneration Subpacket."
-assign sub = '{single_sub, single_sub, single_sub, single_sub};
+genvar i;
+generate
+    for (i = 0; i < 4; i++)
+    begin: same_packet
+        assign sub[i] = {N[7:0], N[15:8], {4'd0, N[19:16]}, CTS[7:0], CTS[15:8], {4'd0, CTS[19:16]}, 8'd0};
+    end
+endgenerate
 
 endmodule
 
ParseResult:
INS HdlIdDef@@i to objs

INS HdlStmFor@@ to objs

UPD HdlIdDef@@i to i
    INS HdlValueId@@genvar to i

UPD HdlIdDef@@single_sub to single_sub
    MOV HdlDirection@@INTERNAL to single_sub
    HdlDirection: INTERNAL
    DEL HdlOp@@INDEX from single_sub
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 55
                    HdlValueInt: 0

UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: i
    INS HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: i
            HdlValueInt: 4
    INS HdlOp@@INCR_POST to 
    HdlOp: INCR_POST
        list: ops
            HdlValueId: i
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: N
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 7
                                                                    HdlValueInt: 0
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: N
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 15
                                                                    HdlValueInt: 8
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueInt: 0
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: N
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 19
                                                                    HdlValueInt: 16
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: CTS
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: CTS
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 8
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: CTS
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 19
                                            HdlValueInt: 16
            HdlValueInt: 0
    HdlValueId: single_sub

UPD HdlStmAssign@@ to 
    INS HdlOp@@INDEX to 

UPD HdlStmAssign@@ to 
    UPD list@@src to ops
    MOV list@@src to 
    list: src
        HdlValueId: single_sub
        HdlValueId: single_sub
        HdlValueId: single_sub
        HdlValueId: single_sub
    UPD HdlValueId@@single_sub to i
    DEL HdlValueId@@single_sub from src
    DEL HdlValueId@@single_sub from src
    DEL HdlValueId@@single_sub from src
    DEL HdlValueId@@sub from 

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@single_sub to sub
    MOV HdlValueId@@single_sub to 
    HdlValueId: single_sub

DEL HdlIdDef@@single_sub from objs

DEL HdlStmAssign@@ from objs


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -22,19 +22,21 @@ pll pll(.inclk0(CLK_50MHZ), .c0(clk_tmds), .c1(clk_pixel));
 localparam AUDIO_BIT_WIDTH = 16;
 logic [AUDIO_BIT_WIDTH-1:0] audio_in;
 logic [AUDIO_BIT_WIDTH-1:0] audio_out;
-sawtooth #(.BIT_WIDTH(AUDIO_BIT_WIDTH)) sawtooth (.clk_audio(CLK_32KHZ), .level(audio_in));
+// sawtooth #(.BIT_WIDTH(AUDIO_BIT_WIDTH)) sawtooth (.clk_audio(CLK_32KHZ), .level(audio_in));
 
-logic [6:0] remaining;
+logic audio_clock_regeneration_sent = 1'b0;
+logic audio_info_frame_sent = 1'b0;
+
+logic [6:0] remaining = 1;
 logic packet_enable;
 logic [7:0] packet_type = 0;
-buffer #(.CHANNELS(1), .BIT_WIDTH(AUDIO_BIT_WIDTH)) buffer (.clk_audio(CLK_32KHZ), .clk_pixel(clk_pixel), .packet_enable(packet_enable && packet_type == 8'd2), .audio_in('{audio_in}), .audio_out('{audio_out}), .remaining(remaining));
+// buffer #(.CHANNELS(1), .BIT_WIDTH(AUDIO_BIT_WIDTH), .BUFFER_SIZE(1024)) buffer (.clk_audio(CLK_32KHZ), .clk_pixel(clk_pixel), .packet_enable(packet_enable && remaining > 0 && audio_clock_regeneration_sent && audio_info_frame_sent), .audio_in('{audio_in}), .audio_out('{audio_out}), .remaining(remaining));
 
-logic audio_clock_regeneration_sent = 1'b0;
-logic audio_info_frame_sent = 1'b0;
 
 logic [23:0] rgb;
+logic [AUDIO_BIT_WIDTH-1:0] audio_buffer = 0;
 wire [9:0] cx, cy;
-hdmi #(.VIDEO_ID_CODE(3), .AUDIO_BIT_WIDTH(AUDIO_BIT_WIDTH)) hdmi(.clk_tmds(clk_tmds), .clk_pixel(clk_pixel), .rgb(rgb), .audio_sample_word('{audio_out, audio_out}), .packet_type(packet_type), .tmds_p(tmds_p), .tmds_clock_p(tmds_clock_p), .tmds_n(tmds_n), .tmds_clock_n(tmds_clock_n), .cx(cx), .cy(cy), .packet_enable(packet_enable));
+hdmi #(.VIDEO_ID_CODE(3), .AUDIO_BIT_WIDTH(AUDIO_BIT_WIDTH)) hdmi(.clk_tmds(clk_tmds), .clk_pixel(clk_pixel), .rgb(rgb), .audio_sample_word('{audio_buffer, audio_buffer}), .packet_type(packet_type), .tmds_p(tmds_p), .tmds_clock_p(tmds_clock_p), .tmds_n(tmds_n), .tmds_clock_n(tmds_clock_n), .cx(cx), .cy(cy), .packet_enable(packet_enable));
 
 always @(posedge clk_pixel)
 begin

ParseResult:
MOV HdlIdDef@@audio_clock_regeneration_sent to objs
HdlIdDef: audio_clock_regeneration_sent
    HdlValueInt: 0
    HdlDirection: INTERNAL

MOV HdlIdDef@@audio_info_frame_sent to objs
HdlIdDef: audio_info_frame_sent
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@audio_buffer to objs
HdlIdDef: audio_buffer
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AUDIO_BIT_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@remaining to remaining
    INS HdlValueInt@@1 to remaining


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -58,16 +60,17 @@ begin
         else if (remaining > 0)
         begin
             packet_type <= 8'd2;
-            audio_out <= audio_in;
+            audio_buffer <= ~audio_buffer;
         end
         else
             packet_type <= 8'd0;
     end
 end
 
-
+// Overscan / border test (left = red, top = green, right = blue, bottom = blue, fill = black)
 // always @(posedge clk_pixel)
     // rgb <= {cx == 138 ? ~8'd0 : 8'd0, cy == 45 ? ~8'd0 : 8'd0, cx == 857 || cy == 524 ? ~8'd0 : 8'd0};
+
 logic [7:0] character = 8'h30;
 logic [5:0] prevcy = 6'd0;
 always @(posedge clk_pixel)
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@NEG to 
    UPD HdlOp@@NEG to NEG
        INS list@@ops to NEG

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@audio_out to audio_buffer
    UPD HdlValueId@@audio_in to audio_buffer
    MOV HdlValueId@@audio_in to 
    HdlValueId: audio_in


CommitId: d2b969e1ac3a7a148b41743600868efc08199562
fix some one-off concerns, implement non-DVI HDMI compliance
--- a/counter/modules/hdmi/verilog/hdmi.v
+++ b/counter/modules/hdmi/verilog/hdmi.v
@@ -10,29 +10,29 @@ module hdmi (
            output wire tmds_clock_p,
            output wire [2:0] tmds_n,
            output wire tmds_clock_n,
-           output reg [BIT_WIDTH:0] cx,
-           output reg [BIT_HEIGHT:0] cy
+           output reg [BIT_WIDTH:0] cx = 0,
+           output reg [BIT_HEIGHT:0] cy = 0
 );
 
 // See CEA-861-D for enumeration of video id codes.
 // Formats 1, 2, 3, 4, and 16 are supported.
 // Pixel repetition, interlaced scans and other special output modes are not implemented.
 parameter VIDEO_ID_CODE = 3;
-parameter BIT_WIDTH = VIDEO_ID_CODE < 4 ? 9 : VIDEO_ID_CODE == 4 ? 10 : 11;
-parameter BIT_HEIGHT = VIDEO_ID_CODE == 16 ? 10 : 9;
+parameter BIT_WIDTH = 9;//VIDEO_ID_CODE < 4 ? 9 : VIDEO_ID_CODE == 4 ? 10 : 11;
+parameter BIT_HEIGHT = 9;//VIDEO_ID_CODE == 16 ? 10 : 9;
 
 // True differential buffer IP from Quartus.
 // Interchangeable with Xilinx OBUFDS primitive where .din is .I, .pad_out is .O, .pad_out_b is .OB
 OBUFDS obufds(.din({tmds_shift_red[0], tmds_shift_green[0], tmds_shift_blue[0], clk_pixel}), .pad_out({tmds_p, tmds_clock_p}), .pad_out_b({tmds_n,tmds_clock_n}));
 
-reg [BIT_WIDTH:0] frame_width;
-reg [BIT_HEIGHT:0] frame_height;
-reg [BIT_WIDTH:0] screen_width;
-reg [BIT_HEIGHT:0] screen_height;
-reg [BIT_WIDTH:0] screen_start_x;
-reg [BIT_HEIGHT:0] screen_start_y;
+reg [BIT_WIDTH:0] frame_width = 858;
+reg [BIT_HEIGHT:0] frame_height = 525;
+reg [BIT_WIDTH:0] screen_width = 720;
+reg [BIT_HEIGHT:0] screen_height = 480;
+wire [BIT_WIDTH:0] screen_start_x = frame_width - screen_width;
+wire [BIT_HEIGHT:0] screen_start_y = frame_height - screen_height;
 
-always @(posedge clk_pixel)
+always @*
 begin
     case (VIDEO_ID_CODE)
         1:

ParseResult:
UPD HdlIdDef@@frame_width to frame_width
    INS HdlValueInt@@858 to frame_width

UPD HdlIdDef@@frame_height to frame_height
    INS HdlValueInt@@525 to frame_height

UPD HdlIdDef@@screen_width to screen_width
    INS HdlValueInt@@720 to screen_width

UPD HdlIdDef@@screen_height to screen_height
    INS HdlValueInt@@480 to screen_height

UPD HdlIdDef@@screen_start_x to screen_start_x
    INS HdlOp@@SUB to screen_start_x
    HdlOp: SUB
        list: ops
            HdlValueId: frame_width
            HdlValueId: screen_width

UPD HdlIdDef@@screen_start_y to screen_start_y
    INS HdlOp@@SUB to screen_start_y
    HdlOp: SUB
        list: ops
            HdlValueId: frame_height
            HdlValueId: screen_height

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    UPD HdlStmBlock@@SEQ to SEQ
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: screen_start_x
                HdlOp: SUB
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueId: frame_width
                                HdlValueInt: 1
                        HdlValueId: screen_width
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: screen_start_y
                HdlOp: SUB
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueId: frame_height
                                HdlValueInt: 1
                        HdlValueId: screen_height

UPD HdlIdDef@@BIT_WIDTH to BIT_WIDTH
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueInt@@9 to ops
        HdlValueInt: 9
        DEL HdlOp@@LT from ops
        HdlOp: LT
            list: ops
                HdlValueId: VIDEO_ID_CODE
                HdlValueInt: 4
        DEL HdlOp@@TERNARY from ops
        HdlOp: TERNARY
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: VIDEO_ID_CODE
                        HdlValueInt: 4
                HdlValueInt: 10
                HdlValueInt: 11
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from BIT_WIDTH

UPD HdlIdDef@@BIT_HEIGHT to BIT_HEIGHT
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueInt@@9 to ops
        HdlValueInt: 9
        DEL HdlOp@@EQ from ops
        HdlOp: EQ
            list: ops
                HdlValueId: VIDEO_ID_CODE
                HdlValueInt: 16
        DEL HdlValueInt@@10 from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from BIT_HEIGHT

UPD HdlIdDef@@cx to cx
    INS HdlValueInt@@0 to cx

UPD HdlIdDef@@cy to cy
    INS HdlValueInt@@0 to cy

UPD HdlIdDef@@screen_start_x to screen_start_x
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@screen_start_y to screen_start_y
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire


CommitId: d2b969e1ac3a7a148b41743600868efc08199562
fix some one-off concerns, implement non-DVI HDMI compliance
--- a/counter/modules/hdmi/verilog/hdmi.v
+++ b/counter/modules/hdmi/verilog/hdmi.v
@@ -64,33 +64,31 @@ begin
             screen_height = 1080;
         end
     endcase
-    screen_start_x = frame_width - 1'b1 - screen_width;
-    screen_start_y = frame_height - 1'b1 - screen_height;
 end
 
-reg hsync;
-reg vsync;
+reg hsync = 0;
+reg vsync = 0;
 always @(posedge clk_pixel)
 begin
 case (VIDEO_ID_CODE)
     1:
     begin
-        hsync <= ~(cx > 15 && cx < 15 + 96);
+        hsync <= ~(cx > 15 && cx <= 15 + 96);
         vsync <= ~(cy < 2);
     end
     2, 3:
     begin
-        hsync <= ~(cx > 15 && cx < 15 + 62);
+        hsync <= ~(cx > 15 && cx <= 15 + 62);
         vsync <= ~(cy > 5 && cy < 12);
     end
     4:
     begin
-        hsync <= cx > 109 && cx < 109 + 40;
+        hsync <= cx > 109 && cx <= 109 + 40;
         vsync <= cy < 5;
     end
     16:
     begin
-        hsync <= cx > 87 && cx < 87 + 44;
+        hsync <= cx > 87 && cx <= 87 + 44;
         vsync <= cy < 5;
     end
 endcase

ParseResult:
UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll

UPD HdlIdDef@@hsync to hsync
    INS HdlValueInt@@0 to hsync

UPD HdlIdDef@@vsync to vsync
    INS HdlValueInt@@0 to vsync

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    UPD HdlStmBlock@@SEQ to SEQ
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: screen_start_x
                HdlOp: SUB
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueId: frame_width
                                HdlValueInt: 1
                        HdlValueId: screen_width
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: screen_start_y
                HdlOp: SUB
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueId: frame_height
                                HdlValueInt: 1
                        HdlValueId: screen_height

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@LT to LE

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@LT to LE

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@LT to LE

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@LT to LE

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@LT to LE


CommitId: cfb4a0b115bfed323179d1e63d6f746ff62aacc0
Fix inverted validity bits
--- a/modules/sound/wave.sv
+++ b/modules/sound/wave.sv
@@ -8,7 +8,5 @@ module sawtooth
 );
 
 always @(posedge clk_audio)
-begin
     level <= level + 1'd1;
-end
 endmodule
ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to objs
        MOV list@@body to SEQ
        list: body
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlValueId: level
                        HdlValueInt: 1
                HdlValueId: level
    DEL HdlStmBlock@@SEQ from 

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_audio
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlValueId: level
                        HdlValueInt: 1
                HdlValueId: level

UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: ADD
        list: ops
            HdlValueId: level
            HdlValueInt: 1
    HdlValueId: level


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -38,7 +38,7 @@ always @(posedge clk_audio)
 logic audio_clock_regeneration_sent = 1'b0;
 logic audio_info_frame_sent = 1'b0;
 
-logic [6:0] remaining;
+logic [7:0] remaining;
 logic packet_enable;
 logic [7:0] packet_type = 0;
 logic [AUDIO_BIT_WIDTH-1:0] audio_out [3:0] [CHANNELS-1:0];

ParseResult:
UPD HdlIdDef@@remaining to remaining
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@6 to 7


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -73,10 +73,11 @@ begin
         else if (remaining > 0)
         begin
             packet_type <= 8'd2;
-            audio_sample_word[3] <= remaining >= 4 ? audio_out[3] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
-            audio_sample_word[2] <= remaining >= 3 ? audio_out[2] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
-            audio_sample_word[1] <= remaining >= 2 ? audio_out[1] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
-            audio_sample_word[0] <= remaining >= 1 ? audio_out[0] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            audio_sample_word <= audio_out;
+            // audio_sample_word[3] <= remaining >= 8'd4 ? audio_out[3] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            // audio_sample_word[2] <= remaining >= 8'd3 ? audio_out[2] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            // audio_sample_word[1] <= remaining >= 8'd2 ? audio_out[1] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            // audio_sample_word[0] <= remaining >= 8'd1 ? audio_out[0] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
             audio_sample_word_present <= '{remaining >= 4, remaining >= 3, remaining >= 2, remaining >= 1};
             if (remaining > 220)
                 $fatal("Remaining: %d", remaining);
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@INDEX to INDEX
            MOV HdlValueId@@audio_out to ops
            HdlValueId: audio_out
            DEL HdlValueInt@@3 from ops
            DEL list@@ops from INDEX
        DEL HdlOp@@GE from ops
        HdlOp: GE
            list: ops
                HdlValueId: remaining
                HdlValueInt: 4
        DEL HdlOp@@INDEX from ops
        DEL list@@ from ops
        list
            HdlOp: CALL
                list: ops
                    HdlValueId: AUDIO_BIT_WIDTH
                    HdlValueInt: 0
            HdlOp: CALL
                list: ops
                    HdlValueId: AUDIO_BIT_WIDTH
                    HdlValueInt: 0
        DEL list@@ops from TERNARY
    UPD HdlOp@@INDEX to INDEX
        MOV HdlValueId@@audio_sample_word to ops
        HdlValueId: audio_sample_word
        DEL HdlValueInt@@3 from ops
        DEL list@@ops from INDEX
    DEL HdlOp@@TERNARY from 
    DEL HdlOp@@INDEX from 

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GE
                list: ops
                    HdlValueId: remaining
                    HdlValueInt: 3
            HdlOp: INDEX
                list: ops
                    HdlValueId: audio_out
                    HdlValueInt: 2
            list
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 2

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GE
                list: ops
                    HdlValueId: remaining
                    HdlValueInt: 2
            HdlOp: INDEX
                list: ops
                    HdlValueId: audio_out
                    HdlValueInt: 1
            list
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GE
                list: ops
                    HdlValueId: remaining
                    HdlValueInt: 1
            HdlOp: INDEX
                list: ops
                    HdlValueId: audio_out
                    HdlValueInt: 0
            list
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 0


CommitId: 46d98ce03bace392ff492f8d39ca8f165372f10e
fix one-off for CTS counter output
--- a/src/audio_clock_regeneration_packet.sv
+++ b/src/audio_clock_regeneration_packet.sv
@@ -10,7 +10,7 @@ module audio_clock_regeneration_packet
 (
     input logic clk_pixel,
     input logic clk_audio,
-    output logic clk_audio_counter_wrap,
+    output logic clk_audio_counter_wrap = 0,
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );

ParseResult:
UPD HdlIdDef@@clk_audio_counter_wrap to clk_audio_counter_wrap
    INS HdlValueInt@@0 to clk_audio_counter_wrap


CommitId: 46d98ce03bace392ff492f8d39ca8f165372f10e
fix one-off for CTS counter output
--- a/src/audio_clock_regeneration_packet.sv
+++ b/src/audio_clock_regeneration_packet.sv
@@ -47,7 +47,7 @@ begin
     if (clk_audio_counter_wrap_synchronizer_chain[1] ^ clk_audio_counter_wrap_synchronizer_chain[0])
     begin
         cycle_time_stamp_counter <= CYCLE_TIME_STAMP_COUNTER_WIDTH'(0);
-        cycle_time_stamp <= {(20-CYCLE_TIME_STAMP_COUNTER_WIDTH)'(0), cycle_time_stamp_counter};
+        cycle_time_stamp <= {(20-CYCLE_TIME_STAMP_COUNTER_WIDTH)'(0), cycle_time_stamp_counter + 1};
         clk_audio_counter_wrap <= !clk_audio_counter_wrap;
     end
     else
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        INS HdlOp@@ADD to ops
        UPD HdlOp@@ADD to ADD
            INS list@@ops to ADD
            INS HdlValueInt@@1 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        MOV HdlValueId@@cycle_time_stamp_counter to ops
        HdlValueId: cycle_time_stamp_counter


CommitId: c96ece9b0e469f6307b1f35621c225a0313cb5a1
Update DVI comments, hopefully fix #2 by disabling video preamble
--- a/modules/hdmi/verilog/hdmi.v
+++ b/modules/hdmi/verilog/hdmi.v
@@ -114,7 +114,7 @@ end
 // See Section 5.2
 wire video_data_period = cx >= screen_start_x && cy >= screen_start_y;
 wire video_guard = (cx >= screen_start_x - 2 && cx < screen_start_x) && cy >= screen_start_y;
-wire video_preamble = (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy >= screen_start_y;
+wire video_preamble = !DVI_OUTPUT && (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy >= screen_start_y;
 
 // See Section 5.2.3.1
 wire data_island_guard = !DVI_OUTPUT && ((cx >= screen_start_x - 2 && cx < screen_start_x) || (cx >= screen_start_x + 32 && cx < screen_start_x + 34)) && cy < screen_start_y;
ParseResult:
UPD HdlIdDef@@video_preamble to video_preamble
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: DVI_OUTPUT

UPD HdlIdDef@@video_preamble to video_preamble
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: GE
                    list: ops
                        HdlValueId: cx
                        HdlOp: SUB
                            list: ops
                                HdlValueId: screen_start_x
                                HdlValueInt: 10
                HdlOp: LT
                    list: ops
                        HdlValueId: cx
                        HdlOp: SUB
                            list: ops
                                HdlValueId: screen_start_x
                                HdlValueInt: 2


CommitId: 603befd82995a60496d8a78b9c68d406e6854f72
Re-do multi-sample audio packet, fix CTS counter logic, simpilfy some statements to reduce resource usage
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -164,7 +164,7 @@ generate
         logic data_island_period_instantaneous;
         assign data_island_period_instantaneous = num_packets_alongside > 0 && cx >= 10 && cx < 10 + num_packets_alongside * 32;
         logic packet_enable;
-        assign packet_enable = data_island_period_instantaneous && (cx - 10) % 32 == 0;
+        assign packet_enable = data_island_period_instantaneous && 5'(cx - 10) == 5'd0;
 
         logic data_island_guard = 0;
         logic data_island_preamble = 0;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@MOD to CALL
            UPD HdlOp@@MOD to MOD
                DEL HdlValueInt@@32 from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@CALL to CALL
                INS HdlValueInt@@5 to ops


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -6,11 +6,11 @@ module packet_assembler (
     input data_island_period,
     input [23:0] header, // See Table 5-8 Packet Types
     input [55:0] sub [3:0],
-    output logic [8:0] packet_data, // See Figure 5-4 Data Island Packet and ECC Structure
-    output logic [4:0] counter = 5'd0
+    output logic [8:0] packet_data // See Figure 5-4 Data Island Packet and ECC Structure
 );
 
 // 32 pixel wrap-around counter. See Section 5.2.3.4 for further information.
+logic [4:0] counter = 5'd0;
 always @(posedge clk_pixel)
     if (data_island_period)
         counter <= counter + 5'd1;
ParseResult:
MOV HdlIdDef@@counter to ports
HdlIdDef: counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: OUT

UPD HdlIdDef@@counter to counter
    UPD HdlDirection@@OUT to INTERNAL


CommitId: 7474848dc43a3a2e9aaaf5192ac72fd193efed10
Finalize first-pass audio implementation, onto debugging
--- a/modules/sound/verilog/wave.sv
+++ b/modules/sound/verilog/wave.sv
@@ -1,10 +1,14 @@
-module sawtooth (
-    input logic clk_32kHz,
-    output logic [15:0] level = 16'd0
+module sawtooth 
+#(
+    parameter BIT_WIDTH = 16
+)
+(
+    input logic clk_audio,
+    output logic [BIT_WIDTH:0] level = BIT_WIDTH'(0)
 );
 
-always @(posedge clk_32kHz)
+always @(posedge clk_audio)
 begin
-    level <= level + 16'd1;
+    level <= level + 1'd1;
 end
 endmodule
ParseResult:
INS HdlIdDef@@BIT_WIDTH to params
HdlIdDef: BIT_WIDTH
    HdlValueInt: 16
    HdlDirection: INTERNAL

UPD HdlIdDef@@clk_32kHz to clk_audio

UPD HdlIdDef@@level to level
    INS HdlOp@@CALL to level
    UPD HdlOp@@CALL to CALL
        INS list@@ops to CALL
        INS HdlValueId@@BIT_WIDTH to ops
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlValueId@@BIT_WIDTH to ops

UPD HdlIdDef@@level to level
    MOV HdlValueInt@@0 to level
    HdlValueInt: 0
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@15 from ops

UPD HdlStmProcess@@ to 
    UPD HdlOp@@RISING to RISING
        UPD HdlValueId@@clk_32kHz to clk_audio


CommitId: 4e32ff3efbb5ca6a4680cf68fefcd39e697d41af
Fix buffer bit width + update comments, force top to infer RAM instead of logic cells
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -3,14 +3,14 @@
 // If the buffer is cleared, either a larger buffer is needed or output is slower than input.
 
 // Operating principles:
-// * remove_position is the next available audio sample, if any
+// * remove_position is the next available audio sample, unless remove_position == insert_position
 // * insert_position is the next empty buffer location
 // * remaining is the distance between insert and remove
-//     * insert is always ahead of remove -- if remove > insert, a position has wrapped around from BUFFER_SIZE and an alternate calculation is used
-// * if the buffer is completely filled, insert and remove become equal and the remaining count drops from BUFFER_SIZE-1 to 0.
+//     * insert is always ahead of remove -- if remove > insert, a position has wrapped around from BUFFER_END and an alternate calculation is used
+// * if the buffer is completely filled, insert_position and remove_position become equal and the buffer is cleared (remaining = 0)
 module buffer 
 #(
-    parameter BUFFER_SIZE = 128,
+    parameter BUFFER_SIZE = 16,
     parameter BIT_WIDTH = 16,
     parameter CHANNELS = 2
 )

ParseResult:
UPD HdlIdDef@@BUFFER_SIZE to BUFFER_SIZE
    UPD HdlValueInt@@128 to 16


CommitId: 4e32ff3efbb5ca6a4680cf68fefcd39e697d41af
Fix buffer bit width + update comments, force top to infer RAM instead of logic cells
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -25,14 +25,14 @@ module buffer
 
 localparam BUFFER_WIDTH = $clog2(BUFFER_SIZE);
 
-const bit [BUFFER_WIDTH-1:0] BUFFER_END = 2 ** BUFFER_WIDTH == BUFFER_SIZE ? ~(BUFFER_WIDTH'(0)) : BUFFER_WIDTH'(BUFFER_SIZE) - 1'b1;
+const bit [BUFFER_WIDTH-1:0] BUFFER_END = BUFFER_WIDTH'(BUFFER_SIZE - 1);
 
 logic [BUFFER_WIDTH-1:0] insert_position = 0;
 logic [BUFFER_WIDTH-1:0] remove_position = 0;
 
 assign remaining = insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position + BUFFER_WIDTH'(1));
 
-logic [19:0] audio_buffer [BUFFER_SIZE-1:0] [CHANNELS-1:0];
+logic [BIT_WIDTH-1:0] audio_buffer [BUFFER_SIZE-1:0] [CHANNELS-1:0];
 
 assign audio_out = audio_buffer[remove_position];
 

ParseResult:
UPD HdlIdDef@@BUFFER_END to BUFFER_END
    UPD HdlOp@@TERNARY to CALL
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@POW to POW
                MOV HdlValueId@@BUFFER_WIDTH to ops
                HdlValueId: BUFFER_WIDTH
                DEL HdlValueInt@@2 from ops
                DEL list@@ops from POW
            DEL HdlOp@@POW from ops
            DEL HdlValueId@@BUFFER_SIZE from ops
            DEL list@@ops from EQ
        UPD HdlOp@@SUB to SUB
            UPD HdlOp@@CALL to CALL
                MOV HdlValueId@@BUFFER_SIZE to ops
                HdlValueId: BUFFER_SIZE
                DEL HdlValueId@@BUFFER_WIDTH from ops
                DEL list@@ops from CALL
            DEL HdlOp@@CALL from ops
        UPD HdlOp@@NEG to GT
        MOV HdlOp@@NEG to ops
        HdlOp: NEG
            list: ops
                HdlOp: CALL
                    list: ops
                        HdlValueId: BUFFER_WIDTH
                        HdlValueInt: 0
        DEL HdlOp@@EQ from ops

UPD HdlIdDef@@audio_buffer to audio_buffer
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS HdlOp@@SUB to ops
                    UPD HdlOp@@SUB to SUB
                        INS list@@ops to SUB
                        INS HdlValueId@@BIT_WIDTH to ops

UPD HdlIdDef@@audio_buffer to audio_buffer
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlValueInt@@19 to 1
                    MOV HdlValueInt@@19 to ops
                    HdlValueInt: 19


CommitId: 4e32ff3efbb5ca6a4680cf68fefcd39e697d41af
Fix buffer bit width + update comments, force top to infer RAM instead of logic cells
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -42,16 +42,16 @@ begin
     audio_buffer[insert_position] <= audio_in;
     if (remaining == BUFFER_END)
         $fatal("Audio buffer overflow");
-    insert_position <= insert_position == BUFFER_END ? BUFFER_WIDTH'(0) : insert_position + 1'd1;
+    insert_position <= insert_position == BUFFER_END ? BUFFER_WIDTH'(0) : insert_position + BUFFER_WIDTH'(1);
 end
 
 always @(posedge clk_pixel)
 begin
     if (packet_enable)
     begin
-        if (remaining > 1'd0) // Remove.
+        if (remaining > BUFFER_WIDTH'(0)) // Remove.
         begin
-            remove_position <= remove_position == BUFFER_END ? BUFFER_WIDTH'(0) : remove_position + 1'd1;
+            remove_position <= remove_position == BUFFER_END ? BUFFER_WIDTH'(0) : remove_position + BUFFER_WIDTH'(1);
         end else
         begin
             // clk_packet but no items left
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@ADD to ADD
            INS HdlOp@@CALL to ops
            UPD HdlOp@@CALL to CALL
                INS list@@ops to CALL
                INS HdlValueId@@BUFFER_WIDTH to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@GT to GT
        MOV HdlValueId@@remaining to ops
        HdlValueId: remaining
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from GT
    DEL HdlOp@@GT from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@ADD to ADD
            MOV HdlValueInt@@1 to ops
            HdlValueInt: 1

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@ADD to ADD
            INS HdlOp@@CALL to ops
            UPD HdlOp@@CALL to CALL
                INS list@@ops to CALL
                INS HdlValueId@@BUFFER_WIDTH to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@ADD to ADD
            MOV HdlValueInt@@1 to ops
            HdlValueInt: 1


CommitId: 4d84bca0fa7b43fd885c81a44d2658d6a900c752
Fix incorrect word length after asserting channel status
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -202,11 +202,17 @@ generate
     else if (AUDIO_BIT_WIDTH == 20)
         audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'b101, 1'b0}))                        audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
     else if (AUDIO_BIT_WIDTH < 20)
-        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'(20 - AUDIO_BIT_WIDTH) << 3, 1'b0})) audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+    begin : audio_bit_width_block
+        localparam word_length = 3'(20 - AUDIO_BIT_WIDTH);
+        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({word_length[0:2], 1'b0})) audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+    end
     else if (AUDIO_BIT_WIDTH == 24)
         audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'b101, 1'b1}))                        audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
     else if (AUDIO_BIT_WIDTH < 24)
-        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({3'(24 - AUDIO_BIT_WIDTH) << 3, 1'b1})) audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+    begin
+        localparam word_length = 3'(24 - AUDIO_BIT_WIDTH);
+        audio_sample_packet #(.SAMPLING_FREQUENCY(AUDIO_RATE), .WORD_LENGTH({word_length[0:2], 1'b1})) audio_sample_packet (.clk_pixel(clk_pixel), .packet_enable(packet_enable_fanout[2]), .valid_bit(2'b00), .user_data_bit(2'b00), .audio_sample_word(audio_sample_word_padded), .header(headers[2]), .sub(subs[2]));
+    end
 endgenerate
 
 audio_info_frame audio_info_frame(.header(headers[132]), .sub(subs[132]));
ParseResult:
UPD HdlStmIf@@ to 
    MOV tuple@@ to elifs
    tuple
        HdlOp: EQ
            list: ops
                HdlValueId: AUDIO_BIT_WIDTH
                HdlValueInt: 24
        HdlCompInst: audio_sample_packet-audio_sample_packet
            list: param_map
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: SAMPLING_FREQUENCY
                        HdlValueId: AUDIO_RATE
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: WORD_LENGTH
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 101
                                HdlValueInt: 1
            list: port_map
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: clk_pixel
                        HdlValueId: clk_pixel
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: packet_enable
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: packet_enable_fanout
                                HdlValueInt: 2
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: valid_bit
                        HdlValueInt: 00
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: user_data_bit
                        HdlValueInt: 00
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: audio_sample_word
                        HdlValueId: audio_sample_word_padded
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: header
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: headers
                                HdlValueInt: 2
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: sub
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: subs
                                HdlValueInt: 2
    MOV tuple@@ to elifs
    tuple
        HdlOp: LT
            list: ops
                HdlValueId: AUDIO_BIT_WIDTH
                HdlValueInt: 20
        HdlCompInst: audio_sample_packet-audio_sample_packet
            list: param_map
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: SAMPLING_FREQUENCY
                        HdlValueId: AUDIO_RATE
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: WORD_LENGTH
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: SLL
                                    list: ops
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueInt: 3
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueInt: 20
                                                        HdlValueId: AUDIO_BIT_WIDTH
                                        HdlValueInt: 3
                                HdlValueInt: 0
            list: port_map
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: clk_pixel
                        HdlValueId: clk_pixel
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: packet_enable
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: packet_enable_fanout
                                HdlValueInt: 2
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: valid_bit
                        HdlValueInt: 00
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: user_data_bit
                        HdlValueInt: 00
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: audio_sample_word
                        HdlValueId: audio_sample_word_padded
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: header
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: headers
                                HdlValueInt: 2
                HdlOp: MAP_ASSOCIATION
                    list: ops
                        HdlValueId: sub
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: subs
                                HdlValueInt: 2
    MOV HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: AUDIO_BIT_WIDTH
            HdlValueInt: 20
    MOV HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: AUDIO_BIT_WIDTH
            HdlValueInt: 24

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlIdDef@@word_length to body

INS HdlIdDef@@word_length to body

UPD HdlIdDef@@word_length to word_length
    INS HdlDirection@@INTERNAL to word_length

UPD HdlIdDef@@word_length to word_length
    INS HdlDirection@@INTERNAL to word_length


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -31,16 +31,14 @@ const bit [BUFFER_WIDTH-1:0] BUFFER_END = 2 ** BUFFER_WIDTH == BUFFER_SIZE ? ~(B
 logic [BUFFER_WIDTH-1:0] insert_position = 0;
 logic [BUFFER_WIDTH-1:0] remove_position = 0;
 
-assign remaining = (insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position + 1'd1)); // - (clk_audio && insert_position != remove_position ? 1'd1 : 1'd0);
+assign remaining = (insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position + 1)); // - (clk_audio && insert_position != remove_position ? 1'd1 : 1'd0);
 
 logic [19:0] audio_buffer [BUFFER_SIZE-1:0] [CHANNELS-1:0];
 
 genvar i;
 generate
     for (i = 0; i < 4; i++)
-    begin: audio_out_loop
         assign audio_out[i] = audio_buffer[(remove_position + i) % ((BUFFER_WIDTH+1)'(BUFFER_END)+1)];
-    end
 endgenerate
 
 always @(posedge clk_audio)

ParseResult:
UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_buffer
            HdlOp: MOD
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: remove_position
                            HdlValueId: i
                    HdlOp: ADD
                        list: ops
                            HdlOp: CALL
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlValueId: BUFFER_WIDTH
                                            HdlValueInt: 1
                                    HdlValueId: BUFFER_END
                            HdlValueInt: 1
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_out
            HdlValueId: i

UPD HdlStmFor@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -57,7 +55,7 @@ begin
     begin
         if (remaining > 1'd0) // Remove.
         begin
-            remove_position <= ((BUFFER_WIDTH+1)'(remove_position) + (remaining > BUFFER_WIDTH'(4) ? 3'd4 : 3'(remaining))) % ((BUFFER_WIDTH+1)'(BUFFER_END) + 1'd1);
+            remove_position <= ((BUFFER_WIDTH+1)'(remove_position) + (remaining > 4 ? 3'd4 : 3'(remaining))) % ((BUFFER_WIDTH+1)'(BUFFER_END) + 1);
             // $display("Removing from %d (%d): %p", remove_position, remaining > 4 ? 3'd4 : 3'(remaining), audio_out);
         end else
         begin
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@MOD to MOD
        UPD HdlOp@@ADD to ADD
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlOp@@GT to GT
                    UPD HdlOp@@CALL to CALL
                        MOV HdlValueInt@@4 to ops
                        HdlValueInt: 4
                        DEL HdlValueId@@BUFFER_WIDTH from ops
                        DEL list@@ops from CALL
                    DEL HdlOp@@CALL from ops


CommitId: bae2572dedbda681d776d3b0665d29448ecd35b2
Fix incorrect info frame checksum
--- a/src/audio_info_frame.sv
+++ b/src/audio_info_frame.sv
@@ -32,7 +32,7 @@ assign header = {{3'b0, LENGTH}, VERSION, {1'b1, TYPE}};
 // PB21-27 = sub3
 logic [7:0] packet_bytes [27:0];
 
-assign packet_bytes[0] = ~(header[23:16] + header[15:8] + header[7:0] + packet_bytes[5] + packet_bytes[4] + packet_bytes[3] + packet_bytes[2] + packet_bytes[1]);
+assign packet_bytes[0] = 8'd1 + ~(header[23:16] + header[15:8] + header[7:0] + packet_bytes[5] + packet_bytes[4] + packet_bytes[3] + packet_bytes[2] + packet_bytes[1]);
 assign packet_bytes[1] = {AUDIO_CODING_TYPE, 1'b0, AUDIO_CHANNEL_COUNT};
 assign packet_bytes[2] = {3'd0, SAMPLING_FREQUENCY, SAMPLE_SIZE};
 assign packet_bytes[3] = 8'd0;
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@ADD to 
    UPD HdlOp@@ADD to ADD
        INS list@@ops to ADD
        INS HdlValueInt@@1 to ops

UPD HdlStmAssign@@ to 
    MOV HdlOp@@NEG to 
    HdlOp: NEG
        list: ops
            HdlOp: ADD
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: ADD
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: header
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 23
                                                                                    HdlValueInt: 16
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: header
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 15
                                                                                    HdlValueInt: 8
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: header
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: packet_bytes
                                                            HdlValueInt: 5
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: packet_bytes
                                                    HdlValueInt: 4
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: packet_bytes
                                            HdlValueInt: 3
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: packet_bytes
                                    HdlValueInt: 2
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: packet_bytes
                            HdlValueInt: 1


CommitId: bae2572dedbda681d776d3b0665d29448ecd35b2
Fix incorrect info frame checksum
--- a/src/source_product_description_info_frame.sv
+++ b/src/source_product_description_info_frame.sv
@@ -25,7 +25,7 @@ assign header = {{3'b0, LENGTH}, VERSION, {1'b1, TYPE}};
 // PB21-27 = sub3
 logic [7:0] packet_bytes [27:0];
 
-assign packet_bytes[0] = ~(header[23:16] + header[15:8] + header[7:0] + packet_bytes[24] + packet_bytes[23] + packet_bytes[22] + packet_bytes[21] + packet_bytes[20] + packet_bytes[19] + packet_bytes[18] + packet_bytes[17] + packet_bytes[16] + packet_bytes[15] + packet_bytes[14] + packet_bytes[13] + packet_bytes[12] + packet_bytes[11] + packet_bytes[10] + packet_bytes[9] + packet_bytes[8] + packet_bytes[7] + packet_bytes[6] + packet_bytes[5] + packet_bytes[4] + packet_bytes[3] + packet_bytes[2] + packet_bytes[1]);
+assign packet_bytes[0] = 8'd1 + ~(header[23:16] + header[15:8] + header[7:0] + packet_bytes[24] + packet_bytes[23] + packet_bytes[22] + packet_bytes[21] + packet_bytes[20] + packet_bytes[19] + packet_bytes[18] + packet_bytes[17] + packet_bytes[16] + packet_bytes[15] + packet_bytes[14] + packet_bytes[13] + packet_bytes[12] + packet_bytes[11] + packet_bytes[10] + packet_bytes[9] + packet_bytes[8] + packet_bytes[7] + packet_bytes[6] + packet_bytes[5] + packet_bytes[4] + packet_bytes[3] + packet_bytes[2] + packet_bytes[1]);
 
 
 byte vendor_name [0:7];
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@ADD to 
    UPD HdlOp@@ADD to ADD
        INS list@@ops to ADD
        INS HdlValueInt@@1 to ops

UPD HdlStmAssign@@ to 
    MOV HdlOp@@NEG to 
    HdlOp: NEG
        list: ops
            HdlOp: ADD
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: ADD
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlOp: ADD
                                                                        list: ops
                                                                            HdlOp: ADD
                                                                                list: ops
                                                                                    HdlOp: ADD
                                                                                        list: ops
                                                                                            HdlOp: ADD
                                                                                                list: ops
                                                                                                    HdlOp: ADD
                                                                                                        list: ops
                                                                                                            HdlOp: ADD
                                                                                                                list: ops
                                                                                                                    HdlOp: ADD
                                                                                                                        list: ops
                                                                                                                            HdlOp: ADD
                                                                                                                                list: ops
                                                                                                                                    HdlOp: ADD
                                                                                                                                        list: ops
                                                                                                                                            HdlOp: ADD
                                                                                                                                                list: ops
                                                                                                                                                    HdlOp: ADD
                                                                                                                                                        list: ops
                                                                                                                                                            HdlOp: ADD
                                                                                                                                                                list: ops
                                                                                                                                                                    HdlOp: ADD
                                                                                                                                                                        list: ops
                                                                                                                                                                            HdlOp: ADD
                                                                                                                                                                                list: ops
                                                                                                                                                                                    HdlOp: ADD
                                                                                                                                                                                        list: ops
                                                                                                                                                                                            HdlOp: ADD
                                                                                                                                                                                                list: ops
                                                                                                                                                                                                    HdlOp: ADD
                                                                                                                                                                                                        list: ops
                                                                                                                                                                                                            HdlOp: ADD
                                                                                                                                                                                                                list: ops
                                                                                                                                                                                                                    HdlOp: ADD
                                                                                                                                                                                                                        list: ops
                                                                                                                                                                                                                            HdlOp: INDEX
                                                                                                                                                                                                                                list: ops
                                                                                                                                                                                                                                    HdlValueId: header
                                                                                                                                                                                                                                    HdlOp: DOWNTO
                                                                                                                                                                                                                                        list: ops
                                                                                                                                                                                                                                            HdlValueInt: 23
                                                                                                                                                                                                                                            HdlValueInt: 16
                                                                                                                                                                                                                            HdlOp: INDEX
                                                                                                                                                                                                                                list: ops
                                                                                                                                                                                                                                    HdlValueId: header
                                                                                                                                                                                                                                    HdlOp: DOWNTO
                                                                                                                                                                                                                                        list: ops
                                                                                                                                                                                                                                            HdlValueInt: 15
                                                                                                                                                                                                                                            HdlValueInt: 8
                                                                                                                                                                                                                    HdlOp: INDEX
                                                                                                                                                                                                                        list: ops
                                                                                                                                                                                                                            HdlValueId: header
                                                                                                                                                                                                                            HdlOp: DOWNTO
                                                                                                                                                                                                                                list: ops
                                                                                                                                                                                                                                    HdlValueInt: 7
                                                                                                                                                                                                                                    HdlValueInt: 0
                                                                                                                                                                                                            HdlOp: INDEX
                                                                                                                                                                                                                list: ops
                                                                                                                                                                                                                    HdlValueId: packet_bytes
                                                                                                                                                                                                                    HdlValueInt: 24
                                                                                                                                                                                                    HdlOp: INDEX
                                                                                                                                                                                                        list: ops
                                                                                                                                                                                                            HdlValueId: packet_bytes
                                                                                                                                                                                                            HdlValueInt: 23
                                                                                                                                                                                            HdlOp: INDEX
                                                                                                                                                                                                list: ops
                                                                                                                                                                                                    HdlValueId: packet_bytes
                                                                                                                                                                                                    HdlValueInt: 22
                                                                                                                                                                                    HdlOp: INDEX
                                                                                                                                                                                        list: ops
                                                                                                                                                                                            HdlValueId: packet_bytes
                                                                                                                                                                                            HdlValueInt: 21
                                                                                                                                                                            HdlOp: INDEX
                                                                                                                                                                                list: ops
                                                                                                                                                                                    HdlValueId: packet_bytes
                                                                                                                                                                                    HdlValueInt: 20
                                                                                                                                                                    HdlOp: INDEX
                                                                                                                                                                        list: ops
                                                                                                                                                                            HdlValueId: packet_bytes
                                                                                                                                                                            HdlValueInt: 19
                                                                                                                                                            HdlOp: INDEX
                                                                                                                                                                list: ops
                                                                                                                                                                    HdlValueId: packet_bytes
                                                                                                                                                                    HdlValueInt: 18
                                                                                                                                                    HdlOp: INDEX
                                                                                                                                                        list: ops
                                                                                                                                                            HdlValueId: packet_bytes
                                                                                                                                                            HdlValueInt: 17
                                                                                                                                            HdlOp: INDEX
                                                                                                                                                list: ops
                                                                                                                                                    HdlValueId: packet_bytes
                                                                                                                                                    HdlValueInt: 16
                                                                                                                                    HdlOp: INDEX
                                                                                                                                        list: ops
                                                                                                                                            HdlValueId: packet_bytes
                                                                                                                                            HdlValueInt: 15
                                                                                                                            HdlOp: INDEX
                                                                                                                                list: ops
                                                                                                                                    HdlValueId: packet_bytes
                                                                                                                                    HdlValueInt: 14
                                                                                                                    HdlOp: INDEX
                                                                                                                        list: ops
                                                                                                                            HdlValueId: packet_bytes
                                                                                                                            HdlValueInt: 13
                                                                                                            HdlOp: INDEX
                                                                                                                list: ops
                                                                                                                    HdlValueId: packet_bytes
                                                                                                                    HdlValueInt: 12
                                                                                                    HdlOp: INDEX
                                                                                                        list: ops
                                                                                                            HdlValueId: packet_bytes
                                                                                                            HdlValueInt: 11
                                                                                            HdlOp: INDEX
                                                                                                list: ops
                                                                                                    HdlValueId: packet_bytes
                                                                                                    HdlValueInt: 10
                                                                                    HdlOp: INDEX
                                                                                        list: ops
                                                                                            HdlValueId: packet_bytes
                                                                                            HdlValueInt: 9
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: packet_bytes
                                                                                    HdlValueInt: 8
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: packet_bytes
                                                                            HdlValueInt: 7
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: packet_bytes
                                                                    HdlValueInt: 6
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: packet_bytes
                                                            HdlValueInt: 5
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: packet_bytes
                                                    HdlValueInt: 4
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: packet_bytes
                                            HdlValueInt: 3
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: packet_bytes
                                    HdlValueInt: 2
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: packet_bytes
                            HdlValueInt: 1


CommitId: 59d1289cee127e3f4f5e5166a956cf18aa79b2f7
Handle Vivado synthesis errors, fixes #8
--- a/src/hdmi.sv
+++ b/src/hdmi.sv
@@ -36,8 +36,8 @@ module hdmi
 
     // Some HDMI sinks will show the source product description below to users (i.e. in a list of inputs instead of HDMI 1, HDMI 2, etc.).
     // If you care about this, change it below.
-    parameter string VENDOR_NAME = "Unknown\0", // Must be 8 bytes null-padded 7-bit ASCII
-    parameter string PRODUCT_DESCRIPTION = "FPGA\0\0\0\0\0\0\0\0\0\0\0\0", // Must be 16 bytes null-padded 7-bit ASCII
+    parameter bit [8*8-1:0] VENDOR_NAME = {"Unknown", 8'd0}, // Must be 8 bytes null-padded 7-bit ASCII
+    parameter bit [8*16-1:0] PRODUCT_DESCRIPTION = {"FPGA", 96'd0}, // Must be 16 bytes null-padded 7-bit ASCII
     parameter bit [7:0] SOURCE_DEVICE_INFORMATION = 8'h00 // See README.md or CTA-861-G for the list of valid codes
 )
 (
ParseResult:
UPD HdlIdDef@@VENDOR_NAME to VENDOR_NAME
    INS HdlOp@@PARAMETRIZATION to VENDOR_NAME
    INS HdlOp@@CONCAT to VENDOR_NAME
    HdlOp: CONCAT
        list: ops
            str
            HdlValueInt: 0
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        INS list@@ops to PARAMETRIZATION
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlValueInt: 8
                        HdlValueInt: 1
                HdlValueInt: 0

UPD HdlIdDef@@PRODUCT_DESCRIPTION to PRODUCT_DESCRIPTION
    INS HdlOp@@PARAMETRIZATION to PRODUCT_DESCRIPTION
    INS HdlOp@@CONCAT to PRODUCT_DESCRIPTION
    HdlOp: CONCAT
        list: ops
            str
            HdlValueInt: 0
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        INS list@@ops to PARAMETRIZATION
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlValueInt: 16
                        HdlValueInt: 1
                HdlValueInt: 0

UPD HdlIdDef@@VENDOR_NAME to VENDOR_NAME
    UPD HdlValueId@@string to bit
    MOV HdlValueId@@string to VENDOR_NAME
    HdlValueId: string

UPD HdlIdDef@@PRODUCT_DESCRIPTION to PRODUCT_DESCRIPTION
    UPD HdlValueId@@string to bit
    MOV HdlValueId@@string to PRODUCT_DESCRIPTION
    HdlValueId: string


CommitId: 66af81bfcaf448fecdc5e65fc906713567f5a040
Implement SPD InfoFrame, put audio packets in their own files, fix sub missing a byte (PB[6:0] instead of PB[7:0])
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -102,10 +102,14 @@ audio_sample_packet #(.SAMPLING_FREQUENCY(SAMPLING_FREQUENCY), .WORD_LENGTH({{WO
 
 auxiliary_video_information_info_frame #(.VIDEO_ID_CODE(7'(VIDEO_ID_CODE))) auxiliary_video_information_info_frame(.header(headers[130]), .sub(subs[130]));
 
+source_product_description_info_frame source_product_description_info_frame(.header(headers[131]), .sub(subs[131]));
+
 audio_info_frame audio_info_frame(.header(headers[132]), .sub(subs[132]));
 
+
 logic audio_info_frame_sent = 1'b0;
 logic auxiliary_video_information_info_frame_sent = 1'b0;
+logic source_product_description_info_frame_sent = 1'b0;
 logic last_clk_slow_wrap = 1'b0;
 always @(posedge clk_pixel)
 begin

ParseResult:
INS HdlIdDef@@source_product_description_info_frame_sent to objs
HdlIdDef: source_product_description_info_frame_sent
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 66af81bfcaf448fecdc5e65fc906713567f5a040
Implement SPD InfoFrame, put audio packets in their own files, fix sub missing a byte (PB[6:0] instead of PB[7:0])
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -116,6 +120,7 @@ begin
     begin
         audio_info_frame_sent <= 1'b0;
         auxiliary_video_information_info_frame_sent <= 1'b0;
+        source_product_description_info_frame_sent <= 1'b0;
     end
 
     if (packet_enable)

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: source_product_description_info_frame_sent


CommitId: 66af81bfcaf448fecdc5e65fc906713567f5a040
Implement SPD InfoFrame, put audio packets in their own files, fix sub missing a byte (PB[6:0] instead of PB[7:0])
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -142,6 +147,11 @@ begin
             packet_type <= 8'h82;
             auxiliary_video_information_info_frame_sent <= 1'b1;
         end
+        else if (!source_product_description_info_frame_sent)
+        begin
+            packet_type <= 8'h83;
+            source_product_description_info_frame_sent <= 1'b1;
+        end
         else
             packet_type <= 8'd0;
     end
ParseResult:
UPD HdlStmIf@@ to 
    INS tuple@@ to elifs
    tuple
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: source_product_description_info_frame_sent
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueInt: 83
                    HdlValueId: packet_type
                HdlStmAssign
                    HdlValueInt: 1
                    HdlValueId: source_product_description_info_frame_sent


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -1,10 +1,11 @@
 module packet_assembler (
     input clk_pixel,
+    input [7:0] packet_type,
     input data_island_period,
     input [23:0] header, // See Table 5-8 Packet Types
     input [55:0] sub [3:0],
     output logic [8:0] packet_data, // See Figure 5-4 Data Island Packet and ECC Structure
-    output logic packet_enable
+    output logic [7:0] frame_counter = 0
 );
 
 // 32 pixel wrap-around counter. See Section 5.2.3.4 for further information.

ParseResult:
INS HdlIdDef@@packet_type to ports
HdlIdDef: packet_type
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: IN

UPD HdlIdDef@@packet_enable to frame_counter

UPD HdlIdDef@@frame_counter to frame_counter
    INS HdlOp@@INDEX to frame_counter
    INS HdlValueInt@@0 to frame_counter
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 7
                HdlValueInt: 0

UPD HdlIdDef@@packet_enable to packet_enable
    MOV HdlValueId@@logic to packet_enable
    HdlValueId: logic


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -61,12 +63,13 @@ begin
 
         if (counter < 5'd24)
             parity[4] <= parity_next[4];
-        else if (counter == 5'd31) // Reset ECC for next packet
-            parity <= '{8'd0, 8'd0, 8'd0, 8'd0, 8'd0};
+        else if (counter == 5'd31)
+        begin
+            parity <= '{8'd0, 8'd0, 8'd0, 8'd0, 8'd0}; // Reset ECC for next packet
+            if (packet_type == 8'h02) // Keep track of current IEC 60958 frame
+                frame_counter <= frame_counter == 191 ? 0 : frame_counter + 1;
+        end
     end
 end
 
-assign packet_enable = counter == 5'd0 && data_island_period;
-assign packet_data = {bch[3][counter_t2_p1], bch[2][counter_t2_p1], bch[1][counter_t2_p1], bch[0][counter_t2_p1], bch[3][counter_t2], bch[2][counter_t2], bch[1][counter_t2], bch[0][counter_t2], bch4[counter]};
-
 endmodule
ParseResult:
MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: CONCAT
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: bch
                                                                                    HdlValueInt: 3
                                                                            HdlValueId: counter_t2_p1
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: bch
                                                                                    HdlValueInt: 2
                                                                            HdlValueId: counter_t2_p1
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: bch
                                                                            HdlValueInt: 1
                                                                    HdlValueId: counter_t2_p1
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: bch
                                                                    HdlValueInt: 0
                                                            HdlValueId: counter_t2_p1
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: bch
                                                            HdlValueInt: 3
                                                    HdlValueId: counter_t2
                                    HdlOp: INDEX
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: bch
                                                    HdlValueInt: 2
                                            HdlValueId: counter_t2
                            HdlOp: INDEX
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: bch
                                            HdlValueInt: 1
                                    HdlValueId: counter_t2
                    HdlOp: INDEX
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: bch
                                    HdlValueInt: 0
                            HdlValueId: counter_t2
            HdlOp: INDEX
                list: ops
                    HdlValueId: bch4
                    HdlValueId: counter
    HdlValueId: packet_data

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmAssign@@ to 
HdlStmAssign
    list: src
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0
        HdlValueInt: 0
    HdlValueId: parity

INS HdlStmIf@@ to body

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlValueId: counter
                HdlValueInt: 0
        UPD HdlOp@@EQ to EQ
            UPD HdlValueId@@counter to packet_type
            UPD HdlValueInt@@0 to 02
        DEL HdlValueId@@data_island_period from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL HdlValueId@@packet_enable from 

INS HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlOp: TERNARY
        list: ops
            HdlOp: EQ
                list: ops
                    HdlValueId: frame_counter
                    HdlValueInt: 191
            HdlValueInt: 0
            HdlOp: ADD
                list: ops
                    HdlValueId: frame_counter
                    HdlValueInt: 1
    HdlValueId: frame_counter

UPD HdlStmIf@@ to 
    INS list@@elifs to 

DEL HdlStmAssign@@ from objs


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -31,14 +31,16 @@ const bit [BUFFER_WIDTH-1:0] BUFFER_END = 2 ** BUFFER_WIDTH == BUFFER_SIZE ? ~(B
 logic [BUFFER_WIDTH-1:0] insert_position = 0;
 logic [BUFFER_WIDTH-1:0] remove_position = 0;
 
-assign remaining = (insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position + 1)); // - (clk_audio && insert_position != remove_position ? 1'd1 : 1'd0);
+assign remaining = (insert_position >= remove_position ? (insert_position - remove_position) : (BUFFER_END - remove_position + insert_position + 1'd1)); // - (clk_audio && insert_position != remove_position ? 1'd1 : 1'd0);
 
 logic [19:0] audio_buffer [BUFFER_SIZE-1:0] [CHANNELS-1:0];
 
 genvar i;
 generate
     for (i = 0; i < 4; i++)
+    begin: audio_out_loop
         assign audio_out[i] = audio_buffer[(remove_position + i) % ((BUFFER_WIDTH+1)'(BUFFER_END)+1)];
+    end
 endgenerate
 
 always @(posedge clk_audio)

ParseResult:
UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@body to 

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_buffer
            HdlOp: MOD
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: remove_position
                            HdlValueId: i
                    HdlOp: ADD
                        list: ops
                            HdlOp: CALL
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlValueId: BUFFER_WIDTH
                                            HdlValueInt: 1
                                    HdlValueId: BUFFER_END
                            HdlValueInt: 1
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_out
            HdlValueId: i


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/sound/buffer.sv
+++ b/modules/sound/buffer.sv
@@ -55,7 +57,7 @@ begin
     begin
         if (remaining > 1'd0) // Remove.
         begin
-            remove_position <= ((BUFFER_WIDTH+1)'(remove_position) + (remaining > 4 ? 3'd4 : 3'(remaining))) % ((BUFFER_WIDTH+1)'(BUFFER_END) + 1);
+            remove_position <= ((BUFFER_WIDTH+1)'(remove_position) + (remaining > BUFFER_WIDTH'(4) ? 3'd4 : 3'(remaining))) % ((BUFFER_WIDTH+1)'(BUFFER_END) + 1'd1);
             // $display("Removing from %d (%d): %p", remove_position, remaining > 4 ? 3'd4 : 3'(remaining), audio_out);
         end else
         begin
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@MOD to MOD
        UPD HdlOp@@ADD to ADD
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlOp@@GT to GT
                    INS HdlOp@@CALL to ops
                    UPD HdlOp@@CALL to CALL
                        INS list@@ops to CALL
                        INS HdlValueId@@BUFFER_WIDTH to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@MOD to MOD
        UPD HdlOp@@ADD to ADD
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlOp@@GT to GT
                    MOV HdlValueInt@@4 to ops
                    HdlValueInt: 4


CommitId: 715d2cae7c35209dac7812cf3e9a314b10133efc
Correct some default values for AVI InfoFrame
--- a/modules/hdmi/video.sv
+++ b/modules/hdmi/video.sv
@@ -6,15 +6,15 @@ module auxiliary_video_information_info_frame
     parameter VIDEO_FORMAT = 2'b00, // 00 = RGB, 01 = YCbCr 4:2:2, 10 = YCbCr 4:4:4
     parameter ACTIVE_FORMAT_INFO_PRESENT = 1'b0, // Not valid
     parameter BAR_INFO = 2'b00, // Not valid
-    parameter SCAN_INFO = 2'b10, // Composed for an underscanned display
+    parameter SCAN_INFO = 2'b00, // No data
     parameter COLORIMETRY = 2'b00, // No data
-    parameter PICTURE_ASPECT_RATIO = 2'b00, // See CEA-CEB16 [22] for more information about Active Format Description processing.
-    parameter ACTIVE_FORMAT_ASPECT_RATIO = 4'b1000,
+    parameter PICTURE_ASPECT_RATIO = 2'b00, // No data, See CEA-CEB16 for more information about Active Format Description processing.
+    parameter ACTIVE_FORMAT_ASPECT_RATIO = 4'b1000, // Not valid unless ACTIVE_FORMAT_INFO_PRESENT = 1'b1, then Same as picture aspect ratio
     parameter IT_CONTENT = 1'b0, //  The IT content bit indicates when picture content is composed according to common IT practice (i.e. without regard to Nyquist criterion) and is unsuitable for analog reconstruction or filtering. When the IT content bit is set to 1, downstream processors should pass pixel data unfiltered and without analog reconstruction.
     parameter EXTENDED_COLORIMETRY = 3'b000, // Not valid unless COLORIMETRY = 2'b11. The extended colorimetry bits, EC2, EC1, and EC0, describe optional colorimetry encoding that may be applicable to some implementations and are always present, whether their information is valid or not (see CEA 861-D Section 7.5.5).
     parameter RGB_QUANTIZATION_RANGE = 2'b00, // Default. Displays conforming to CEA-861-D accept both a limited quantization range of 220 levels (16 to 235) anda full range of 256 levels (0 to 255) when receiving video with RGB color space (see CEA 861-D Sections 5.1, Section 5.2, Section 5.3 and Section 5.4). By default, RGB pixel data values should be assumed to have the limited range when receiving a CE video format, and the full range when receiving an IT format. The quantization bits allow the source to override this default and to explicitly indicate the current RGB quantization range.
     parameter NON_UNIFORM_PICTURE_SCALING = 2'b00, // None. The Nonuniform Picture Scaling bits shall be set if the source device scales the picture or has determined that scaling has been performed in a specific direction.
-    parameter VIDEO_ID_CODE = 7'd1, // Same as the one from the HDMI module
+    parameter VIDEO_ID_CODE, // Same as the one from the HDMI module
     parameter YCC_QUANTIZATION_RANGE = 2'b00, // 00 = Limited, 01 = Full
     parameter CONTENT_TYPE = 2'b00, // No data, becomes Graphics if IT_CONTENT = 1'b1.
     parameter PIXEL_REPETITION = 4'b0000 // None
ParseResult:
UPD HdlIdDef@@SCAN_INFO to SCAN_INFO
    UPD HdlValueInt@@10 to 00

UPD HdlIdDef@@VIDEO_ID_CODE to VIDEO_ID_CODE
    DEL HdlValueInt@@1 from VIDEO_ID_CODE


CommitId: 8cc81848c9086494ce9a6e6443c8ae55c4eb7805
Update testbench and fix modelsim compatibility issues
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -168,7 +168,7 @@ module audio_sample_packet
     input logic [1:0] valid_bit,
     // See IEC 60958-3 Section 6. 0 indicates that no user data is being sent
     input logic [1:0] user_data_bit,
-    input logic [19:0] audio_sample_word [1:0],
+    input logic [23:0] audio_sample_word [1:0],
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );
ParseResult:
UPD HdlIdDef@@audio_sample_word to audio_sample_word
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlValueInt@@19 to 23


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -150,7 +150,7 @@ assign num_packets = max_num_packets > 18 ? 5'd18 : 5'(max_num_packets);
 integer max_num_packets_alongside;
 logic [4:0] num_packets_alongside;
 assign max_num_packets_alongside = (screen_start_x - 2 - 12 - 2 /* DI period */ - 2 - 8) / 32;
-assign num_packets_alongside = 0; // max_num_packets_alongside > 18 ? 5'd18 : 5'(max_num_packets_alongside);
+assign num_packets_alongside = max_num_packets_alongside > 18 ? 5'd18 : 5'(max_num_packets_alongside);
 
 logic data_island_guard = 0;
 logic data_island_preamble = 0;

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GT
                list: ops
                    HdlValueId: max_num_packets_alongside
                    HdlValueInt: 18
            HdlValueInt: 18
            HdlOp: CALL
                list: ops
                    HdlValueInt: 5
                    HdlValueId: max_num_packets_alongside
    HdlValueId: num_packets_alongside

INS HdlIdDef@@data_island_guard to objs
HdlIdDef: data_island_guard
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@data_island_preamble to objs
HdlIdDef: data_island_preamble
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@num_packets_alongside to num_packets_alongside
    UPD HdlOp@@INDEX to PARAMETRIZATION

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: num_packets_alongside

DEL HdlIdDef@@data_island_guard from objs
HdlIdDef: data_island_guard
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@data_island_preamble from objs
HdlIdDef: data_island_preamble
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -198,18 +198,15 @@ logic [23:0] audio_sample_word_padded [3:0] [1:0];
 genvar i;
 generate
     for (i = 0; i < 4; i++)
-    begin: audio_sample_pad
         assign audio_sample_word_padded[i] = '{{(24-AUDIO_BIT_WIDTH)'(0), audio_sample_word[i][1]}, {(24-AUDIO_BIT_WIDTH)'(0), audio_sample_word[i][0]}};
-    end
 endgenerate
 localparam AUDIO_BIT_WIDTH_COMPARATOR = AUDIO_BIT_WIDTH < 20 ? 20 : AUDIO_BIT_WIDTH == 20 ? 25 : AUDIO_BIT_WIDTH < 24 ? 24 : AUDIO_BIT_WIDTH == 24 ? 29 : -1;
 localparam WORD_LENGTH = 3'(AUDIO_BIT_WIDTH_COMPARATOR - AUDIO_BIT_WIDTH);
 localparam WORD_LENGTH_LIMIT = AUDIO_BIT_WIDTH <= 20 ? 1'b0 : 1'b1;
 logic [7:0] frame_counter = 8'd0;
-logic [4:0] pixel_counter;
 always @(posedge clk_pixel)
 begin
-    if (packet_type == 8'h02 && pixel_counter == 5'd31) // Keep track of current IEC 60958 frame
+    if (packet_type == 8'h02 && packet_assembler.counter == 5'd31) // Keep track of current IEC 60958 frame
         frame_counter <= (frame_counter + audio_sample_word_present[3] + audio_sample_word_present[2] + audio_sample_word_present[1] + audio_sample_word_present[0]) % 8'd192;
 end
 audio_sample_packet #(.SAMPLING_FREQUENCY(SAMPLING_FREQUENCY), .WORD_LENGTH({{WORD_LENGTH[0], WORD_LENGTH[1], WORD_LENGTH[2]}, WORD_LENGTH_LIMIT})) audio_sample_packet (.frame_counter(frame_counter), .valid_bit('{2'd0, 2'd0, 2'd0, 2'd0}), .user_data_bit('{2'd0, 2'd0, 2'd0, 2'd0}), .audio_sample_word(audio_sample_word_padded), .audio_sample_word_present(audio_sample_word_present), .header(headers[2]), .sub(subs[2]));

ParseResult:
UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to body
HdlStmAssign
    list: src
        HdlOp: CONCAT
            list: ops
                HdlOp: CALL
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueInt: 24
                                HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: audio_sample_word
                                HdlValueId: i
                        HdlValueInt: 1
        HdlOp: CONCAT
            list: ops
                HdlOp: CALL
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueInt: 24
                                HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: audio_sample_word
                                HdlValueId: i
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word_padded
            HdlValueId: i

UPD HdlIdDef@@frame_counter to frame_counter
    UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            INS HdlOp@@DOT to ops
            UPD HdlOp@@DOT to DOT
                INS list@@ops to DOT
                INS HdlValueId@@packet_assembler to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            UPD HdlValueId@@pixel_counter to counter
            MOV HdlValueId@@pixel_counter to ops
            HdlValueId: pixel_counter

UPD HdlStmFor@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlIdDef@@pixel_counter from objs
HdlIdDef: pixel_counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -221,7 +218,7 @@ audio_info_frame audio_info_frame(.header(headers[132]), .sub(subs[132]));
 logic [8:0] packet_data;
 logic [23:0] header;
 logic [55:0] sub [3:0];
-packet_assembler packet_assembler (.clk_pixel(clk_pixel), .data_island_period(data_island_period), .header(header), .sub(sub), .packet_data(packet_data), .counter(pixel_counter));
+packet_assembler packet_assembler (.clk_pixel(clk_pixel), .data_island_period(data_island_period), .header(header), .sub(sub), .packet_data(packet_data));
 packet_picker packet_picker (.packet_type(packet_type), .headers(headers), .subs(subs), .header(header), .sub(sub));
 
 logic [2:0] mode = 3'd1;

ParseResult:
UPD HdlIdDef@@packet_data to packet_data
    UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlIdDef@@header to header
    UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlIdDef@@mode to mode
    UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlIdDef@@sub to sub
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to PARAMETRIZATION


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -252,7 +249,6 @@ endgenerate
 // See Section 5.4.1
 logic [3:0] tmds_counter = 4'd0;
 
-integer j;
 always @(posedge clk_tmds)
 begin
     if (tmds_counter == 4'd9)

ParseResult:
UPD HdlIdDef@@tmds_counter to tmds_counter
    UPD HdlOp@@INDEX to PARAMETRIZATION

DEL HdlIdDef@@j from objs
HdlIdDef: j
    HdlValueId: integer
    HdlDirection: INTERNAL


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -263,7 +259,7 @@ begin
     else
     begin
         tmds_counter <= tmds_counter + 4'd1;
-        for (j = 0; j < NUM_CHANNELS; j = j + 1)
+        foreach(tmds_shift[j])
             tmds_shift[j] <= {1'bX, tmds_shift[j][9:1]};
     end
 end
ParseResult:
INS HdlStmForIn@@ to body

UPD HdlStmFor@@ to 
    UPD HdlOp@@LT to LT
        UPD list@@ops to var_defs
        MOV list@@ops to LT
        list: ops
            HdlValueId: j
            HdlValueId: NUM_CHANNELS
        DEL HdlValueId@@NUM_CHANNELS from ops
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@j to tmds_shift
            MOV HdlValueId@@j to ops
            HdlValueId: j
            DEL HdlOp@@ADD from ops
            HdlOp: ADD
                list: ops
                    HdlValueId: j
                    HdlValueInt: 1
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: j
    DEL HdlOp@@LT from 
    DEL HdlStmBlock@@SEQ from 

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: CONCAT
        list: ops
            HdlValueInt: x
            HdlOp: INDEX
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: tmds_shift
                            HdlValueId: j
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 9
                            HdlValueInt: 1
    HdlOp: INDEX
        list: ops
            HdlValueId: tmds_shift
            HdlValueId: j

DEL HdlStmFor@@ from body


CommitId: 41d01e7c44e9ed8a86fdecc4100ff238d051b4c8
Fix timing for first clock tmds output
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -234,7 +234,7 @@ generate
     end
 endgenerate
 // See Section 5.4.1
-logic [3:0] tmds_counter = 4'd0;
+logic [3:0] tmds_counter = 4'd1;
 
 integer j;
 always @(posedge clk_tmds)
ParseResult:
UPD HdlIdDef@@tmds_counter to tmds_counter
    UPD HdlValueInt@@0 to 1


CommitId: b7e8416d3874bf2fd73d2dd64c02fcfd4163a9a6
Fix incorrect control code for 2'b11
--- a/modules/hdmi/verilog/tmds_channel.v
+++ b/modules/hdmi/verilog/tmds_channel.v
@@ -55,7 +55,7 @@ wire [9:0] control_coding =
     control_data == 2'b00 ? 10'b1101010100
     : control_data == 2'b01 ? 10'b0010101011 
     : control_data == 2'b10 ? 10'b0101010100
-    : 10'b0101010100;
+    : 10'b1010101011;
 
 // See Section 5.4.3
 wire [9:0] terc4_coding =
ParseResult:
UPD HdlIdDef@@control_coding to control_coding
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlValueInt@@0101010100 to 1010101011


CommitId: fdd61189ec73931ab266bc95685685131d7408fe
Fix end of SPD product desc so it can actually be up to 16 chars
--- a/src/source_product_description_info_frame.sv
+++ b/src/source_product_description_info_frame.sv
@@ -37,7 +37,7 @@ generate
     begin: vendor_to_bytes
         assign vendor_name[i] = VENDOR_NAME[(7-i+1)*8-1:(7-i)*8];
     end
-    for (i = 0; i < 8; i++)
+    for (i = 0; i < 16; i++)
     begin: product_to_bytes
         assign product_description[i] = PRODUCT_DESCRIPTION[(15-i+1)*8-1:(15-i)*8];
     end
ParseResult:
UPD HdlStmFor@@ to 
    UPD HdlOp@@LT to LT
        UPD HdlValueInt@@8 to 16


CommitId: aee2099e8903009cefc25e0e3534ead385790196
Fix clk enable assignment
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -3,15 +3,18 @@ module max10_top (
     input wire CLK_32KHZ,
     input wire RST,
 
-    output wire CLK_50MHZ_ENABLE = 1'b1,
-    output wire CLK_32KHZ_ENABLE = 1'b1,
-    output wire [7:0] LED = 8'd0,
+    output wire CLK_50MHZ_ENABLE,
+    output wire CLK_32KHZ_ENABLE,
+    output wire [7:0] LED,
 
     output wire [2:0] tmds_p,
     output wire tmds_clock_p,
     output wire [2:0] tmds_n,
     output wire tmds_clock_n
 );
+assign CLK_50MHZ_ENABLE = 1'b1;
+assign CLK_32KHZ_ENABLE = 1'b1;
+assign LED = 8'd0;
 
 wire clk_tmds;
 wire clk_pixel;
ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueInt: 1
    HdlValueId: CLK_50MHZ_ENABLE

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueInt: 1
    HdlValueId: CLK_32KHZ_ENABLE

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: LED

UPD HdlIdDef@@CLK_50MHZ_ENABLE to CLK_50MHZ_ENABLE
    DEL HdlValueInt@@1 from CLK_50MHZ_ENABLE

UPD HdlIdDef@@CLK_32KHZ_ENABLE to CLK_32KHZ_ENABLE
    DEL HdlValueInt@@1 from CLK_32KHZ_ENABLE

UPD HdlIdDef@@LED to LED
    DEL HdlValueInt@@0 from LED


CommitId: 9b3186308f5f07ddb195205847cebfc99c7ccd08
Create top testbench, fix some bit size errors, fix a variable rename mistake, speed up clocks in hdmi/assembler TBs
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -10,7 +10,7 @@ module packet_assembler (
 // 32 pixel wrap-around counter. See Section 5.2.3.4 for further information.
 logic [4:0] counter = 5'd0;
 always @(posedge clk_pixel)
-    if (enable)
+    if (data_island_period)
         counter <= counter + 5'd1;
 
 // BCH packets 0 to 3 are transferred two bits at a time, see Section 5.2.3.4 for further information.
ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@enable to data_island_period


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -6,11 +6,11 @@ module packet_assembler (
     input data_island_period,
     input [23:0] header, // See Table 5-8 Packet Types
     input [55:0] sub [3:0],
-    output logic [8:0] packet_data // See Figure 5-4 Data Island Packet and ECC Structure
+    output logic [8:0] packet_data, // See Figure 5-4 Data Island Packet and ECC Structure
+    output logic [4:0] counter = 5'd0
 );
 
 // 32 pixel wrap-around counter. See Section 5.2.3.4 for further information.
-logic [4:0] counter = 5'd0;
 always @(posedge clk_pixel)
     if (data_island_period)
         counter <= counter + 5'd1;
ParseResult:
MOV HdlIdDef@@counter to objs
HdlIdDef: counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@counter to counter
    UPD HdlDirection@@INTERNAL to OUT


CommitId: 48baa97c09a6d9c07db16dc2b3e4eeea82146f7c
Correct data_island typing error, fixes #3
--- a/modules/hdmi/verilog/hdmi.v
+++ b/modules/hdmi/verilog/hdmi.v
@@ -160,7 +160,7 @@ begin
     // See Section 5.2.3.4, Section 5.3.1, Section 5.3.2
     data_island_data[11:4] <= data[8:1];
     data_island_data[3] <= cx != screen_start_x;
-    data_island[2] <= data[0];
+    data_island_data[2] <= data[0];
     data_island_data[1:0] <= {vsync, hsync};
     control_data <= {{1'b0, data_island_preamble}, {1'b0, video_preamble || data_island_preamble}, {vsync, hsync}}; // ctrl3, ctrl2, ctrl1, ctrl0, vsync, hsync
 end
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@data_island to data_island_data


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -150,7 +150,7 @@ assign num_packets = max_num_packets > 18 ? 5'd18 : 5'(max_num_packets);
 integer max_num_packets_alongside;
 logic [4:0] num_packets_alongside;
 assign max_num_packets_alongside = (screen_start_x - 2 - 12 - 2 /* DI period */ - 2 - 8) / 32;
-assign num_packets_alongside = max_num_packets_alongside > 18 ? 5'd18 : 5'(max_num_packets_alongside);
+assign num_packets_alongside = 0; // max_num_packets_alongside > 18 ? 5'd18 : 5'(max_num_packets_alongside);
 
 logic data_island_guard = 0;
 logic data_island_preamble = 0;

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: num_packets_alongside

INS HdlIdDef@@data_island_guard to objs
HdlIdDef: data_island_guard
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@data_island_preamble to objs
HdlIdDef: data_island_preamble
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@num_packets_alongside to num_packets_alongside
    UPD HdlOp@@PARAMETRIZATION to INDEX

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GT
                list: ops
                    HdlValueId: max_num_packets_alongside
                    HdlValueInt: 18
            HdlValueInt: 18
            HdlOp: CALL
                list: ops
                    HdlValueInt: 5
                    HdlValueId: max_num_packets_alongside
    HdlValueId: num_packets_alongside

DEL HdlIdDef@@data_island_guard from objs
HdlIdDef: data_island_guard
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@data_island_preamble from objs
HdlIdDef: data_island_preamble
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -198,15 +198,18 @@ logic [23:0] audio_sample_word_padded [3:0] [1:0];
 genvar i;
 generate
     for (i = 0; i < 4; i++)
+    begin: audio_sample_pad
         assign audio_sample_word_padded[i] = '{{(24-AUDIO_BIT_WIDTH)'(0), audio_sample_word[i][1]}, {(24-AUDIO_BIT_WIDTH)'(0), audio_sample_word[i][0]}};
+    end
 endgenerate
 localparam AUDIO_BIT_WIDTH_COMPARATOR = AUDIO_BIT_WIDTH < 20 ? 20 : AUDIO_BIT_WIDTH == 20 ? 25 : AUDIO_BIT_WIDTH < 24 ? 24 : AUDIO_BIT_WIDTH == 24 ? 29 : -1;
 localparam WORD_LENGTH = 3'(AUDIO_BIT_WIDTH_COMPARATOR - AUDIO_BIT_WIDTH);
 localparam WORD_LENGTH_LIMIT = AUDIO_BIT_WIDTH <= 20 ? 1'b0 : 1'b1;
 logic [7:0] frame_counter = 8'd0;
+logic [4:0] pixel_counter;
 always @(posedge clk_pixel)
 begin
-    if (packet_type == 8'h02 && packet_assembler.counter == 5'd31) // Keep track of current IEC 60958 frame
+    if (packet_type == 8'h02 && pixel_counter == 5'd31) // Keep track of current IEC 60958 frame
         frame_counter <= (frame_counter + audio_sample_word_present[3] + audio_sample_word_present[2] + audio_sample_word_present[1] + audio_sample_word_present[0]) % 8'd192;
 end
 audio_sample_packet #(.SAMPLING_FREQUENCY(SAMPLING_FREQUENCY), .WORD_LENGTH({{WORD_LENGTH[0], WORD_LENGTH[1], WORD_LENGTH[2]}, WORD_LENGTH_LIMIT})) audio_sample_packet (.frame_counter(frame_counter), .valid_bit('{2'd0, 2'd0, 2'd0, 2'd0}), .user_data_bit('{2'd0, 2'd0, 2'd0, 2'd0}), .audio_sample_word(audio_sample_word_padded), .audio_sample_word_present(audio_sample_word_present), .header(headers[2]), .sub(subs[2]));

ParseResult:
INS HdlIdDef@@pixel_counter to objs
HdlIdDef: pixel_counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlIdDef@@frame_counter to frame_counter
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlStmAssign@@body to 

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    list: src
        HdlOp: CONCAT
            list: ops
                HdlOp: CALL
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueInt: 24
                                HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: audio_sample_word
                                HdlValueId: i
                        HdlValueInt: 1
        HdlOp: CONCAT
            list: ops
                HdlOp: CALL
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueInt: 24
                                HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: audio_sample_word
                                HdlValueId: i
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word_padded
            HdlValueId: i

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@DOT to DOT
                UPD HdlValueId@@counter to pixel_counter
                MOV HdlValueId@@counter to ops
                HdlValueId: counter
                DEL HdlValueId@@packet_assembler from ops
                DEL list@@ops from DOT
            DEL HdlOp@@DOT from ops


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -218,7 +221,7 @@ audio_info_frame audio_info_frame(.header(headers[132]), .sub(subs[132]));
 logic [8:0] packet_data;
 logic [23:0] header;
 logic [55:0] sub [3:0];
-packet_assembler packet_assembler (.clk_pixel(clk_pixel), .data_island_period(data_island_period), .header(header), .sub(sub), .packet_data(packet_data));
+packet_assembler packet_assembler (.clk_pixel(clk_pixel), .data_island_period(data_island_period), .header(header), .sub(sub), .packet_data(packet_data), .counter(pixel_counter));
 packet_picker packet_picker (.packet_type(packet_type), .headers(headers), .subs(subs), .header(header), .sub(sub));
 
 logic [2:0] mode = 3'd1;

ParseResult:
UPD HdlIdDef@@packet_data to packet_data
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlIdDef@@header to header
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlIdDef@@mode to mode
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlIdDef@@sub to sub
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PARAMETRIZATION to INDEX


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -249,6 +252,7 @@ endgenerate
 // See Section 5.4.1
 logic [3:0] tmds_counter = 4'd0;
 
+integer j;
 always @(posedge clk_tmds)
 begin
     if (tmds_counter == 4'd9)

ParseResult:
INS HdlIdDef@@j to objs
HdlIdDef: j
    HdlValueId: integer
    HdlDirection: INTERNAL

UPD HdlIdDef@@tmds_counter to tmds_counter
    UPD HdlOp@@PARAMETRIZATION to INDEX


CommitId: 68968dc6784ff3d73bf436e5b18c895bfaac39ca
Fix synthesis errors
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -259,7 +263,7 @@ begin
     else
     begin
         tmds_counter <= tmds_counter + 4'd1;
-        foreach(tmds_shift[j])
+        for (j = 0; j < NUM_CHANNELS; j = j + 1)
             tmds_shift[j] <= {1'bX, tmds_shift[j][9:1]};
     end
 end
ParseResult:
INS HdlStmFor@@ to body

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: CONCAT
        list: ops
            HdlValueInt: x
            HdlOp: INDEX
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: tmds_shift
                            HdlValueId: j
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 9
                            HdlValueInt: 1
    HdlOp: INDEX
        list: ops
            HdlValueId: tmds_shift
            HdlValueId: j

UPD HdlStmForIn@@ to 
    UPD list@@var_defs to ops
    MOV list@@var_defs to 
    list: var_defs
        HdlValueId: j
    UPD HdlValueId@@tmds_shift to j
    MOV HdlValueId@@tmds_shift to 
    HdlValueId: tmds_shift

DEL HdlStmForIn@@ from body


CommitId: 9b3186308f5f07ddb195205847cebfc99c7ccd08
Create top testbench, fix some bit size errors, fix a variable rename mistake, speed up clocks in hdmi/assembler TBs
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -24,13 +24,18 @@ wire [AUDIO_BIT_WIDTH-1:0] audio_in;
 wire [AUDIO_BIT_WIDTH-1:0] audio_out;
 sawtooth #(.BIT_WIDTH(AUDIO_BIT_WIDTH)) sawtooth (.clk_audio(CLK_32KHZ), .level(audio_in));
 
-logic [7:0] remaining;
+logic [6:0] remaining;
+wire packet_enable;
+logic [7:0] packet_type;
 buffer #(.CHANNELS(1), .BIT_WIDTH(AUDIO_BIT_WIDTH)) buffer (.clk_audio(CLK_32KHZ), .clk_pixel(clk_pixel), .packet_enable(packet_enable && packet_type == 8'd2), .audio_in('{audio_in}), .audio_out('{audio_out}), .remaining(remaining));
 
-logic [7:0] packet_type;
 logic audio_clock_regeneration_sent = 1'b0;
 logic audio_info_frame_sent = 1'b0;
 
+logic [23:0] rgb;
+wire [9:0] cx, cy;
+hdmi #(.VIDEO_ID_CODE(3), .AUDIO_BIT_WIDTH(AUDIO_BIT_WIDTH)) hdmi(.clk_tmds(clk_tmds), .clk_pixel(clk_pixel), .rgb(rgb), .audio_sample_word('{audio_out, audio_out}), .packet_type(packet_type), .tmds_p(tmds_p), .tmds_clock_p(tmds_clock_p), .tmds_n(tmds_n), .tmds_clock_n(tmds_clock_n), .cx(cx), .cy(cy), .packet_enable(packet_enable));
+
 always @(posedge clk_pixel)
 begin
     if (cx == 0 && cy == 0) // RESET

ParseResult:
MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlValueId: cx
                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlValueId: cy
                                HdlValueInt: 0
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: audio_clock_regeneration_sent
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: audio_info_frame_sent
                list: elifs
            HdlStmIf
                HdlValueId: packet_enable
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: audio_clock_regeneration_sent
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: packet_type
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: audio_clock_regeneration_sent
                            list: elifs
                                tuple
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: audio_info_frame_sent
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlValueInt: 84
                                                HdlValueId: packet_type
                                            HdlStmAssign
                                                HdlValueInt: 1
                                                HdlValueId: audio_info_frame_sent
                                tuple
                                    HdlOp: GT
                                        list: ops
                                            HdlValueId: remaining
                                            HdlValueInt: 0
                                    HdlStmAssign
                                        HdlValueInt: 2
                                        HdlValueId: packet_type
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: packet_type
                list: elifs

UPD HdlIdDef@@remaining to remaining
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@7 to 6


CommitId: 9b3186308f5f07ddb195205847cebfc99c7ccd08
Create top testbench, fix some bit size errors, fix a variable rename mistake, speed up clocks in hdmi/assembler TBs
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -57,10 +62,6 @@ begin
     end
 end
 
-logic [23:0] rgb;
-wire [9:0] cx, cy;
-wire packet_enable;
-hdmi #(.VIDEO_ID_CODE(3), .AUDIO_BIT_WIDTH(AUDIO_BIT_WIDTH)) hdmi(.clk_tmds(clk_tmds), .clk_pixel(clk_pixel), .rgb(rgb), .audio_sample_word('{audio_out, audio_out}), .packet_type(packet_type), .tmds_p(tmds_p), .tmds_clock_p(tmds_clock_p), .tmds_n(tmds_n), .tmds_clock_n(tmds_clock_n), .cx(cx), .cy(cy), .packet_enable(packet_enable));
 
 // always @(posedge clk_pixel)
     // rgb <= {cx == 138 ? ~8'd0 : 8'd0, cy == 45 ? ~8'd0 : 8'd0, cx == 857 || cy == 524 ? ~8'd0 : 8'd0};
ParseResult:
MOV HdlIdDef@@packet_enable to objs
HdlIdDef: packet_enable
    HdlDirection: INTERNAL

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlValueId: cx
                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlValueId: cy
                                HdlValueInt: 0
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: audio_clock_regeneration_sent
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: audio_info_frame_sent
                list: elifs
            HdlStmIf
                HdlValueId: packet_enable
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: audio_clock_regeneration_sent
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: packet_type
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: audio_clock_regeneration_sent
                            list: elifs
                                tuple
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: audio_info_frame_sent
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlValueInt: 84
                                                HdlValueId: packet_type
                                            HdlStmAssign
                                                HdlValueInt: 1
                                                HdlValueId: audio_info_frame_sent
                                tuple
                                    HdlOp: GT
                                        list: ops
                                            HdlValueId: remaining
                                            HdlValueInt: 0
                                    HdlStmAssign
                                        HdlValueInt: 2
                                        HdlValueId: packet_type
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: packet_type
                list: elifs


CommitId: 0141c1a94529439d672e15a8eff2cd935167b741
Fix incorrect IEC 60958 bit order
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -13,8 +13,8 @@ module hdmi
     parameter VIDEO_RATE = 0,
 
     // As noted in Section 7.3, the minimal audio requirements are met: 16-bit to 24-bit L-PCM audio at 32 kHz, 44.1 kHz, or 48 kHz.
-    // 0000 = 44.1 kHz, 0100 = 48 kHz, 1100 = 32 kHz (same as those in IEC 60958-3)
-    parameter AUDIO_RATE = 4'b1100,
+    // 0000 = 44.1 kHz, 0010 = 48 kHz, 0011 = 32 kHz (same as those in IEC 60958-3)
+    parameter AUDIO_RATE = 4'b0011,
 
     // Defaults to minimum bit lengths required to represent positions.
     // Modify these parameters if you have alternate desired bit lengths.

ParseResult:
UPD HdlIdDef@@AUDIO_RATE to AUDIO_RATE
    UPD HdlValueInt@@1100 to 0011


CommitId: 05c1034f0a9b6e225dd40623ee4bff0eb1a25aaf
top_tb: keep grey box approach & read tmds values directly, fixes #9
--- a/top/top.sv
+++ b/top/top.sv
@@ -1,17 +1,14 @@
-module top (
-    input logic clk_original,
-
-    output logic [2:0] tmds_p,
-    output logic tmds_clock_p,
-    output logic [2:0] tmds_n,
-    output logic tmds_clock_n
-);
+module top ();
+logic [2:0] tmds_p;
+logic tmds_clock_p;
+logic [2:0] tmds_n;
+logic tmds_clock_n;
 
 logic clk_pixel;
 logic clk_pixel_x10;
 logic clk_audio;
 
-pll pll(.inclk0(clk_original), .c0(clk_pixel_x10), .c1(clk_pixel), .c2(clk_audio));
+pll pll(.c0(clk_pixel_x10), .c1(clk_pixel), .c2(clk_audio));
 
 logic signed [15:0] audio_sample_word = 16'sd0; // Since the L-PCM audio is 2-channel by default, this is mono audio.
 always @(posedge clk_audio) // Sawtooth wave generator
ParseResult:
UPD HdlIdDef@@clk_original to clk_original
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD list@@ops to objs
        MOV list@@ops to PARAMETRIZATION
        list: ops
            HdlValueId: logic
        DEL HdlValueId@@logic from ops
    DEL HdlOp@@PARAMETRIZATION from clk_original
    DEL HdlDirection@@IN from clk_original

MOV HdlIdDef@@tmds_p to ports
HdlIdDef: tmds_p
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlDirection: OUT

MOV HdlIdDef@@tmds_clock_p to ports
HdlIdDef: tmds_clock_p
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlDirection: OUT

MOV HdlIdDef@@tmds_n to ports
HdlIdDef: tmds_n
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlDirection: OUT

MOV HdlIdDef@@tmds_clock_n to ports
HdlIdDef: tmds_clock_n
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlDirection: OUT

UPD HdlIdDef@@tmds_p to tmds_p
    UPD HdlDirection@@OUT to INTERNAL

UPD HdlIdDef@@tmds_clock_p to tmds_clock_p
    UPD HdlDirection@@OUT to INTERNAL

UPD HdlIdDef@@tmds_n to tmds_n
    UPD HdlDirection@@OUT to INTERNAL

UPD HdlIdDef@@tmds_clock_n to tmds_clock_n
    UPD HdlDirection@@OUT to INTERNAL

DEL HdlIdDef@@clk_original from ports


CommitId: f292a479df3b9683bc0cdf783849647a1ef154b4
Fix clock regen table index bit order inversion
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -19,7 +19,7 @@ wire clk_tmds;
 wire clk_pixel;
 pll pll(.inclk0(CLK_50MHZ), .c0(clk_tmds), .c1(clk_pixel));
 
-localparam AUDIO_BIT_WIDTH = 20;
+localparam AUDIO_BIT_WIDTH = 16;
 wire [AUDIO_BIT_WIDTH-1:0] audio_in;
 wire [AUDIO_BIT_WIDTH-1:0] audio_out;
 sawtooth #(.BIT_WIDTH(AUDIO_BIT_WIDTH)) sawtooth (.clk_audio(CLK_32KHZ), .level(audio_in));
ParseResult:
UPD HdlIdDef@@AUDIO_BIT_WIDTH to AUDIO_BIT_WIDTH
    UPD HdlValueInt@@20 to 16


CommitId: 9d5c8b06b75512527b0564b78c6bea54672383c5
audio sample packet: always send 4 samples
--- a/top/top.sv
+++ b/top/top.sv
@@ -10,9 +10,9 @@ logic clk_audio;
 
 pll pll(.c0(clk_pixel_x10), .c1(clk_pixel), .c2(clk_audio));
 
-logic signed [15:0] audio_sample_word = 16'sd0; // Since the L-PCM audio is 2-channel by default, this is mono audio.
-always @(posedge clk_audio) // Sawtooth wave generator
-  audio_sample_word <= audio_sample_word + 16'sd638;
+logic [15:0] audio_sample_word [1:0] = '{16'sd0, 16'sd0};
+always @(posedge clk_audio)
+  audio_sample_word <= '{audio_sample_word[0] + 16'sd1, audio_sample_word[1] - 16'sd1};
 
 logic [23:0] rgb;
 logic [9:0] cx, cy;

ParseResult:
UPD HdlIdDef@@audio_sample_word to audio_sample_word
    INS HdlOp@@INDEX to audio_sample_word
    INS list@@value to audio_sample_word
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        UPD HdlOp@@DOWNTO to DOWNTO
            INS list@@ops to DOWNTO
            INS HdlValueInt@@0 to ops
    INS HdlValueInt@@0 to value

UPD HdlIdDef@@rgb to rgb
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlIdDef@@cx to cx
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlIdDef@@cy to cy
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlIdDef@@audio_sample_word to audio_sample_word
    MOV HdlValueInt@@0 to audio_sample_word
    HdlValueInt: 0
    UPD HdlOp@@PARAMETRIZATION to INDEX
    MOV HdlOp@@PARAMETRIZATION to audio_sample_word
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 15
                    HdlValueInt: 0
            HdlValueInt: 1
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        MOV HdlValueInt@@1 to ops
        HdlValueInt: 1

UPD HdlStmAssign@@body to body
    INS list@@src to body
    INS HdlValueId@@audio_sample_word to body
    INS HdlOp@@SUB to src
    UPD HdlOp@@ADD to ADD
        INS list@@ops to ADD
        INS HdlOp@@INDEX to ops
        INS HdlValueInt@@1 to ops
    UPD HdlOp@@SUB to SUB
        INS list@@ops to SUB
        INS HdlOp@@INDEX to ops
        INS HdlValueInt@@1 to ops
        UPD HdlOp@@INDEX to INDEX
            INS list@@ops to INDEX
            INS HdlValueInt@@1 to ops

UPD HdlStmAssign@@body to body
    MOV HdlOp@@ADD to body
    HdlOp: ADD
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 638
    UPD HdlOp@@ADD to ADD
        MOV list@@ops to ADD
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 638
        UPD HdlValueInt@@638 to 0
    MOV HdlValueId@@audio_sample_word to body
    HdlValueId: audio_sample_word


CommitId: 9b3186308f5f07ddb195205847cebfc99c7ccd08
Create top testbench, fix some bit size errors, fix a variable rename mistake, speed up clocks in hdmi/assembler TBs
--- a/modules/sound/wave.sv
+++ b/modules/sound/wave.sv
@@ -4,7 +4,7 @@ module sawtooth
 )
 (
     input logic clk_audio,
-    output logic [BIT_WIDTH:0] level = BIT_WIDTH'(0)
+    output logic [BIT_WIDTH-1:0] level = BIT_WIDTH'(0)
 );
 
 always @(posedge clk_audio)
ParseResult:
UPD HdlIdDef@@level to level
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlOp@@SUB to ops
            UPD HdlOp@@SUB to SUB
                INS list@@ops to SUB
                INS HdlValueInt@@1 to ops

UPD HdlIdDef@@level to level
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            MOV HdlValueId@@BIT_WIDTH to ops
            HdlValueId: BIT_WIDTH


CommitId: faa15ad7e6f7f6f9fed5843fd4db2778993f3ab0
Fix parity computation
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -30,18 +36,15 @@ generate
     for(i = 0; i < 5; i++)
     begin: parity_calc
         if (i == 4)
-            assign parity_next[i] = next_ecc(parity[i], bch4[0]);
+            assign parity_next[i] = next_ecc(parity[i], bch4[counter]);
         else
         begin
-            assign parity_next[i] = next_ecc(parity[i], bch[i][0]);
-            assign parity_next_next[i] = next_ecc(parity_next[i], bch[i][1]);
+            assign parity_next[i] = next_ecc(parity[i], bch[i][counter_t2]);
+            assign parity_next_next[i] = next_ecc(parity_next[i], bch[i][counter_t2_p1]);
         end
     end
 endgenerate
 
-// 32 pixel wrap-around counter. See Section 5.2.3.4 for further information.
-logic [4:0] counter = 5'd0;
-
 always @(posedge clk_pixel)
 begin
     if (enable)

ParseResult:
MOV HdlIdDef@@counter to objs
HdlIdDef: counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueId@@counter to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueId@@counter_t2 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueId@@counter_t2_p1 to ops

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            DEL HdlValueInt@@0 from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            DEL HdlValueInt@@0 from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@INDEX to INDEX
            DEL HdlValueInt@@1 from ops


CommitId: faa15ad7e6f7f6f9fed5843fd4db2778993f3ab0
Fix parity computation
--- a/modules/hdmi/packet_assembler.sv
+++ b/modules/hdmi/packet_assembler.sv
@@ -68,10 +71,4 @@ wire [5:0] counter_t2_p1 = {counter, 1'b1};
 assign packet_enable = counter == 5'd0 && enable;
 assign packet_data = {bch[3][counter_t2_p1], bch[2][counter_t2_p1], bch[1][counter_t2_p1], bch[0][counter_t2_p1], bch[3][counter_t2], bch[2][counter_t2], bch[1][counter_t2], bch[0][counter_t2], bch4[counter]};
 
-always @(posedge clk_pixel)
-begin
-    if (enable)
-        counter <= counter + 5'd1;
-end
-
 endmodule
ParseResult:
MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlValueId: enable
                HdlStmAssign: if_true
                    HdlOp: ADD
                        list: ops
                            HdlValueId: counter
                            HdlValueInt: 1
                    HdlValueId: counter
                list: elifs

UPD HdlStmIf@@ to body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: enable
    HdlStmAssign: if_true
        HdlOp: ADD
            list: ops
                HdlValueId: counter
                HdlValueInt: 1
        HdlValueId: counter
    list: elifs

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: acb4d060bbbc5558488b8345ddd7e2203af954e4
Change audio rate default to the more common 44.1kHz
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -26,7 +26,7 @@ module hdmi
 
     // As noted in Section 7.3, the minimal audio requirements are met: 16-bit to 24-bit L-PCM audio at 32 kHz, 44.1 kHz, or 48 kHz.
     // See Table 7-4 or README.md
-    parameter AUDIO_RATE = 32000,
+    parameter AUDIO_RATE = 44100,
 
     // Defaults to 16-bit audio. Can be anywhere from 16-bit to 24-bit.
     parameter AUDIO_BIT_WIDTH = 16
ParseResult:
UPD HdlIdDef@@AUDIO_RATE to AUDIO_RATE
    UPD HdlValueInt@@32000 to 44100


CommitId: d1af50c32bd7a6d2d3fa4f4a9c8faa0224bd3926
Fix mode being 1 clock off
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -200,14 +200,14 @@ packet_assembler packet_assembler (.clk_pixel(clk_pixel), .enable(data_island_pe
 packet_picker packet_picker (.packet_enable(packet_enable), .packet_type(packet_type), .headers(headers), .subs(subs), .packet_enable_fanout(packet_enable_fanout), .header(header), .sub(sub));
 
 
-logic [2:0] mode = 3'd0;
+logic [2:0] mode;
+assign mode = data_island_guard ? 3'd4 : data_island_period ? 3'd3 : video_guard ? 3'd2 : video_data_period ? 3'd1 : 3'd0;
 logic [23:0] video_data = 24'd0;
 logic [11:0] data_island_data = 12'd0;
 logic [5:0] control_data = 6'd0;
 
 always @(posedge clk_pixel)
 begin
-    mode <= data_island_guard ? 3'd4 : data_island_period ? 3'd3 : video_guard ? 3'd2 : video_data_period ? 3'd1 : 3'd0;
     video_data <= rgb;
     // See Section 5.2.3.4, Section 5.3.1, Section 5.3.2
     data_island_data[11:4] <= packet_data[8:1];
ParseResult:
MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: data_island_guard
            HdlValueInt: 4
            HdlOp: TERNARY
                list: ops
                    HdlValueId: data_island_period
                    HdlValueInt: 3
                    HdlOp: TERNARY
                        list: ops
                            HdlValueId: video_guard
                            HdlValueInt: 2
                            HdlOp: TERNARY
                                list: ops
                                    HdlValueId: video_data_period
                                    HdlValueInt: 1
                                    HdlValueInt: 0
    HdlValueId: mode

UPD HdlIdDef@@mode to mode
    DEL HdlValueInt@@0 from mode


CommitId: 4e32ff3efbb5ca6a4680cf68fefcd39e697d41af
Fix buffer bit width + update comments, force top to infer RAM instead of logic cells
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -38,10 +38,10 @@ always @(posedge clk_audio)
 logic audio_clock_regeneration_sent = 1'b0;
 logic audio_info_frame_sent = 1'b0;
 
-logic [6:0] remaining;
+logic [3:0] remaining;
 logic packet_enable;
 logic [7:0] packet_type = 0;
-buffer #(.CHANNELS(1), .BIT_WIDTH(AUDIO_BIT_WIDTH), .BUFFER_SIZE(8)) buffer (.clk_audio(clk_audio), .clk_pixel(clk_pixel), .packet_enable(packet_enable && audio_clock_regeneration_sent && audio_info_frame_sent), .audio_in('{audio_in}), .audio_out('{audio_out}), .remaining(remaining));
+buffer #(.CHANNELS(1), .BIT_WIDTH(AUDIO_BIT_WIDTH), .BUFFER_SIZE(16)) buffer (.clk_audio(clk_audio), .clk_pixel(clk_pixel), .packet_enable(packet_enable && audio_clock_regeneration_sent && audio_info_frame_sent), .audio_in('{audio_in}), .audio_out('{audio_out}), .remaining(remaining));
 
 
 logic [23:0] rgb;
ParseResult:
UPD HdlIdDef@@remaining to remaining
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@6 to 3


CommitId: 6d21a1ce7dacd9d7beb5de10cb9cb56cde083640
fix one-off error in clock regen packet
--- a/src/audio_clock_regeneration_packet.sv
+++ b/src/audio_clock_regeneration_packet.sv
@@ -19,8 +19,8 @@ module audio_clock_regeneration_packet
 localparam int N = AUDIO_RATE % 125 == 0 ? 20'(16 * AUDIO_RATE / 125) : AUDIO_RATE % 225 == 0 ? 20'(196 * AUDIO_RATE / 225) : 20'(AUDIO_RATE * 16 / 125);
 
 localparam int CLK_AUDIO_COUNTER_WIDTH = $clog2(N / 128);
-localparam bit [CLK_AUDIO_COUNTER_WIDTH-1:0] CLK_AUDIO_COUNTER_END = CLK_AUDIO_COUNTER_WIDTH'(N / 128);
-logic [CLK_AUDIO_COUNTER_WIDTH-1:0] clk_audio_counter = CLK_AUDIO_COUNTER_WIDTH'(1);
+localparam bit [CLK_AUDIO_COUNTER_WIDTH-1:0] CLK_AUDIO_COUNTER_END = CLK_AUDIO_COUNTER_WIDTH'(N / 128 - 1);
+logic [CLK_AUDIO_COUNTER_WIDTH-1:0] clk_audio_counter = CLK_AUDIO_COUNTER_WIDTH'(0);
 logic internal_clk_audio_counter_wrap = 1'd0;
 always_ff @(posedge clk_audio)
 begin

ParseResult:
UPD HdlIdDef@@CLK_AUDIO_COUNTER_END to CLK_AUDIO_COUNTER_END
    INS HdlOp@@CALL to CLK_AUDIO_COUNTER_END
    UPD HdlOp@@CALL to CALL
        INS list@@ops to CALL
        UPD HdlOp@@SUB to SUB
            INS HdlValueInt@@1 to ops

UPD HdlIdDef@@CLK_AUDIO_COUNTER_END to CLK_AUDIO_COUNTER_END
    UPD HdlOp@@CALL to CALL
        MOV HdlValueId@@CLK_AUDIO_COUNTER_WIDTH to ops
        HdlValueId: CLK_AUDIO_COUNTER_WIDTH
    UPD HdlOp@@CALL to SUB
    MOV HdlOp@@CALL to CLK_AUDIO_COUNTER_END
    HdlOp: CALL
        list: ops
            HdlValueId: CLK_AUDIO_COUNTER_WIDTH
            HdlOp: DIV
                list: ops
                    HdlValueId: N
                    HdlValueInt: 128

UPD HdlIdDef@@clk_audio_counter to clk_audio_counter
    UPD HdlOp@@CALL to CALL
        UPD HdlValueInt@@1 to 0


CommitId: 6d21a1ce7dacd9d7beb5de10cb9cb56cde083640
fix one-off error in clock regen packet
--- a/src/audio_clock_regeneration_packet.sv
+++ b/src/audio_clock_regeneration_packet.sv
@@ -30,7 +30,7 @@ begin
         internal_clk_audio_counter_wrap <= !internal_clk_audio_counter_wrap;
     end
     else
-        clk_audio_counter <= clk_audio_counter + CLK_AUDIO_COUNTER_WIDTH'(1);
+        clk_audio_counter <= clk_audio_counter + 1'd1;
 end
 
 logic [1:0] clk_audio_counter_wrap_synchronizer_chain = 2'd0;
ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@ADD to ADD
        UPD HdlOp@@CALL to CALL
            MOV HdlValueInt@@1 to ops
            HdlValueInt: 1
            DEL HdlValueId@@CLK_AUDIO_COUNTER_WIDTH from ops
            DEL list@@ops from CALL
        DEL HdlOp@@CALL from ops


CommitId: bae2572dedbda681d776d3b0665d29448ecd35b2
Fix incorrect info frame checksum
--- a/src/auxiliary_video_information_info_frame.sv
+++ b/src/auxiliary_video_information_info_frame.sv
@@ -38,7 +38,7 @@ assign header = {{3'b0, LENGTH}, VERSION, {1'b1, TYPE}};
 // PB21-27 = sub3
 logic [7:0] packet_bytes [27:0];
 
-assign packet_bytes[0] = ~(header[23:16] + header[15:8] + header[7:0] + packet_bytes[13] + packet_bytes[12] + packet_bytes[11] + packet_bytes[10] + packet_bytes[9] + packet_bytes[8] + packet_bytes[7] + packet_bytes[6] + packet_bytes[5] + packet_bytes[4] + packet_bytes[3] + packet_bytes[2] + packet_bytes[1]);
+assign packet_bytes[0] = 8'd1 + ~(header[23:16] + header[15:8] + header[7:0] + packet_bytes[13] + packet_bytes[12] + packet_bytes[11] + packet_bytes[10] + packet_bytes[9] + packet_bytes[8] + packet_bytes[7] + packet_bytes[6] + packet_bytes[5] + packet_bytes[4] + packet_bytes[3] + packet_bytes[2] + packet_bytes[1]);
 assign packet_bytes[1] = {1'b0, VIDEO_FORMAT, ACTIVE_FORMAT_INFO_PRESENT, BAR_INFO, SCAN_INFO};
 assign packet_bytes[2] = {COLORIMETRY, PICTURE_ASPECT_RATIO, ACTIVE_FORMAT_ASPECT_RATIO};
 assign packet_bytes[3] = {IT_CONTENT, EXTENDED_COLORIMETRY, RGB_QUANTIZATION_RANGE, NON_UNIFORM_PICTURE_SCALING};
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@ADD to 
    UPD HdlOp@@ADD to ADD
        INS list@@ops to ADD
        INS HdlValueInt@@1 to ops

UPD HdlStmAssign@@ to 
    MOV HdlOp@@NEG to 
    HdlOp: NEG
        list: ops
            HdlOp: ADD
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: ADD
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlOp: ADD
                                                                        list: ops
                                                                            HdlOp: ADD
                                                                                list: ops
                                                                                    HdlOp: ADD
                                                                                        list: ops
                                                                                            HdlOp: ADD
                                                                                                list: ops
                                                                                                    HdlOp: ADD
                                                                                                        list: ops
                                                                                                            HdlOp: ADD
                                                                                                                list: ops
                                                                                                                    HdlOp: ADD
                                                                                                                        list: ops
                                                                                                                            HdlOp: ADD
                                                                                                                                list: ops
                                                                                                                                    HdlOp: INDEX
                                                                                                                                        list: ops
                                                                                                                                            HdlValueId: header
                                                                                                                                            HdlOp: DOWNTO
                                                                                                                                                list: ops
                                                                                                                                                    HdlValueInt: 23
                                                                                                                                                    HdlValueInt: 16
                                                                                                                                    HdlOp: INDEX
                                                                                                                                        list: ops
                                                                                                                                            HdlValueId: header
                                                                                                                                            HdlOp: DOWNTO
                                                                                                                                                list: ops
                                                                                                                                                    HdlValueInt: 15
                                                                                                                                                    HdlValueInt: 8
                                                                                                                            HdlOp: INDEX
                                                                                                                                list: ops
                                                                                                                                    HdlValueId: header
                                                                                                                                    HdlOp: DOWNTO
                                                                                                                                        list: ops
                                                                                                                                            HdlValueInt: 7
                                                                                                                                            HdlValueInt: 0
                                                                                                                    HdlOp: INDEX
                                                                                                                        list: ops
                                                                                                                            HdlValueId: packet_bytes
                                                                                                                            HdlValueInt: 13
                                                                                                            HdlOp: INDEX
                                                                                                                list: ops
                                                                                                                    HdlValueId: packet_bytes
                                                                                                                    HdlValueInt: 12
                                                                                                    HdlOp: INDEX
                                                                                                        list: ops
                                                                                                            HdlValueId: packet_bytes
                                                                                                            HdlValueInt: 11
                                                                                            HdlOp: INDEX
                                                                                                list: ops
                                                                                                    HdlValueId: packet_bytes
                                                                                                    HdlValueInt: 10
                                                                                    HdlOp: INDEX
                                                                                        list: ops
                                                                                            HdlValueId: packet_bytes
                                                                                            HdlValueInt: 9
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: packet_bytes
                                                                                    HdlValueInt: 8
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: packet_bytes
                                                                            HdlValueInt: 7
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: packet_bytes
                                                                    HdlValueInt: 6
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: packet_bytes
                                                            HdlValueInt: 5
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: packet_bytes
                                                    HdlValueInt: 4
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: packet_bytes
                                            HdlValueInt: 3
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: packet_bytes
                                    HdlValueInt: 2
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: packet_bytes
                            HdlValueInt: 1


CommitId: 78044ea3560a8437e093dc072963f32ca0e54ac6
Optimize for speed, fix some incorrect operations in tmds channel
--- a/counter/modules/hdmi/verilog/tmds_channel.v
+++ b/counter/modules/hdmi/verilog/tmds_channel.v
@@ -12,10 +12,12 @@ module tmds_channel(
 
 parameter CN = 0; // Channel Number
 
-reg signed [4:0] disparity_counter = $signed(4'd0);
+reg signed [4:0] disparity_counter = $signed(5'd0);
 always @(posedge clk_pixel)
 begin
-    disparity_counter = mode == 2'd1 ? disparity_counter : $signed(4'd0);
+    if (mode != 2'd1)
+        disparity_counter = $signed(5'd0);
+
     case (mode)
         3'd0: tmds = control_coding(control_data);
         3'd1: video_coding(video_data, tmds);

ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlOp@@EQ to NE
                MOV HdlOp@@EQ to ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: mode
                        HdlValueInt: 1
            UPD HdlOp@@TERNARY to ASSIGN
            MOV HdlOp@@TERNARY to ops
            HdlOp: TERNARY
                list: ops
                    HdlOp: EQ
                        list: ops
                            HdlValueId: mode
                            HdlValueInt: 1
                    HdlValueId: disparity_counter
                    HdlOp: CALL
                        list: ops
                            HdlValueId: $signed
                            HdlValueInt: 0
            DEL HdlValueId@@disparity_counter from ops
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body

UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: 78044ea3560a8437e093dc072963f32ca0e54ac6
Optimize for speed, fix some incorrect operations in tmds channel
--- a/counter/modules/hdmi/verilog/tmds_channel.v
+++ b/counter/modules/hdmi/verilog/tmds_channel.v
@@ -61,19 +63,21 @@ endfunction
 task video_coding;
     input [7:0] d;
     output [9:0] video_coding;
-    reg [2:0] N1d = 0;
+    reg [3:0] N1d = 0;
     reg [3:0] N1q_m = 0;
     reg [3:0] N0q_m;
     reg [8:0] q_m;
+    reg signed [3:0] diff;
     integer i;
-    for (i = 1; i < 8; i=i+1) // 1 bit saving here by ignoring d[0]
+
+    for (i = 0; i < 8; i=i+1)
         N1d = N1d + d[i];
     
     q_m[0] = d[0];
-    if (N1d > 3'd3)
+    if (N1d > 4'd4 | (N1d == 4'd4 & d[0] == 1'b0))
     begin
         for (i = 1; i < 8; i=i+1)
-            q_m[i] = ~(q_m[i-1] ^ d[i]);
+            q_m[i] = q_m[i-1] ^~ d[i];
         q_m[8] = 0;
     end
     else

ParseResult:
INS HdlIdDef@@diff to body
HdlIdDef: diff
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
            HdlValueInt: 1
    HdlDirection: INTERNAL

UPD HdlFunctionDef@@video_coding to video_coding
    INS HdlOp@@ASSIGN to body
    HdlOp: ASSIGN
        list: ops
            HdlValueId: disparity_counter
            HdlOp: ADD
                list: ops
                    HdlValueId: disparity_counter
                    HdlValueId: diff

UPD HdlStmIf@@ to 
    INS HdlOp@@OR to 
    UPD HdlOp@@OR to OR
        INS list@@ops to OR
        INS HdlOp@@AND to ops
        HdlOp: AND
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: N1d
                        HdlValueInt: 4
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: d
                                HdlValueInt: 0
                        HdlValueInt: 0

UPD HdlStmFor@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD list@@ops to body
        MOV list@@ops to ASSIGN
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: q_m
                    HdlValueId: i
            HdlOp: NEG
                list: ops
                    HdlOp: XOR
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: q_m
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: i
                                            HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: d
                                    HdlValueId: i
        UPD HdlOp@@NEG to ASSIGN
        MOV HdlOp@@NEG to ops
        HdlOp: NEG
            list: ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: q_m
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: i
                                        HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: d
                                HdlValueId: i
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: q_m
                HdlValueId: i
        UPD HdlOp@@NEG to NEG
            UPD HdlOp@@XOR to XNOR
    DEL HdlOp@@ASSIGN from 

UPD HdlStmIf@@ to 
    MOV HdlOp@@GT to 
    HdlOp: GT
        list: ops
            HdlValueId: N1d
            HdlValueInt: 3
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: q_m
                        HdlValueInt: 8
                HdlValueInt: 0
        DEL list@@body from SEQ
    UPD HdlOp@@GT to GT
        UPD HdlValueInt@@3 to 4

MOV HdlStmFor@@ to body
HdlStmFor
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: i
    HdlOp: LT
        list: ops
            HdlValueId: i
            HdlValueInt: 8
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: i
                    HdlOp: ADD
                        list: ops
                            HdlValueId: i
                            HdlValueInt: 1
    HdlOp: ASSIGN
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: q_m
                    HdlValueId: i
            HdlOp: NEG
                list: ops
                    HdlOp: XOR
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: q_m
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: i
                                            HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: d
                                    HdlValueId: i

UPD HdlStmAssign@@ to 
    UPD HdlValueInt@@1 to 0

UPD HdlIdDef@@N1d to N1d
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@2 to 3


CommitId: 78044ea3560a8437e093dc072963f32ca0e54ac6
Optimize for speed, fix some incorrect operations in tmds channel
--- a/counter/modules/hdmi/verilog/tmds_channel.v
+++ b/counter/modules/hdmi/verilog/tmds_channel.v
@@ -87,30 +91,26 @@ task video_coding;
         N1q_m = N1q_m + q_m[i];
     N0q_m = 4'd8 - N1q_m;
 
-    if (disparity_counter == $signed(4'd0) || N1q_m == 4'd4)
+    if (disparity_counter == $signed(4'd0) | N1q_m == 4'd4)
     begin
-        video_coding[9] = ~q_m[8];
-        video_coding[8] = q_m[8];
-        video_coding[7:0] = q_m[8] ? q_m[7:0] : ~q_m[7:0];
+        video_coding = {~q_m[8], q_m[8], q_m[8] ? q_m[7:0] : ~q_m[7:0]};
         if (q_m[8] == 0)
-            disparity_counter = disparity_counter + ($signed(N0q_m) - $signed(N1q_m));
+            diff = $signed(N0q_m) - $signed(N1q_m);
         else
-            disparity_counter = disparity_counter + ($signed(N1q_m) - $signed(N0q_m));
+            diff = $signed(N1q_m) - $signed(N0q_m);
     end
     else
     begin
-        video_coding[9] = 1'b0;
-        video_coding[8] = q_m[8];
-        video_coding[7:0] = q_m[7:0];
-        if ((disparity_counter > $signed(4'd0) && N1q_m > 4'd4) || (disparity_counter < $signed(4'd0) && N1q_m < 4'd4))
+        if ((disparity_counter > $signed(4'd0) & N1q_m > 4'd4) | (disparity_counter < $signed(4'd0) & N1q_m < 4'd4))
         begin
-            video_coding[9] = 1'b1;
-            video_coding[7:0] = ~video_coding[7:0];
-            disparity_counter = disparity_counter + $signed({q_m[8], 1'b0}) + ($signed(N0q_m) - $signed(N1q_m));
+            video_coding = {1'b1, q_m[8], ~q_m[7:0]};
+            diff = $signed({q_m[8],1'b0}) + ($signed(N0q_m) - $signed(N1q_m));
         end
         else
-            disparity_counter = disparity_counter - $signed({~q_m[8], 1'b0}) + ($signed(N1q_m) - $signed(N0q_m));
+            video_coding = {1'b0, q_m[8], q_m[7:0]};
+            diff = - $signed({~q_m[8],1'b0}) + ($signed(N1q_m) - $signed(N0q_m));
     end 
+    disparity_counter = disparity_counter + diff;
 endtask
 
 task video_guard_band;
ParseResult:
UPD HdlFunctionDef@@video_coding to video_coding
    INS HdlOp@@ASSIGN to body
    HdlOp: ASSIGN
        list: ops
            HdlValueId: disparity_counter
            HdlOp: ADD
                list: ops
                    HdlValueId: disparity_counter
                    HdlValueId: diff

UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                MOV HdlValueId@@video_coding to ops
                HdlValueId: video_coding
                DEL HdlValueInt@@9 from ops
                DEL list@@ops from INDEX
            DEL HdlOp@@INDEX from ops
        UPD HdlOp@@ASSIGN to CONCAT
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: video_coding
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
                HdlOp: TERNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: q_m
                                HdlValueInt: 8
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: q_m
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 7
                                        HdlValueInt: 0
                        HdlOp: NEG
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: q_m
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueInt: 0
        UPD HdlOp@@ASSIGN to CONCAT
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: video_coding
                        HdlValueInt: 9
                HdlOp: NEG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: q_m
                                HdlValueInt: 8
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: q_m
                    HdlValueInt: 8
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: video_coding
                    HdlValueInt: 8
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to ASSIGN
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: video_coding
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 7
                            HdlValueInt: 0
        DEL HdlOp@@ASSIGN from body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to CONCAT
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: video_coding
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlValueId: q_m
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
        UPD HdlOp@@ASSIGN to CONCAT
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: video_coding
                        HdlValueInt: 8
                HdlOp: INDEX
                    list: ops
                        HdlValueId: q_m
                        HdlValueInt: 8
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueInt@@8 to 0
                MOV HdlValueInt@@8 to ops
                HdlValueInt: 8
                DEL HdlValueId@@video_coding from ops
                DEL list@@ops from INDEX
            DEL HdlOp@@INDEX from ops
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: video_coding
                        HdlValueInt: 9
                HdlValueInt: 0
        UPD HdlOp@@ASSIGN to ASSIGN
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: video_coding
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 7
                            HdlValueInt: 0

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN

UPD HdlStmIf@@ to 
    MOV HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: disparity_counter
            HdlOp: ADD
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: disparity_counter
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $signed
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: NEG
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: q_m
                                                            HdlValueInt: 8
                                            HdlValueInt: 0
                    HdlOp: SUB
                        list: ops
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $signed
                                    HdlValueId: N1q_m
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $signed
                                    HdlValueId: N0q_m
    UPD HdlOp@@OR_LOG to OR
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD list@@ops to body
            MOV list@@ops to ASSIGN
            list: ops
                HdlValueId: disparity_counter
                HdlOp: ADD
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlValueId: disparity_counter
                                HdlOp: CALL
                                    list: ops
                                        HdlValueId: $signed
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: q_m
                                                        HdlValueInt: 8
                                                HdlValueInt: 0
                        HdlOp: SUB
                            list: ops
                                HdlOp: CALL
                                    list: ops
                                        HdlValueId: $signed
                                        HdlValueId: N0q_m
                                HdlOp: CALL
                                    list: ops
                                        HdlValueId: $signed
                                        HdlValueId: N1q_m
            UPD HdlOp@@ADD to ASSIGN
            UPD HdlOp@@ADD to ADD
                UPD HdlOp@@ADD to ADD
                    UPD HdlValueId@@disparity_counter to diff
                    MOV HdlValueId@@disparity_counter to ops
                    HdlValueId: disparity_counter
                MOV HdlOp@@SUB to ops
                HdlOp: SUB
                    list: ops
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $signed
                                HdlValueId: N0q_m
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $signed
                                HdlValueId: N1q_m
            DEL HdlValueId@@disparity_counter from ops
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                MOV HdlValueId@@video_coding to ops
                HdlValueId: video_coding
                DEL HdlValueInt@@9 from ops
                DEL list@@ops from INDEX
            DEL HdlOp@@INDEX from ops
            DEL HdlValueInt@@1 from ops
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to CONCAT
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: video_coding
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
                HdlOp: NEG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: video_coding
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 7
                                        HdlValueInt: 0
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to CONCAT
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlValueInt@@7 to 8
                    DEL HdlValueInt@@0 from ops
                DEL HdlValueId@@video_coding from ops
            UPD HdlOp@@NEG to NEG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@video_coding to q_m
        DEL HdlOp@@ASSIGN from body
        DEL HdlOp@@ASSIGN from body
        DEL list@@body from SEQ
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@disparity_counter to diff
        UPD HdlOp@@ADD to ADD
            UPD HdlOp@@SUB to MINUS_UNARY
            UPD HdlOp@@SUB to SUB
                DEL HdlValueId@@disparity_counter from ops
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND
        UPD HdlOp@@AND_LOG to AND

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@ADD to ASSIGN
        MOV HdlOp@@ADD to ops
        HdlOp: ADD
            list: ops
                HdlValueId: disparity_counter
                HdlOp: SUB
                    list: ops
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $signed
                                HdlValueId: N0q_m
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $signed
                                HdlValueId: N1q_m
        UPD HdlOp@@ADD to ADD
            UPD HdlValueId@@disparity_counter to diff
        DEL HdlValueId@@disparity_counter from ops
        DEL list@@ops from ASSIGN
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@ADD to ASSIGN
        MOV HdlOp@@ADD to ops
        HdlOp: ADD
            list: ops
                HdlValueId: disparity_counter
                HdlOp: SUB
                    list: ops
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $signed
                                HdlValueId: N1q_m
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $signed
                                HdlValueId: N0q_m
        UPD HdlOp@@ADD to ADD
            UPD HdlValueId@@disparity_counter to diff
        DEL HdlValueId@@disparity_counter from ops
        DEL list@@ops from ASSIGN
    DEL HdlOp@@ASSIGN from 
    DEL HdlOp@@ASSIGN from 

UPD HdlStmIf@@ to 
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN
        INS HdlValueId@@video_coding to ops
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@CONCAT to CONCAT
                    INS HdlValueInt@@1 to ops
                    UPD HdlOp@@INDEX to INDEX
                        INS HdlValueId@@q_m to ops


CommitId: f292a479df3b9683bc0cdf783849647a1ef154b4
Fix clock regen table index bit order inversion
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -17,7 +17,7 @@ module audio_clock_regeneration_packet
 
 // See Section 7.2.3. Values taken from Tables 7-1, 7-2, 7-3.
 // Indexed by audio rate, video code, video rate, N/CTS
-logic [19:0] TABLE [0:2] [0:5] [0:1] [0:1] =
+const bit [19:0] TABLE [0:2] [0:5] [0:1] [0:1] =
 '{
     '{ // 32 kHz
         '{

ParseResult:
UPD HdlIdDef@@TABLE to TABLE
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlOp@@INDEX to PARAMETRIZATION
                    UPD HdlOp@@INDEX to INDEX
                        UPD HdlValueId@@logic to bit


CommitId: f292a479df3b9683bc0cdf783849647a1ef154b4
Fix clock regen table index bit order inversion
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -84,7 +84,7 @@ logic [19:0] TABLE [0:2] [0:5] [0:1] [0:1] =
 logic [19:0] N, CTS;
 
 // Intentionally select an invalid index if none of the below were selected
-logic [2:0] audio_rate_index = AUDIO_RATE == 4'b0000 ? 3'd1 : AUDIO_RATE == 4'b0100 ? 3'd2 : AUDIO_RATE == 4'b1100 ? 3'd0 : 3'd3;
+logic [2:0] audio_rate_index = AUDIO_RATE == 4'b0000 ? 3'd1 : AUDIO_RATE == 4'b0010 ? 3'd2 : AUDIO_RATE == 4'b0011 ? 3'd0 : 3'd3;
 
 generate
     case (VIDEO_ID_CODE)

ParseResult:
UPD HdlIdDef@@N to N
    UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlIdDef@@CTS to CTS
    UPD HdlOp@@INDEX to PARAMETRIZATION

UPD HdlIdDef@@audio_rate_index to audio_rate_index
    UPD HdlOp@@INDEX to PARAMETRIZATION
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            UPD HdlOp@@EQ to EQ
                UPD HdlValueInt@@0100 to 0010
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlOp@@EQ to EQ
                    UPD HdlValueInt@@1100 to 0011


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -9,8 +9,6 @@ module audio_clock_regeneration_packet
     parameter AUDIO_RATE = 4'b0000
 )
 (
-    input logic clk_pixel,
-    input logic packet_enable,
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );

ParseResult:
DEL HdlIdDef@@clk_pixel from ports
HdlIdDef: clk_pixel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlDirection: IN

DEL HdlIdDef@@packet_enable from ports
HdlIdDef: packet_enable
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlDirection: IN


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -113,7 +111,8 @@ endgenerate
 
 
 wire [55:0] single_sub = {N[7:0], N[15:8], {4'd0, N[19:16]}, CTS[7:0], CTS[15:8], {4'd0, CTS[19:16]}, 8'd0};
-assign header = {8'd0, 8'd0, 8'd1};
+// "An HDMI Sink shall ignore bytes HB1 and HB2 of the Audio Clock Regeneration Packet header."
+assign header = {8'dX, 8'dX, 8'd1};
 // "The four Subpackets each contain the same Audio Clock regeneration Subpacket."
 assign sub = '{single_sub, single_sub, single_sub, single_sub};
 

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlValueInt@@0 to x
            UPD HdlValueInt@@0 to x


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -164,8 +163,7 @@ module audio_sample_packet
 
 )
 (
-    input logic clk_pixel,
-    input logic packet_enable,
+    input logic [7:0] frame_counter,
     // See IEC 60958-1 4.4 and Annex A. 0 indicates the signal is suitable for decoding to an analog audio signal.
     input logic [1:0] valid_bit,
     // See IEC 60958-3 Section 6. 0 indicates that no user data is being sent

ParseResult:
UPD HdlIdDef@@clk_pixel to frame_counter

UPD HdlIdDef@@clk_pixel to clk_pixel
    DEL HdlOp@@PARAMETRIZATION from clk_pixel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic

DEL HdlIdDef@@packet_enable from ports
HdlIdDef: packet_enable
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
    HdlDirection: IN


CommitId: 50c87ee781a7f4ed8bfa21f9217ff613d48f456f
Milestone: audio works
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -184,22 +182,9 @@ localparam CHANNEL_STATUS_LENGTH = 8'd192;
 wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_left = {152'd0, ORIGINAL_SAMPLING_FREQUENCY, WORD_LENGTH, 2'b00, CLOCK_ACCURACY, SAMPLING_FREQUENCY, CHANNEL_LEFT, SOURCE_NUMBER, CATEGORY_CODE, MODE, PRE_EMPHASIS, COPYRIGHT_NOT_ASSERTED, SAMPLE_WORD_TYPE, GRADE};
 wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_right = {152'd0, ORIGINAL_SAMPLING_FREQUENCY, WORD_LENGTH, 2'b00, CLOCK_ACCURACY, SAMPLING_FREQUENCY, CHANNEL_RIGHT, SOURCE_NUMBER, CATEGORY_CODE, MODE, PRE_EMPHASIS, COPYRIGHT_NOT_ASSERTED, SAMPLE_WORD_TYPE, GRADE};
 
-
-logic [7:0] frame_counter = 8'd0;
-
 logic [1:0] parity_bit;
-genvar i;
-generate
-    for (i = 0; i < 2; i++) begin: parity_loop
-        assign parity_bit[i] = ^{channel_status_right[frame_counter], user_data_bit[i], valid_bit[i], audio_sample_word[i]};
-    end
-endgenerate
-
-always @(posedge clk_pixel)
-begin
-    if (packet_enable)
-        frame_counter <= frame_counter == (CHANNEL_STATUS_LENGTH-1) ? 8'd0 : frame_counter + 8'd1;
-end
+assign parity_bit[0] = ^{channel_status_left[frame_counter], user_data_bit[0], valid_bit[0], audio_sample_word[0]};
+assign parity_bit[1] = ^{channel_status_right[frame_counter], user_data_bit[1], valid_bit[1], audio_sample_word[1]};
 
 // See HDMI 1.4a Table 5-12: Audio Sample Packet Header.
 assign header = {{3'b000, frame_counter == 8'd0, 4'b0000}, {3'b000, LAYOUT, 4'b0001}, 8'd2};
ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: XOR_UNARY
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: channel_status_left
                                            HdlValueId: frame_counter
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: user_data_bit
                                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: valid_bit
                                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: audio_sample_word
                            HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: parity_bit
            HdlValueInt: 0

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: XOR_UNARY
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: channel_status_right
                                            HdlValueId: frame_counter
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: user_data_bit
                                            HdlValueId: i
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: valid_bit
                                    HdlValueId: i
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: audio_sample_word
                            HdlValueId: i
    HdlOp: INDEX
        list: ops
            HdlValueId: parity_bit
            HdlValueId: i

UPD HdlIdDef@@frame_counter to frame_counter
    MOV HdlOp@@PARAMETRIZATION to frame_counter
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    DEL HdlValueInt@@0 from frame_counter
    DEL HdlDirection@@INTERNAL from frame_counter

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        INS HdlValueInt@@1 to ops

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@ADD to ADD
            MOV HdlValueInt@@1 to ops
            HdlValueInt: 1
            DEL HdlValueId@@frame_counter from ops
            DEL list@@ops from ADD
        UPD HdlValueInt@@0 to 1
        MOV HdlValueInt@@0 to ops
        HdlValueInt: 0
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@SUB to SUB
                MOV HdlValueInt@@1 to ops
                HdlValueInt: 1
                DEL HdlValueId@@CHANNEL_STATUS_LENGTH from ops
                DEL list@@ops from SUB
            DEL HdlValueId@@frame_counter from ops
            DEL HdlOp@@SUB from ops
            DEL list@@ops from EQ
        DEL HdlOp@@EQ from ops
        DEL HdlOp@@ADD from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from if_true
    DEL HdlValueId@@frame_counter from if_true

DEL HdlIdDef@@frame_counter from objs

UPD HdlStmAssign@@ to 
    UPD HdlOp@@XOR_UNARY to XOR_UNARY
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@CONCAT to CONCAT
                    UPD HdlOp@@INDEX to INDEX
                        DEL HdlValueId@@i from ops
                UPD HdlOp@@INDEX to INDEX
                    DEL HdlValueId@@i from ops
            UPD HdlOp@@INDEX to INDEX
                DEL HdlValueId@@i from ops
    UPD HdlOp@@INDEX to INDEX
        DEL HdlValueId@@i from ops

DEL HdlIdDef@@i from objs
HdlIdDef: i
    HdlValueId: genvar
    HdlDirection: INTERNAL

UPD HdlStmFor@@ to 
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: i
    DEL HdlOp@@LT from 
    HdlOp: LT
        list: ops
            HdlValueId: i
            HdlValueInt: 2
    DEL HdlOp@@INCR_POST from 
    HdlOp: INCR_POST
        list: ops
            HdlValueId: i
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmFor@@ from objs

UPD HdlStmProcess@@ to 
    DEL list@@sensitivity from 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@packet_enable from 
    DEL list@@elifs from 

DEL HdlStmAssign@@if_true from 

DEL HdlStmIf@@ from body

DEL HdlStmProcess@@ from objs


CommitId: ccaa213e3dc97f3fc9dde12fc7288202b2664e27
Correct another one-off error
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -136,23 +136,29 @@ begin
 end
 
 // See Section 5.2
-wire video_data_period = cx >= screen_start_x && cy >= screen_start_y;
-wire video_guard = !DVI_OUTPUT && (cx >= screen_start_x - 2 && cx < screen_start_x) && cy >= screen_start_y;
-wire video_preamble = !DVI_OUTPUT && (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy >= screen_start_y;
+logic video_data_period = 1;
+logic video_guard = 0;
+logic video_preamble = 0;
 
 // See Section 5.2.3.1
 integer max_num_packets;
 logic [4:0] num_packets;
-logic data_island_guard;
-logic data_island_preamble;
-logic data_island_period;
-
 assign max_num_packets = ((frame_width - screen_start_x - 2) - ((frame_width - screen_start_x - 2) % 32)) / 32;
 assign num_packets = max_num_packets > 18 ? 5'd18 : 5'(max_num_packets);
-assign data_island_guard = !DVI_OUTPUT && ((cx >= screen_start_x - 2 && cx < screen_start_x) || (cx >= screen_start_x + num_packets * 32 && cx < screen_start_x + num_packets * 32 + 2)) && cy < screen_start_y;
-assign data_island_preamble = !DVI_OUTPUT && (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy < screen_start_y;
-assign data_island_period = !DVI_OUTPUT && (cx >= screen_start_x && cx < screen_start_x + num_packets * 32) && cy < screen_start_y;
 
+logic data_island_guard = 0;
+logic data_island_preamble = 0;
+logic data_island_period = 0;
+
+always @(posedge clk_pixel)
+begin
+    video_data_period <= cx >= screen_start_x && cy >= screen_start_y;
+    video_guard <= !DVI_OUTPUT && (cx >= screen_start_x - 2 && cx < screen_start_x) && cy >= screen_start_y;
+    video_preamble <= !DVI_OUTPUT && (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy >= screen_start_y;
+    data_island_guard <= !DVI_OUTPUT && ((cx >= screen_start_x - 2 && cx < screen_start_x) || (cx >= screen_start_x + num_packets * 32 && cx < screen_start_x + num_packets * 32 + 2)) && cy < screen_start_y;
+    data_island_preamble <= !DVI_OUTPUT && (cx >= screen_start_x - 10 && cx < screen_start_x - 2) && cy < screen_start_y;
+    data_island_period <= !DVI_OUTPUT && (cx >= screen_start_x && cx < screen_start_x + num_packets * 32) && cy < screen_start_y;
+end
 
 logic [8:0] packet_data;
 logic packet_enable_fanout [255:0];

ParseResult:
INS HdlIdDef@@video_data_period to objs
HdlIdDef: video_data_period
    HdlValueInt: 1
    HdlDirection: INTERNAL

INS HdlIdDef@@video_guard to objs
HdlIdDef: video_guard
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@video_preamble to objs
HdlIdDef: video_preamble
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@data_island_guard to objs
HdlIdDef: data_island_guard
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@data_island_preamble to objs
HdlIdDef: data_island_preamble
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@data_island_period to objs
HdlIdDef: data_island_period
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_pixel
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: DVI_OUTPUT
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: GE
                                        list: ops
                                            HdlValueId: cx
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: screen_start_x
                                                    HdlValueInt: 2
                                    HdlOp: LT
                                        list: ops
                                            HdlValueId: cx
                                            HdlValueId: screen_start_x
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: GE
                                        list: ops
                                            HdlValueId: cx
                                            HdlOp: ADD
                                                list: ops
                                                    HdlValueId: screen_start_x
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueId: num_packets
                                                            HdlValueInt: 32
                                    HdlOp: LT
                                        list: ops
                                            HdlValueId: cx
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: ADD
                                                        list: ops
                                                            HdlValueId: screen_start_x
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueId: num_packets
                                                                    HdlValueInt: 32
                                                    HdlValueInt: 2
            HdlOp: LT
                list: ops
                    HdlValueId: cy
                    HdlValueId: screen_start_y
    HdlValueId: data_island_guard

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: DVI_OUTPUT
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: GE
                                list: ops
                                    HdlValueId: cx
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: screen_start_x
                                            HdlValueInt: 10
                            HdlOp: LT
                                list: ops
                                    HdlValueId: cx
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: screen_start_x
                                            HdlValueInt: 2
            HdlOp: LT
                list: ops
                    HdlValueId: cy
                    HdlValueId: screen_start_y
    HdlValueId: data_island_preamble

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: DVI_OUTPUT
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: GE
                                list: ops
                                    HdlValueId: cx
                                    HdlValueId: screen_start_x
                            HdlOp: LT
                                list: ops
                                    HdlValueId: cx
                                    HdlOp: ADD
                                        list: ops
                                            HdlValueId: screen_start_x
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueId: num_packets
                                                    HdlValueInt: 32
            HdlOp: LT
                list: ops
                    HdlValueId: cy
                    HdlValueId: screen_start_y
    HdlValueId: data_island_period

UPD HdlIdDef@@video_data_period to video_data_period
    MOV HdlOp@@AND_LOG to video_data_period
    HdlOp: AND_LOG
        list: ops
            HdlOp: GE
                list: ops
                    HdlValueId: cx
                    HdlValueId: screen_start_x
            HdlOp: GE
                list: ops
                    HdlValueId: cy
                    HdlValueId: screen_start_y
    DEL HdlDirection@@INTERNAL from video_data_period

UPD HdlStmAssign@@ to 
    INS HdlValueId@@video_data_period to 

UPD HdlIdDef@@video_guard to video_guard
    MOV HdlOp@@AND_LOG to video_guard
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: DVI_OUTPUT
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: GE
                                list: ops
                                    HdlValueId: cx
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: screen_start_x
                                            HdlValueInt: 2
                            HdlOp: LT
                                list: ops
                                    HdlValueId: cx
                                    HdlValueId: screen_start_x
            HdlOp: GE
                list: ops
                    HdlValueId: cy
                    HdlValueId: screen_start_y
    DEL HdlDirection@@INTERNAL from video_guard

UPD HdlStmAssign@@ to 
    INS HdlValueId@@video_guard to 

UPD HdlIdDef@@video_preamble to video_preamble
    MOV HdlOp@@AND_LOG to video_preamble
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: DVI_OUTPUT
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: GE
                                list: ops
                                    HdlValueId: cx
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: screen_start_x
                                            HdlValueInt: 10
                            HdlOp: LT
                                list: ops
                                    HdlValueId: cx
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: screen_start_x
                                            HdlValueInt: 2
            HdlOp: GE
                list: ops
                    HdlValueId: cy
                    HdlValueId: screen_start_y
    DEL HdlDirection@@INTERNAL from video_preamble

UPD HdlStmAssign@@ to 
    INS HdlValueId@@video_preamble to 

DEL HdlIdDef@@video_data_period from objs

DEL HdlIdDef@@video_guard from objs

DEL HdlIdDef@@video_preamble from objs

DEL HdlIdDef@@data_island_guard from objs
HdlIdDef: data_island_guard
    HdlDirection: INTERNAL

DEL HdlIdDef@@data_island_preamble from objs
HdlIdDef: data_island_preamble
    HdlDirection: INTERNAL

DEL HdlIdDef@@data_island_period from objs
HdlIdDef: data_island_period
    HdlDirection: INTERNAL


CommitId: ccaa213e3dc97f3fc9dde12fc7288202b2664e27
Correct another one-off error
--- a/modules/hdmi/hdmi.sv
+++ b/modules/hdmi/hdmi.sv
@@ -200,14 +206,14 @@ packet_assembler packet_assembler (.clk_pixel(clk_pixel), .enable(data_island_pe
 packet_picker packet_picker (.packet_enable(packet_enable), .packet_type(packet_type), .headers(headers), .subs(subs), .packet_enable_fanout(packet_enable_fanout), .header(header), .sub(sub));
 
 
-logic [2:0] mode;
-assign mode = data_island_guard ? 3'd4 : data_island_period ? 3'd3 : video_guard ? 3'd2 : video_data_period ? 3'd1 : 3'd0;
+logic [2:0] mode = 3'd1;
 logic [23:0] video_data = 24'd0;
 logic [11:0] data_island_data = 12'd0;
 logic [5:0] control_data = 6'd0;
 
 always @(posedge clk_pixel)
 begin
+    mode <= data_island_guard ? 3'd4 : data_island_period ? 3'd3 : video_guard ? 3'd2 : video_data_period ? 3'd1 : 3'd0;
     video_data <= rgb;
     // See Section 5.2.3.4, Section 5.3.1, Section 5.3.2
     data_island_data[11:4] <= packet_data[8:1];
ParseResult:
UPD HdlIdDef@@mode to mode
    INS HdlValueInt@@1 to mode

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: data_island_guard
            HdlValueInt: 4
            HdlOp: TERNARY
                list: ops
                    HdlValueId: data_island_period
                    HdlValueInt: 3
                    HdlOp: TERNARY
                        list: ops
                            HdlValueId: video_guard
                            HdlValueInt: 2
                            HdlOp: TERNARY
                                list: ops
                                    HdlValueId: video_data_period
                                    HdlValueInt: 1
                                    HdlValueInt: 0
    HdlValueId: mode


CommitId: 59d1289cee127e3f4f5e5166a956cf18aa79b2f7
Handle Vivado synthesis errors, fixes #8
--- a/src/source_product_description_info_frame.sv
+++ b/src/source_product_description_info_frame.sv
@@ -4,8 +4,8 @@
 // See CEA-861-D Section 6.5 page 72 (84 in PDF)
 module source_product_description_info_frame
 #(
-    parameter string VENDOR_NAME,
-    parameter string PRODUCT_DESCRIPTION,
+    parameter bit [8*8-1:0] VENDOR_NAME,
+    parameter bit [8*16-1:0] PRODUCT_DESCRIPTION,
     parameter bit [7:0] SOURCE_DEVICE_INFORMATION
 )
 (

ParseResult:
UPD HdlIdDef@@VENDOR_NAME to VENDOR_NAME
    INS HdlOp@@INDEX to VENDOR_NAME
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlValueInt: 8
                        HdlValueInt: 1
                HdlValueInt: 0

UPD HdlIdDef@@PRODUCT_DESCRIPTION to PRODUCT_DESCRIPTION
    INS HdlOp@@INDEX to PRODUCT_DESCRIPTION
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlOp: SUB
                    list: ops
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlValueInt: 16
                        HdlValueInt: 1
                HdlValueInt: 0

UPD HdlIdDef@@VENDOR_NAME to VENDOR_NAME
    UPD HdlValueId@@string to bit
    MOV HdlValueId@@string to VENDOR_NAME
    HdlValueId: string

UPD HdlIdDef@@PRODUCT_DESCRIPTION to PRODUCT_DESCRIPTION
    UPD HdlValueId@@string to bit
    MOV HdlValueId@@string to PRODUCT_DESCRIPTION
    HdlValueId: string


CommitId: 59d1289cee127e3f4f5e5166a956cf18aa79b2f7
Handle Vivado synthesis errors, fixes #8
--- a/src/source_product_description_info_frame.sv
+++ b/src/source_product_description_info_frame.sv
@@ -27,15 +27,28 @@ logic [7:0] packet_bytes [27:0];
 
 assign packet_bytes[0] = ~(header[23:16] + header[15:8] + header[7:0] + packet_bytes[24] + packet_bytes[23] + packet_bytes[22] + packet_bytes[21] + packet_bytes[20] + packet_bytes[19] + packet_bytes[18] + packet_bytes[17] + packet_bytes[16] + packet_bytes[15] + packet_bytes[14] + packet_bytes[13] + packet_bytes[12] + packet_bytes[11] + packet_bytes[10] + packet_bytes[9] + packet_bytes[8] + packet_bytes[7] + packet_bytes[6] + packet_bytes[5] + packet_bytes[4] + packet_bytes[3] + packet_bytes[2] + packet_bytes[1]);
 
+
+byte vendor_name [0:7];
+byte product_description [0:15];
+
 genvar i;
 generate
+    for (i = 0; i < 8; i++)
+    begin: vendor_to_bytes
+        assign vendor_name[i] = VENDOR_NAME[(7-i+1)*8-1:(7-i)*8];
+    end
+    for (i = 0; i < 8; i++)
+    begin: product_to_bytes
+        assign product_description[i] = PRODUCT_DESCRIPTION[(15-i+1)*8-1:(15-i)*8];
+    end
+
     for (i = 1; i < 9; i++)
     begin: pb_vendor
-        assign packet_bytes[i] = VENDOR_NAME[i - 1] == 8'h30 ? 8'h00 : VENDOR_NAME[i - 1];
+        assign packet_bytes[i] = vendor_name[i - 1] == 8'h30 ? 8'h00 : vendor_name[i - 1];
     end
     for (i = 9; i < LENGTH; i++)
     begin: pb_product
-        assign packet_bytes[i] = PRODUCT_DESCRIPTION[i - 9] == 8'h30 ? 8'h00 : PRODUCT_DESCRIPTION[i - 9];
+        assign packet_bytes[i] = product_description[i - 9] == 8'h30 ? 8'h00 : product_description[i - 9];
     end
     assign packet_bytes[LENGTH] = SOURCE_DEVICE_INFORMATION;
     for (i = 26; i < 28; i++)
ParseResult:
INS HdlIdDef@@vendor_name to objs
HdlIdDef: vendor_name
    HdlOp: INDEX
        list: ops
            type
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 7
    HdlDirection: INTERNAL

INS HdlIdDef@@product_description to objs
HdlIdDef: product_description
    HdlOp: INDEX
        list: ops
            type
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 15
    HdlDirection: INTERNAL

INS HdlStmFor@@ to objs
HdlStmFor
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: i
    HdlOp: LT
        list: ops
            HdlValueId: i
            HdlValueInt: 8
    HdlOp: INCR_POST
        list: ops
            HdlValueId: i
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: VENDOR_NAME
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueId: i
                                                        HdlValueInt: 1
                                                HdlValueInt: 8
                                        HdlValueInt: 1
                                HdlOp: MUL
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueId: i
                                        HdlValueInt: 8
                HdlOp: INDEX
                    list: ops
                        HdlValueId: vendor_name
                        HdlValueId: i

INS HdlStmFor@@ to objs
HdlStmFor
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: i
    HdlOp: LT
        list: ops
            HdlValueId: i
            HdlValueInt: 8
    HdlOp: INCR_POST
        list: ops
            HdlValueId: i
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: PRODUCT_DESCRIPTION
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueInt: 15
                                                                HdlValueId: i
                                                        HdlValueInt: 1
                                                HdlValueInt: 8
                                        HdlValueInt: 1
                                HdlOp: MUL
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 15
                                                HdlValueId: i
                                        HdlValueInt: 8
                HdlOp: INDEX
                    list: ops
                        HdlValueId: product_description
                        HdlValueId: i

UPD HdlStmAssign@@ to 
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: packet_bytes
            HdlValueId: i
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@PRODUCT_DESCRIPTION to product_description
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@PRODUCT_DESCRIPTION to product_description

UPD HdlStmAssign@@ to 
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: packet_bytes
            HdlValueId: i
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@VENDOR_NAME to vendor_name
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@VENDOR_NAME to vendor_name


CommitId: 0141c1a94529439d672e15a8eff2cd935167b741
Fix incorrect IEC 60958 bit order
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -132,7 +132,7 @@ module audio_sample_packet
     parameter SAMPLE_WORD_TYPE = 1'b0,
 
     // 0 = asserted, 1 = not asserted
-    parameter COPYRIGHT_ASSERTED = 1'b1,
+    parameter COPYRIGHT_NOT_ASSERTED = 1'b1,
 
     // 000 = no pre-emphasis, 100 = 50μs/15μs pre-emphasis
     parameter PRE_EMPHASIS = 3'b000,

ParseResult:
UPD HdlIdDef@@COPYRIGHT_ASSERTED to COPYRIGHT_NOT_ASSERTED


CommitId: 0141c1a94529439d672e15a8eff2cd935167b741
Fix incorrect IEC 60958 bit order
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -153,8 +153,8 @@ module audio_sample_packet
     // Normal accuracy: +/- 1000 * 10E-6 (00), High accuracy +/- 50 * 10E-6 (10)
     parameter CLOCK_ACCURACY = 2'b00,
 
-    // Maxmium length of 20 bits (0) or 24 bits (1) followed by a 3-bit representation of the number of bits to subtract (except 101 is actually subtract 0)
-    parameter WORD_LENGTH = 4'b0100,
+    // 3-bit representation of the number of bits to subtract (except 101 is actually subtract 0) with LSB first, followed by maxmium length of 20 bits (0) or 24 bits (1)
+    parameter WORD_LENGTH = 4'b0010,
 
     // Frequency prior to conversion in a consumer playback system. 0000 = not indicated.
     parameter ORIGINAL_SAMPLING_FREQUENCY = 4'b0000,

ParseResult:
UPD HdlIdDef@@WORD_LENGTH to WORD_LENGTH
    UPD HdlValueInt@@0100 to 0010


CommitId: 0141c1a94529439d672e15a8eff2cd935167b741
Fix incorrect IEC 60958 bit order
--- a/modules/hdmi/audio.sv
+++ b/modules/hdmi/audio.sv
@@ -176,13 +176,13 @@ module audio_sample_packet
 );
 
 // Left/right channel for stereo audio
-const bit [3:0] CHANNEL_LEFT = 4'b1000;
-const bit [3:0] CHANNEL_RIGHT = 4'b0100;
+logic [3:0] CHANNEL_LEFT = 4'b0001;
+logic [3:0] CHANNEL_RIGHT = 4'b0010;
 
 localparam CHANNEL_STATUS_LENGTH = 8'd192;
 // See IEC 60958-1 5.1, Table 2
-wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_left = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_LEFT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
-wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_right = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_RIGHT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
+wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_left = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_NOT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_LEFT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
+wire [CHANNEL_STATUS_LENGTH-1:0] channel_status_right = {GRADE, SAMPLE_WORD_TYPE, COPYRIGHT_NOT_ASSERTED, PRE_EMPHASIS, MODE, CATEGORY_CODE, SOURCE_NUMBER, CHANNEL_RIGHT, SAMPLING_FREQUENCY, CLOCK_ACCURACY, 2'b00, WORD_LENGTH, ORIGINAL_SAMPLING_FREQUENCY, 152'd0};
 
 
 logic [7:0] frame_counter = 8'd0;
ParseResult:
UPD HdlIdDef@@CHANNEL_LEFT to CHANNEL_LEFT
    UPD HdlOp@@PARAMETRIZATION to INDEX
    UPD HdlValueInt@@1000 to 0001
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@bit to logic

UPD HdlIdDef@@CHANNEL_RIGHT to CHANNEL_RIGHT
    UPD HdlOp@@PARAMETRIZATION to INDEX
    UPD HdlValueInt@@0100 to 0010
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@bit to logic

UPD HdlIdDef@@frame_counter to frame_counter
    UPD HdlOp@@PARAMETRIZATION to INDEX

UPD HdlIdDef@@channel_status_left to channel_status_left
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@CONCAT to CONCAT
                    UPD HdlOp@@CONCAT to CONCAT
                        UPD HdlOp@@CONCAT to CONCAT
                            UPD HdlOp@@CONCAT to CONCAT
                                UPD HdlOp@@CONCAT to CONCAT
                                    UPD HdlOp@@CONCAT to CONCAT
                                        UPD HdlOp@@CONCAT to CONCAT
                                            UPD HdlOp@@CONCAT to CONCAT
                                                UPD HdlOp@@CONCAT to CONCAT
                                                    UPD HdlValueId@@COPYRIGHT_ASSERTED to COPYRIGHT_NOT_ASSERTED

UPD HdlIdDef@@channel_status_right to channel_status_right
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@CONCAT to CONCAT
                    UPD HdlOp@@CONCAT to CONCAT
                        UPD HdlOp@@CONCAT to CONCAT
                            UPD HdlOp@@CONCAT to CONCAT
                                UPD HdlOp@@CONCAT to CONCAT
                                    UPD HdlOp@@CONCAT to CONCAT
                                        UPD HdlOp@@CONCAT to CONCAT
                                            UPD HdlOp@@CONCAT to CONCAT
                                                UPD HdlOp@@CONCAT to CONCAT
                                                    UPD HdlValueId@@COPYRIGHT_ASSERTED to COPYRIGHT_NOT_ASSERTED


CommitId: 7474848dc43a3a2e9aaaf5192ac72fd193efed10
Finalize first-pass audio implementation, onto debugging
--- a/modules/hdmi/verilog/packet_picker.sv
+++ b/modules/hdmi/verilog/packet_picker.sv
@@ -1,6 +1,6 @@
 module packet_picker (
     input logic clk_packet,
-    input logic [7:0] select,
+    input logic [7:0] packet_type,
     
     input logic [23:0] headers [127:0],
     input logic [55:0] subs [127:0] [3:0],

ParseResult:
UPD HdlIdDef@@select to packet_type


CommitId: 7474848dc43a3a2e9aaaf5192ac72fd193efed10
Finalize first-pass audio implementation, onto debugging
--- a/modules/hdmi/verilog/packet_picker.sv
+++ b/modules/hdmi/verilog/packet_picker.sv
@@ -9,15 +9,15 @@ module packet_picker (
     output logic [23:0] header,
     output logic [55:0] sub [3:0]
 );
-
+// Based on selected packet type, sends clk_packet to the correct packet generator and sends its output back to the HDMI module.
 genvar i;
 generate
     for (i = 0; i < 128; i++) begin: fanout
-        assign clk_packet_fanout[i] = i == select ? clk_packet : 1'b0;
+        assign clk_packet_fanout[i] = i == packet_type ? clk_packet : 1'b0;
     end
 endgenerate
 
-assign header = headers[select];
-assign sub = subs[select];
+assign header = headers[packet_type];
+assign sub = subs[packet_type];
 
 endmodule
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@select to packet_type

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@select to packet_type

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            UPD HdlValueId@@select to packet_type


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -38,7 +38,7 @@ always @(posedge clk_audio)
 logic audio_clock_regeneration_sent = 1'b0;
 logic audio_info_frame_sent = 1'b0;
 
-logic [7:0] remaining;
+logic [6:0] remaining;
 logic packet_enable;
 logic [7:0] packet_type = 0;
 logic [AUDIO_BIT_WIDTH-1:0] audio_out [3:0] [CHANNELS-1:0];

ParseResult:
UPD HdlIdDef@@remaining to remaining
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@7 to 6


CommitId: 3a36106e94cfe693eb493eb53c5cd36218082a80
Revert "Fix synthesis errors"
--- a/top/max10/max10_top.sv
+++ b/top/max10/max10_top.sv
@@ -73,11 +73,10 @@ begin
         else if (remaining > 0)
         begin
             packet_type <= 8'd2;
-            audio_sample_word <= audio_out;
-            // audio_sample_word[3] <= remaining >= 8'd4 ? audio_out[3] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
-            // audio_sample_word[2] <= remaining >= 8'd3 ? audio_out[2] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
-            // audio_sample_word[1] <= remaining >= 8'd2 ? audio_out[1] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
-            // audio_sample_word[0] <= remaining >= 8'd1 ? audio_out[0] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            audio_sample_word[3] <= remaining >= 4 ? audio_out[3] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            audio_sample_word[2] <= remaining >= 3 ? audio_out[2] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            audio_sample_word[1] <= remaining >= 2 ? audio_out[1] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
+            audio_sample_word[0] <= remaining >= 1 ? audio_out[0] : '{AUDIO_BIT_WIDTH'(0), AUDIO_BIT_WIDTH'(0)};
             audio_sample_word_present <= '{remaining >= 4, remaining >= 3, remaining >= 2, remaining >= 1};
             if (remaining > 220)
                 $fatal("Remaining: %d", remaining);
ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GE
                list: ops
                    HdlValueId: remaining
                    HdlValueInt: 3
            HdlOp: INDEX
                list: ops
                    HdlValueId: audio_out
                    HdlValueInt: 2
            list
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 2

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GE
                list: ops
                    HdlValueId: remaining
                    HdlValueInt: 2
            HdlOp: INDEX
                list: ops
                    HdlValueId: audio_out
                    HdlValueInt: 1
            list
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 1

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GE
                list: ops
                    HdlValueId: remaining
                    HdlValueInt: 1
            HdlOp: INDEX
                list: ops
                    HdlValueId: audio_out
                    HdlValueInt: 0
            list
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
                HdlOp: CALL
                    list: ops
                        HdlValueId: AUDIO_BIT_WIDTH
                        HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: audio_sample_word
            HdlValueInt: 0

UPD HdlStmAssign@@ to 
    INS HdlOp@@TERNARY to 
    INS HdlOp@@INDEX to 
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@GE to ops
        HdlOp: GE
            list: ops
                HdlValueId: remaining
                HdlValueInt: 4
        INS HdlOp@@INDEX to ops
        INS list@@ to ops
        list
            HdlOp: CALL
                list: ops
                    HdlValueId: AUDIO_BIT_WIDTH
                    HdlValueInt: 0
            HdlOp: CALL
                list: ops
                    HdlValueId: AUDIO_BIT_WIDTH
                    HdlValueInt: 0
        UPD HdlOp@@INDEX to INDEX
            INS list@@ops to INDEX
            INS HdlValueInt@@3 to ops
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlValueInt@@3 to ops

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@audio_sample_word to 
    HdlValueId: audio_sample_word
    MOV HdlValueId@@audio_out to 
    HdlValueId: audio_out


CommitId: 3e52a1a288ac8b10d663f2106c84eda75e452f39
Make CTS assignment independent of regen packet choice to fix large jitter issue
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -113,24 +140,7 @@ auxiliary_video_information_info_frame #(.VIDEO_ID_CODE(7'(VIDEO_ID_CODE))) auxi
 audio_info_frame audio_info_frame(.header(headers[132]), .sub(subs[132]));
 
 logic audio_info_frame_sent = 1'b0;
-
-localparam SLOWCLK_WIDTH = $clog2(n / 128);
-localparam SLOWCLK_END = SLOWCLK_WIDTH'(n / 128);
-logic [SLOWCLK_WIDTH-1:0] slowclk_counter = SLOWCLK_WIDTH'(1);
-logic wrap = 1'b0;
 logic last_wrap = 1'b0;
-always @(posedge clk_audio)
-begin
-    if (slowclk_counter == SLOWCLK_END)
-    begin
-        slowclk_counter <= SLOWCLK_WIDTH'(0);
-        wrap <= wrap + 1'b1;
-    end
-    else
-        slowclk_counter <= slowclk_counter + SLOWCLK_WIDTH'(1);
-end
-
-logic [CTS_WIDTH-1:0] cts_counter = CTS_WIDTH'(0);
 always @(posedge clk_pixel)
 begin
     if (audio_buffer_rst)

ParseResult:
MOV HdlIdDef@@SLOWCLK_WIDTH to objs
HdlIdDef: SLOWCLK_WIDTH
    HdlOp: CALL
        list: ops
            HdlValueId: $clog2
            HdlOp: DIV
                list: ops
                    HdlValueId: n
                    HdlValueInt: 128
    HdlDirection: INTERNAL

MOV HdlIdDef@@SLOWCLK_END to objs
HdlIdDef: SLOWCLK_END
    HdlOp: CALL
        list: ops
            HdlValueId: SLOWCLK_WIDTH
            HdlOp: DIV
                list: ops
                    HdlValueId: n
                    HdlValueInt: 128
    HdlDirection: INTERNAL

MOV HdlIdDef@@slowclk_counter to objs
HdlIdDef: slowclk_counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: SLOWCLK_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlOp: CALL
        list: ops
            HdlValueId: SLOWCLK_WIDTH
            HdlValueInt: 1
    HdlDirection: INTERNAL

MOV HdlIdDef@@wrap to objs
HdlIdDef: wrap
    HdlValueInt: 0
    HdlDirection: INTERNAL

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_audio
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlValueId: slowclk_counter
                        HdlValueId: SLOWCLK_END
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: SLOWCLK_WIDTH
                                    HdlValueInt: 0
                            HdlValueId: slowclk_counter
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: wrap
                                    HdlValueInt: 1
                            HdlValueId: wrap
                list: elifs
                HdlStmAssign: if_false
                    HdlOp: ADD
                        list: ops
                            HdlValueId: slowclk_counter
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: SLOWCLK_WIDTH
                                    HdlValueInt: 1
                    HdlValueId: slowclk_counter

MOV HdlIdDef@@cts_counter to objs
HdlIdDef: cts_counter
    HdlOp: INDEX
        list: ops
            HdlValueId: logic
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: CTS_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlOp: CALL
        list: ops
            HdlValueId: CTS_WIDTH
            HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlStmAssign@@ to 
    UPD HdlOp@@ADD to NEG_LOG
    UPD HdlOp@@ADD to ADD
        DEL HdlValueInt@@1 from ops


CommitId: 3e52a1a288ac8b10d663f2106c84eda75e452f39
Make CTS assignment independent of regen packet choice to fix large jitter issue
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -151,7 +161,6 @@ begin
         else if (wrap != last_wrap)
         begin
             packet_type <= 8'd1;
-            cts <= (cts_counter / 16 + 15 * cts / 16);
             last_wrap <= wrap;
         end
         else if (!audio_info_frame_sent)

ParseResult:
DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: ADD
        list: ops
            HdlOp: DIV
                list: ops
                    HdlValueId: cts_counter
                    HdlValueInt: 16
            HdlOp: DIV
                list: ops
                    HdlOp: MUL
                        list: ops
                            HdlValueInt: 15
                            HdlValueId: cts
                    HdlValueInt: 16
    HdlValueId: cts


CommitId: 3e52a1a288ac8b10d663f2106c84eda75e452f39
Make CTS assignment independent of regen packet choice to fix large jitter issue
--- a/modules/hdmi/packet_picker.sv
+++ b/modules/hdmi/packet_picker.sv
@@ -162,7 +171,6 @@ begin
         else
             packet_type <= 8'd0;
     end
-    cts_counter <= (packet_enable && samples_remaining == 4'd0 && wrap != last_wrap) ? CTS_WIDTH'(0) : cts_counter + CTS_WIDTH'(1);
 end
 
 endmodule
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@ADD to ops
        HdlOp: ADD
            list: ops
                HdlValueId: cts_counter
                HdlOp: CALL
                    list: ops
                        HdlValueId: CTS_WIDTH
                        HdlValueInt: 1
        MOV HdlOp@@CALL to ops
        HdlOp: CALL
            list: ops
                HdlValueId: CTS_WIDTH
                HdlValueInt: 0
        DEL HdlOp@@AND_LOG from ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: packet_enable
                        HdlOp: EQ
                            list: ops
                                HdlValueId: samples_remaining
                                HdlValueInt: 0
                HdlOp: NE
                    list: ops
                        HdlValueId: wrap
                        HdlValueId: last_wrap
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 
    DEL HdlValueId@@cts_counter from 

DEL HdlStmAssign@@ from body


