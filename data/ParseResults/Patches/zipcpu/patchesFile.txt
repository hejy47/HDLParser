CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -197,7 +197,8 @@ module wbdmac(i_clk, i_rst,
 		begin
 			case(i_swb_addr)
 			2'b00: begin
-				if ((i_swb_data[31:16] == 16'h0fed)
+				if ((i_swb_data[27:16] == 12'hfed)
+					&&(i_swb_data[31:30] == 2'b00)
 						&&(cfg_len_nonzero))
 					dma_state <= `DMA_WAIT;
 				cfg_blocklen_sub_one

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG


CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -206,15 +207,15 @@ module wbdmac(i_clk, i_rst,
 					// i.e. -1;
 				cfg_dev_trigger    <= i_swb_data[14:10];
 				cfg_on_dev_trigger <= i_swb_data[15];
-				cfg_incs  <= ~i_swb_data[29];
-				cfg_incd  <= ~i_swb_data[28];
+				cfg_incs  <= !i_swb_data[29];
+				cfg_incd  <= !i_swb_data[28];
 				end
 			2'b01: begin
 				cfg_len   <=  i_swb_data[(AW-1):0];
 				cfg_len_nonzero <= (|i_swb_data[(AW-1):0]);
 				end
-			2'b10: cfg_raddr <=  i_swb_data[(AW-1):0];
-			2'b11: cfg_waddr <=  i_swb_data[(AW-1):0];
+			2'b10: cfg_raddr <=  i_swb_data[(AW+2-1):2];
+			2'b11: cfg_waddr <=  i_swb_data[(AW+2-1):2];
 			endcase
 		end end
 	`DMA_WAIT: begin

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops


CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -453,8 +454,8 @@ module wbdmac(i_clk, i_rst,
 					cfg_blocklen_sub_one
 					};
 		2'b01: o_swb_data <= { {(DW-AW){1'b0}}, cfg_len  };
-		2'b10: o_swb_data <= { {(DW-AW){1'b0}}, cfg_raddr};
-		2'b11: o_swb_data <= { {(DW-AW){1'b0}}, cfg_waddr};
+		2'b10: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_raddr, 2'b00 };
+		2'b11: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_waddr, 2'b00 };
 		endcase
 
 	// This causes us to wait a minimum of two clocks before starting: One

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@CONCAT to 
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlValueInt@@00 to ops
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
                UPD HdlOp@@SUB to SUB
                    INS HdlOp@@SUB to ops
                    UPD HdlOp@@SUB to SUB
                        INS list@@ops to SUB
                        INS HdlValueInt@@2 to ops


CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -487,5 +488,12 @@ module wbdmac(i_clk, i_rst,
 				&&(i_swb_addr == 2'b00)
 				&&(i_swb_data == 32'hafed0000));
 
+
+	// Make verilator happy
+	// verilator lint_off UNUSED
+	wire	unused;
+	assign	unused = i_swb_cyc;
+	// verilator lint_on  UNUSED
+
 endmodule
 
ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: i_swb_cyc
    HdlValueId: unused


CommitId: 0f9210a972ad27707842ca676ff44ac81350eed8
Two formal changes, still not done.
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -438,6 +438,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	initial	o_pc = 0;
 	initial	o_dcdR = 0;
 	initial	o_dcdA = 0;
+	initial	o_dcdB = 0;
 	always @(posedge i_clk)
 		if (i_ce)
 		begin
ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_dcdB
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -123,12 +123,9 @@ module	ziptimer(i_clk, i_reset, i_ce,
 
 		// If setting auto-reload mode, and the value to other
 		// than zero, set the auto-reload value
-		initial	r_reload_value = 0;
 		always @(posedge i_clk)
-			if (i_reset)
-				r_reload_value <= 0;
-			else if (wb_write)
-				r_reload_value <= i_wb_data[(VW-1):0];
+		if (wb_write)
+			r_reload_value <= i_wb_data[(VW-1):0];
 		assign	reload_value = r_reload_value;
 	end else begin
 		assign	auto_reload = 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@wb_write to 
    HdlValueId: wb_write
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: VW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueId: r_reload_value

UPD HdlStmIf@@body to body
    INS list@@elifs to body

DEL HdlStmProcess@@ from body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_reload_value
                    HdlValueInt: 0
            HdlStmWait:
                list: val

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_reload_value


CommitId: adced841689d59b0d797edb131dcadfde7b22bc0
Fixed issue building rtl/ without OPT_CIS
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -132,6 +132,11 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			: i_instruction;
 	end else begin : CLR_IWORD
 		assign	iword = { 1'b0, i_instruction[30:0] };
+
+		// verilator lint_off UNUSED
+		wire	[15:0]	unused_nxt_half;
+		assign		unused_nxt_half = r_nxt_half;
+		// verilator lint_on  UNUSED
 	end endgenerate
 
 	generate
ParseResult:
INS HdlIdDef@@unused_nxt_half to body
HdlIdDef: unused_nxt_half
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 15
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r_nxt_half
    HdlValueId: unused_nxt_half


CommitId: 3585593cc90e7edca4b8b3469abebe3c7369bb31
Fixed the formal only wires in wbdblpriarb
--- a/rtl/ex/wbdblpriarb.v
+++ b/rtl/ex/wbdblpriarb.v
@@ -131,6 +131,7 @@ module	wbdblpriarb(i_clk, i_reset,
 	output	wire	[(DW-1):0]	o_dat;
 	output	wire	[(DW/8-1):0]	o_sel;
 	input	wire			i_ack, i_stall, i_err;
+`ifdef	FORMAL
 	output	wire	[(F_LGDEPTH-1):0]
 			f_nreqs_a, f_nacks_a, f_outstanding_a,
 			f_nreqs_b, f_nacks_b, f_outstanding_b,

ParseResult:
DEL HdlIdDef@@f_a_outstanding_b from ports
HdlIdDef: f_a_outstanding_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nreqs_a from ports
HdlIdDef: f_b_nreqs_a
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nacks_a from ports
HdlIdDef: f_b_nacks_a
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_outstanding_a from ports
HdlIdDef: f_b_outstanding_a
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nreqs_b from ports
HdlIdDef: f_b_nreqs_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nacks_b from ports
HdlIdDef: f_b_nacks_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_outstanding_b from ports
HdlIdDef: f_b_outstanding_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -60,7 +60,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			i_illegal,
 		o_valid,
 		o_phase, o_illegal,
-		o_pc, o_gie,
+		o_pc,
 		o_dcdR, o_dcdA, o_dcdB, o_I, o_zI,
 		o_cond, o_wF,
 		o_op, o_ALU, o_M, o_DV, o_FP, o_break, o_lock,

ParseResult:
DEL HdlIdDef@@o_gie from ports
HdlIdDef: o_gie
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -75,11 +75,12 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	parameter		ADDRESS_WIDTH=24;
 	parameter	[0:0]	OPT_MPY = 1'b1;
 	parameter	[0:0]	OPT_EARLY_BRANCHING = 1'b1;
-	parameter	[0:0]	OPT_DIVIDE = 1'b1;
+	parameter	[0:0]	OPT_PIPELINED = 1'b0;
+	parameter	[0:0]	OPT_DIVIDE = (OPT_PIPELINED);
 	parameter	[0:0]	OPT_FPU    = 1'b0;
 	parameter	[0:0]	OPT_CIS    = 1'b1;
-	parameter	[0:0]	OPT_LOCK   = 1'b1;
-	parameter	[0:0]	OPT_OPIPE  = 1'b1;
+	parameter	[0:0]	OPT_LOCK   = (OPT_PIPELINED);
+	parameter	[0:0]	OPT_OPIPE  = (OPT_PIPELINED);
 	parameter	[0:0]	OPT_SIM    = 1'b0;
 	localparam		AW = ADDRESS_WIDTH;
 	//

ParseResult:
INS HdlIdDef@@OPT_PIPELINED to params

UPD HdlIdDef@@OPT_PIPELINED to OPT_PIPELINED
    INS HdlOp@@PARAMETRIZATION to OPT_PIPELINED
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    INS HdlDirection@@INTERNAL to OPT_PIPELINED

UPD HdlIdDef@@OPT_DIVIDE to OPT_DIVIDE
    UPD HdlValueInt@@1 to 0
    MOV HdlValueInt@@1 to OPT_DIVIDE
    HdlValueInt: 1

UPD HdlIdDef@@OPT_DIVIDE to OPT_DIVIDE
    INS HdlValueId@@OPT_PIPELINED to OPT_DIVIDE

UPD HdlIdDef@@OPT_LOCK to OPT_LOCK
    INS HdlValueId@@OPT_PIPELINED to OPT_LOCK

UPD HdlIdDef@@OPT_OPIPE to OPT_OPIPE
    INS HdlValueId@@OPT_PIPELINED to OPT_OPIPE

UPD HdlIdDef@@OPT_LOCK to OPT_LOCK
    DEL HdlValueInt@@1 from OPT_LOCK

UPD HdlIdDef@@OPT_OPIPE to OPT_OPIPE
    DEL HdlValueInt@@1 from OPT_OPIPE


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -382,12 +382,14 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 
 	initial	o_illegal = 1'b0;
 	always @(posedge i_clk)
-		if (i_reset)
-			o_illegal <= 1'b0;
-		else if (i_ce)
+		if (i_ce)
 		begin
-			o_illegal <= (i_illegal)&&((!o_phase)||(!o_valid))
-				||((o_illegal)&&(o_phase)&&(o_valid));
+			if (OPT_PIPELINED)
+				o_illegal <= ((i_illegal)
+						&&((!o_phase)||(!o_valid)))
+					||((o_illegal)&&(o_phase)&&(o_valid));
+			else
+				o_illegal <= (i_illegal)&&(!o_phase);
 			if ((!OPT_CIS)&&(i_instruction[`CISBIT]))
 				o_illegal <= 1'b1;
 			if ((!OPT_MPY)&&(w_mpy))

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_ce to 
    HdlValueId: i_ce
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_illegal
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_phase
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_valid
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: o_illegal
                                        HdlValueId: o_phase
                                HdlValueId: o_valid
                HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_instruction
                                HdlValueInt: 31
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_MPY
                        HdlValueId: w_mpy
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_DIVIDE
                        HdlValueId: w_div
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
                    tuple
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: OPT_DIVIDE
                                        HdlValueId: w_div
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdR
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 1
                                        HdlValueInt: 7
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_FPU
                        HdlValueId: w_fpu
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_SIM
                        HdlValueId: w_sim
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_dcdR
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 1
                                HdlValueInt: 7
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_cis_op
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 4
                                                HdlValueInt: 1
                                HdlValueInt: 1101
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_LOCK
                        HdlValueId: w_lock
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_PIPELINED to 
    INS list@@elifs to 

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: OR_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_illegal
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_phase
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_valid
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: o_illegal
                            HdlValueId: o_phase
                    HdlValueId: o_valid
    HdlValueId: o_illegal

INS HdlStmAssign@@if_false to 

UPD HdlStmAssign@@if_false to if_false
    INS HdlValueId@@o_illegal to if_false

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_illegal


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -418,22 +420,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				o_illegal <= 1'b1;
 		end
 
-	initial	o_gie = 0;
-	always @(posedge i_clk)
-	if (i_reset)
-		o_gie <= i_gie;
-	else if (OPT_CIS)
-	begin
-		if ((i_ce)&&(!o_phase))
-			o_gie <= i_gie;
-	end else if (i_ce)
-		o_gie <= i_gie;
-
 	initial	o_pc = 0;
 	always @(posedge i_clk)
-	if (i_reset)
-		o_pc <= 0;
-	else if ((i_ce)&&((o_phase)||(i_pf_valid)))
+	if ((i_ce)&&((o_phase)||(i_pf_valid)))
 	begin
 		o_pc[0] <= 1'b0;
 

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_ce to 
    HdlValueId: i_ce
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_illegal
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_phase
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_valid
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: o_illegal
                                        HdlValueId: o_phase
                                HdlValueId: o_valid
                HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_instruction
                                HdlValueInt: 31
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_MPY
                        HdlValueId: w_mpy
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_DIVIDE
                        HdlValueId: w_div
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
                    tuple
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: OPT_DIVIDE
                                        HdlValueId: w_div
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdR
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 1
                                        HdlValueInt: 7
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_FPU
                        HdlValueId: w_fpu
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_SIM
                        HdlValueId: w_sim
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_dcdR
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 1
                                HdlValueInt: 7
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_cis_op
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 4
                                                HdlValueInt: 1
                                HdlValueInt: 1101
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_LOCK
                        HdlValueId: w_lock
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_ce
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: o_phase
                    HdlValueId: i_pf_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlValueId: o_pc
                        HdlValueInt: 0
            HdlStmIf
                HdlValueId: OPT_CIS
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: iword
                                    HdlValueInt: 31
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlValueId: o_phase
                                        HdlStmAssign: if_true
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: o_pc
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlOp: ADD
                                                                        list: ops
                                                                            HdlValueId: AW
                                                                            HdlValueInt: 1
                                                                    HdlValueInt: 1
                                                    HdlValueInt: 1
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: o_pc
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 1
                                                            HdlValueInt: 1
                                        list: elifs
                                        HdlStmAssign: if_false
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_pc
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlOp: ADD
                                                                                list: ops
                                                                                    HdlValueId: AW
                                                                                    HdlValueInt: 1
                                                                            HdlValueInt: 2
                                                            HdlValueInt: 1
                                                    HdlValueInt: 0
                                            HdlValueId: o_pc
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_pc
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlOp: ADD
                                                                            list: ops
                                                                                HdlValueId: AW
                                                                                HdlValueInt: 1
                                                                        HdlValueInt: 2
                                                        HdlValueInt: 1
                                                HdlValueInt: 00
                                        HdlValueId: o_pc
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_pc
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 1
                                                            HdlValueInt: 2
                                            HdlValueInt: 1
                                    HdlValueInt: 00
                            HdlValueId: o_pc
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

MOV HdlStmWait@@[] to body
HdlStmWait:
    list: val

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_ce
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_phase
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_ce to i_illegal
    DEL list@@elifs from 

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: o_gie
                HdlValueInt: 0
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmProcess@@ from objs

UPD HdlStmIf@@body to body
    DEL HdlValueId@@i_reset from body
    DEL HdlValueId@@OPT_CIS from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    tuple
        HdlValueId: i_ce
        HdlStmAssign
            HdlValueId: i_gie
            HdlValueId: o_gie
    DEL list@@elifs from body

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueId: i_gie
    HdlValueId: o_gie

DEL HdlStmAssign@@if_true from 
HdlStmAssign: if_true
    HdlValueId: i_gie
    HdlValueId: o_gie

DEL HdlStmIf@@ from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_pc


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -460,6 +449,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	initial	o_dcdB = 0;
 	initial	o_DV   = 0;
 	initial	o_FP   = 0;
+	initial	o_lock = 0;
 	always @(posedge i_clk)
 		if (i_ce)
 		begin

ParseResult:
INS HdlStmProcess@@ to objs


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -483,7 +473,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			// o_FP plus these four bits uniquely defines the FP
 			// instruction, o_DV plus the bottom of these defines
 			// the divide, etc.
-			o_op <= ((w_ldi)||(w_noop))? 4'hd : w_cis_op[3:0];
+			o_op <= w_cis_op[3:0];
+			if ((w_ldi)||(w_noop)||(w_lock))
+				o_op <= 4'hd;
 
 			// Default values
 			o_dcdR <= { w_dcdR_cc, w_dcdR_pc, w_dcdR};

ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: w_cis_op
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 3
                        HdlValueInt: 0
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: w_ldi
                HdlValueId: w_noop
        DEL HdlValueInt@@d from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 

UPD HdlStmIf@@ to 
    INS HdlOp@@OR_LOG to 
    INS list@@elifs to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@w_lock to ops

INS HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: d
    HdlValueId: o_op


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -500,7 +492,8 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			// as it doesn't take longer than one clock.  Note
 			// also that this depends upon not setting any registers
 			// or flags, which should already be true.
-			o_ALU  <=  (w_ALU)||(w_ldi)||(w_cmptst)||(w_noop);
+			o_ALU  <=  (w_ALU)||(w_ldi)||(w_cmptst)||(w_noop)
+					||((!OPT_LOCK)&&(w_lock));
 			o_M    <=  w_mem;
 			o_DV   <=  (OPT_DIVIDE)&&(w_div);
 			o_FP   <=  (OPT_FPU)&&(w_fpu);

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_LOCK
                HdlValueId: w_lock

UPD HdlStmAssign@@ to 
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlValueId: w_ALU
                            HdlValueId: w_ldi
                    HdlValueId: w_cmptst
            HdlValueId: w_noop


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -616,6 +609,11 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		assign	o_early_branch_stb = 1'b0;
 		assign	o_branch_pc = {(AW+2){1'b0}};
 		assign	o_ljmp = 1'b0;
+
+		// verilator lint_off UNUSED
+		wire	early_branch_unused;
+		assign	early_branch_unused = w_add;
+		// verilator lint_on  UNUSED
 	end endgenerate
 
 

ParseResult:
INS HdlIdDef@@early_branch_unused to body
HdlIdDef: early_branch_unused
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: w_add
    HdlValueId: early_branch_unused


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -676,14 +672,29 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	end endgenerate
 
 	initial	r_valid = 1'b0;
-	always @(posedge i_clk)
+	generate if (OPT_PIPELINED)
+	begin : GEN_DCD_VALID
+
+		always @(posedge i_clk)
+			if (i_reset)
+				r_valid <= 1'b0;
+			else if (i_ce)
+				r_valid <= ((pf_valid)||(o_phase))&&(!o_ljmp);
+			else if (!i_stalled)
+				r_valid <= 1'b0;
+
+	end else begin : GEN_DCD_VALID
+
+		always @(posedge i_clk)
 		if (i_reset)
 			r_valid <= 1'b0;
-		else if (i_ce)
-			r_valid <= ((pf_valid)||(o_phase))&&(!o_ljmp);
 		else if (!i_stalled)
+			r_valid <= ((pf_valid)||(o_phase))&&(!o_ljmp);
+		else
 			r_valid <= 1'b0;
 
+	end endgenerate
+
 	assign	o_valid = r_valid;
 
 

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_PIPELINED to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlValueId: i_reset
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: r_valid
        list: elifs
            tuple
                HdlValueId: i_ce
                HdlStmAssign
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlValueId: pf_valid
                                    HdlValueId: o_phase
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_ljmp
                    HdlValueId: r_valid
            tuple
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_stalled
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: r_valid

INS HdlStmProcess@@ to body

INS HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: i_reset
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: r_valid
    list: elifs
        tuple
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_stalled
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlValueId: pf_valid
                                HdlValueId: o_phase
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: o_ljmp
                HdlValueId: r_valid
    HdlStmAssign: if_false
        HdlValueInt: 0
        HdlValueId: r_valid


CommitId: 367e7f546ed9b9680bb205c53b8c0c9544584fd7
Fixed the broken flag signals from the multiply when it isn't present
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -70,7 +70,7 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 
 		assign	o_result   = 64'h00;
 		assign	o_busy     = 1'b0;
-		assign	o_valid    = 1'b1;
+		assign	o_valid    = i_stb;
 		always @(*) o_hi = 1'b0; // Not needed
 
 `ifdef	VERILATOR
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlValueId@@i_stb to 

UPD HdlStmAssign@@ to 
    DEL HdlValueInt@@1 from 


CommitId: 99cb25bc62b40a93f460cd60a890c68cb38b74d8
Fixed a bug in zipmmu
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -478,7 +478,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 			r_valid <= (!miss_pending)&&((last_page_valid)
 					&&(r_addr[(DW-3):(DW-2-VAW)]== last_vpage)
 					&&((!last_ro)||(!r_we)));
-			o_addr <= { last_ppage , i_wbm_addr[(LGPGSZW-1):0] };
+			o_addr <= { last_ppage , r_addr[(LGPGSZW-1):0] };
 			r_pending<= (r_pending);
 			s_pending <=(r_pending)&&(!gie_context);
 		end

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@i_wbm_addr to r_addr


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/aux/busdelay.v
+++ b/rtl/aux/busdelay.v
@@ -118,17 +118,22 @@ module	busdelay(i_clk,
 					o_dly_data <= r_data;
 					o_dly_sel  <= r_sel;
 					o_dly_stb  <= 1'b1;
-					r_rtn_stall <= 1'b0;
-					r_stb <= 1'b0;
 				end else begin
 					o_dly_we   <= i_wb_we;
 					o_dly_addr <= i_wb_addr;
 					o_dly_data <= i_wb_data;
 					o_dly_sel  <= i_wb_sel;
 					o_dly_stb  <= i_wb_stb;
-					r_stb <= 1'b0;
-					r_rtn_stall <= 1'b0;
 				end
+
+				r_stb <= 1'b0;
+			end else if (!o_dly_stb)
+			begin
+				o_dly_we   <= i_wb_we;
+				o_dly_addr <= i_wb_addr;
+				o_dly_data <= i_wb_data;
+				o_dly_sel  <= i_wb_sel;
+				o_dly_stb  <= i_wb_stb;
 			end else if ((!r_stb)&&(!o_wb_stall))
 			begin
 				r_we   <= i_wb_we;

ParseResult:
UPD HdlStmIf@@ to 
    INS tuple@@ to elifs
    tuple
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: o_dly_stb
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueId: i_wb_we
                    HdlValueId: o_dly_we
                HdlStmAssign
                    HdlValueId: i_wb_addr
                    HdlValueId: o_dly_addr
                HdlStmAssign
                    HdlValueId: i_wb_data
                    HdlValueId: o_dly_data
                HdlStmAssign
                    HdlValueId: i_wb_sel
                    HdlValueId: o_dly_sel
                HdlStmAssign
                    HdlValueId: i_wb_stb
                    HdlValueId: o_dly_stb

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_stb

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_rtn_stall

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_stb

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_rtn_stall


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/aux/busdelay.v
+++ b/rtl/aux/busdelay.v
@@ -136,15 +141,12 @@ module	busdelay(i_clk,
 				r_data <= i_wb_data;
 				r_sel  <= i_wb_sel;
 				r_stb  <= i_wb_stb;
-
-				r_rtn_stall <= i_wb_stb;
 			end
 
 			if (!i_wb_cyc)
 			begin
 				o_dly_stb <= 1'b0;
 				r_stb <= 1'b0;
-				r_rtn_stall <= 1'b0;
 			end
 
 			o_wb_ack  <= (i_dly_ack)&&(i_wb_cyc)&&(o_dly_cyc);

ParseResult:
UPD HdlStmIf@@ to 
    INS tuple@@ to elifs
    tuple
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: o_dly_stb
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueId: i_wb_we
                    HdlValueId: o_dly_we
                HdlStmAssign
                    HdlValueId: i_wb_addr
                    HdlValueId: o_dly_addr
                HdlStmAssign
                    HdlValueId: i_wb_data
                    HdlValueId: o_dly_data
                HdlStmAssign
                    HdlValueId: i_wb_sel
                    HdlValueId: o_dly_sel
                HdlStmAssign
                    HdlValueId: i_wb_stb
                    HdlValueId: o_dly_stb

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: i_wb_stb
    HdlValueId: r_rtn_stall

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_rtn_stall


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/aux/busdelay.v
+++ b/rtl/aux/busdelay.v
@@ -152,7 +154,7 @@ module	busdelay(i_clk,
 			r_rtn_err <= (i_dly_err)&&(i_wb_cyc)&&(o_dly_cyc);
 		end
 
-		assign	o_wb_stall = r_rtn_stall;
+		assign	o_wb_stall = r_stb;
 		assign	o_wb_err   = r_rtn_err;
 
 	end else begin
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlValueId@@r_rtn_stall to r_stb


CommitId: 3525a5a3376c263ca8f9b4c6a2266999f72ed4ba
Fixed reset address for zipcpu_tb, named generate blocks in zipsys
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -176,7 +176,7 @@ module	zipsystem(i_clk, i_reset,
 		, o_cpu_debug
 `endif
 		);
-	parameter	RESET_ADDRESS=32'h0100000, ADDRESS_WIDTH=30,
+	parameter	RESET_ADDRESS=32'h1000_0000, ADDRESS_WIDTH=30,
 			LGICACHE=10;
 	parameter [0:0]	START_HALTED=1;
 	parameter	EXTERNAL_INTERRUPTS=1,

ParseResult:
UPD HdlIdDef@@RESET_ADDRESS to RESET_ADDRESS
    UPD HdlValueInt@@0100000 to 10000000


CommitId: e7dc0b6b4e95e7c41c6c6e22e6bf462be540150d
Fixed dblfetch to assert o_valid whenever o_illegal
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -188,7 +188,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 		else begin
 			if ((o_valid)&&(i_stall_n))
 				cache_valid[cache_read_addr] <= 1'b0;
-			if ((o_wb_cyc)&&(i_wb_ack))
+			if ((o_wb_cyc)&&((i_wb_ack)||(i_wb_err)))
 				cache_valid[cache_write_addr] <= 1'b1;
 		end
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_wb_err to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_wb_ack to ops
        HdlValueId: i_wb_ack


CommitId: e7dc0b6b4e95e7c41c6c6e22e6bf462be540150d
Fixed dblfetch to assert o_valid whenever o_illegal
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -212,10 +212,10 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 
 	initial	o_illegal = 1'b0;
 	always @(posedge i_clk)
-		if ((o_wb_cyc)&&(i_wb_err))
-			o_illegal <= 1'b1;
-		else if ((!o_wb_cyc)&&((i_new_pc)||(invalid_bus_cycle)))
+		if ((invalid_bus_cycle)||(i_new_pc))
 			o_illegal <= 1'b0;
+		else if ((o_wb_cyc)&&(i_wb_err))
+			o_illegal <= 1'b1;
 
 `ifdef	FORMAL
 //

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlValueId: invalid_bus_cycle
            HdlValueId: i_new_pc

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueInt@@1 to 0

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: o_wb_cyc
            HdlValueId: i_wb_err
    DEL HdlOp@@AND_LOG from 
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_wb_cyc
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: i_new_pc
                    HdlValueId: invalid_bus_cycle

UPD HdlStmAssign@@ to 
    UPD HdlValueInt@@0 to 1


CommitId: af29287d84eeff5eb2ac63b48be6fc5461b4a59b
Fixed some remaining 8-bit byte bugs in wbdmac
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -197,7 +197,8 @@ module wbdmac(i_clk, i_rst,
 		begin
 			case(i_swb_addr)
 			2'b00: begin
-				if ((i_swb_data[31:16] == 16'h0fed)
+				if ((i_swb_data[27:16] == 12'hfed)
+					&&(i_swb_data[31:30] == 2'b00)
 						&&(cfg_len_nonzero))
 					dma_state <= `DMA_WAIT;
 				cfg_blocklen_sub_one

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG


CommitId: af29287d84eeff5eb2ac63b48be6fc5461b4a59b
Fixed some remaining 8-bit byte bugs in wbdmac
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -206,15 +207,15 @@ module wbdmac(i_clk, i_rst,
 					// i.e. -1;
 				cfg_dev_trigger    <= i_swb_data[14:10];
 				cfg_on_dev_trigger <= i_swb_data[15];
-				cfg_incs  <= ~i_swb_data[29];
-				cfg_incd  <= ~i_swb_data[28];
+				cfg_incs  <= !i_swb_data[29];
+				cfg_incd  <= !i_swb_data[28];
 				end
 			2'b01: begin
 				cfg_len   <=  i_swb_data[(AW-1):0];
 				cfg_len_nonzero <= (|i_swb_data[(AW-1):0]);
 				end
-			2'b10: cfg_raddr <=  i_swb_data[(AW-1):0];
-			2'b11: cfg_waddr <=  i_swb_data[(AW-1):0];
+			2'b10: cfg_raddr <=  i_swb_data[(AW+2-1):2];
+			2'b11: cfg_waddr <=  i_swb_data[(AW+2-1):2];
 			endcase
 		end end
 	`DMA_WAIT: begin

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops


CommitId: af29287d84eeff5eb2ac63b48be6fc5461b4a59b
Fixed some remaining 8-bit byte bugs in wbdmac
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -453,8 +454,8 @@ module wbdmac(i_clk, i_rst,
 					cfg_blocklen_sub_one
 					};
 		2'b01: o_swb_data <= { {(DW-AW){1'b0}}, cfg_len  };
-		2'b10: o_swb_data <= { {(DW-AW){1'b0}}, cfg_raddr};
-		2'b11: o_swb_data <= { {(DW-AW){1'b0}}, cfg_waddr};
+		2'b10: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_raddr, 2'b00 };
+		2'b11: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_waddr, 2'b00 };
 		endcase
 
 	// This causes us to wait a minimum of two clocks before starting: One
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@CONCAT to 
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlValueInt@@00 to ops
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
                UPD HdlOp@@SUB to SUB
                    INS HdlOp@@SUB to ops
                    UPD HdlOp@@SUB to SUB
                        INS list@@ops to SUB
                        INS HdlValueInt@@2 to ops


CommitId: 6b5ce16b24c5a46dff375e6bfeedd4631de9c6db
Fixed a nasty early branching long jump bug
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -519,12 +519,18 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				r_ljmp <= 1'b0;
 			else if (i_ce)
 			begin
-				if (o_early_branch_stb)
+				if ((r_ljmp)&&(pf_valid))
+					r_ljmp <= 1'b0;
+				else if (o_early_branch_stb)
 					r_ljmp <= 1'b0;
-				else if ((OPT_CIS)&&(iword[`CISBIT]))
-					r_ljmp <= w_cis_ljmp;
 				else if (pf_valid)
-					r_ljmp <= (w_ljmp);
+				begin
+					if ((OPT_CIS)&&(iword[`CISBIT]))
+						r_ljmp <= w_cis_ljmp;
+					else
+						r_ljmp <= (w_ljmp);
+				end else if ((OPT_CIS)&&(o_phase)&&(iword[`CISBIT]))
+					r_ljmp <= w_cis_ljmp;
 			end
 		assign	o_ljmp = r_ljmp;
 

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@pf_valid to ops
    INS tuple@@ to elifs
    tuple
        HdlValueId: o_early_branch_stb
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_ljmp
    INS HdlValueId@@pf_valid to 
    INS HdlStmBlock@@SEQ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_CIS
                HdlValueId: o_phase
        INS HdlOp@@INDEX to ops
        UPD HdlOp@@INDEX to INDEX
            INS list@@ops to INDEX
            INS HdlValueInt@@31 to ops

UPD HdlStmIf@@ to 
    UPD HdlValueId@@o_early_branch_stb to r_ljmp
    MOV HdlValueId@@o_early_branch_stb to 
    HdlValueId: o_early_branch_stb
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_CIS
            HdlOp: INDEX
                list: ops
                    HdlValueId: iword
                    HdlValueInt: 31
    UPD HdlValueId@@pf_valid to iword
    MOV HdlValueId@@pf_valid to 
    HdlValueId: pf_valid

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueId: w_cis_ljmp
    HdlValueId: r_ljmp

INS HdlStmIf@@ to body

INS HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueId: w_cis_ljmp
    HdlValueId: r_ljmp

UPD HdlStmIf@@ to 
    INS list@@elifs to 

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlValueId: w_ljmp
    HdlValueId: r_ljmp

DEL HdlStmAssign@@ from 
HdlStmAssign
    HdlValueId: w_ljmp
    HdlValueId: r_ljmp


CommitId: 2e9042bf59cebf0d059dcd3653af8d47418b8ad5
Switched default async flag in fwb_ to synchronous
--- a/rtl/ex/fwb_master.v
+++ b/rtl/ex/fwb_master.v
@@ -99,7 +99,7 @@ module	fwb_master(i_clk, i_reset,
 	// command is present in the yosys script.  If clk2fflogic isn't used,
 	// then setting this parameter to zero will eliminate some formal
 	// tests which would then be inappropriate.
-	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b0;
 	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)

ParseResult:
UPD HdlIdDef@@F_OPT_CLK2FFLOGIC to F_OPT_CLK2FFLOGIC
    UPD HdlValueInt@@1 to 0


CommitId: 672e53258a74bd7162e0e2a6e03f77dc93d10dd4
Fixed broken delay branch implementation, following broken formal prop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -139,19 +139,13 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	begin
 		if (OPT_CIS)
 		begin : CIS_EARLY_BRANCHING
-			reg	r_pre_ljmp;
-			always @(posedge i_clk)
-			if ((i_reset)||(o_early_branch))
-				r_pre_ljmp <= 1'b0;
-			else if ((i_ce)&&(i_pf_valid))
-				r_pre_ljmp <= (!o_phase)&&(i_instruction[`CISBIT])
-					&&(i_instruction[14:0] == 15'h7cf8);
-			else if (i_ce)
-				r_pre_ljmp <= 1'b0;
-	
-			assign	w_cis_ljmp = r_pre_ljmp;
+
+			assign	w_cis_ljmp = (iword[31:16] == 16'hfcf8);
+
 		end else begin : NOCIS_EARLY_BRANCH
+
 			assign	w_cis_ljmp = 1'b0;
+
 		end
 
 		assign	w_ljmp = (iword == 32'h7c87c000);

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_EARLY_BRANCHING to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_cis_ljmp
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_ljmp
    DEL HdlValueId@@OPT_EARLY_BRANCHING from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 

INS HdlStmIf@@ to body

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: EQ
        list: ops
            HdlValueId: iword
            HdlValueInt: 7c87c000
    HdlValueId: w_ljmp

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_CIS to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 16
                        HdlValueInt: fcf8
                HdlValueId: w_cis_ljmp
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_cis_ljmp
    DEL HdlValueId@@OPT_CIS from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_instruction
                    HdlValueInt: 31
            DEL HdlOp@@NEG_LOG from ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_phase
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@EQ from ops
        HdlOp: EQ
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_instruction
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 14
                                HdlValueInt: 0
                HdlValueInt: 7cf8
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL HdlValueId@@r_pre_ljmp from 

DEL HdlIdDef@@r_pre_ljmp from body
HdlIdDef: r_pre_ljmp
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

UPD HdlStmProcess@@ to 
    DEL list@@sensitivity from 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    DEL HdlOp@@OR_LOG from body
    HdlOp: OR_LOG
        list: ops
            HdlValueId: i_reset
            HdlValueId: o_early_branch
    DEL HdlOp@@AND_LOG from 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_ce
            HdlValueId: i_pf_valid
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    tuple
        HdlValueId: i_ce
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_pre_ljmp
    DEL list@@elifs from body

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_pre_ljmp

DEL HdlStmAssign@@ from 

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from body

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: r_pre_ljmp
    HdlValueId: w_cis_ljmp

DEL HdlStmIf@@ from body

DEL HdlStmIf@@ from objs


CommitId: 672e53258a74bd7162e0e2a6e03f77dc93d10dd4
Fixed broken delay branch implementation, following broken formal prop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -366,12 +360,25 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		// When no instruction is in the pipe, phase is zero
 		initial	r_phase = 1'b0;
 		always @(posedge i_clk)
-		if ((i_reset)||(o_early_branch)||(w_ljmp_dly))
+		if ((i_reset)||(w_ljmp_dly))
 			r_phase <= 1'b0;
 		else if ((i_ce)&&(i_pf_valid))
-			r_phase <= (o_phase)? 1'b0
-				: ((i_instruction[`CISBIT])&&(i_pf_valid));
-		else if (i_ce)
+		begin
+			if (o_phase)
+				// CIS instructions only have two parts.  On
+				// the second part (o_phase is true), return
+				// back to the first
+				r_phase <= 0;
+			else if ((i_instruction[`CISBIT])&&(w_dcdR_pc)&&(w_wR))
+				// CIS instructions are unconditional.
+				// Therefore, any write to the PC will affect
+				// the PC, and the second half of the
+				// instruction will be irrelevant and may be
+				// ignored.
+				r_phase <= 0;
+			else
+				r_phase <= (i_instruction[`CISBIT]);
+		end else if (i_ce)
 			r_phase <= 1'b0;
 
 		assign	o_phase = r_phase;

ParseResult:
INS HdlStmIf@@ to body

INS HdlStmAssign@@if_false to 

INS HdlStmAssign@@ to 


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -136,9 +136,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 
 	initial	invalid_bus_cycle = 1'b0;
 	always @(posedge i_clk)
-		if (i_reset)
-			invalid_bus_cycle <= 1'b0;
-		else if ((o_wb_cyc)&&(i_new_pc))
+		if ((o_wb_cyc)&&(i_new_pc))
 			invalid_bus_cycle <= 1'b1;
 		else if (!o_wb_cyc)
 			invalid_bus_cycle <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: o_wb_cyc
            HdlValueId: i_new_pc
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 1
    HdlValueId: invalid_bus_cycle

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: invalid_bus_cycle


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -163,14 +163,9 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	reg	[3:0]	r_op;
 	initial	o_wb_we   = 1'b0;
 	initial	o_wb_data = 0;
-	initial	o_wb_sel = 0;
+	initial	o_wb_sel  = 0;
 	always @(posedge i_clk)
-	if (i_reset)
-	begin
-		o_wb_we   <= 0;
-		o_wb_data <= 0;
-		o_wb_sel  <= 0;
-	end else if (i_stb)
+	if (i_stb)
 	begin
 		o_wb_we   <= i_op[0];
 		if (OPT_ZERO_ON_IDLE)

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_stb to 
    HdlValueId: i_stb
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_op
                        HdlValueInt: 0
                HdlValueId: o_wb_we
            HdlStmIf
                HdlValueId: OPT_ZERO_ON_IDLE
                HdlStmBlock: SEQ
                    list: body
                        HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops':}]}]} 
                            HdlStmCaseType: CASEZ
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueInt: 1
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_addr
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlValueInt: 0
                            list: cases
                                tuple
                                    HdlValueInt: 100?
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 15
                                                                HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 101?
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 00
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 15
                                                                HdlValueInt: 0
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1100
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1101
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: CONCAT
                                                    list: ops
                                                        HdlValueInt: 00
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_data
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1110
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: CONCAT
                                                    list: ops
                                                        HdlValueInt: 00
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_data
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1111
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 00
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        HdlValueId: o_wb_data
                            HdlStmAssign: default
                                HdlValueId: i_data
                                HdlValueId: o_wb_data
                list: elifs
                HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops':}]}]} 
                    HdlStmCaseType: CASEZ
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_addr
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 1
                                            HdlValueInt: 0
                    list: cases
                        tuple
                            HdlValueInt: 10??
                            HdlStmAssign
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 2
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_data
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 15
                                                        HdlValueInt: 0
                                HdlValueId: o_wb_data
                        tuple
                            HdlValueInt: 11??
                            HdlStmAssign
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 4
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_data
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 7
                                                        HdlValueInt: 0
                                HdlValueId: o_wb_data
                    HdlStmAssign: default
                        HdlValueId: i_data
                        HdlValueId: o_wb_data
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_addr
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlValueId: AW
                                        HdlValueInt: 1
                                HdlValueInt: 2
                HdlValueId: o_wb_addr
            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops':}]}]} 
                HdlStmCaseType: CASEZ
                HdlOp: CONCAT
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 2
                                        HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                list: cases
                    tuple
                        HdlValueInt: 01??
                        HdlStmAssign
                            HdlValueInt: 1111
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 100?
                        HdlStmAssign
                            HdlValueInt: 1100
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 101?
                        HdlStmAssign
                            HdlValueInt: 0011
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1100
                        HdlStmAssign
                            HdlValueInt: 1000
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1101
                        HdlStmAssign
                            HdlValueInt: 0100
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1110
                        HdlStmAssign
                            HdlValueInt: 0010
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1111
                        HdlStmAssign
                            HdlValueInt: 0001
                            HdlValueId: o_wb_sel
                HdlStmAssign: default
                    HdlValueInt: 1111
                    HdlValueId: o_wb_sel
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 2
                                        HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: r_op
    MOV tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: OPT_ZERO_ON_IDLE
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: o_wb_cyc_gbl
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: o_wb_cyc_lcl
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_we
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_addr
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_data
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_sel
    DEL HdlValueId@@i_reset from body
    DEL HdlStmBlock@@SEQ from body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_we
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_data
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_sel
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -232,14 +227,10 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	assign	o_busy = (r_wb_cyc_gbl)||(r_wb_cyc_lcl);
 
 	always @(posedge i_clk)
-	if (i_reset)
-		o_wreg <= 0;
-	else if (i_stb)
-			o_wreg    <= i_oreg;
+	if (i_stb)
+		o_wreg    <= i_oreg;
 	always @(posedge i_clk)
-	if (i_reset)
-		o_result <= 0;
-	else if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
+	if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
 		o_result <= 32'h0;
 	else begin
 		casez(r_op)

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@i_reset to i_stb
    DEL tuple@@ from elifs
    tuple
        HdlValueId: i_stb
        HdlStmAssign
            HdlValueId: i_oreg
            HdlValueId: o_wreg

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_ZERO_ON_IDLE
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wb_ack
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueId@@i_oreg to if_true

UPD HdlStmAssign@@if_true to if_true
    DEL HdlValueInt@@0 from if_true

DEL HdlStmAssign@@ from 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_result


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -287,14 +278,24 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 		always @(*)
 			{ lock_gbl, lock_lcl } = 2'b00;
+
+		// Make verilator happy
+		// verilator lint_off UNUSED
+		wire	[2:0]	lock_unused;
+		assign	lock_unused = { i_lock, lock_gbl, lock_lcl };
+		// verilator lint_on  UNUSED
+
 	end endgenerate
 
+`ifdef	VERILATOR
+	always @(posedge i_clk)
+	if ((r_wb_cyc_gbl)||(r_wb_cyc_lcl))
+		assert(!i_stb);
+`endif
+
 
 	// Make verilator happy
 	// verilator lint_off UNUSED
-	wire	unused;
-	assign	unused = i_lock;
-
 	generate if (AW < 22)
 	begin : TOO_MANY_ADDRESS_BITS
 

ParseResult:
UPD HdlIdDef@@unused to lock_unused

MOV HdlIdDef@@unused to objs
HdlIdDef: unused
    HdlDirection: INTERNAL

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: i_lock
    HdlValueId: unused

UPD HdlStmAssign@@ to 
    INS HdlOp@@CONCAT to 
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlOp@@CONCAT to ops
        INS HdlValueId@@lock_lcl to ops
        UPD HdlOp@@CONCAT to CONCAT
            INS list@@ops to CONCAT
            INS HdlValueId@@lock_gbl to ops

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@unused to lock_unused
    MOV HdlValueId@@i_lock to 
    HdlValueId: i_lock


CommitId: a7e501077e22ac4d6ef05550defeb80c0db4c1cb
Fixed a register use-before-name issue
--- a/rtl/aux/wbdblpriarb.v
+++ b/rtl/aux/wbdblpriarb.v
@@ -107,9 +107,10 @@ module	wbdblpriarb(i_clk, i_rst,
 	//
 	// The CYC logic is here to make certain that, by the time we determine
 	// who the bus owner is, we can do so based upon determined criteria.
+	reg	r_a_owner;
+
 	assign o_cyc_a = ((r_a_owner) ? i_a_cyc_a : i_b_cyc_a);
 	assign o_cyc_b = ((r_a_owner) ? i_a_cyc_b : i_b_cyc_b);
-	reg	r_a_owner;
 	initial	r_a_owner = 1'b1;
 	always @(posedge i_clk)
 		if (i_rst)
ParseResult:
MOV HdlIdDef@@r_a_owner to objs
HdlIdDef: r_a_owner
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL


CommitId: 19112823d4bc5b52b3cfb002cc1d67f9498eb521
Started simplifying the ZipCPU master proof
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -649,14 +649,17 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		// with the current output *may* have a pipeable instruction
 		// following it.
 		// 
-		reg	r_insn_is_pipeable;
 		initial	r_insn_is_pipeable = 1'b0;
 		always @(posedge i_clk)
 		if (i_reset)
 			r_insn_is_pipeable <= 1'b0;
-		else if ((i_ce)&&(!pf_valid)&&(!o_phase))
+		else if ((i_ce)&&((!pf_valid)||(i_illegal))&&(!o_phase))
 			// Pipeline bubble, can't pipe through it
 			r_insn_is_pipeable <= 1'b0;
+		else if (o_ljmp)
+			r_insn_is_pipeable <= 1'b0;
+		else if ((i_ce)&&((!OPT_CIS)&&(i_instruction[`CISBIT])))
+			r_insn_is_pipeable <= 1'b0;
 		else if (i_ce)
 		begin	// This is a valid instruction
 			r_insn_is_pipeable <= (w_mem)&&(w_rB)

ParseResult:
UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: o_ljmp
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_insn_is_pipeable
    INS tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_ce
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_instruction
                                HdlValueInt: 31
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_insn_is_pipeable
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                INS HdlValueId@@i_illegal to ops

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@i_ce to ops
            HdlValueId: i_ce
        UPD HdlOp@@AND_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_ce
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: pf_valid


CommitId: 19112823d4bc5b52b3cfb002cc1d67f9498eb521
Started simplifying the ZipCPU master proof
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -714,6 +717,8 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		assign o_pipe = r_pipe;
 	end else begin
 		assign o_pipe = 1'b0;
+		always @(*)
+			r_insn_is_pipeable = 1'b0;
 	end endgenerate
 
 	initial	r_valid = 1'b0;

ParseResult:
INS HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlOp: ASSIGN
        list: ops
            HdlValueId: r_insn_is_pipeable
            HdlValueInt: 0


CommitId: 149c5914fd804a0b6fee08f5bc3cd4af717fcb9c
Fixed a wrong # of bits bug
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -436,7 +433,10 @@ module wbdmac(i_clk, i_reset,
 	end else
 		last_read_request <= 1'b0;
 
-	wire	[LGMEMLEN:0]	next_nread = nread + 1'b1;
+
+	wire	[(LGMEMLEN):0]	next_nread;
+	assign	next_nread = nread + 1'b1;
+
 	initial	last_read_ack = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@INDEX to INDEX
            MOV list@@ops to INDEX
            list: ops
                HdlValueId: nread
                HdlOp: DOWNTO
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueId: LGMEMLEN
                                HdlValueInt: 1
                        HdlValueInt: 0
            UPD HdlOp@@DOWNTO to CONCAT
            UPD HdlOp@@DOWNTO to DOWNTO
                DEL HdlOp@@SUB from ops
                HdlOp: SUB
                    list: ops
                        HdlValueId: LGMEMLEN
                        HdlValueInt: 1
        DEL HdlOp@@INDEX from ops
        DEL HdlValueId@@cfg_blocklen_sub_one from ops
        DEL list@@ops from EQ

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlValueId@@cfg_blocklen_sub_one to ops

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlValueId@@cfg_blocklen_sub_one to ops


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -360,7 +368,7 @@ module	zipsystem(i_clk, i_rst,
 	assign	cpu_reset = (cmd_reset)||(wdt_reset)||(i_rst);
 
 	wire	cpu_halt, cpu_dbg_stall;
-	assign	cpu_halt = (i_rst)||((cmd_halt)&&(~cmd_step));
+	assign	cpu_halt = (cmd_halt);
 	wire	[31:0]	pic_data;
 	wire	[31:0]	cmd_data;
 	// Values:

ParseResult:
INS HdlStmAssign@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@dbg_cmd_write to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_stb
                HdlValueId: dbg_we

INS HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_dbg_data
                    HdlValueInt: 6
    HdlValueId: cmd_reset

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG to NEG_LOG
        MOV HdlOp@@NEG to ops
        HdlOp: NEG
            list: ops
                HdlValueId: dbg_addr
        DEL HdlOp@@AND_LOG from ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cyc
                        HdlValueId: dbg_stb
                HdlValueId: dbg_we
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL HdlValueId@@dbg_cmd_write from 

DEL HdlStmAssign@@ from objs

DEL HdlStmProcess@@ from objs


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -380,11 +388,11 @@ module	zipsystem(i_clk, i_rst,
 		assign	cmd_data = { {(16-EXTERNAL_INTERRUPTS){1'b0}},
 					i_ext_int,
 				cpu_dbg_cc,	// 4 bits
-				1'b0, cmd_halt, (~cpu_dbg_stall), 1'b0,
+				1'b0, cmd_halt, (!cpu_dbg_stall), 1'b0,
 				pic_data[15], cpu_reset, cmd_addr };
 	else
 		assign	cmd_data = { i_ext_int[15:0], cpu_dbg_cc,
-				1'b0, cmd_halt, (~cpu_dbg_stall), 1'b0,
+				1'b0, cmd_halt, (!cpu_dbg_stall), 1'b0,
 				pic_data[15], cpu_reset, cmd_addr };
 	endgenerate
 

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_dbg_data
                    HdlValueInt: 11
    HdlValueId: cmd_clear_pf_cache

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_rst to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: dbg_cmd_write
        HdlStmAssign
            HdlOp: AND_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_dbg_data
                            HdlValueInt: 10
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_dbg_data
                                    HdlValueInt: 8
            HdlValueId: cmd_halt

DEL HdlStmAssign@@body from 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG
                        list: ops
                            HdlValueId: i_rst
                    HdlValueId: dbg_cmd_write
            HdlOp: OR_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_idata
                            HdlValueInt: 11
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_idata
                            HdlValueInt: 6
    HdlValueId: cmd_clear_pf_cache

DEL HdlStmProcess@@ from objs


CommitId: 617962e5b5650b91cf9ddd5eee48549211d0f250
Removed the debug wires from the double-fetch core
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -62,7 +62,7 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 			i_stall_n, i_pc, o_i, o_pc, o_v,
 		o_wb_cyc, o_wb_stb, o_wb_we, o_wb_addr, o_wb_data,
 			i_wb_ack, i_wb_stall, i_wb_err, i_wb_data,
-		o_illegal, o_dbg);
+		o_illegal);
 	parameter		ADDRESS_WIDTH=32, AUX_WIDTH = 1;
 	localparam		AW=ADDRESS_WIDTH;
 	input				i_clk, i_rst, i_new_pc, i_clear_cache,

ParseResult:
DEL HdlIdDef@@o_dbg from ports
HdlIdDef: o_dbg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: 617962e5b5650b91cf9ddd5eee48549211d0f250
Removed the debug wires from the double-fetch core
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -230,5 +229,4 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 		else if ((!o_wb_cyc)&&((i_new_pc)||(invalid_bus_cycle)))
 			o_illegal <= 1'b0;
 
-	assign	o_dbg = { last_stb, last_ack };
 endmodule
ParseResult:
DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: CONCAT
        list: ops
            HdlValueId: last_stb
            HdlValueId: last_ack
    HdlValueId: o_dbg


CommitId: b3bee662b54a54d5b9ff27379e52d79b1e7f0a88
Fixed interrupt/op_phase hanging bug in zipcpu.v, update cpyright yr
--- a/bench/formal/abs_div.v
+++ b/bench/formal/abs_div.v
@@ -118,8 +118,10 @@ module	abs_div(i_clk, i_reset, i_wr, i_signed, i_numerator, i_denominator,
 	(* anyseq *)	reg	[(BW-1):0]	any_quotient;
 	(* anyseq *)	reg	[5:0]		wait_time;
 
-	assign o_err      = any_err;
-	assign o_quotient = any_quotient;
+	always @(*)
+		o_err      = any_err;
+	always @(*)
+		o_quotient = any_quotient;
 
 	reg	[5:0]	r_busy_counter;
 
ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@any_err to o_err
    MOV HdlValueId@@any_err to 
    HdlValueId: any_err
    UPD HdlValueId@@o_err to any_err
    MOV HdlValueId@@o_err to 
    HdlValueId: o_err

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@any_quotient to o_quotient
    MOV HdlValueId@@any_quotient to 
    HdlValueId: any_quotient
    UPD HdlValueId@@o_quotient to any_quotient
    MOV HdlValueId@@o_quotient to 
    HdlValueId: o_quotient

DEL HdlStmAssign@@ from objs

DEL HdlStmAssign@@ from objs


CommitId: 097c79344952c2caef83f057348d1d18ab2dd445
Default to use OPT_DCACHE in ZipSystem
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -178,7 +178,7 @@ module	zipsystem(i_clk, i_reset,
 		);
 	parameter	RESET_ADDRESS=32'h1000_0000, ADDRESS_WIDTH=30,
 			LGICACHE=10,
-			LGDCACHE=0;	// Set to zero for no data cache
+			LGDCACHE=12;	// Set to zero for no data cache
 	parameter [0:0]	START_HALTED=1;
 	parameter	EXTERNAL_INTERRUPTS=1,
 `ifdef	OPT_MULTIPLY
ParseResult:
UPD HdlIdDef@@LGDCACHE to LGDCACHE
    UPD HdlValueInt@@0 to 12


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -118,6 +118,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	wire		w_wR, w_rA, w_rB, w_wR_n;
 	wire		w_ljmp, w_ljmp_dly, w_cis_ljmp;
 	wire	[31:0]	iword;
+	wire		pf_valid;
+
+	assign	pf_valid = (i_pf_valid)&&(!o_early_branch_stb);
 
 
 	reg	[15:0]	r_nxt_half;

ParseResult:
INS HdlIdDef@@pf_valid to objs
HdlIdDef: pf_valid
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_pf_valid
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_early_branch_stb
    HdlValueId: pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -367,7 +370,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		always @(posedge i_clk)
 		if ((i_reset)||(w_ljmp_dly))
 			r_phase <= 1'b0;
-		else if ((i_ce)&&(i_pf_valid))
+		else if ((i_ce)&&(pf_valid))
 		begin
 			if (o_phase)
 				// CIS instructions only have two parts.  On

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -510,7 +513,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 
 `ifdef	VERILATOR
 			// Support the SIM instruction(s)
-			o_sim <= w_sim;
+			o_sim <= (w_sim)||(w_noop);
 `else
 			o_sim <= 1'b0;
 `endif

ParseResult:
INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_ljmp

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_CIS
            HdlOp: INDEX
                list: ops
                    HdlValueId: iword
                    HdlValueInt: 31
    HdlStmAssign: if_true
        HdlValueId: w_cis_ljmp
        HdlValueId: r_ljmp
    list: elifs
        tuple
            HdlValueId: i_pf_valid
            HdlStmAssign
                HdlValueId: w_ljmp
                HdlValueId: r_ljmp

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_ljmp

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to elifs
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueInt: 31
                HdlStmAssign: if_true
                    HdlValueId: w_cis_ljmp
                    HdlValueId: r_ljmp
                list: elifs
                    tuple
                        HdlValueId: i_pf_valid
                        HdlStmAssign
                            HdlValueId: w_ljmp
                            HdlValueId: r_ljmp

UPD HdlStmIf@@ to 
    MOV tuple@@ to elifs
    tuple
        HdlValueId: i_pf_valid
        HdlStmAssign
            HdlValueId: w_ljmp
            HdlValueId: r_ljmp
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_CIS
            HdlOp: INDEX
                list: ops
                    HdlValueId: iword
                    HdlValueInt: 31
    UPD HdlValueId@@i_pf_valid to pf_valid
    DEL list@@elifs from 

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueId: w_cis_ljmp
    HdlValueId: r_ljmp


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -530,9 +533,11 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				r_ljmp <= 1'b0;
 			else if (i_ce)
 			begin
-				if ((OPT_CIS)&&(iword[`CISBIT]))
+				if (o_early_branch_stb)
+					r_ljmp <= 1'b0;
+				else if ((OPT_CIS)&&(iword[`CISBIT]))
 					r_ljmp <= w_cis_ljmp;
-				else if (i_pf_valid)
+				else if (pf_valid)
 					r_ljmp <= (w_ljmp);
 			end
 		assign	o_ljmp = r_ljmp;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -544,7 +549,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		begin
 			r_early_branch     <= 1'b0;
 			r_early_branch_stb <= 1'b0;
-		end else if ((i_ce)&&(i_pf_valid))
+		end else if ((i_ce)&&(pf_valid))
 		begin
 			if (r_ljmp)
 			begin

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -623,7 +628,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		if (i_reset)
 			r_pipe <= 1'b0;
 		else if (i_ce)
-			r_pipe <= (r_valid)&&((i_pf_valid)||(o_phase))
+			r_pipe <= (r_valid)&&((pf_valid)||(o_phase))
 				// Both must be memory operations
 				&&(w_mem)&&(o_M)
 				// Both must be writes, or both stores

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        UPD HdlOp@@AND_LOG to AND_LOG
                            UPD HdlOp@@AND_LOG to AND_LOG
                                UPD HdlOp@@AND_LOG to AND_LOG
                                    UPD HdlOp@@AND_LOG to AND_LOG
                                        UPD HdlOp@@AND_LOG to AND_LOG
                                            UPD HdlOp@@AND_LOG to AND_LOG
                                                UPD HdlOp@@OR_LOG to OR_LOG
                                                    UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: 1356820763f1b96e58bea4bc3c5e731c1349e867
Fixed some Verilator lint issues with the (formally proven) DMA
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -436,6 +436,7 @@ module wbdmac(i_clk, i_reset,
 	end else
 		last_read_request <= 1'b0;
 
+	wire	[LGMEMLEN:0]	next_nread = nread + 1'b1;
 	initial	last_read_ack = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        INS HdlOp@@INDEX to ops
        UPD HdlOp@@INDEX to INDEX
            INS list@@ops to INDEX
            INS HdlOp@@DOWNTO to ops
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: LGMEMLEN
                            HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@ADD to ADD
            UPD HdlValueId@@nread to next_nread
            MOV HdlValueId@@nread to ops
            HdlValueId: nread
            DEL HdlValueInt@@1 from ops
            DEL list@@ops from ADD
        DEL HdlOp@@ADD from ops


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -100,17 +100,10 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 		begin
 			o_wb_cyc <= 1'b0;
 			o_wb_stb <= 1'b0;
-			// last_stb <= 1'b0;
-			// last_ack <= 1'b0;
 		end else if (o_wb_cyc)
 		begin
 			if ((o_wb_stb)&&(!i_wb_stall))
-			begin
-				// last_stb <= 1'b1;
 				o_wb_stb <= !last_stb;
-			end
-			// if (i_wb_ack)
-			//	last_ack <= 1'b1;
 			if ((i_new_pc)||(invalid_bus_cycle))
 				o_wb_stb <= 1'b0;
 

ParseResult:
UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: last_stb
    HdlValueId: o_wb_stb

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -210,7 +205,7 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 
 	initial	o_i = {(32){1'b1}};
 	always @(posedge i_clk)
-		if ((i_stall_n)&&(o_wb_cyc)&&(i_wb_ack))
+		if (((i_stall_n)||(!o_v))&&(o_wb_cyc)&&(i_wb_ack))
 			o_i <= i_wb_data;
 		else
 			o_i <= cache[cache_read_addr];
ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@NEG_LOG to ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: o_v

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@i_stall_n to ops
            HdlValueId: i_stall_n


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -90,10 +90,12 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 			LGNLINES=5, // Log of the number of separate cache lines
 			NAUX=5;	// # of aux d-wires to keep aligned w/memops
 	parameter [0:0]	OPT_LOCAL_BUS=1'b1;
+	parameter [0:0]	OPT_PIPE=1'b1;
 	parameter [0:0]	OPT_LOCK=1'b1;
-	localparam 	SDRAM_BIT = 26;
-	localparam	FLASH_BIT = 22;
-	localparam	BLKRAM_BIT= 15;
+	parameter [AW-1:0] 	SDRAM_ADDR  = 0, SDRAM_MASK = 0;
+	parameter [AW-1:0] 	BLKRAM_ADDR = 30'h4000000,
+				BLKRAM_MASK = 30'h4000000;
+	parameter [AW-1:0] 	FLASH_ADDR  = 0, FLASH_MASK  = 0;
 	localparam	AW = ADDRESS_WIDTH; // Just for ease of notation below
 	localparam	CS = LGCACHELEN; // Number of bits in a cache address
 	localparam	LS = CS-LGNLINES; // Bits to spec position w/in cline

ParseResult:
INS HdlIdDef@@OPT_PIPE to params
HdlIdDef: OPT_PIPE
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

INS HdlIdDef@@SDRAM_ADDR to params
HdlIdDef: SDRAM_ADDR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@SDRAM_MASK to params
HdlIdDef: SDRAM_MASK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@BLKRAM_ADDR to params
HdlIdDef: BLKRAM_ADDR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 4000000
    HdlDirection: INTERNAL

INS HdlIdDef@@BLKRAM_MASK to params
HdlIdDef: BLKRAM_MASK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 4000000
    HdlDirection: INTERNAL

INS HdlIdDef@@FLASH_ADDR to params
HdlIdDef: FLASH_ADDR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@FLASH_MASK to params
HdlIdDef: FLASH_MASK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@SDRAM_BIT from objs
HdlIdDef: SDRAM_BIT
    HdlValueInt: 26
    HdlDirection: INTERNAL

DEL HdlIdDef@@FLASH_BIT from objs
HdlIdDef: FLASH_BIT
    HdlValueInt: 22
    HdlDirection: INTERNAL

DEL HdlIdDef@@BLKRAM_BIT from objs
HdlIdDef: BLKRAM_BIT
    HdlValueInt: 15
    HdlDirection: INTERNAL


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -160,10 +162,10 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 					||(last_tag != i_addr[(AW+1):LS+2])
 					||(!c_v[i_cline]);
 	assign	w_cachable = ((!OPT_LOCAL_BUS)||(i_addr[(DW-1):(DW-8)]!=8'hff))
-				&&((!i_lock)||(!OPT_LOCK))
-				&&(((SDRAM_BIT>0)&&(i_addr[SDRAM_BIT]))
-				  ||((FLASH_BIT>0)&&(i_addr[FLASH_BIT]))
-				  ||((BLKRAM_BIT>0)&&(i_addr[BLKRAM_BIT])));
+		&&((!i_lock)||(!OPT_LOCK))
+		&&(((SDRAM_ADDR  != 0)&&((i_addr[AW+1:2] & SDRAM_MASK) ==SDRAM_ADDR))
+		  ||((FLASH_ADDR != 0)&&((i_addr[AW+1:2] & FLASH_MASK) ==FLASH_ADDR))
+		  ||((BLKRAM_ADDR!= 0)&&((i_addr[AW+1:2] & BLKRAM_MASK)==BLKRAM_ADDR)));
 
 	reg	r_cachable, r_svalid, r_dvalid, r_rd, r_cache_miss,
 		r_rd_pending;

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@w_cachable to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NE
                                    list: ops
                                        HdlValueId: SDRAM_ADDR
                                        HdlValueInt: 0
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_addr
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: ADD
                                                                    list: ops
                                                                        HdlValueId: AW
                                                                        HdlValueInt: 1
                                                                HdlValueInt: 2
                                                HdlValueId: SDRAM_MASK
                                        HdlValueId: SDRAM_ADDR
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NE
                                    list: ops
                                        HdlValueId: FLASH_ADDR
                                        HdlValueInt: 0
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_addr
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: ADD
                                                                    list: ops
                                                                        HdlValueId: AW
                                                                        HdlValueInt: 1
                                                                HdlValueInt: 2
                                                HdlValueId: FLASH_MASK
                                        HdlValueId: FLASH_ADDR
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NE
                            list: ops
                                HdlValueId: BLKRAM_ADDR
                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_addr
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: ADD
                                                            list: ops
                                                                HdlValueId: AW
                                                                HdlValueInt: 1
                                                        HdlValueInt: 2
                                        HdlValueId: BLKRAM_MASK
                                HdlValueId: BLKRAM_ADDR


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -220,19 +222,21 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 		//
 		// Some preliminaries that needed to be calculated on the first
 		// clock
+		if ((!o_pipe_stalled)&&(!r_rd_pending))
+			r_addr <= i_addr[(AW+1):2];
 		if (!o_busy)
 		begin
 			r_iv   <= c_v[i_cline];
 			r_itag <= c_vtags[i_cline];
-			r_addr <= i_addr[(AW+1):2];
 			r_cachable <= (!i_op[0])&&(w_cachable)&&(i_pipe_stb);
 			o_wreg <= i_oreg;
 			r_rd_pending <= (i_pipe_stb)&&(!i_op[0]);
 		end else begin
 			r_iv   <= c_v[r_cline];
 			r_itag <= c_vtags[r_cline];
-			r_rd_pending <= (r_rd_pending)&&((r_itag != r_ctag)
-				||(!r_iv)||(!r_cachable))&&(!r_svalid);
+			r_rd_pending <= (r_rd_pending)&&(!r_svalid)
+					&&(!r_dvalid)
+					&&((r_cachable)||(!i_wb_ack));
 		end
 		r_rd <= (i_pipe_stb)&&(!i_op[0]);
 		// r_itag contains the tag we didn't have available to us on the

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_pipe_stalled
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: r_rd_pending
    INS list@@elifs to 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: r_cachable
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_wb_ack

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                MOV list@@ops to OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NE
                                list: ops
                                    HdlValueId: r_itag
                                    HdlValueId: r_ctag
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: r_iv
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_cachable
                UPD HdlOp@@OR_LOG to AND_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@NE to NE
                        UPD HdlValueId@@r_itag to r_rd_pending
                        MOV HdlValueId@@r_itag to ops
                        HdlValueId: r_itag
                        DEL HdlValueId@@r_ctag from ops
                        DEL list@@ops from NE
                    DEL HdlOp@@NE from ops
                    DEL HdlOp@@NEG_LOG from ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_iv
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@r_cachable to r_dvalid
            DEL HdlValueId@@r_rd_pending from ops
            DEL HdlOp@@OR_LOG from ops
            DEL list@@ops from AND_LOG
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: r_svalid


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -295,8 +299,9 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 		endcase
 	end
 
-	reg	[1:0]	state;
-
+	reg			set_vflag;
+	reg	[1:0]		state;
+	reg	[LS+1:0]	npending;
 	reg	[(CS-1):0]	wr_addr;
 
 	initial	r_wb_cyc_gbl = 0;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: stb
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -321,16 +327,18 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 		last_line_stb <= 1'b0;
 		end_of_line <= 1'b0;
 		state <= `DC_IDLE;
-		last_ack <= 1'b0;
 		cyc <= 1'b0;
+		stb <= 1'b0;
 		state <= `DC_IDLE;
+		set_vflag <= 1'b0;
 	end else begin
 		// By default, update the cache from the write 1-clock ago
 		// c_wr <= (wr_cstb)&&(wr_wtag == wr_vtag);
 		// c_waddr <= wr_addr[(CS-1):0];
 		c_wr <= 0;
 
-		if ((c_wr)&&(!cyc))
+		set_vflag <= 1'b0;
+		if ((!cyc)&&(set_vflag))
 			c_v[c_waddr[(CS-1):LS]] <= 1'b1;
 
 		wr_cstb <= 1'b0;

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: set_vflag

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        DEL HdlValueId@@c_wr from ops


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -450,11 +455,7 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 			c_waddr <= ((i_wb_ack)?(c_waddr+1'b1):c_waddr);
 			c_wsel  <= 4'hf;
 
-			if (i_wb_ack)
-				last_ack <= last_ack || (&wr_addr[LS-1:1]);
-			else
-				last_ack <= last_ack || (&wr_addr[LS-1:0]);
-
+			set_vflag <= 1'b1;
 			if ((i_wb_ack)&&(!end_of_line))
 				c_vtags[r_addr[(CS-1):LS]]
 						<= r_addr[(AW-1):LS];

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: stb


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -512,13 +515,16 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 
 			wr_cstb  <= (stb)&&(!i_wb_stall)&&(in_cache);
 
-			if ((stb)&&(!i_wb_stall)&&(i_pipe_stb))
+			if ((stb)&&(!i_wb_stall))
 				o_wb_addr <= i_addr[(AW+1):2];
 
-			if (((i_wb_ack)&&(last_ack))||(i_wb_err))
+			if (((i_wb_ack)&&(last_ack)
+						&&((!OPT_PIPE)||(!i_pipe_stb)))
+				||(i_wb_err))
 			begin
 				state        <= `DC_IDLE;
 				cyc          <= 1'b0;
+				stb          <= 1'b0;
 				r_wb_cyc_gbl <= 1'b0;
 				r_wb_cyc_lcl <= 1'b0;
 				o_wb_stb_gbl <= 1'b0;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: i_reset
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: OPT_PIPE
                                HdlValueId: i_wb_err
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: cyc
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: i_pipe_stb
                HdlOp: EQ
                    list: ops
                        HdlValueId: state
                        HdlValueInt: 11
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: npending
        list: elifs
        HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]} 
            HdlStmCaseType: CASE
            HdlOp: CONCAT
                list: ops
                    HdlValueId: i_pipe_stb
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: cyc
                            HdlValueId: i_wb_ack
            list: cases
                tuple
                    HdlValueInt: 01
                    HdlStmAssign
                        HdlOp: SUB
                            list: ops
                                HdlValueId: npending
                                HdlValueInt: 1
                        HdlValueId: npending
                tuple
                    HdlValueInt: 10
                    HdlStmAssign
                        HdlOp: ADD
                            list: ops
                                HdlValueId: npending
                                HdlValueInt: 1
                        HdlValueId: npending
            HdlStmBlock: SEQ
                list: body

UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@OR_LOG to ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: OPT_PIPE
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_pipe_stb

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: stb

UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_wb_ack
                HdlValueId: last_ack


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -622,7 +661,13 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 	// to be the last_noncachable_ack.
 
 
-	assign o_pipe_stalled= o_busy;
+	always @(*)
+	if (OPT_PIPE)
+		o_pipe_stalled = (cyc)&&((!o_wb_we)||(i_wb_stall))
+					||(r_rd_pending)||(r_svalid)||(r_dvalid)
+					||(o_valid);
+	else
+		o_pipe_stalled = o_busy;
 
 	reg	lock_gbl, lock_lcl;
 	initial	lock_gbl = 0;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlStmIf: body
        HdlValueId: OPT_PIPE
        HdlOp: ASSIGN
            list: ops
                HdlValueId: o_pipe_stalled
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: OR_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlValueId: cyc
                                                        HdlOp: OR_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: o_wb_we
                                                                HdlValueId: i_wb_stall
                                                HdlValueId: r_rd_pending
                                        HdlValueId: r_svalid
                                HdlValueId: r_dvalid
                        HdlValueId: o_valid
        list: elifs
        HdlOp: ASSIGN
            list: ops
                HdlValueId: o_pipe_stalled
                HdlValueId: o_busy


CommitId: d511239e19be8fcc7f340a64554ea93699637e62
Updated pipemem with formal differences
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -109,16 +109,24 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 	always @(posedge i_clk)
 		fifo_oreg[wraddr] <= { i_oreg, i_op[2:1], i_addr[1:0] };
 
+	initial	wraddr = 0;
 	always @(posedge i_clk)
-		if ((i_reset)||((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
+	if (i_reset)
+		wraddr <= 0;
+	else if (((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
 			wraddr <= 0;
-		else if (i_pipe_stb)
-			wraddr <= wraddr + 1'b1;
+	else if (i_pipe_stb)
+		wraddr <= wraddr + 1'b1;
+
+	initial	rdaddr = 0;
 	always @(posedge i_clk)
-		if ((i_reset)||((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
-			rdaddr <= 0;
-		else if ((i_wb_ack)&&(cyc))
-			rdaddr <= rdaddr + 1'b1;
+	if (i_reset)
+		rdaddr <= 0;
+	else if (((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
+		rdaddr <= 0;
+	else if ((i_wb_ack)&&(cyc))
+		rdaddr <= rdaddr + 1'b1;
+
 	assign	nxt_rdaddr = rdaddr + 1'b1;
 
 	wire	gbl_stb, lcl_stb, lcl_bus;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: wraddr
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: rdaddr
                    HdlValueInt: 0
            HdlStmWait:
                list: val

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: i_reset
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_wb_err
                        HdlValueId: cyc
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_pipe_stb
                HdlValueId: misaligned
        DEL list@@ops from OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            DEL HdlValueId@@i_reset from ops
    DEL HdlOp@@OR_LOG from body

INS HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: wraddr

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: i_reset
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_wb_err
                        HdlValueId: cyc
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_pipe_stb
                HdlValueId: misaligned
        DEL list@@ops from OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            DEL HdlValueId@@i_reset from ops
    DEL HdlOp@@OR_LOG from body

INS HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: rdaddr


CommitId: d511239e19be8fcc7f340a64554ea93699637e62
Updated pipemem with formal differences
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -147,15 +155,9 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 			begin
 				o_wb_stb_gbl <= 1'b0;
 				o_wb_stb_lcl <= 1'b0;
-			// end else if ((i_pipe_stb)&&(!i_wb_stall))
-			// begin
-				// o_wb_addr <= i_addr[(AW-1):0];
-				// o_wb_data <= i_data;
 			end
 
 			if (((i_wb_ack)&&(nxt_rdaddr == wraddr)
-					&&(!o_wb_stb_gbl)
-					&&(!o_wb_stb_lcl)
 					&&((!i_pipe_stb)||(misaligned)))
 				||(i_wb_err))
 			begin

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to OR_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_ack
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: nxt_rdaddr
                                            HdlValueId: wraddr
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_wb_stb_gbl
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: o_wb_stb_lcl
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@o_wb_stb_lcl to i_wb_err
                    MOV HdlValueId@@o_wb_stb_lcl to ops
                    HdlValueId: o_wb_stb_lcl
                    DEL list@@ops from NEG_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    DEL HdlOp@@NEG_LOG from ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: o_wb_stb_gbl
                DEL HdlOp@@NEG_LOG from ops
            MOV HdlOp@@OR_LOG to ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_pipe_stb
                    HdlValueId: misaligned
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlValueId@@i_wb_err from ops
        DEL list@@ops from OR_LOG
    DEL HdlOp@@OR_LOG from 


CommitId: d511239e19be8fcc7f340a64554ea93699637e62
Updated pipemem with formal differences
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -217,9 +217,16 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 
 	initial	o_valid = 1'b0;
 	always @(posedge i_clk)
+	if (i_reset)
+		o_valid <= 1'b0;
+	else
 		o_valid <= (cyc)&&(i_wb_ack)&&(!o_wb_we);
+
 	initial	o_err = 1'b0;
 	always @(posedge i_clk)
+	if (i_reset)
+		o_err <= 1'b0;
+	else
 		o_err <= ((cyc)&&(i_wb_err))||((i_pipe_stb)&&(misaligned));
 	assign	o_busy = cyc;
 

ParseResult:
INS HdlStmIf@@body to 

INS HdlStmIf@@body to 

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_valid

UPD HdlStmAssign@@body to if_false

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: cyc
                    HdlValueId: i_wb_ack
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_wb_we
    HdlValueId: o_valid

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_err

UPD HdlStmAssign@@body to if_false

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: OR_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: cyc
                    HdlValueId: i_wb_err
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_pipe_stb
                    HdlValueId: misaligned
    HdlValueId: o_err


CommitId: dd4e68fc843052024ab4b2ea10830416a3f87e9d
Simplified ZipBones dbg interface, fixed ack on cyc bug
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -107,35 +113,30 @@ module	zipbones(i_clk, i_rst,
 	reg		cmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;
 	reg	[4:0]	cmd_addr;
 	wire	[3:0]	cpu_dbg_cc;
-	assign	dbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);
+	assign	dbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(!i_dbg_addr);
 	//
 	// Always start us off with an initial reset
 	//
 	initial	cmd_reset = 1'b1;
 	always @(posedge i_clk)
-		cmd_reset <= ((dbg_cmd_write)&&(i_dbg_data[6]));
+		cmd_reset <= ((dbg_cmd_write)&&(i_dbg_data[`RESET_BIT]));
 	//
 	initial	cmd_halt  = START_HALTED;
 	always @(posedge i_clk)
 		if (i_rst)
-			cmd_halt <= (START_HALTED == 1)? 1'b1 : 1'b0;
+			cmd_halt <= (START_HALTED);
 		else if (dbg_cmd_write)
-			cmd_halt <= ((i_dbg_data[10])||(i_dbg_data[8]));
+			cmd_halt <= ((i_dbg_data[`HALT_BIT])&&(!i_dbg_data[`STEP_BIT]));
 		else if ((cmd_step)||(cpu_break))
 			cmd_halt  <= 1'b1;
 
 	initial	cmd_clear_pf_cache = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
-			cmd_clear_pf_cache <= 1'b0;
-		else if (dbg_cmd_write)
-			cmd_clear_pf_cache <= i_dbg_data[11];
-		else
-			cmd_clear_pf_cache <= 1'b0;
+		cmd_clear_pf_cache <= (dbg_cmd_write)&&(i_dbg_data[`CLEAR_CACHE_BIT]);
 	//
 	initial	cmd_step  = 1'b0;
 	always @(posedge i_clk)
-		cmd_step <= (dbg_cmd_write)&&(i_dbg_data[8]);
+		cmd_step <= (dbg_cmd_write)&&(i_dbg_data[`STEP_BIT]);
 	//
 	initial	cmd_addr = 5'h0;
 	always @(posedge i_clk)

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG to NEG_LOG


CommitId: dd4e68fc843052024ab4b2ea10830416a3f87e9d
Simplified ZipBones dbg interface, fixed ack on cyc bug
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -146,7 +147,7 @@ module	zipbones(i_clk, i_rst,
 	assign	cpu_reset = (cmd_reset)||(i_rst);
 
 	wire	cpu_halt, cpu_dbg_stall;
-	assign	cpu_halt = (i_rst)||((cmd_halt)&&(~cmd_step));
+	assign	cpu_halt = (cmd_halt);
 	wire	[31:0]	cmd_data;
 	// Values:
 	//	0x0003f -> cmd_addr mask

ParseResult:
UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            MOV HdlValueId@@START_HALTED to ops
            HdlValueId: START_HALTED
            DEL HdlValueInt@@1 from ops
            DEL list@@ops from EQ
        DEL HdlOp@@EQ from ops
        DEL HdlValueInt@@1 from ops
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from if_true

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to AND_LOG
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: i_dbg_data
                HdlValueInt: 8

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG


CommitId: dd4e68fc843052024ab4b2ea10830416a3f87e9d
Simplified ZipBones dbg interface, fixed ack on cyc bug
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -161,7 +162,7 @@ module	zipbones(i_clk, i_rst,
 	//	0x10000 -> External interrupt line is high
 	assign	cmd_data = { 7'h00, 8'h00, i_ext_int,
 			cpu_dbg_cc,
-			1'b0, cmd_halt, (~cpu_dbg_stall), 1'b0,
+			1'b0, cmd_halt, (!cpu_dbg_stall), 1'b0,
 			1'b0, cpu_reset, 1'b0, cmd_addr };
 
 	//

ParseResult:
UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: i_dbg_data
            HdlValueInt: 11
    HdlValueId: cmd_clear_pf_cache

UPD HdlStmAssign@@body to body
    INS HdlOp@@AND_LOG to body

UPD HdlStmIf@@body to body
    UPD list@@elifs to ops
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlValueId: dbg_cmd_write
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_dbg_data
                        HdlValueInt: 11
                HdlValueId: cmd_clear_pf_cache
    MOV HdlValueId@@dbg_cmd_write to 
    HdlValueId: dbg_cmd_write
    DEL tuple@@ from elifs
    DEL HdlValueId@@i_rst from body

UPD HdlStmAssign@@ to 
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_dbg_data
            HdlValueInt: 11

DEL HdlStmIf@@body from 


CommitId: b2aa9499168f5ab13262ccd0e9c8a4c33b954714
Fixed the accessed wire set on the case of a lookup reuse
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -354,7 +354,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	reg	[(VAW-1):0]	last_vpage;
 	//
 	wire	[(TBL_SIZE-1):0]	r_tlb_match;
-	reg	[(LGTBL-1):0]		s_tlb_addr;
+	reg	[(LGTBL-1):0]		s_tlb_addr, last_tlb;
 	reg				s_tlb_miss, s_tlb_hit, s_pending;
 	//
 	wire	ro_flag, exe_flag, simple_miss, ro_miss, exe_miss, table_err, cachable;

ParseResult:
INS HdlIdDef@@last_tlb to objs
HdlIdDef: last_tlb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: LGTBL
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: b2aa9499168f5ab13262ccd0e9c8a4c33b954714
Fixed the accessed wire set on the case of a lookup reuse
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -391,6 +390,16 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 		// Set the context register for the page
 		if (wr_vtable)
 			tlb_flags[wr_tlb_addr] <= i_wbs_data[3:1];
+		if (wr_vtable)
+			tlb_cdata[wr_tlb_addr][(LGLCTX-1):0]
+				<= i_wbs_data[(LGLCTX+4-1):4];
+	end
+
+	initial	tlb_accessed = 0;
+	always @(posedge i_clk)
+	if (i_reset)
+		tlb_accessed <= 0;
+	else begin
 		if (wr_vtable)
 			tlb_accessed[wr_tlb_addr] <= 1'b0;
 		// Otherwise, keep track of the accessed bit if we

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: tlb_accessed
                HdlValueInt: 0

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS HdlStmBlock@@SEQ to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: tlb_accessed

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: wr_vtable
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlOp: INDEX
            list: ops
                HdlValueId: tlb_accessed
                HdlValueId: wr_tlb_addr
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: pending_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: this_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr


CommitId: b2aa9499168f5ab13262ccd0e9c8a4c33b954714
Fixed the accessed wire set on the case of a lookup reuse
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -398,10 +407,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 		else if ((!kernel_context)&&(pending_page_valid))
 			tlb_accessed[s_tlb_addr] <= 1'b1;
 		else if ((!kernel_context)&&(this_page_valid))
-			tlb_accessed[s_tlb_addr] <= 1'b1;
-		if (wr_vtable)
-			tlb_cdata[wr_tlb_addr][(LGLCTX-1):0]
-				<= i_wbs_data[(LGLCTX+4-1):4];
+			tlb_accessed[last_tlb] <= 1'b1;
 	end
 	generate if (LGHCTX > 0)
 	begin : HCTX

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS HdlStmBlock@@SEQ to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: wr_vtable
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlOp: INDEX
            list: ops
                HdlValueId: tlb_accessed
                HdlValueId: wr_tlb_addr
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: pending_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: this_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@s_tlb_addr to last_tlb


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -92,13 +92,13 @@ module	prefetch(i_clk, i_rst, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 		begin
 			o_wb_cyc <= 1'b0;
 			o_wb_stb <= 1'b0;
-		end else if ((!o_wb_cyc)&&((i_stalled_n)||(!o_valid)))
+		end else if ((!o_wb_cyc)&&((i_stalled_n)||(!o_valid)||(i_new_pc)))
 		begin // Initiate a bus cycle
 			o_wb_cyc <= 1'b1;
 			o_wb_stb <= 1'b1;
 		end else if (o_wb_cyc) // Independent of ce
 		begin
-			if (~i_wb_stall)
+			if (!i_wb_stall)
 				o_wb_stb <= 1'b0;
 		end
 

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_new_pc to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: i_stalled_n
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: o_valid


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -108,7 +108,7 @@ module	prefetch(i_clk, i_rst, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 		if (!o_wb_cyc)
 			invalid <= 1'b0;
 		else if ((i_new_pc)||(i_clear_cache))
-			invalid <= (!o_wb_stb);
+			invalid <= 1'b1;
 
 	always @(posedge i_clk)
 		if (i_new_pc)

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlValueInt@@1 to 

UPD HdlStmAssign@@ to 
    DEL HdlOp@@NEG_LOG from 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: o_wb_stb


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -123,15 +123,15 @@ module	prefetch(i_clk, i_rst, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 	initial o_valid   = 1'b0;
 	initial o_illegal = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
+		if ((i_rst)||(i_new_pc))
 		begin
 			o_valid   <= 1'b0;
 			o_illegal <= 1'b0;
-		end else if ((o_wb_cyc)&&(i_wb_ack))
+		end else if ((o_wb_cyc)&&((i_wb_ack)||(i_wb_err)))
 		begin
-			o_valid   <= (!i_wb_err)&&(!invalid);
+			o_valid   <= (!invalid);
 			o_illegal <= ( i_wb_err)&&(!invalid);
-		end else if ((i_stalled_n)||(i_clear_cache))
+		end else if ((i_stalled_n)||(i_clear_cache)||(i_new_pc))
 		begin
 			o_valid <= 1'b0;
 			o_illegal <= 1'b0;
ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@i_new_pc to ops
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@i_new_pc to ops
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_wb_err to ops

UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_rst to body
    HdlValueId: i_rst
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlValueId: i_stalled_n
            HdlValueId: i_clear_cache
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_wb_ack to ops
        HdlValueId: i_wb_ack

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: invalid
        DEL HdlOp@@NEG_LOG from ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: i_wb_err
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: 3a83ca4c93bc0657b49273e486cdc5caddaf1dea
Fixed pipelinable memory bugs in the instruction decoder
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -615,6 +615,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	begin
 		reg	r_pipe;
 
+		wire	[13:0]	pipe_addr_diff;
+		assign		pipe_addr_diff = w_I[13:0] - r_I[13:0];
+
 		initial	r_pipe = 1'b0;
 		always @(posedge i_clk)
 		if (i_reset)

ParseResult:
INS HdlIdDef@@pipe_addr_diff to body
HdlIdDef: pipe_addr_diff
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 13
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: SUB
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: w_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 13
                            HdlValueInt: 0
            HdlOp: INDEX
                list: ops
                    HdlValueId: r_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 13
                            HdlValueInt: 0
    HdlValueId: pipe_addr_diff

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                MOV HdlOp@@AND_LOG to ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlOp: AND_LOG
                                                                            list: ops
                                                                                HdlValueId: r_valid
                                                                                HdlOp: OR_LOG
                                                                                    list: ops
                                                                                        HdlValueId: pf_valid
                                                                                        HdlValueId: o_phase
                                                                        HdlValueId: w_mem
                                                                HdlValueId: o_M
                                                        HdlOp: EQ
                                                            list: ops
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: o_op
                                                                        HdlValueInt: 0
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: w_cis_op
                                                                        HdlValueInt: 0
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: w_rB
                                                        HdlValueId: o_rB
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_op
                                                HdlValueInt: 0
                                        HdlOp: NE
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdA
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlValueId: i_gie
                                HdlValueId: o_gie
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlOp@@AND_LOG to ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlValueId: r_valid
                                                                        HdlOp: OR_LOG
                                                                            list: ops
                                                                                HdlValueId: pf_valid
                                                                                HdlValueId: o_phase
                                                                HdlValueId: w_mem
                                                        HdlValueId: o_M
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: o_op
                                                                HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: w_cis_op
                                                                HdlValueInt: 0
                                        HdlOp: EQ
                                            list: ops
                                                HdlValueId: w_rB
                                                HdlValueId: o_rB
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
        DEL HdlOp@@OR_LOG from ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: w_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                HdlOp: EQ
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                                HdlValueInt: 1


CommitId: 3a83ca4c93bc0657b49273e486cdc5caddaf1dea
Fixed pipelinable memory bugs in the instruction decoder
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -629,18 +632,24 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				&&(w_rB == o_rB)
 				// Both must use the same register for B
 				&&(w_dcdB[3:0] == o_dcdB[3:0])
+				// CC or PC registers are not valid addresses
+				&&(w_dcdB[3:1] != 3'h7)
 				// But ... the result can never be B
 				&&((o_op[0])
 					||(w_dcdB[3:0] != o_dcdA[3:0]))
 				// Needs to be to the mode, supervisor or user
 				&&(i_gie == o_gie)
+				// Reads to CC or PC not allowed
+				&&((o_op[0])||(w_dcdR[3:1] != 3'h7))
+				// Prior-reads to CC or PC not allowed
+				&&((o_op[0])||(o_dcdR[3:1] != 3'h7))
 				// Same condition, or no condition before
 				&&((w_cond[2:0]==o_cond[2:0])
 					||(o_cond[2:0] == 3'h0))
 				// Same or incrementing immediate
 				&&(w_I[13]==r_I[13])
-				&&((w_I[13:2]==r_I[13:2])
-					||({1'b0, w_I[13:2]}==(r_I[13:2]+12'h1)));
+				&&((w_I==r_I)
+					||(pipe_addr_diff <= 14'h4));
 		assign o_pipe = r_pipe;
 	end else begin
 		assign o_pipe = 1'b0;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: w_I
                        HdlValueId: r_I
                HdlOp: LE
                    list: ops
                        HdlValueId: pipe_addr_diff
                        HdlValueInt: 4
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                INS HdlOp@@AND_LOG to ops
                UPD HdlOp@@AND_LOG to AND_LOG
                    INS list@@ops to AND_LOG
                    INS HdlOp@@AND_LOG to ops
                    INS HdlOp@@OR_LOG to ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_op
                                    HdlValueInt: 0
                            HdlOp: NE
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: o_dcdR
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 3
                                                    HdlValueInt: 1
                                    HdlValueInt: 7
                    UPD HdlOp@@AND_LOG to AND_LOG
                        INS list@@ops to AND_LOG
                        INS HdlOp@@OR_LOG to ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: o_op
                                        HdlValueInt: 0
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdR
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 1
                                        HdlValueInt: 7
                        UPD HdlOp@@AND_LOG to AND_LOG
                            UPD HdlOp@@AND_LOG to AND_LOG
                                INS HdlOp@@AND_LOG to ops
                                UPD HdlOp@@AND_LOG to AND_LOG
                                    INS list@@ops to AND_LOG
                                    INS HdlOp@@NE to ops
                                    HdlOp: NE
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: w_dcdB
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 1
                                            HdlValueInt: 7

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                MOV HdlOp@@AND_LOG to ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlOp: AND_LOG
                                                                            list: ops
                                                                                HdlValueId: r_valid
                                                                                HdlOp: OR_LOG
                                                                                    list: ops
                                                                                        HdlValueId: pf_valid
                                                                                        HdlValueId: o_phase
                                                                        HdlValueId: w_mem
                                                                HdlValueId: o_M
                                                        HdlOp: EQ
                                                            list: ops
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: o_op
                                                                        HdlValueInt: 0
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: w_cis_op
                                                                        HdlValueInt: 0
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: w_rB
                                                        HdlValueId: o_rB
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_op
                                                HdlValueInt: 0
                                        HdlOp: NE
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdA
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlValueId: i_gie
                                HdlValueId: o_gie
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlOp@@AND_LOG to ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlValueId: r_valid
                                                                        HdlOp: OR_LOG
                                                                            list: ops
                                                                                HdlValueId: pf_valid
                                                                                HdlValueId: o_phase
                                                                HdlValueId: w_mem
                                                        HdlValueId: o_M
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: o_op
                                                                HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: w_cis_op
                                                                HdlValueInt: 0
                                        HdlOp: EQ
                                            list: ops
                                                HdlValueId: w_rB
                                                HdlValueId: o_rB
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
        DEL HdlOp@@OR_LOG from ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: w_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                HdlOp: EQ
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                                HdlValueInt: 1


CommitId: 294c989b2fa5acddd6a35d76ffd7bba760b1e7e1
memops now creates a memory fault (bus err) on an unaligned access
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -55,7 +55,7 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	parameter	ADDRESS_WIDTH=30;
 	parameter [0:0]	IMPLEMENT_LOCK=1'b1,
 			WITH_LOCAL_BUS=1'b1,
-			OPT_ALIGNMENT_ERR=1'b0,
+			OPT_ALIGNMENT_ERR=1'b1,
 			OPT_ZERO_ON_IDLE=1'b0;
 	parameter [0:0]	F_OPT_CLK2FFLOGIC = 1'b0;
 	localparam	AW=ADDRESS_WIDTH;

ParseResult:
UPD HdlIdDef@@OPT_ALIGNMENT_ERR to OPT_ALIGNMENT_ERR
    UPD HdlValueInt@@0 to 1


CommitId: 294c989b2fa5acddd6a35d76ffd7bba760b1e7e1
memops now creates a memory fault (bus err) on an unaligned access
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -213,24 +224,33 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 	initial	o_valid = 1'b0;
 	always @(posedge i_clk)
-		o_valid <= (!i_reset)&&((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
-				&&(i_wb_ack)&&(!o_wb_we);
+	if (i_reset)
+		o_valid <= 1'b0;
+	else
+		o_valid <= (((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
+				&&(i_wb_ack)&&(!o_wb_we));
 	initial	o_err = 1'b0;
 	always @(posedge i_clk)
-		if (i_reset)
-			o_err <= 1'b0;
-		else if ((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
-			o_err <= i_wb_err;
-		else
-			o_err <= ((i_stb)&&(misaligned));
+	if (i_reset)
+		o_err <= 1'b0;
+	else if (i_stb)
+		o_err <= misaligned;
+	else if ((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
+		o_err <= i_wb_err;
+	else
+		o_err <= 1'b0;
 
 	assign	o_busy = (r_wb_cyc_gbl)||(r_wb_cyc_lcl);
 
 	always @(posedge i_clk)
-		if (i_stb)
+	if (i_reset)
+		o_wreg <= 0;
+	else if (i_stb)
 			o_wreg    <= i_oreg;
 	always @(posedge i_clk)
-	if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
+	if (i_reset)
+		o_result <= 0;
+	else if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
 		o_result <= 32'h0;
 	else begin
 		casez(r_op)

ParseResult:
UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_reset
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_wb_err
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: r_wb_cyc_gbl
                                        HdlValueId: r_wb_cyc_lcl
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_lcl
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_gbl
                                            HdlValueId: lock_gbl
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_lcl
                                            HdlValueId: lock_lcl
                            HdlValueId: lock_lcl

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: i_stb
        HdlStmAssign
            HdlValueId: misaligned
            HdlValueId: o_err

UPD HdlStmAssign@@if_false to if_false
    INS HdlValueInt@@0 to if_false

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueInt@@0 to if_true

UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: i_stb
        HdlStmAssign
            HdlValueId: i_oreg
            HdlValueId: o_wreg

MOV HdlIdDef@@lock_gbl to body
HdlIdDef: lock_gbl
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

MOV HdlIdDef@@lock_lcl to body
HdlIdDef: lock_lcl
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

MOV HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: lock_gbl
                    HdlValueInt: 0
            HdlStmWait:
                list: val

MOV HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: lock_lcl
                    HdlValueInt: 0
            HdlStmWait:
                list: val

MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_reset
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_wb_err
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: r_wb_cyc_gbl
                                        HdlValueId: r_wb_cyc_lcl
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_lcl
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_gbl
                                            HdlValueId: lock_gbl
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_lcl
                                            HdlValueId: lock_lcl
                            HdlValueId: lock_lcl

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_ZERO_ON_IDLE
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wb_ack
    DEL list@@elifs from body

INS HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_result

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: 294c989b2fa5acddd6a35d76ffd7bba760b1e7e1
memops now creates a memory fault (bus err) on an unaligned access
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -254,16 +274,18 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 		initial	lock_lcl = 1'b0;
 
 		always @(posedge i_clk)
+		if (i_reset)
 		begin
-			if ((i_reset)||((i_wb_err)&&
-					((r_wb_cyc_gbl)||(r_wb_cyc_lcl))))
-			begin
-				lock_gbl <= 1'b0;
-				lock_lcl <= 1'b0;
-			end else begin
-				lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
-				lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
-			end
+			lock_gbl <= 1'b0;
+			lock_lcl <= 1'b0;
+		end else if (((i_wb_err)&&((r_wb_cyc_gbl)||(r_wb_cyc_lcl)))
+				||((i_stb)&&(misaligned)))
+		begin
+			lock_gbl <= 1'b0;
+			lock_lcl <= 1'b0;
+		end else begin
+			lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
+			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
 		end
 
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl)||(lock_gbl);

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: lock_gbl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: lock_lcl

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: 4c8cf57cecc70dc315b3567891583953eb4294d0
Fixed the lock capability for ZipSystem addresses
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -212,7 +212,7 @@ module	pipemem(i_clk, i_rst, i_pipe_stb, i_lock,
 		always @(posedge i_clk)
 		begin
 			lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
-			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_gbl));
+			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
 		end
 
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl)||(lock_gbl);
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlValueId@@lock_gbl to lock_lcl


CommitId: e4e59aea0232dd94c748ba091cf9f0c809f17015
Fixed broken sby file, now proves nopipe CPU
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -458,6 +458,8 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	initial	o_dcdR = 0;
 	initial	o_dcdA = 0;
 	initial	o_dcdB = 0;
+	initial	o_DV   = 0;
+	initial	o_FP   = 0;
 	always @(posedge i_clk)
 		if (i_ce)
 		begin

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_DV
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_FP
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: e4e59aea0232dd94c748ba091cf9f0c809f17015
Fixed broken sby file, now proves nopipe CPU
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -500,7 +502,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			// or flags, which should already be true.
 			o_ALU  <=  (w_ALU)||(w_ldi)||(w_cmptst)||(w_noop);
 			o_M    <=  w_mem;
-			o_DV   <=  w_div;
+			o_DV   <=  (OPT_DIVIDE)&&(w_div);
 			o_FP   <=  (OPT_FPU)&&(w_fpu);
 
 			o_break <= w_break;
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_DIVIDE to ops

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@w_div to 
    HdlValueId: w_div


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -215,9 +215,14 @@
 //
 `default_nettype	none
 //
+`define	ROFLAG	3	// Read-only flag
+`define	AXFLAG	2	// Accessed flag
+`define	CHFLAG	1	// Cachable flag
+`define	EXEFLG	0	// No-execute flag (invalid for I-cache)
+//
 module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 				i_wbs_data, o_wbs_ack, o_wbs_stall, o_wbs_data,
-		i_wbm_cyc, i_wbm_stb, i_wbm_we,
+		i_wbm_cyc, i_wbm_stb, i_wbm_we, i_wbm_exe,
 			i_wbm_addr, i_wbm_data, i_wbm_sel, i_gie,
 		o_cyc, o_stb, o_we, o_addr, o_data, o_sel,
 			i_stall, i_ack, i_err, i_data,

ParseResult:
INS HdlIdDef@@i_wbm_exe to ports
HdlIdDef: i_wbm_exe
    HdlDirection: IN

INS HdlIdDef@@o_rtn_ack to ports
HdlIdDef: o_rtn_ack
    HdlDirection: OUT


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -243,6 +248,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 `else
 			PLGCTXT=16;
 `endif
+	parameter [0:0] OPT_DELAY_RETURN = 1'b0;
 	localparam	// And for our derived parameters (don't set these ...)
 			// Width of the data bus is 32-bits.  This may be hard
 			// to change.

ParseResult:
INS HdlIdDef@@OPT_DELAY_RETURN to params
HdlIdDef: OPT_DELAY_RETURN
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -314,7 +320,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 //
 //
 //
-	reg	[3:1]			tlb_flags	[0:(TBL_SIZE-1)];
+	reg	[3:0]			tlb_flags	[0:(TBL_SIZE-1)];
 	reg	[(LGCTXT-1):0]		tlb_cdata	[0:(TBL_SIZE-1)];
 	reg	[(VAW-1):0]		tlb_vdata	[0:(TBL_SIZE-1)];
 	reg	[(PAW-1):0]		tlb_pdata	[0:(TBL_SIZE-1)];

ParseResult:
UPD HdlIdDef@@tlb_flags to tlb_flags
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlValueInt@@1 to 0


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -338,9 +344,12 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	reg	[31:0]	status_word;
 	//
 	//
-	reg			r_pending, r_we, last_page_valid, last_ro, r_valid;
+	reg			r_pending, r_we, r_exe, r_valid,
+				last_page_valid, last_ro, last_exe;
 	reg	[(DW-3):0]	r_addr;
 	reg	[(DW-1):0]	r_data;
+	wire	[(VAW-1):0]	vpage;
+	wire	[AW-LGPGSZW-1:0]	ppage;
 	reg	[(DW/8-1):0]	r_sel;
 	reg	[(PAW-1):0]	last_ppage;
 	reg	[(VAW-1):0]	last_vpage;

ParseResult:
MOV HdlIdDef@@r_valid to objs
HdlIdDef: r_valid
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

INS HdlIdDef@@vpage to objs
HdlIdDef: vpage
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: VAW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@ppage to objs
HdlIdDef: ppage
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AW
                                    HdlValueId: LGPGSZW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -349,13 +358,22 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	reg	[(LGTBL-1):0]		s_tlb_addr;
 	reg				s_tlb_miss, s_tlb_hit, s_pending;
 	//
-	wire	ro_flag, simple_miss, ro_miss, table_err, cachable;
+	wire	ro_flag, exe_flag, simple_miss, ro_miss, exe_miss, table_err, cachable;
 	reg	p_tlb_miss,p_tlb_err, pf_stb, pf_cachable;
 	reg	miss_pending;
 	//
 	reg	rtn_err;
 
 
+	wire	this_page_valid, pending_page_valid;
+	assign	this_page_valid = ((last_page_valid)
+				&&(i_wbm_addr[(DW-3):(DW-2-VAW)]==last_vpage)
+				&&((!last_ro)||(!i_wbm_we))
+				&&((!last_exe)||(!i_wbm_exe)));
+	assign	pending_page_valid = ((s_pending)&&(s_tlb_hit)
+				&&((!r_we)||(!ro_flag))
+				&&((!r_exe)||(exe_flag)));
+
 	//////////////////////////////////////////
 	//
 	//

ParseResult:
INS HdlIdDef@@exe_miss to objs
HdlIdDef: exe_miss
    HdlDirection: INTERNAL

INS HdlIdDef@@this_page_valid to objs
HdlIdDef: this_page_valid
    HdlDirection: INTERNAL

INS HdlIdDef@@pending_page_valid to objs
HdlIdDef: pending_page_valid
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -372,11 +390,13 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 			tlb_pdata[wr_tlb_addr]<=i_wbs_data[(AW+1):LGPGSZB];
 		// Set the context register for the page
 		if ((wr_vtable)||(wr_ptable))
-			tlb_flags[wr_tlb_addr] <= i_wbs_data[3:1];
+			tlb_flags[wr_tlb_addr] <= i_wbs_data[3:0];
 		// Otherwise, keep track of the accessed bit if we
 		// ever access this page
-		else if ((!kernel_context)&&(s_pending)&&(s_tlb_hit)&&((!r_we)||(!ro_flag)))
-			tlb_flags[s_tlb_addr][2] <= 1'b1;
+		else if ((!kernel_context)&&(pending_page_valid))
+			tlb_flags[s_tlb_addr][`AXFLAG] <= 1'b1;
+		else if ((!kernel_context)&&(this_page_valid));
+			tlb_flags[s_tlb_addr][`AXFLAG] <= 1'b1;
 		if (wr_vtable)
 			tlb_cdata[wr_tlb_addr][((LGCTXT>=8)? 7:(LGCTXT-1)):0]
 				<= i_wbs_data[((LGCTXT>=8)? 11:(4+LGCTXT-1)):4];

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@pending_page_valid to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: r_exe
                HdlValueId: exe_flag
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                INS HdlValueId@@s_pending to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: last_exe
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_wbm_exe

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: kernel_context
                            HdlValueId: s_pending
                    HdlValueId: s_tlb_hit
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_we
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: ro_flag
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: s_pending
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@s_pending to pending_page_valid

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 1
    HdlOp: INDEX
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: tlb_flags
                    HdlValueId: s_tlb_addr
            HdlValueInt: 2

INS HdlStmNop@@ to 

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@1 to 0


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -454,7 +474,9 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	//
 	//
 	wire	[(VAW-1):0]	r_vpage;
+	wire	[(PAW-1):0]	r_ppage;
 	assign	r_vpage = (r_addr[(DW-3):(DW-2-VAW)]);
+	assign	r_ppage = (o_addr[(AW-1):LGPGSZW]);
 
 	initial	s_pending = 1'b0;
 	initial	r_pending = 1'b0;

ParseResult:
INS HdlIdDef@@r_ppage to objs
HdlIdDef: r_ppage
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: PAW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: o_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueId: LGPGSZW
    HdlValueId: r_ppage


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -475,27 +498,23 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	begin
 		if (!o_rtn_stall)
 		begin
-			r_pending <= (i_wbm_stb)&&(!kernel_context);
+			r_pending <= (i_wbm_stb)&&(!kernel_context)
+						&&(!this_page_valid);
 			r_we      <= i_wbm_we;
+			r_exe     <= i_wbm_exe;
 			o_addr    <= { { (kernel_context)?
 				i_wbm_addr[(AW-1):LGPGSZW] : last_ppage },
 				i_wbm_addr[(LGPGSZW-1):0] };
 			r_addr    <= i_wbm_addr;
 			r_data    <= i_wbm_data;
 			r_sel     <= i_wbm_sel;
-			r_valid   <= (i_wbm_stb)&&(
-				(kernel_context)
-				||((last_page_valid)
-					&&(i_wbm_addr[(DW-3):(DW-2-VAW)] == last_vpage)
-					&&((!last_ro)||(!i_wbm_we))));
+			r_valid   <= (i_wbm_stb)&&((kernel_context)||(this_page_valid));
 			s_pending <= 1'b0;
 		end else if (!r_valid) begin
-			r_valid <= (!miss_pending)&&((last_page_valid)
-					&&(r_vpage== last_vpage)
-					&&((!last_ro)||(!r_we)));
-			o_addr <= { last_ppage , r_addr[(LGPGSZW-1):0] };
-			r_pending<= (r_pending);
-			s_pending <=(r_pending)&&(!kernel_context);
+			r_valid <= (pending_page_valid);
+			o_addr <= { ppage , r_addr[(LGPGSZW-1):0] };
+			r_pending<= (r_pending)&&(!pending_page_valid);
+			s_pending <=(r_pending)&&(!pending_page_valid);
 		end else begin
 			r_pending <= 1'b0;
 			s_pending <= 1'b0;

ParseResult:
MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_stb
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: kernel_context
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: last_page_valid
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_wbm_addr
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 3
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlOp: SUB
                                                                        list: ops
                                                                            HdlValueId: DW
                                                                            HdlValueInt: 2
                                                                    HdlValueId: VAW
                                            HdlValueId: last_vpage
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: last_ro
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wbm_we
    HdlValueId: r_valid

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: kernel_context
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: last_page_valid
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_wbm_addr
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: DW
                                                                HdlValueInt: 3
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlValueId: DW
                                                                        HdlValueInt: 2
                                                                HdlValueId: VAW
                                        HdlValueId: last_vpage
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: last_ro
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: i_wbm_we
        UPD HdlOp@@OR_LOG to OR_LOG
            MOV HdlValueId@@kernel_context to ops
            HdlValueId: kernel_context
    UPD HdlValueId@@r_valid to this_page_valid
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_stb
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: kernel_context
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: last_page_valid
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_wbm_addr
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 3
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlOp: SUB
                                                                        list: ops
                                                                            HdlValueId: DW
                                                                            HdlValueInt: 2
                                                                    HdlValueId: VAW
                                            HdlValueId: last_vpage
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: last_ro
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wbm_we

UPD HdlStmAssign@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: r_pending
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: kernel_context
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@r_pending to ops
        HdlValueId: r_pending

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: i_wbm_exe
    HdlValueId: r_exe

INS HdlStmAssign@@ to body

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: this_page_valid

UPD HdlStmAssign@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_stb
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: kernel_context

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@last_page_valid to pending_page_valid
                MOV HdlValueId@@last_page_valid to ops
                HdlValueId: last_page_valid
                DEL HdlOp@@EQ from ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: r_vpage
                        HdlValueId: last_vpage
                DEL list@@ops from AND_LOG
            DEL HdlOp@@AND_LOG from ops
            DEL HdlOp@@OR_LOG from ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: last_ro
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_we
            DEL list@@ops from AND_LOG
        DEL HdlOp@@NEG_LOG from ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: miss_pending
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlValueId@@last_ppage to ppage

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@r_pending to 
    HdlValueId: r_pending


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -554,19 +567,22 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 
 	// Third clock: Read from the address the virtual table offset,
 	// whether read-only, etc.
-	assign	ro_flag     = tlb_flags[s_tlb_addr][3];
+	assign	ro_flag     = tlb_flags[s_tlb_addr][`ROFLAG];
+	assign	exe_flag    = tlb_flags[s_tlb_addr][`EXEFLG];
 	assign	simple_miss = (s_pending)&&(s_tlb_miss);
 	assign	ro_miss     = (s_pending)&&(s_tlb_hit)&&(r_we)&&(ro_flag);
+	assign	exe_miss    = (s_pending)&&(s_tlb_hit)&&(r_exe)&&(!exe_flag);
 	assign	table_err   = (s_pending)&&(!s_tlb_miss)&&(!s_tlb_hit);
-	assign	cachable    = tlb_flags[s_tlb_addr][1];
-	// assign	tlb_access_flag    = tlb_flags[s_tlb_addr][2];
+	assign	vpage       = tlb_vdata[s_tlb_addr];
+	assign	ppage	    = tlb_pdata[s_tlb_addr];
+	assign	cachable    = tlb_flags[s_tlb_addr][`CHFLAG];
 
 	initial	p_tlb_miss = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)
 		p_tlb_miss <= 1'b0;
 	else
-		p_tlb_miss <= (i_wbm_cyc)&&((simple_miss)||(ro_miss));
+		p_tlb_miss <= (i_wbm_cyc)&&((simple_miss)||(ro_miss)||(exe_miss));
 
 	initial	p_tlb_err  = 1'b0;
 	always @(posedge i_clk)

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_wbm_cyc to ops
        HdlValueId: i_wbm_cyc
    UPD HdlOp@@AND_LOG to OR_LOG
    MOV HdlOp@@AND_LOG to if_false
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_cyc
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: simple_miss
                    HdlValueId: ro_miss


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -593,19 +609,25 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 		last_vpage <= 0;
 	end else if ((!kernel_context)&&(r_pending)&&(!last_page_valid))
 	begin
-		last_ppage <= tlb_pdata[s_tlb_addr];
-		last_vpage <= tlb_vdata[s_tlb_addr];
+		last_ppage <= ppage;
+		last_vpage <= vpage;
+		last_exe   <= exe_flag;
 		last_ro    <= ro_flag;
 		pf_stb <= 1'b1;
 	end else
 		pf_stb <= 1'b0;
 
-
+	initial	status_word = 0;
 	always @(posedge i_clk)
-		if ((table_err)||(ro_miss)||(simple_miss))
-			status_word <= { r_addr[(AW-1):(AW-VAW)],
+	if (i_reset)
+		status_word <= 0;
+	else if (wr_control)
+		status_word <= 0;
+	else if ((table_err)||(ro_miss)||(simple_miss)||(exe_miss))
+		status_word <= { r_addr[(AW-1):(AW-VAW)],
 				{(LGPGSZW-1){1'b0}}, 
-				(table_err), (ro_miss), (simple_miss) };
+				(table_err), (exe_miss),
+				(ro_miss), (simple_miss) };
 
 	initial	last_page_valid = 1'b0;
 	always @(posedge i_clk)

ParseResult:
MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: tlb_vdata
            HdlValueId: s_tlb_addr
    HdlValueId: last_vpage

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: tlb_pdata
            HdlValueId: s_tlb_addr
    HdlValueId: last_ppage

INS HdlStmProcess@@ to objs

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@last_vpage to vpage

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@last_ppage to ppage

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: status_word

UPD HdlStmAssign@@if_false to if_false
    INS HdlOp@@AND_LOG to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlValueId@@exe_miss to ops

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_addr
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueId: VAW
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: LGPGSZW
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
                            HdlValueId: table_err
                    HdlValueId: ro_miss
            HdlValueId: simple_miss
    HdlValueId: status_word

UPD HdlStmIf@@body to body
    MOV HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: table_err
                    HdlValueId: ro_miss
            HdlValueId: simple_miss
    DEL list@@elifs from body

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@CONCAT to if_true
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_addr
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueId: VAW
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: LGPGSZW
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
                            HdlValueId: table_err
                    HdlValueId: ro_miss
            HdlValueId: simple_miss
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlValueId@@simple_miss to ro_miss
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlValueId@@ro_miss to exe_miss


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -620,7 +642,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 			last_page_valid <= (last_page_valid)
 				&&(i_wbm_addr[(DW-3):(DW-2-VAW)] == last_vpage);
 		else if ((r_pending)&&(!last_page_valid))
-			last_page_valid <= (s_tlb_hit)&&(!ro_miss);
+			last_page_valid <= (s_pending)&&(s_tlb_hit);
 	end
 
 	parameter	LGFIFO = 6;

ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: status_word
                HdlValueInt: 0

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: wr_control
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: status_word
    INS tuple@@ to elifs
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@exe_miss to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@s_tlb_hit to s_pending
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@ro_miss to s_tlb_hit
            MOV HdlValueId@@ro_miss to ops
            HdlValueId: ro_miss
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@NEG_LOG from ops


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -682,7 +722,9 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	else if (!i_wbm_cyc)
 		miss_pending <= 0;
 	else
-		miss_pending <= (p_tlb_miss)||(p_tlb_err);
+		miss_pending <= (i_wbm_cyc)&&(
+				(simple_miss)||(ro_miss)||(exe_miss)
+				||((s_pending)&&(!s_tlb_miss)&&(!s_tlb_hit)));
 
 	assign	o_rtn_miss  = (miss_pending)&&(!bus_pending);
 	assign	o_rtn_err   = (rtn_err);

ParseResult:
UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wbm_cyc
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: miss_pending
    DEL HdlValueId@@i_reset from body

DEL HdlStmAssign@@if_false from body
HdlStmAssign: if_false
    HdlOp: OR_LOG
        list: ops
            HdlValueId: p_tlb_miss
            HdlValueId: p_tlb_err
    HdlValueId: miss_pending

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -79,7 +79,8 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 		assign	mpy_unused = { i_clk, i_reset, i_stb, i_op, i_a, i_b };
 		// verilator lint_on  UNUSED
 `endif
-	end else if (IMPLEMENT_MPY == 1)
+	end else begin : IMPY
+	if (IMPLEMENT_MPY == 1)
 	begin : MPY1CK // Our single clock option (no extra clocks)
 
 		wire	signed	[63:0]	w_mpy_a_input, w_mpy_b_input;

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    UPD list@@elifs to body
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 1
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: w_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: w_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_a
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_a_input
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: w_mpy_a_input
                                HdlValueId: w_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlAll
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: o_hi
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 2
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_a
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_b
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: r_mpy_a_input
                                HdlValueId: r_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmAssign
                        HdlValueId: mpypipe
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 3
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_smpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_umpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_sgn
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_sgn
                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_op
                                                    HdlValueInt: 0
                                    HdlValueId: r_sgn
                    HdlIdDef: u_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: u_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlValueId: r_mpy_a_input
                        HdlValueId: u_mpy_a_input
                    HdlStmAssign
                        HdlValueId: r_mpy_b_input
                        HdlValueId: u_mpy_b_input
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: r_mpy_a_input
                                    HdlValueId: r_mpy_b_input
                            HdlValueId: r_smpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: u_mpy_a_input
                                    HdlValueId: u_mpy_b_input
                            HdlValueId: r_umpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_sgn
                                        HdlValueInt: 1
                                HdlValueId: r_smpy_result
                                HdlValueId: r_umpy_result
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 1
                        HdlValueId: o_valid
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 1
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: w_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: w_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_a
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_a_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_b
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: w_mpy_a_input
                        HdlValueId: w_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: o_hi
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 2
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_a
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_b
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: r_mpy_a_input
                        HdlValueId: r_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmAssign
                HdlValueId: mpypipe
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 3
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_smpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_umpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_sgn
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_sgn
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                            HdlValueId: r_sgn
            HdlIdDef: u_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: u_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlValueId: r_mpy_a_input
                HdlValueId: u_mpy_a_input
            HdlStmAssign
                HdlValueId: r_mpy_b_input
                HdlValueId: u_mpy_b_input
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: r_mpy_a_input
                            HdlValueId: r_mpy_b_input
                    HdlValueId: r_smpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: u_mpy_a_input
                            HdlValueId: u_mpy_b_input
                    HdlValueId: r_umpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: TERNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_sgn
                                HdlValueInt: 1
                        HdlValueId: r_smpy_result
                        HdlValueId: r_umpy_result
                HdlValueId: o_result
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 1
                HdlValueId: o_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_signed
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 2
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueId: i_stb
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 2
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_a
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_b
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlValueId: r_mpy_signed
                        HdlStmIf
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
            HdlStmAssign
                HdlOp: OR_UNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 2
                HdlValueId: o_valid
            HdlIdDef: pp_f
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_l
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_oi
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_s
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                            HdlValueId: pp_f
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                            HdlValueId: pp_oi
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                            HdlValueId: pp_l
                        HdlStmIf
                            HdlValueId: r_mpy_signed
                            HdlStmAssign: if_true
                                HdlOp: SUB
                                    list: ops
                                        HdlValueInt: 80000000
                                        HdlOp: ADD
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_a_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_b_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                HdlValueId: pp_s
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: pp_s
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pp_l
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: pp_l
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 31
                                                                            HdlValueInt: 16
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlValueId: pp_oi
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: pp_s
                                                    HdlValueInt: 00
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: pp_f
                                            HdlValueInt: 00
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 63
                                            HdlValueInt: 16
            HdlStmAssign
                HdlValueId: r_mpy_result
                HdlValueId: o_result
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -100,7 +101,8 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 		// verilator lint_on  UNUSED
 `endif
 
-	end else if (IMPLEMENT_MPY == 2)
+	end else begin: MPN1
+	if (IMPLEMENT_MPY == 2)
 	begin : MPY2CK // Our two clock option (ALU must pause for 1 clock)
 
 		reg	signed	[63:0]	r_mpy_a_input, r_mpy_b_input;

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    UPD list@@elifs to body
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 1
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: w_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: w_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_a
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_a_input
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: w_mpy_a_input
                                HdlValueId: w_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlAll
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: o_hi
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 2
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_a
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_b
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: r_mpy_a_input
                                HdlValueId: r_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmAssign
                        HdlValueId: mpypipe
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 3
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_smpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_umpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_sgn
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_sgn
                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_op
                                                    HdlValueInt: 0
                                    HdlValueId: r_sgn
                    HdlIdDef: u_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: u_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlValueId: r_mpy_a_input
                        HdlValueId: u_mpy_a_input
                    HdlStmAssign
                        HdlValueId: r_mpy_b_input
                        HdlValueId: u_mpy_b_input
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: r_mpy_a_input
                                    HdlValueId: r_mpy_b_input
                            HdlValueId: r_smpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: u_mpy_a_input
                                    HdlValueId: u_mpy_b_input
                            HdlValueId: r_umpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_sgn
                                        HdlValueInt: 1
                                HdlValueId: r_smpy_result
                                HdlValueId: r_umpy_result
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 1
                        HdlValueId: o_valid
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 1
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: w_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: w_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_a
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_a_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_b
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: w_mpy_a_input
                        HdlValueId: w_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: o_hi
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 2
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_a
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_b
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: r_mpy_a_input
                        HdlValueId: r_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmAssign
                HdlValueId: mpypipe
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 3
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_smpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_umpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_sgn
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_sgn
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                            HdlValueId: r_sgn
            HdlIdDef: u_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: u_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlValueId: r_mpy_a_input
                HdlValueId: u_mpy_a_input
            HdlStmAssign
                HdlValueId: r_mpy_b_input
                HdlValueId: u_mpy_b_input
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: r_mpy_a_input
                            HdlValueId: r_mpy_b_input
                    HdlValueId: r_smpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: u_mpy_a_input
                            HdlValueId: u_mpy_b_input
                    HdlValueId: r_umpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: TERNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_sgn
                                HdlValueInt: 1
                        HdlValueId: r_smpy_result
                        HdlValueId: r_umpy_result
                HdlValueId: o_result
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 1
                HdlValueId: o_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_signed
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 2
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueId: i_stb
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 2
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_a
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_b
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlValueId: r_mpy_signed
                        HdlStmIf
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
            HdlStmAssign
                HdlOp: OR_UNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 2
                HdlValueId: o_valid
            HdlIdDef: pp_f
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_l
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_oi
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_s
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                            HdlValueId: pp_f
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                            HdlValueId: pp_oi
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                            HdlValueId: pp_l
                        HdlStmIf
                            HdlValueId: r_mpy_signed
                            HdlStmAssign: if_true
                                HdlOp: SUB
                                    list: ops
                                        HdlValueInt: 80000000
                                        HdlOp: ADD
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_a_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_b_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                HdlValueId: pp_s
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: pp_s
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pp_l
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: pp_l
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 31
                                                                            HdlValueInt: 16
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlValueId: pp_oi
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: pp_s
                                                    HdlValueInt: 00
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: pp_f
                                            HdlValueInt: 00
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 63
                                            HdlValueInt: 16
            HdlStmAssign
                HdlValueId: r_mpy_result
                HdlValueId: o_result
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -126,7 +128,8 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 		if (i_stb)
 			o_hi  <= i_op[1];
 
-	end else if (IMPLEMENT_MPY == 3)
+	end else begin : MPN2
+	if (IMPLEMENT_MPY == 3)
 	begin : MPY3CK // Our three clock option (ALU pauses for 2 clocks)
 		reg	signed	[63:0]	r_smpy_result;
 		reg		[63:0]	r_umpy_result;

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    UPD list@@elifs to body
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 1
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: w_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: w_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_a
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_a_input
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: w_mpy_a_input
                                HdlValueId: w_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlAll
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: o_hi
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 2
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_a
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_b
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: r_mpy_a_input
                                HdlValueId: r_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmAssign
                        HdlValueId: mpypipe
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 3
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_smpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_umpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_sgn
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_sgn
                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_op
                                                    HdlValueInt: 0
                                    HdlValueId: r_sgn
                    HdlIdDef: u_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: u_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlValueId: r_mpy_a_input
                        HdlValueId: u_mpy_a_input
                    HdlStmAssign
                        HdlValueId: r_mpy_b_input
                        HdlValueId: u_mpy_b_input
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: r_mpy_a_input
                                    HdlValueId: r_mpy_b_input
                            HdlValueId: r_smpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: u_mpy_a_input
                                    HdlValueId: u_mpy_b_input
                            HdlValueId: r_umpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_sgn
                                        HdlValueInt: 1
                                HdlValueId: r_smpy_result
                                HdlValueId: r_umpy_result
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 1
                        HdlValueId: o_valid
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 1
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: w_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: w_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_a
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_a_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_b
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: w_mpy_a_input
                        HdlValueId: w_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: o_hi
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 2
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_a
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_b
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: r_mpy_a_input
                        HdlValueId: r_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmAssign
                HdlValueId: mpypipe
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 3
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_smpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_umpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_sgn
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_sgn
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                            HdlValueId: r_sgn
            HdlIdDef: u_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: u_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlValueId: r_mpy_a_input
                HdlValueId: u_mpy_a_input
            HdlStmAssign
                HdlValueId: r_mpy_b_input
                HdlValueId: u_mpy_b_input
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: r_mpy_a_input
                            HdlValueId: r_mpy_b_input
                    HdlValueId: r_smpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: u_mpy_a_input
                            HdlValueId: u_mpy_b_input
                    HdlValueId: r_umpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: TERNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_sgn
                                HdlValueInt: 1
                        HdlValueId: r_smpy_result
                        HdlValueId: r_umpy_result
                HdlValueId: o_result
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 1
                HdlValueId: o_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_signed
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 2
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueId: i_stb
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 2
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_a
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_b
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlValueId: r_mpy_signed
                        HdlStmIf
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
            HdlStmAssign
                HdlOp: OR_UNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 2
                HdlValueId: o_valid
            HdlIdDef: pp_f
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_l
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_oi
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_s
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                            HdlValueId: pp_f
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                            HdlValueId: pp_oi
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                            HdlValueId: pp_l
                        HdlStmIf
                            HdlValueId: r_mpy_signed
                            HdlStmAssign: if_true
                                HdlOp: SUB
                                    list: ops
                                        HdlValueInt: 80000000
                                        HdlOp: ADD
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_a_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_b_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                HdlValueId: pp_s
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: pp_s
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pp_l
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: pp_l
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 31
                                                                            HdlValueInt: 16
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlValueId: pp_oi
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: pp_s
                                                    HdlValueInt: 00
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: pp_f
                                            HdlValueInt: 00
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 63
                                            HdlValueInt: 16
            HdlStmAssign
                HdlValueId: r_mpy_result
                HdlValueId: o_result
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: 258d09a37506b2636adc49c93a9682831afad258
Fixed an errant blocking assignmeent in the updated ziptimer.v
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -156,7 +156,7 @@ module	ziptimer(i_clk, i_reset, i_ce,
 	reg	r_zero  = 1'b1;
 	always @(posedge i_clk)
 		if (i_reset)
-			r_zero = 1'b1;
+			r_zero <= 1'b1;
 		else if (wb_write)
 			r_zero <= (i_wb_data[(VW-1):0] == 0);
 		else if ((r_running)&&(i_ce))
ParseResult:
INS HdlStmAssign@@if_true to body

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueInt@@1 to if_true

UPD HdlStmIf@@body to body
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueId@@r_zero to ops
        HdlValueId: r_zero
        DEL HdlValueInt@@1 from ops
        DEL list@@ops from ASSIGN
    DEL HdlOp@@ASSIGN from body


CommitId: defc51282266f9b655e7ea024e094b8de6cec875
Fixed abstrace MPY busy flag
--- a/bench/formal/abs_mpy.v
+++ b/bench/formal/abs_mpy.v
@@ -93,7 +93,7 @@ module	abs_mpy(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result,
 			r_busy <= 1'b0;
 		else if (i_stb)
 			r_busy <= (next_delay_to_valid != 0);
-		else
+		else if (r_busy)
 			r_busy <= (delay_to_valid != 3'h1);
 
 		always @(posedge i_clk)
ParseResult:
UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    INS HdlValueId@@r_busy to 

UPD HdlStmAssign@@if_false to 

MOV HdlStmAssign@@if_false to body
HdlStmAssign: if_false
    HdlOp: NE
        list: ops
            HdlValueId: delay_to_valid
            HdlValueInt: 1
    HdlValueId: r_busy


CommitId: 2e9042bf59cebf0d059dcd3653af8d47418b8ad5
Switched default async flag in fwb_ to synchronous
--- a/rtl/ex/fwb_slave.v
+++ b/rtl/ex/fwb_slave.v
@@ -88,7 +88,7 @@ module	fwb_slave(i_clk, i_reset,
 	parameter	[0:0]	F_OPT_MINCLOCK_DELAY = 0;
 	//
 	//
-	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b0;
 	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)
ParseResult:
UPD HdlIdDef@@F_OPT_CLK2FFLOGIC to F_OPT_CLK2FFLOGIC
    UPD HdlValueInt@@1 to 0


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -81,6 +81,15 @@ module	fwb_slave(i_clk, i_reset,
 	parameter	[0:0]	F_OPT_DISCONTINUOUS = 0;
 	//
 	//
+	// If true, insist that there be a minimum of a single clock delay
+	// between request and response.  This defaults to off since the
+	// wishbone specification specifically doesn't require this.  However,
+	// some interfaces do, so we allow it as an option here.
+	parameter	[0:0]	F_OPT_MINCLOCK_DELAY = 0;
+	//
+	//
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)
 				? F_MAX_STALL : F_MAX_ACK_DELAY;

ParseResult:
INS HdlIdDef@@F_OPT_MINCLOCK_DELAY to params
HdlIdDef: F_OPT_MINCLOCK_DELAY
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@F_OPT_CLK2FFLOGIC to params
HdlIdDef: F_OPT_CLK2FFLOGIC
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -159,18 +168,21 @@ module	fwb_slave(i_clk, i_reset,
 	end
 
 	// Things can only change on the positive edge of the clock
-	always @($global_clock)
-	if ((f_past_valid)&&(!$rose(i_clk)))
+	generate if (F_OPT_CLK2FFLOGIC)
 	begin
-		assert($stable(i_reset));
-		assume($stable(i_wb_cyc));
-		assume($stable(f_request)); // The entire request should b stabl
-		//
-		assert($stable(i_wb_ack));
-		assert($stable(i_wb_stall));
-		assert($stable(i_wb_idata));
-		assert($stable(i_wb_err));
-	end
+		always @($global_clock)
+		if ((f_past_valid)&&(!$rose(i_clk)))
+		begin
+			assert($stable(i_reset));
+			assume($stable(i_wb_cyc));
+			assume($stable(f_request)); // The entire request should b stabl
+			//
+			assert($stable(i_wb_ack));
+			assert($stable(i_wb_stall));
+			assert($stable(i_wb_idata));
+			assert($stable(i_wb_err));
+		end
+	end endgenerate
 
 	//
 	//

ParseResult:
INS HdlStmIf@@ to objs

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: CALL
            list: ops
                HdlValueId: $global_clock
    HdlStmIf: body
        HdlOp: AND_LOG
            list: ops
                HdlValueId: f_past_valid
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $rose
                                HdlValueId: i_clk
        HdlStmBlock: SEQ
            list: body
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_reset
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_cyc
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: f_request
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_ack
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_stall
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_idata
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_err
        list: elifs


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -196,7 +208,11 @@ module	fwb_slave(i_clk, i_reset,
 			&&($past(i_wb_stall))&&(i_wb_cyc))
 	begin
 		assume(i_wb_stb);
-		assume($stable(f_request));
+		assume(i_wb_we   == $past(i_wb_we));
+		assume(i_wb_addr == $past(i_wb_addr));
+		assume(i_wb_sel  == $past(i_wb_sel));
+		if (i_wb_we)
+			assume(i_wb_data == $past(i_wb_data));
 	end
 
 	// Within any series of STB/requests, the direction of the request

ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: i_wb_we
    HdlOp: CALL
        list: ops
            HdlValueId: assume
            HdlOp: EQ
                list: ops
                    HdlValueId: i_wb_data
                    HdlOp: CALL
                        list: ops
                            HdlValueId: $past
                            HdlValueId: i_wb_data
    list: elifs

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@CALL to CALL
            MOV HdlOp@@CALL to ops
            HdlOp: CALL
                list: ops
                    HdlValueId: $stable
                    HdlValueId: f_request
            UPD HdlOp@@CALL to CALL
                UPD HdlValueId@@$stable to $past
                UPD HdlValueId@@f_request to i_wb_we


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -271,7 +287,8 @@ module	fwb_slave(i_clk, i_reset,
 		initial	f_ackwait_count = 0;
 		always @(posedge i_clk)
 			if ((!i_reset)&&(i_wb_cyc)&&(!i_wb_stb)
-					&&(!i_wb_ack)&&(!i_wb_err))
+					&&(!i_wb_ack)&&(!i_wb_err)
+					&&(f_outstanding > 0))
 			begin
 				f_ackwait_count <= f_ackwait_count + 1'b1;
 				assert(f_ackwait_count < F_MAX_ACK_DELAY);

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_reset
                                    HdlValueId: i_wb_cyc
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_wb_ack
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wb_err


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -325,10 +342,16 @@ module	fwb_slave(i_clk, i_reset,
 			// no acknowledgements ... however, an acknowledgement
 			// *can* come back on the same clock as the stb is
 			// going out.
-			assert((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
-			// The same is true of errors.  They may not be
-			// created before the request gets through
-			assert((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			if (F_OPT_MINCLOCK_DELAY)
+			begin
+				assert(!i_wb_ack);
+				assert(!i_wb_err);
+			end else begin
+				assert((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
+				// The same is true of errors.  They may not be
+				// created before the request gets through
+				assert((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			end
 		end
 
 	generate if (!F_OPT_RMW_BUS_OPTION)
ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmIf@@body to body
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlOp: CALL
                list: ops
                    HdlValueId: assert
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_ack
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall
            HdlOp: CALL
                list: ops
                    HdlValueId: assert
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_err
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall


CommitId: a786b962322405c33fceea56cf205f727eaf1d7e
Fixed the broken misaligned data bus detection, now poss. with SymbiYosys scripts
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -101,7 +101,8 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 	reg			r_wb_cyc_gbl, r_wb_cyc_lcl, fifo_full;
 	reg	[(FLN-1):0]		rdaddr, wraddr;
 	wire	[(FLN-1):0]		nxt_rdaddr, fifo_fill;
-	reg	[(4+5-1):0]	fifo_oreg [0:15];
+	reg	[(3+5-1):0]	fifo_oreg [0:15];
+	reg			fifo_gie;
 	initial	rdaddr = 0;
 	initial	wraddr = 0;
 

ParseResult:
INS HdlIdDef@@fifo_oreg to objs

INS HdlIdDef@@fifo_gie to objs
HdlIdDef: fifo_gie
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

INS HdlStmProcess@@ to objs

UPD HdlIdDef@@fifo_oreg to fifo_oreg
    INS HdlOp@@INDEX to fifo_oreg
    INS HdlDirection@@INTERNAL to fifo_oreg
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@PARAMETRIZATION to ops
        HdlOp: PARAMETRIZATION
            list: ops
                HdlValueId: reg
                HdlOp: DOWNTO
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlValueInt: 3
                                        HdlValueInt: 5
                                HdlValueInt: 1
                        HdlValueInt: 0

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

UPD HdlIdDef@@fifo_oreg to fifo_oreg
    UPD HdlOp@@INDEX to INDEX
        MOV HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 0
                HdlValueInt: 15
        DEL HdlOp@@PARAMETRIZATION from ops
        HdlOp: PARAMETRIZATION
            list: ops
                HdlValueId: reg
                HdlOp: DOWNTO
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlValueInt: 4
                                        HdlValueInt: 5
                                HdlValueInt: 1
                        HdlValueInt: 0
        DEL list@@ops from INDEX
    DEL HdlOp@@INDEX from fifo_oreg
    DEL HdlDirection@@INTERNAL from fifo_oreg

DEL HdlIdDef@@fifo_oreg from objs

DEL HdlStmProcess@@ from objs


CommitId: a786b962322405c33fceea56cf205f727eaf1d7e
Fixed the broken misaligned data bus detection, now poss. with SymbiYosys scripts
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -111,16 +112,20 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 	if (OPT_ALIGNMENT_ERR)
 	begin
 		casez({ i_op[2:1], i_addr[1:0] })
-		4'b01?1: misaligned = 1'b1;
-		4'b0110: misaligned = 1'b1;
-		4'b10?1: misaligned = 1'b1;
-		default: misaligned = 1'b0;
+		4'b01?1: misaligned = i_pipe_stb;
+		4'b0110: misaligned = i_pipe_stb;
+		4'b10?1: misaligned = i_pipe_stb;
+		default: misaligned = i_pipe_stb;
 		endcase
 	end else
 		misaligned = 1'b0;
 
 	always @(posedge i_clk)
-		fifo_oreg[wraddr] <= { i_oreg, i_op[2:1], i_addr[1:0] };
+		fifo_oreg[wraddr] <= { i_oreg[3:0], i_op[2:1], i_addr[1:0] };
+
+	always @(posedge i_clk)
+	if (i_pipe_stb)
+		fifo_gie <= i_oreg[4];
 
 	initial	wraddr = 0;
 	always @(posedge i_clk)

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlValueId: i_pipe_stb
        HdlStmAssign: if_true
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_oreg
                    HdlValueInt: 4
            HdlValueId: fifo_gie
        list: elifs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@OPT_ALIGNMENT_ERR to body
    INS HdlStmBlock@@SEQ to body
    INS list@@elifs to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    MOV HdlOp@@ASSIGN to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueInt: 0
    MOV HdlOp@@CONCAT to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: CONCAT
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 1
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
    DEL HdlStmCaseType@@CASEZ from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueInt: 1
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueInt: 1
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueInt: 1

INS HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to body

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
    INS HdlOp@@ASSIGN to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueId: i_pipe_stb

UPD HdlStmAssign@@body to body
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlOp@@INDEX to ops
            UPD HdlOp@@INDEX to INDEX
                INS list@@ops to INDEX
                INS HdlOp@@DOWNTO to ops
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 3
                        HdlValueInt: 0

UPD HdlStmAssign@@body to body
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlValueId@@i_oreg to ops
            HdlValueId: i_oreg

UPD HdlStmIf@@body to body
    DEL HdlValueId@@OPT_ALIGNMENT_ERR from body
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from body
    DEL list@@elifs from body
    DEL HdlOp@@ASSIGN from body
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueInt: 0

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: a786b962322405c33fceea56cf205f727eaf1d7e
Fixed the broken misaligned data bus detection, now poss. with SymbiYosys scripts
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -256,10 +261,10 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 		o_err <= ((cyc)&&(i_wb_err))||((i_pipe_stb)&&(misaligned));
 	assign	o_busy = cyc;
 
-	wire	[8:0]	w_wreg;
+	wire	[7:0]	w_wreg;
 	assign	w_wreg = fifo_oreg[rdaddr];
 	always @(posedge i_clk)
-		o_wreg <= w_wreg[8:4];
+		o_wreg <= { fifo_gie, w_wreg[7:4] };
 	always @(posedge i_clk)
 		if ((OPT_ZERO_ON_IDLE)&&((!cyc)||((!i_wb_ack)&&(!i_wb_err))))
 			o_result <= 0;

ParseResult:
INS HdlIdDef@@w_wreg to objs
HdlIdDef: w_wreg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: CONCAT
        list: ops
            HdlValueId: fifo_gie
            HdlOp: INDEX
                list: ops
                    HdlValueId: w_wreg
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 7
                            HdlValueInt: 4
    HdlValueId: o_wreg

DEL HdlIdDef@@w_wreg from objs
HdlIdDef: w_wreg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlStmAssign@@body from 
HdlStmAssign: body
    HdlOp: INDEX
        list: ops
            HdlValueId: w_wreg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 4
    HdlValueId: o_wreg

DEL HdlStmProcess@@ from objs


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -88,6 +88,19 @@ module	fwb_master(i_clk, i_reset,
 	parameter	[0:0]	F_OPT_DISCONTINUOUS = 0;
 	//
 	//
+	// If true, insist that there be a minimum of a single clock delay
+	// between request and response.  This defaults to off since the
+	// wishbone specification specifically doesn't require this.  However,
+	// some interfaces do, so we allow it as an option here.
+	parameter	[0:0]	F_OPT_MINCLOCK_DELAY = 0;
+	//
+	//
+	// F_OPT_CLK2FFLOGIC needs to be set to true any time the clk2fflogic
+	// command is present in the yosys script.  If clk2fflogic isn't used,
+	// then setting this parameter to zero will eliminate some formal
+	// tests which would then be inappropriate.
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)
 				? F_MAX_STALL : F_MAX_ACK_DELAY;

ParseResult:
INS HdlIdDef@@F_OPT_MINCLOCK_DELAY to params
HdlIdDef: F_OPT_MINCLOCK_DELAY
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@F_OPT_CLK2FFLOGIC to params
HdlIdDef: F_OPT_CLK2FFLOGIC
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -139,7 +152,7 @@ module	fwb_master(i_clk, i_reset,
 		f_past_valid <= 1'b1;
 	always @(*)
 		if (!f_past_valid)
-			assume(i_reset);
+			assert(i_reset);
 	//
 	//
 	// Assertions regarding the initial (and reset) state

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: f_past_valid
    DEL HdlOp@@CALL from body
    HdlOp: CALL
        list: ops
            HdlValueId: assume
            HdlValueId: i_reset
    DEL list@@elifs from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -166,21 +179,21 @@ module	fwb_master(i_clk, i_reset,
 	end
 
 	// Things can only change on the positive edge of the clock
-	always @($global_clock)
-	if ((f_past_valid)&&(!$rose(i_clk)))
+	generate if (F_OPT_CLK2FFLOGIC)
 	begin
-		assert($stable(i_reset));
-		assert($stable(i_wb_cyc));
-		if (i_wb_we)
+		always @($global_clock)
+		if ((f_past_valid)&&(!$rose(i_clk)))
+		begin
+			assert($stable(i_reset));
+			assert($stable(i_wb_cyc));
 			assert($stable(f_request)); // The entire request should b stabl
-		else
-			assert($stable(f_request[(2+AW-1):(DW+DW/8)]));
-		//
-		assume($stable(i_wb_ack));
-		assume($stable(i_wb_stall));
-		assume($stable(i_wb_idata));
-		assume($stable(i_wb_err));
-	end
+			//
+			assume($stable(i_wb_ack));
+			assume($stable(i_wb_stall));
+			assume($stable(i_wb_idata));
+			assume($stable(i_wb_err));
+		end
+	end endgenerate
 
 	//
 	//

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@body to body
    INS HdlOp@@CALL to body
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlValueId: i_reset
    INS list@@elifs to body

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: CALL
            list: ops
                HdlValueId: $global_clock
    HdlStmIf: body
        HdlOp: AND_LOG
            list: ops
                HdlValueId: f_past_valid
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $rose
                                HdlValueId: i_clk
        HdlStmBlock: SEQ
            list: body
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_reset
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_cyc
                HdlStmIf
                    HdlValueId: i_wb_we
                    HdlOp: CALL
                        list: ops
                            HdlValueId: assert
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $stable
                                    HdlValueId: f_request
                    list: elifs
                    HdlOp: CALL
                        list: ops
                            HdlValueId: assert
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $stable
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: f_request
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: AW
                                                            HdlValueInt: 1
                                                    HdlOp: ADD
                                                        list: ops
                                                            HdlValueId: DW
                                                            HdlOp: DIV
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 8
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_ack
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_stall
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_idata
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_err
        list: elifs

DEL HdlStmIf@@ from body
HdlStmIf
    HdlValueId: i_wb_we
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: CALL
                list: ops
                    HdlValueId: $stable
                    HdlValueId: f_request
    list: elifs
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: CALL
                list: ops
                    HdlValueId: $stable
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: f_request
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueId: AW
                                            HdlValueInt: 1
                                    HdlOp: ADD
                                        list: ops
                                            HdlValueId: DW
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: DW
                                                    HdlValueInt: 8


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -206,7 +219,11 @@ module	fwb_master(i_clk, i_reset,
 			&&($past(i_wb_stall))&&(i_wb_cyc))
 	begin
 		assert(i_wb_stb);
-		assert($stable(f_request));
+		assert(i_wb_we   == $past(i_wb_we));
+		assert(i_wb_addr == $past(i_wb_addr));
+		assert(i_wb_sel  == $past(i_wb_sel));
+		if (i_wb_we)
+			assert(i_wb_data == $past(i_wb_data));
 	end
 
 	// Within any series of STB/requests, the direction of the request

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@F_OPT_CLK2FFLOGIC to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: i_wb_we
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: EQ
                list: ops
                    HdlValueId: i_wb_data
                    HdlOp: CALL
                        list: ops
                            HdlValueId: $past
                            HdlValueId: i_wb_data
    list: elifs

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@CALL to body
        HdlOp: CALL
            list: ops
                HdlValueId: assert
                HdlOp: CALL
                    list: ops
                        HdlValueId: $stable
                        HdlValueId: f_request


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -335,10 +352,16 @@ module	fwb_master(i_clk, i_reset,
 			// no acknowledgements ... however, an acknowledgement
 			// *can* come back on the same clock as the stb is
 			// going out.
-			assume((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
-			// The same is true of errors.  They may not be
-			// created before the request gets through
-			assume((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			if (F_OPT_MINCLOCK_DELAY)
+			begin
+				assume(!i_wb_ack);
+				assume(!i_wb_err);
+			end else begin
+				assume((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
+				// The same is true of errors.  They may not be
+				// created before the request gets through
+				assume((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			end
 		end
 
 	generate if (F_OPT_SOURCE)
ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmIf@@body to body
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlOp: CALL
                list: ops
                    HdlValueId: assume
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_ack
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall
            HdlOp: CALL
                list: ops
                    HdlValueId: assume
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_err
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall


CommitId: f0d7095a0f2d1bfa126dd5d8676042be431a617e
Fixed idecode to return phase=0 on illegal fetch, fixes illegal insn behav
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -370,7 +370,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				// back to the first
 				r_phase <= 0;
 			else
-				r_phase <= (i_instruction[`CISBIT]);
+				r_phase <= (i_instruction[`CISBIT])&&(!i_illegal);
 		end else if (i_ce)
 			r_phase <= 1'b0;
 

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    INS HdlOp@@AND_LOG to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: i_illegal

UPD HdlStmAssign@@if_false to if_false
    MOV HdlOp@@INDEX to if_false
    HdlOp: INDEX
        list: ops
            HdlValueId: i_instruction
            HdlValueInt: 31


CommitId: 48740c94544dceef27006280064319898b78a9b0
Formally proved the ZipTimer
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -71,12 +71,12 @@
 //
 `default_nettype	none
 //
-module	ziptimer(i_clk, i_rst, i_ce,
+module	ziptimer(i_clk, i_reset, i_ce,
 		i_wb_cyc, i_wb_stb, i_wb_we, i_wb_data,
 			o_wb_ack, o_wb_stall, o_wb_data,
 		o_int);
 	parameter	BW = 32, VW = (BW-1), RELOADABLE=1;
-	input	wire		i_clk, i_rst, i_ce;
+	input	wire		i_clk, i_reset, i_ce;
 	// Wishbone inputs
 	input	wire		i_wb_cyc, i_wb_stb, i_wb_we;
 	input	wire [(BW-1):0]	i_wb_data;

ParseResult:
UPD HdlIdDef@@i_rst to i_reset


CommitId: 48740c94544dceef27006280064319898b78a9b0
Formally proved the ZipTimer
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -90,18 +90,18 @@ module	ziptimer(i_clk, i_rst, i_ce,
 	reg			r_running;
 
 	wire	wb_write;
-	assign	wb_write = ((i_wb_cyc)&&(i_wb_stb)&&(i_wb_we));
+	assign	wb_write = ((i_wb_stb)&&(i_wb_we));
 
 	wire	auto_reload;
 	wire	[(VW-1):0]	reload_value;
 
 	initial	r_running = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
+		if (i_reset)
 			r_running <= 1'b0;
 		else if (wb_write)
 			r_running <= (|i_wb_data[(VW-1):0]);
-		else if ((o_int)&&(~auto_reload))
+		else if ((r_zero)&&(!auto_reload))
 			r_running <= 1'b0;
 
 	generate

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@i_rst to i_reset
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@o_int to r_zero
        UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@i_wb_stb to ops
            HdlValueId: i_wb_stb
            DEL HdlValueId@@i_wb_cyc from ops
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops


CommitId: 48740c94544dceef27006280064319898b78a9b0
Formally proved the ZipTimer
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -113,15 +113,21 @@ module	ziptimer(i_clk, i_rst, i_ce,
 		initial	r_auto_reload = 1'b0;
 
 		always @(posedge i_clk)
-			if (wb_write)
-				r_auto_reload <= (i_wb_data[(BW-1)]);
+			if (i_reset)
+				r_auto_reload <= 1'b0;
+			else if (wb_write)
+				r_auto_reload <= (i_wb_data[(BW-1)])
+					&&(|i_wb_data[(VW-1):0]);
 
 		assign	auto_reload = r_auto_reload;
 
 		// If setting auto-reload mode, and the value to other
 		// than zero, set the auto-reload value
+		initial	r_reload_value = 0;
 		always @(posedge i_clk)
-			if ((wb_write)&&(i_wb_data[(BW-1)])&&(|i_wb_data[(VW-1):0]))
+			if (i_reset)
+				r_reload_value <= 0;
+			else if ((wb_write)&&(i_wb_data[(BW-1)]))
 				r_reload_value <= i_wb_data[(VW-1):0];
 		assign	reload_value = r_reload_value;
 	end else begin

ParseResult:
INS HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_reload_value
                    HdlValueInt: 0
            HdlStmWait:
                list: val

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_auto_reload

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_reload_value

UPD HdlStmIf@@body to body
    MOV HdlValueId@@wb_write to body
    HdlValueId: wb_write
    DEL list@@elifs from body

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: SUB
                list: ops
                    HdlValueId: BW
                    HdlValueInt: 1
    HdlValueId: r_auto_reload

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: wb_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_wb_data
                        HdlOp: SUB
                            list: ops
                                HdlValueId: BW
                                HdlValueInt: 1
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: wb_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_wb_data
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: BW
                                    HdlValueInt: 1
            HdlOp: OR_UNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_wb_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: VW
                                            HdlValueInt: 1
                                    HdlValueInt: 0
    DEL list@@elifs from body

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: VW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueId: r_reload_value

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@INDEX to if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: SUB
                list: ops
                    HdlValueId: BW
                    HdlValueInt: 1


CommitId: acd3b2bacab6fe1b92a9166bf68ef3dd0f315f76
Fixed prefetch, so it won't declare an error if the address changes mid cycle
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -120,7 +120,7 @@ module	prefetch(i_clk, i_rst, i_ce, i_stalled_n, i_pc, i_aux,
 		if ((o_wb_cyc)&&(i_wb_ack))
 		begin
 			o_valid <= (i_pc == o_wb_addr)&&(~i_wb_err);
-			o_illegal <= i_wb_err;
+			o_illegal <= (i_wb_err)&&(i_pc == o_wb_addr);
 		end else if (i_stalled_n)
 		begin
 			o_valid <= 1'b0;
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlValueId: i_pc
                HdlValueId: o_wb_addr

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@i_wb_err to 
    HdlValueId: i_wb_err


