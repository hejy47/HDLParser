48740c94544dceef27006280064319898b78a9b0
Formally proved the ZipTimer
diff --git a/rtl/peripherals/ziptimer.v b/rtl/peripherals/ziptimer.v
index d8a5cb2..530ffd8 100644
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -71,12 +71,12 @@
 //
 `default_nettype	none
 //
-module	ziptimer(i_clk, i_rst, i_ce,
+module	ziptimer(i_clk, i_reset, i_ce,
 		i_wb_cyc, i_wb_stb, i_wb_we, i_wb_data,
 			o_wb_ack, o_wb_stall, o_wb_data,
 		o_int);
 	parameter	BW = 32, VW = (BW-1), RELOADABLE=1;
-	input	wire		i_clk, i_rst, i_ce;
+	input	wire		i_clk, i_reset, i_ce;
 	// Wishbone inputs
 	input	wire		i_wb_cyc, i_wb_stb, i_wb_we;
 	input	wire [(BW-1):0]	i_wb_data;
@@ -90,18 +90,18 @@ module	ziptimer(i_clk, i_rst, i_ce,
 	reg			r_running;
 
 	wire	wb_write;
-	assign	wb_write = ((i_wb_cyc)&&(i_wb_stb)&&(i_wb_we));
+	assign	wb_write = ((i_wb_stb)&&(i_wb_we));
 
 	wire	auto_reload;
 	wire	[(VW-1):0]	reload_value;
 
 	initial	r_running = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
+		if (i_reset)
 			r_running <= 1'b0;
 		else if (wb_write)
 			r_running <= (|i_wb_data[(VW-1):0]);
-		else if ((o_int)&&(~auto_reload))
+		else if ((r_zero)&&(!auto_reload))
 			r_running <= 1'b0;
 
 	generate
@@ -113,15 +113,21 @@ module	ziptimer(i_clk, i_rst, i_ce,
 		initial	r_auto_reload = 1'b0;
 
 		always @(posedge i_clk)
-			if (wb_write)
-				r_auto_reload <= (i_wb_data[(BW-1)]);
+			if (i_reset)
+				r_auto_reload <= 1'b0;
+			else if (wb_write)
+				r_auto_reload <= (i_wb_data[(BW-1)])
+					&&(|i_wb_data[(VW-1):0]);
 
 		assign	auto_reload = r_auto_reload;
 
 		// If setting auto-reload mode, and the value to other
 		// than zero, set the auto-reload value
+		initial	r_reload_value = 0;
 		always @(posedge i_clk)
-			if ((wb_write)&&(i_wb_data[(BW-1)])&&(|i_wb_data[(VW-1):0]))
+			if (i_reset)
+				r_reload_value <= 0;
+			else if ((wb_write)&&(i_wb_data[(BW-1)]))
 				r_reload_value <= i_wb_data[(VW-1):0];
 		assign	reload_value = r_reload_value;
 	end else begin
@@ -133,27 +139,47 @@ module	ziptimer(i_clk, i_rst, i_ce,
 	reg	[(VW-1):0]	r_value;
 	initial	r_value = 0;
 	always @(posedge i_clk)
-		if (wb_write)
+		if (i_reset)
+			r_value <= 0;
+		else if (wb_write)
 			r_value <= i_wb_data[(VW-1):0];
-		else if ((r_running)&&(i_ce)&&(~o_int))
-			r_value <= r_value + {(VW){1'b1}}; // r_value - 1;
-		else if ((r_running)&&(auto_reload)&&(o_int))
-			r_value <= reload_value;
+		else if ((i_ce)&&(r_running))
+		begin
+			if (!r_zero)
+				r_value <= r_value + {(VW){1'b1}};
+			else if ((auto_reload)&&(r_zero))
+				r_value <= reload_value;
+		end
 
 	// Set the interrupt on our last tick, as we transition from one to
 	// zero.
+	reg	r_zero  = 1'b1;
+	always @(posedge i_clk)
+		if (i_reset)
+			r_zero = 1'b1;
+		else if (wb_write)
+			r_zero <= (i_wb_data[(VW-1):0] == 0);
+		else if ((r_running)&&(i_ce))
+		begin
+			if (r_value == {{(VW-1){1'b0}}, 1'b1 })
+				r_zero <= 1'b1;
+			else if ((r_zero)&&(auto_reload))
+				r_zero <= 1'b0;
+		end
+
 	initial	o_int   = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
+		if ((i_reset)||(wb_write))
 			o_int <= 1'b0;
 		else if (i_ce)
-		o_int <= (r_running)&&(r_value == { {(VW-1){1'b0}}, 1'b1 });
+			o_int <= (!o_int)&&(r_running)
+				&&(r_value == { {(VW-1){1'b0}}, 1'b1 });
 		else
 			o_int <= 1'b0;
 
 	initial	o_wb_ack = 1'b0;
 	always @(posedge i_clk)
-		o_wb_ack <= (i_wb_cyc)&&(i_wb_stb);
+		o_wb_ack <= (!i_reset)&&(i_wb_stb);
 	assign	o_wb_stall = 1'b0;
 
 	generate
@@ -169,4 +195,87 @@ module	ziptimer(i_clk, i_rst, i_ce,
 	assign	unused = { i_wb_cyc, i_wb_data };
 	// verilator lint_on  UNUSED
 
+`ifdef	FORMAL
+	always @(*)
+		if (r_value != 0)
+			assert(r_running);
+	always @(posedge i_clk)
+	if ((f_past_valid)&&(!$past(i_reset)))
+	begin
+		if ((!$past(wb_write))&&($past(i_ce)))
+			assert(o_int == ((r_running)&&(r_value == 0)));
+		else
+			assert(!o_int);
+	end
+
+	reg	f_past_valid;
+	initial	f_past_valid = 1'b0;
+	always @(posedge i_clk)
+		f_past_valid <= 1'b1;
+	initial	assume(i_reset);
+	always @(*)
+		if (!f_past_valid)
+			assume(i_reset);
+
+	always @(posedge i_clk)
+	if ((f_past_valid)&&($past(i_reset)))
+	begin
+		assert(r_value     == 0);
+		assert(auto_reload == 0);
+		assert(r_running   == 0);
+	end
+
+	always @(*)
+		if (auto_reload)
+			assert(reload_value != 0);
+
+	always @(posedge i_clk)
+	if ((f_past_valid)&&(!$past(i_reset))
+			&&(!$past(wb_write))&&($past(r_value)==0)
+			&&(!$past(auto_reload)))
+		assert(r_value == 0);
+
+	always @(posedge i_clk)
+	if ((f_past_valid)&&(!$past(i_reset))
+			&&(!$past(wb_write))&&($past(r_value)==0)
+			&&($past(auto_reload)))
+	begin
+		if ($past(i_ce))
+			assert(r_value == reload_value);
+		else
+			assert(r_value == $past(r_value));
+	end
+
+	always @(posedge i_clk)
+	if ((f_past_valid)&&(!$past(i_reset))
+			&&(!$past(wb_write))&&($past(r_value)!=0))
+	begin
+		if ($past(i_ce))
+			assert(r_value == $past(r_value)-1'b1);
+		else
+			assert(r_value == $past(r_value));
+	end
+
+	always @(posedge i_clk)
+		assert(r_zero == (r_value == 0));
+
+
+	always @(posedge i_clk)
+	if ((f_past_valid)&&(!$past(i_reset))&&($past(wb_write)))
+		assert(r_value == $past(i_wb_data[(VW-1):0]));
+	always @(posedge i_clk)
+	if ((f_past_valid)&&(!$past(i_reset))&&($past(wb_write))&&(RELOADABLE)
+		&&(|$past(i_wb_data[(VW-1):0])))
+		assert(auto_reload == $past(i_wb_data[(BW-1)]));
+	always @(*)
+		if (auto_reload)
+			assert(reload_value != 0);
+	always @(*)
+		if (!RELOADABLE)
+			assert(auto_reload == 0);
+
+	always @(*)
+		if (auto_reload)
+			assert(r_running);
+`endif
 endmodule