672e53258a74bd7162e0e2a6e03f77dc93d10dd4
Fixed broken delay branch implementation, following broken formal prop
diff --git a/rtl/core/idecode.v b/rtl/core/idecode.v
index e3c4d9a..257f6f0 100644
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -139,19 +139,13 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	begin
 		if (OPT_CIS)
 		begin : CIS_EARLY_BRANCHING
-			reg	r_pre_ljmp;
-			always @(posedge i_clk)
-			if ((i_reset)||(o_early_branch))
-				r_pre_ljmp <= 1'b0;
-			else if ((i_ce)&&(i_pf_valid))
-				r_pre_ljmp <= (!o_phase)&&(i_instruction[`CISBIT])
-					&&(i_instruction[14:0] == 15'h7cf8);
-			else if (i_ce)
-				r_pre_ljmp <= 1'b0;
-	
-			assign	w_cis_ljmp = r_pre_ljmp;
+
+			assign	w_cis_ljmp = (iword[31:16] == 16'hfcf8);
+
 		end else begin : NOCIS_EARLY_BRANCH
+
 			assign	w_cis_ljmp = 1'b0;
+
 		end
 
 		assign	w_ljmp = (iword == 32'h7c87c000);
@@ -366,12 +360,25 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		// When no instruction is in the pipe, phase is zero
 		initial	r_phase = 1'b0;
 		always @(posedge i_clk)
-		if ((i_reset)||(o_early_branch)||(w_ljmp_dly))
+		if ((i_reset)||(w_ljmp_dly))
 			r_phase <= 1'b0;
 		else if ((i_ce)&&(i_pf_valid))
-			r_phase <= (o_phase)? 1'b0
-				: ((i_instruction[`CISBIT])&&(i_pf_valid));
-		else if (i_ce)
+		begin
+			if (o_phase)
+				// CIS instructions only have two parts.  On
+				// the second part (o_phase is true), return
+				// back to the first
+				r_phase <= 0;
+			else if ((i_instruction[`CISBIT])&&(w_dcdR_pc)&&(w_wR))
+				// CIS instructions are unconditional.
+				// Therefore, any write to the PC will affect
+				// the PC, and the second half of the
+				// instruction will be irrelevant and may be
+				// ignored.
+				r_phase <= 0;
+			else
+				r_phase <= (i_instruction[`CISBIT]);
+		end else if (i_ce)
 			r_phase <= 1'b0;
 
 		assign	o_phase = r_phase;
@@ -518,7 +525,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				r_ljmp <= 1'b0;
 			else if (i_ce)
 			begin
-				if ((OPT_CIS)&&(o_phase))
+				if ((OPT_CIS)&&(iword[`CISBIT]))
 					r_ljmp <= w_cis_ljmp;
 				else if (i_pf_valid)
 					r_ljmp <= (w_ljmp);
@@ -536,7 +543,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		begin
 			if (r_ljmp)
 			begin
-				// LOD (PC),PC
+				// LW (PC),PC
 				r_early_branch     <= 1'b1;
 				r_early_branch_stb <= 1'b1;
 			end else if ((!iword[`CISBIT])&&(iword[30:27]==`CPU_PC_REG)
@@ -546,10 +553,10 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				begin
 					// Add x,PC
 					r_early_branch     <= 1'b1;
-					r_early_branch_stb  <= 1'b1;
+					r_early_branch_stb <= 1'b1;
 				end else begin
 					r_early_branch     <= 1'b0;
-					r_early_branch_stb  <= 1'b0;
+					r_early_branch_stb <= 1'b0;
 				end
 			// LDI #x,PC is no longer supported
 			end else begin
@@ -1279,83 +1286,90 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	end
 
 	generate if (OPT_EARLY_BRANCHING)
-	begin always @(posedge i_clk)
-	if ((f_past_valid)&&($past(i_ce))&&(!$past(i_reset)))
 	begin
-		if ($past(i_pf_valid))
+		always @(posedge i_clk)
+		if ((f_past_valid)&&($past(i_ce))&&(!$past(i_reset)))
 		begin
-			if ($past(o_ljmp))
-			begin
-				// 2nd half of LOD(PC),PC
-				assert(o_early_branch);
-				assert(o_early_branch_stb);
-				// assert((i_stalled)||(!o_ljmp));
-			end else if ((!$past(iword[`CISBIT]))&&($past(w_add))
-				&&(!$past(w_rB))
-				&&($past(w_cond[3]))
-				&&(o_dcdR[4:0]=={ i_gie, 4'hf }))
+			if ($past(i_pf_valid))
 			begin
-				// ADD #x,PC
-				assert(o_early_branch);
-				assert(o_early_branch_stb);
-				assert(!o_ljmp);
-			end else if ((!$past(iword[`CISBIT]))
-				&&($past(w_cis_op == 5'h12))
-				&&($past(w_rB))
-				&&($past(w_cond[3]))
-				&&(o_zI)
-				&&(o_dcdB[4:0]=={ i_gie, 4'hf })
-				&&(o_dcdR[4:0]=={ i_gie, 4'hf }))
-			begin
-				// LOD (PC),PC
-				assert(!o_early_branch);
-				assert(!o_early_branch_stb);
-				assert(o_ljmp);
-			end else if ((OPT_CIS)&&($past(o_phase))
-				&&($past(w_cis_op == 5'h12))
-				&&($past(w_rB))
-				&&($past(w_cond[3]))
-				&&(o_zI)
-				&&(o_dcdB[4:0]=={ i_gie, 4'hf })
-				&&(o_dcdR[4:0]=={ i_gie, 4'hf }))
-			begin
-				assert(!o_early_branch);
-				assert(!o_early_branch_stb);
-				assert(o_ljmp);
-			end else begin
-				assert(!o_ljmp);
-				assert(!o_early_branch);
-			end
-		end else if ((OPT_CIS)&&($past(o_phase)))
-		begin
-			if (($past(w_cis_op == 5'h12))
-				&&($past(w_rB))
-				&&($past(w_cond[3]))
-				&&(o_zI)
-				&&(o_dcdB[4:0]=={ i_gie, 4'hf })
-				&&(o_dcdR[4:0]=={ i_gie, 4'hf }))
+				if ($past(o_ljmp))
+				begin
+					// 2nd half of LW (PC),PC
+					assert(o_early_branch);
+					assert(o_early_branch_stb);
+				end else if ((!$past(iword[`CISBIT]))&&($past(w_add))
+					&&(!$past(w_rB))
+					&&($past(w_cond[3]))
+					&&(o_dcdR[4:0]=={ i_gie, 4'hf }))
+				begin
+					// ADD #x,PC
+					assert(o_early_branch);
+					assert(o_early_branch_stb);
+				end else if ((!$past(iword[`CISBIT]))
+					&&($past(w_cis_op == 5'h12))
+					&&($past(w_rB))
+					&&($past(w_cond[3]))
+					&&(o_zI)
+					&&(o_dcdB[4:0]=={ i_gie, 4'hf })
+					&&(o_dcdR[4:0]=={ i_gie, 4'hf }))
+				begin
+					// LW (PC),PC
+					assert(!o_early_branch);
+					assert(!o_early_branch_stb);
+				end else if ((OPT_CIS)&&($past(o_phase))
+					&&($past(w_cis_op == 5'h12))
+					&&($past(w_rB))
+					&&($past(w_cond[3]))
+					&&($past(w_Iz))
+					&&($past(w_dcdB_pc))
+					&&($past(w_dcdR_pc))
+					&&(o_dcdR[4:0]=={ i_gie, 4'hf }))
+				begin
+					// (CIS) LW (PC),PC
+					assert(!o_early_branch);
+					assert(!o_early_branch_stb);
+				end else begin
+					assert(!o_early_branch);
+				end
+			end else if ((OPT_CIS)&&($past(o_phase)))
 			begin
+				if (($past(w_cis_op == 5'h12))
+					&&($past(w_rB))
+					&&($past(w_cond[3]))
+					&&($past(w_Iz))
+					&&($past(w_dcdB_pc))
+					&&($past(w_dcdR_pc)))
+				begin
+				// (CIS) LW (PC),PC
 				assert(!o_early_branch);
 				assert(!o_early_branch_stb);
-				assert(o_ljmp);
-			end else begin
-				assert(!o_early_branch);
-				assert(!o_early_branch_stb);
-				assert(!o_ljmp);
+				end else begin
+					assert(!o_early_branch);
+					assert(!o_early_branch_stb);
+				end
 			end
-		end
-		/*
-		else if ($past(o_valid)) begin
-			assert(!o_ljmp);
-			assert(!o_early_branch);
 		end else begin
-			assert(o_ljmp == $past(o_ljmp));
-			assert(!o_early_branch);
+			assert(!o_early_branch_stb);
 		end
-		*/
+
+		always @(*)
+			assume(i_instruction[31:16] != 16'hfcf8);
+
+		always @(*)
+		if ((o_valid)
+				// LW
+				&&(o_M)&&(o_op[2:0]==3'b010)
+				// Zero immediate
+				&&(o_zI)
+				// Unconditional
+				&&(o_cond[3])
+				// From PC to PC
+				&&(o_dcdR[5])&&(o_dcdB[5]))
+			assert(o_ljmp);
+		else if (o_valid)
+			assert(!o_ljmp);
+
 	end else begin
-		assert(!o_early_branch_stb);
-	end end else begin
 		always @(*)
 			assert(!o_early_branch_stb);
 		always @(*)
@@ -1390,9 +1404,10 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 
 			if ((!$past(o_phase))&&($past(i_ce))
 					&&($past(i_pf_valid))
-					&&(!$past(o_early_branch))
 					&&(!$past(w_ljmp_dly))
-					&&($past(i_instruction[`CISBIT])))
+					&&($past(i_instruction[`CISBIT]))
+					&&((!$past(w_dcdR_pc))
+						||(!$past(w_wR))))
 				assert(o_phase);
 			else if (($past(o_phase))&&($past(i_ce)))
 				assert(!o_phase);
@@ -1547,5 +1562,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	always @(posedge i_clk)
 	if ((f_past_valid)&&(!$past(i_reset))&&($past(i_ce)))
 		assert((OPT_MPY)||(o_illegal));
+
+	always @(*)
+	if (o_valid)
+		assert((!o_phase)||(!o_early_branch));
 `endif
 endmodule