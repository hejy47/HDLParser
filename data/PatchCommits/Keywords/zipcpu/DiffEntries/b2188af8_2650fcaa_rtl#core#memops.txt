b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
diff --git a/rtl/core/memops.v b/rtl/core/memops.v
index c59ce79..8e6552d 100644
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -163,14 +163,9 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	reg	[3:0]	r_op;
 	initial	o_wb_we   = 1'b0;
 	initial	o_wb_data = 0;
-	initial	o_wb_sel = 0;
+	initial	o_wb_sel  = 0;
 	always @(posedge i_clk)
-	if (i_reset)
-	begin
-		o_wb_we   <= 0;
-		o_wb_data <= 0;
-		o_wb_sel  <= 0;
-	end else if (i_stb)
+	if (i_stb)
 	begin
 		o_wb_we   <= i_op[0];
 		if (OPT_ZERO_ON_IDLE)
@@ -232,14 +227,10 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	assign	o_busy = (r_wb_cyc_gbl)||(r_wb_cyc_lcl);
 
 	always @(posedge i_clk)
-	if (i_reset)
-		o_wreg <= 0;
-	else if (i_stb)
-			o_wreg    <= i_oreg;
+	if (i_stb)
+		o_wreg    <= i_oreg;
 	always @(posedge i_clk)
-	if (i_reset)
-		o_result <= 0;
-	else if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
+	if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
 		o_result <= 32'h0;
 	else begin
 		casez(r_op)
@@ -287,14 +278,24 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 		always @(*)
 			{ lock_gbl, lock_lcl } = 2'b00;
+
+		// Make verilator happy
+		// verilator lint_off UNUSED
+		wire	[2:0]	lock_unused;
+		assign	lock_unused = { i_lock, lock_gbl, lock_lcl };
+		// verilator lint_on  UNUSED
+
 	end endgenerate
 
+`ifdef	VERILATOR
+	always @(posedge i_clk)
+	if ((r_wb_cyc_gbl)||(r_wb_cyc_lcl))
+		assert(!i_stb);
+`endif
+
 
 	// Make verilator happy
 	// verilator lint_off UNUSED
-	wire	unused;
-	assign	unused = i_lock;
-
 	generate if (AW < 22)
 	begin : TOO_MANY_ADDRESS_BITS
 
@@ -307,6 +308,7 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 `ifdef	FORMAL
 `ifdef	MEMOPS
 `define	ASSUME	assume
+`define	ASSERT	assert
 	generate if (F_OPT_CLK2FFLOGIC)
 	begin
 		reg	f_last_clk;
@@ -319,6 +321,7 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	end endgenerate
 `else
 `define	ASSUME	assert
+`define	ASSERT	assume
 `endif
 
 	reg	f_past_valid;
@@ -328,7 +331,7 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	always @(*)
 		if (!f_past_valid)
 			`ASSUME(i_reset);
-	initial	assume(!i_stb);
+	initial	`ASSUME(!i_stb);
 
 	generate if (F_OPT_CLK2FFLOGIC)
 	begin
@@ -347,6 +350,12 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	assign	f_cyc = (o_wb_cyc_gbl)||(o_wb_cyc_lcl);
 	assign	f_stb = (o_wb_stb_gbl)||(o_wb_stb_lcl);
 
+`ifdef	MEMOPS
+`define	MASTER	fwb_master
+`else
+`define	MASTER	fwb_counter
+`endif
+
 	fwb_master #(.AW(AW), .F_LGDEPTH(F_LGDEPTH),
 			.F_OPT_CLK2FFLOGIC(F_OPT_CLK2FFLOGIC),
 			.F_OPT_RMW_BUS_OPTION(IMPLEMENT_LOCK),
@@ -359,61 +368,61 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 	// Rule: Only one of the two CYC's may be valid, never both
 	always @(posedge i_clk)
-		assert((!o_wb_cyc_gbl)||(!o_wb_cyc_lcl));
+		`ASSERT((!o_wb_cyc_gbl)||(!o_wb_cyc_lcl));
 
 	// Rule: Only one of the two STB's may be valid, never both
 	always @(posedge i_clk)
-		assert((!o_wb_stb_gbl)||(!o_wb_stb_lcl));
+		`ASSERT((!o_wb_stb_gbl)||(!o_wb_stb_lcl));
 
 	// Rule: if WITH_LOCAL_BUS is ever false, neither the local STB nor CYC
 	// may be valid
 	always @(*)
 		if (!WITH_LOCAL_BUS)
 		begin
-			assert(!o_wb_cyc_lcl);
-			assert(!o_wb_stb_lcl);
+			`ASSERT(!o_wb_cyc_lcl);
+			`ASSERT(!o_wb_stb_lcl);
 		end
 
 	// Rule: If the global CYC is ever true, the LCL one cannot be true
 	// on the next clock without an intervening idle of both
 	always @(posedge i_clk)
 		if ((f_past_valid)&&($past(o_wb_cyc_gbl)))
-			assert(!o_wb_cyc_lcl);
+			`ASSERT(!o_wb_cyc_lcl);
 
 	// Same for if the LCL CYC is true
 	always @(posedge i_clk)
 		if ((f_past_valid)&&($past(o_wb_cyc_lcl)))
-			assert(!o_wb_cyc_gbl);
+			`ASSERT(!o_wb_cyc_gbl);
 
 	// STB can never be true unless CYC is also true
 	always @(posedge i_clk)
 		if (o_wb_stb_gbl)
-			assert(r_wb_cyc_gbl);
+			`ASSERT(r_wb_cyc_gbl);
 	always @(posedge i_clk)
 		if (o_wb_stb_lcl)
-			assert(r_wb_cyc_lcl);
+			`ASSERT(r_wb_cyc_lcl);
 
 	// This core only ever has zero or one outstanding transaction(s)
 	always @(posedge i_clk)
 		if ((o_wb_stb_gbl)||(o_wb_stb_lcl))
-			assert(f_outstanding == 0);
+			`ASSERT(f_outstanding == 0);
 		else
-			assert((f_outstanding == 0)||(f_outstanding == 1));
+			`ASSERT((f_outstanding == 0)||(f_outstanding == 1));
 
 	// The LOCK function only allows up to two transactions (at most)
 	// before CYC must be dropped.
 	always @(posedge i_clk)
 		if (IMPLEMENT_LOCK)
-			assert((f_nreqs == 0)||(f_nreqs == 1)||(f_nreqs == 2));
+			`ASSERT((f_nreqs == 0)||(f_nreqs == 1)||(f_nreqs == 2));
 		else
-			assert((f_nreqs == 0)||(f_nreqs == 1));
+			`ASSERT((f_nreqs == 0)||(f_nreqs == 1));
 	always @(posedge i_clk)
 		if ((o_wb_stb_gbl)||(o_wb_stb_lcl))
 		begin
 			if (IMPLEMENT_LOCK)
-				assert((f_nreqs == 0)||(f_nreqs == 1));
+				`ASSERT((f_nreqs == 0)||(f_nreqs == 1));
 			else
-				assert(f_nreqs == 0);
+				`ASSERT(f_nreqs == 0);
 		end
 
 	always @(posedge i_clk)
@@ -461,11 +470,11 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 	always @(*)
 		if (!IMPLEMENT_LOCK)
-			assume(!i_lock);
+			`ASSUME(!i_lock);
 
 	always @(posedge i_clk)
 		if ((f_past_valid)&&($past(f_cyc))&&($past(!i_lock)))
-			assume(!i_lock);
+			`ASSUME(!i_lock);
 
 	// Following any i_stb request, assuming we are idle, immediately
 	// begin a bus transaction
@@ -476,13 +485,13 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 		`ASSUME(!i_stb);
 		if ($past(misaligned))
 		begin
-			assert(!f_cyc);
-			assert(!o_busy);
-			assert(o_err);
-			assert(!o_valid);
+			`ASSERT(!f_cyc);
+			`ASSERT(!o_busy);
+			`ASSERT(o_err);
+			`ASSERT(!o_valid);
 		end else begin
-			assert(f_cyc);
-			assert(o_busy);
+			`ASSERT(f_cyc);
+			`ASSERT(o_busy);
 		end
 	end
 
@@ -492,26 +501,26 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 	always @(posedge i_clk)
 	if (o_wb_cyc_gbl)
-		assert((o_busy)||(lock_gbl));
+		`ASSERT((o_busy)||(lock_gbl));
 
 	always @(posedge i_clk)
 	if (o_wb_cyc_lcl)
-		assert((o_busy)||(lock_lcl));
+		`ASSERT((o_busy)||(lock_lcl));
 
 	always @(posedge i_clk)
 		if (f_outstanding > 0)
-			assert(o_busy);
+			`ASSERT(o_busy);
 
 	// If a transaction ends in an error, send o_err on the output port.
 	always @(posedge i_clk)
 		if (f_past_valid)
 		begin
 			if ($past(i_reset))
-				assert(!o_err);
+				`ASSERT(!o_err);
 			else if (($past(f_cyc))&&($past(i_wb_err)))
-				assert(o_err);
+				`ASSERT(o_err);
 			else if (($past(i_stb))&&($past(misaligned)))
-				assert(o_err);
+				`ASSERT(o_err);
 		end
 
 	// Always following a successful ACK, return an O_VALID value.
@@ -519,14 +528,14 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 		if (f_past_valid)
 		begin
 			if ($past(i_reset))
-				assert(!o_valid);
+				`ASSERT(!o_valid);
 			else if(($past(f_cyc))&&($past(i_wb_ack))
 					&&(!$past(o_wb_we)))
-				assert(o_valid);
+				`ASSERT(o_valid);
 			else if (($past(i_stb))&&($past(misaligned)))
-				assert((!o_valid)&&(o_err));
+				`ASSERT((!o_valid)&&(o_err));
 			else
-				assert(!o_valid);
+				`ASSERT(!o_valid);
 		end
 
 	//always @(posedge i_clk)
@@ -556,8 +565,8 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 		// Word write
 		if ($past(i_op[2:1]) == 2'b01)
 		begin
-			assert(o_wb_sel == 4'hf);
-			assert(o_wb_data == $past(i_data));
+			`ASSERT(o_wb_sel == 4'hf);
+			`ASSERT(o_wb_data == $past(i_data));
 		end
 
 		// Halfword (short) write
@@ -565,42 +574,43 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 		begin
 			if (!$past(i_addr[1]))
 			begin
-				assert(o_wb_sel == 4'hc);
-				assert(o_wb_data[31:16] == $past(i_data[15:0]));
+				`ASSERT(o_wb_sel == 4'hc);
+				`ASSERT(o_wb_data[31:16] == $past(i_data[15:0]));
 			end else begin
-				assert(o_wb_sel == 4'h3);
-				assert(o_wb_data[15:0] == $past(i_data[15:0]));
+				`ASSERT(o_wb_sel == 4'h3);
+				`ASSERT(o_wb_data[15:0] == $past(i_data[15:0]));
 			end
 		end
 
-		if ($past(i_op[2:1] == 2'b11))
+		if ($past(i_op[2:1]) == 2'b11)
 		begin
 			if ($past(i_addr[1:0])==2'b00)
 			begin
-				assert(o_wb_sel == 4'h8);
-				assert(o_wb_data[31:24] == $past(i_data[7:0]));
+				`ASSERT(o_wb_sel == 4'h8);
+				`ASSERT(o_wb_data[31:24] == $past(i_data[7:0]));
 			end
 
 			if ($past(i_addr[1:0])==2'b01)
 			begin
-				assert(o_wb_sel == 4'h4);
-				assert(o_wb_data[23:16] == $past(i_data[7:0]));
+				`ASSERT(o_wb_sel == 4'h4);
+				`ASSERT(o_wb_data[23:16] == $past(i_data[7:0]));
 			end
 			if ($past(i_addr[1:0])==2'b10)
 			begin
-				assert(o_wb_sel == 4'h2);
-				assert(o_wb_data[15:8] == $past(i_data[7:0]));
+				`ASSERT(o_wb_sel == 4'h2);
+				`ASSERT(o_wb_data[15:8] == $past(i_data[7:0]));
 			end
 			if ($past(i_addr[1:0])==2'b11)
 			begin
-				assert(o_wb_sel == 4'h1);
-				assert(o_wb_data[7:0] == $past(i_data[7:0]));
+				`ASSERT(o_wb_sel == 4'h1);
+				`ASSERT(o_wb_data[7:0] == $past(i_data[7:0]));
 			end
 		end
 
 		`ASSUME($past(i_op[2:1] != 2'b00));
 	end
 
+	/* Not doing memory pipelining--no restrictions (below) needed
 	always @(posedge i_clk)
 		if ((i_stb)&&(f_cyc)&&(WITH_LOCAL_BUS))
 		begin
@@ -609,30 +619,31 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 			restrict((o_wb_cyc_gbl)||(i_addr[31:24] ==8'hff));
 			restrict((o_wb_cyc_lcl)||(i_addr[31:24]!==8'hff));
 		end
+	*/
 
 	always @(posedge i_clk)
 		if (o_wb_stb_lcl)
-			assert(o_wb_addr[29:22] == 8'hff);
+			`ASSERT(o_wb_addr[29:22] == 8'hff);
 
 	always @(posedge i_clk)
 		if ((f_past_valid)&&(!$past(i_reset))
 			&&($past(i_stb))&&($past(misaligned)))
 		begin
-			assert(!o_wb_cyc_gbl);
-			assert(!o_wb_cyc_lcl);
-			assert(!o_wb_stb_gbl);
-			assert(!o_wb_stb_lcl);
-			assert(o_err);
+			`ASSERT(!o_wb_cyc_gbl);
+			`ASSERT(!o_wb_cyc_lcl);
+			`ASSERT(!o_wb_stb_gbl);
+			`ASSERT(!o_wb_stb_lcl);
+			`ASSERT(o_err);
 			//OPT_ALIGNMENT_ERR=1'b0,
 			//OPT_ZERO_ON_IDLE=1'b0;
 		end
 
 	always @(posedge i_clk)
 	if ((!f_past_valid)||($past(i_reset)))
-		assume(!i_stb);
+		`ASSUME(!i_stb);
 	always @(*)
 	if (o_busy)
-		assume(!i_stb);
+		`ASSUME(!i_stb);
 `endif
 endmodule
 //