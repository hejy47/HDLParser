af29287d84eeff5eb2ac63b48be6fc5461b4a59b
Fixed some remaining 8-bit byte bugs in wbdmac
diff --git a/rtl/peripherals/wbdmac.v b/rtl/peripherals/wbdmac.v
index 9bdb9da..ec529f2 100644
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -121,7 +121,7 @@ module wbdmac(i_clk, i_rst,
 			i_mwb_ack, i_mwb_stall, i_mwb_data, i_mwb_err,
 		i_dev_ints,
 		o_interrupt);
-	parameter	ADDRESS_WIDTH=32, LGMEMLEN = 10,
+	parameter	ADDRESS_WIDTH=30, LGMEMLEN = 10,
 			DW=32, LGDV=5,AW=ADDRESS_WIDTH;
 	input	wire		i_clk, i_rst;
 	// Slave/control wishbone inputs
@@ -197,7 +197,8 @@ module wbdmac(i_clk, i_rst,
 		begin
 			case(i_swb_addr)
 			2'b00: begin
-				if ((i_swb_data[31:16] == 16'h0fed)
+				if ((i_swb_data[27:16] == 12'hfed)
+					&&(i_swb_data[31:30] == 2'b00)
 						&&(cfg_len_nonzero))
 					dma_state <= `DMA_WAIT;
 				cfg_blocklen_sub_one
@@ -206,15 +207,15 @@ module wbdmac(i_clk, i_rst,
 					// i.e. -1;
 				cfg_dev_trigger    <= i_swb_data[14:10];
 				cfg_on_dev_trigger <= i_swb_data[15];
-				cfg_incs  <= ~i_swb_data[29];
-				cfg_incd  <= ~i_swb_data[28];
+				cfg_incs  <= !i_swb_data[29];
+				cfg_incd  <= !i_swb_data[28];
 				end
 			2'b01: begin
 				cfg_len   <=  i_swb_data[(AW-1):0];
 				cfg_len_nonzero <= (|i_swb_data[(AW-1):0]);
 				end
-			2'b10: cfg_raddr <=  i_swb_data[(AW-1):0];
-			2'b11: cfg_waddr <=  i_swb_data[(AW-1):0];
+			2'b10: cfg_raddr <=  i_swb_data[(AW+2-1):2];
+			2'b11: cfg_waddr <=  i_swb_data[(AW+2-1):2];
 			endcase
 		end end
 	`DMA_WAIT: begin
@@ -453,8 +454,8 @@ module wbdmac(i_clk, i_rst,
 					cfg_blocklen_sub_one
 					};
 		2'b01: o_swb_data <= { {(DW-AW){1'b0}}, cfg_len  };
-		2'b10: o_swb_data <= { {(DW-AW){1'b0}}, cfg_raddr};
-		2'b11: o_swb_data <= { {(DW-AW){1'b0}}, cfg_waddr};
+		2'b10: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_raddr, 2'b00 };
+		2'b11: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_waddr, 2'b00 };
 		endcase
 
 	// This causes us to wait a minimum of two clocks before starting: One