294c989b2fa5acddd6a35d76ffd7bba760b1e7e1
memops now creates a memory fault (bus err) on an unaligned access
diff --git a/rtl/core/memops.v b/rtl/core/memops.v
index 584c893..c958736 100644
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -55,7 +55,7 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	parameter	ADDRESS_WIDTH=30;
 	parameter [0:0]	IMPLEMENT_LOCK=1'b1,
 			WITH_LOCAL_BUS=1'b1,
-			OPT_ALIGNMENT_ERR=1'b0,
+			OPT_ALIGNMENT_ERR=1'b1,
 			OPT_ZERO_ON_IDLE=1'b0;
 	parameter [0:0]	F_OPT_CLK2FFLOGIC = 1'b0;
 	localparam	AW=ADDRESS_WIDTH;
@@ -137,35 +137,46 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 				r_wb_cyc_gbl <= 1'b0;
 				r_wb_cyc_lcl <= 1'b0;
 			end
-		end else if (i_stb) // New memory operation
-		begin // Grab the wishbone
-			r_wb_cyc_lcl <= lcl_stb;
-			r_wb_cyc_gbl <= gbl_stb;
+		end else begin // New memory operation
+			// Grab the wishbone
+			r_wb_cyc_lcl <= (lcl_stb)&&(!misaligned);
+			r_wb_cyc_gbl <= (gbl_stb)&&(!misaligned);
 		end
 	initial	o_wb_stb_gbl = 1'b0;
 	always @(posedge i_clk)
-		if ((i_reset)||((i_wb_err)&&(r_wb_cyc_gbl)))
-			o_wb_stb_gbl <= 1'b0;
-		else if (o_wb_cyc_gbl)
-			o_wb_stb_gbl <= (o_wb_stb_gbl)&&(i_wb_stall);
-		else
-			// Grab wishbone on any new transaction to the gbl bus
-			o_wb_stb_gbl <= gbl_stb;
+	if (i_reset)
+		o_wb_stb_gbl <= 1'b0;
+	else if ((i_wb_err)&&(r_wb_cyc_gbl))
+		o_wb_stb_gbl <= 1'b0;
+	else if (o_wb_cyc_gbl)
+		o_wb_stb_gbl <= (o_wb_stb_gbl)&&(i_wb_stall);
+	else
+		// Grab wishbone on any new transaction to the gbl bus
+		o_wb_stb_gbl <= (gbl_stb)&&(!misaligned);
 
 	initial	o_wb_stb_lcl = 1'b0;
 	always @(posedge i_clk)
-		if ((i_reset)||((i_wb_err)&&(r_wb_cyc_lcl)))
-			o_wb_stb_lcl <= 1'b0;
-		else if (o_wb_cyc_lcl)
-			o_wb_stb_lcl <= (o_wb_stb_lcl)&&(i_wb_stall);
-		else
-			// Grab wishbone on any new transaction to the lcl bus
-			o_wb_stb_lcl  <= lcl_stb;
+	if (i_reset)
+		o_wb_stb_lcl <= 1'b0;
+	else if ((i_wb_err)&&(r_wb_cyc_lcl))
+		o_wb_stb_lcl <= 1'b0;
+	else if (o_wb_cyc_lcl)
+		o_wb_stb_lcl <= (o_wb_stb_lcl)&&(i_wb_stall);
+	else
+		// Grab wishbone on any new transaction to the lcl bus
+		o_wb_stb_lcl  <= (lcl_stb)&&(!misaligned);
 
 	reg	[3:0]	r_op;
-	initial	o_wb_we = 1'b0;
+	initial	o_wb_we   = 1'b0;
+	initial	o_wb_data = 0;
+	initial	o_wb_sel = 0;
 	always @(posedge i_clk)
-	if (i_stb)
+	if (i_reset)
+	begin
+		o_wb_we   <= 0;
+		o_wb_data <= 0;
+		o_wb_sel  <= 0;
+	end else if (i_stb)
 	begin
 		o_wb_we   <= i_op[0];
 		if (OPT_ZERO_ON_IDLE)
@@ -213,24 +224,33 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 	initial	o_valid = 1'b0;
 	always @(posedge i_clk)
-		o_valid <= (!i_reset)&&((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
-				&&(i_wb_ack)&&(!o_wb_we);
+	if (i_reset)
+		o_valid <= 1'b0;
+	else
+		o_valid <= (((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
+				&&(i_wb_ack)&&(!o_wb_we));
 	initial	o_err = 1'b0;
 	always @(posedge i_clk)
-		if (i_reset)
-			o_err <= 1'b0;
-		else if ((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
-			o_err <= i_wb_err;
-		else
-			o_err <= ((i_stb)&&(misaligned));
+	if (i_reset)
+		o_err <= 1'b0;
+	else if (i_stb)
+		o_err <= misaligned;
+	else if ((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
+		o_err <= i_wb_err;
+	else
+		o_err <= 1'b0;
 
 	assign	o_busy = (r_wb_cyc_gbl)||(r_wb_cyc_lcl);
 
 	always @(posedge i_clk)
-		if (i_stb)
+	if (i_reset)
+		o_wreg <= 0;
+	else if (i_stb)
 			o_wreg    <= i_oreg;
 	always @(posedge i_clk)
-	if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
+	if (i_reset)
+		o_result <= 0;
+	else if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
 		o_result <= 32'h0;
 	else begin
 		casez(r_op)
@@ -254,16 +274,18 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 		initial	lock_lcl = 1'b0;
 
 		always @(posedge i_clk)
+		if (i_reset)
 		begin
-			if ((i_reset)||((i_wb_err)&&
-					((r_wb_cyc_gbl)||(r_wb_cyc_lcl))))
-			begin
-				lock_gbl <= 1'b0;
-				lock_lcl <= 1'b0;
-			end else begin
-				lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
-				lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
-			end
+			lock_gbl <= 1'b0;
+			lock_lcl <= 1'b0;
+		end else if (((i_wb_err)&&((r_wb_cyc_gbl)||(r_wb_cyc_lcl)))
+				||((i_stb)&&(misaligned)))
+		begin
+			lock_gbl <= 1'b0;
+			lock_lcl <= 1'b0;
+		end else begin
+			lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
+			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
 		end
 
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl)||(lock_gbl);
@@ -449,13 +471,21 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	// Following any i_stb request, assuming we are idle, immediately
 	// begin a bus transaction
 	always @(posedge i_clk)
-		if ((f_past_valid)&&($past(i_stb))
-			&&(!$past(f_cyc))&&(!$past(i_reset)))
+	if ((f_past_valid)&&($past(i_stb))
+		&&(!$past(f_cyc))&&(!$past(i_reset)))
+	begin
+		`ASSUME(!i_stb);
+		if ($past(misaligned))
 		begin
-			`ASSUME(!i_stb);
+			assert(!f_cyc);
+			assert(!o_busy);
+			assert(o_err);
+			assert(!o_valid);
+		end else begin
 			assert(f_cyc);
 			assert(o_busy);
 		end
+	end
 
 	always @(posedge i_clk)
 		if (f_outstanding > 0)
@@ -469,16 +499,23 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 				assert(!o_err);
 			else if (($past(f_cyc))&&($past(i_wb_err)))
 				assert(o_err);
+			else if (($past(i_stb))&&($past(misaligned)))
+				assert(o_err);
 		end
 
 	// Always following a successful ACK, return an O_VALID value.
 	always @(posedge i_clk)
 		if (f_past_valid)
 		begin
-			if (($past(i_reset))||(!$past(f_cyc)))
+			if ($past(i_reset))
 				assert(!o_valid);
-			else if (($past(i_wb_ack))&&(!$past(o_wb_we)))
+			else if(($past(f_cyc))&&($past(i_wb_ack))
+					&&(!$past(o_wb_we)))
 				assert(o_valid);
+			else if (($past(i_stb))&&($past(misaligned)))
+				assert((!o_valid)&&(o_err));
+			else
+				assert(!o_valid);
 		end
 
 	//always @(posedge i_clk)
@@ -500,7 +537,7 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	reg	[3:0]	r_op;
 	initial	o_wb_we = 1'b0;
 	always @(posedge i_clk)
-	if ((f_past_valid)&&($past(i_stb)))
+	if ((f_past_valid)&&(!$past(i_reset))&&($past(i_stb)))
 	begin
 		// On a write, assert o_wb_we should be true
 		assert( $past(i_op[0]) == o_wb_we);
@@ -565,7 +602,8 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 			assert(o_wb_addr[29:22] == 8'hff);
 
 	always @(posedge i_clk)
-		if ((f_past_valid)&&($past(i_stb))&&($past(misaligned)))
+		if ((f_past_valid)&&(!$past(i_reset))
+			&&($past(i_stb))&&($past(misaligned)))
 		begin
 			assert(!o_wb_cyc_gbl);
 			assert(!o_wb_cyc_lcl);
@@ -575,6 +613,13 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 			//OPT_ALIGNMENT_ERR=1'b0,
 			//OPT_ZERO_ON_IDLE=1'b0;
 		end
+
+	always @(posedge i_clk)
+	if ((!f_past_valid)||($past(i_reset)))
+		assume(!i_stb);
+	always @(*)
+	if (o_busy)
+		assume(!i_stb);
 `endif
 endmodule
 //