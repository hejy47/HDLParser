3b9f7334084079e5065abf6af4e743c967d113d4
jesd204: Add RX error statistics (#98)
diff --git a/library/jesd204/jesd204_rx/jesd204_rx_lane.v b/library/jesd204/jesd204_rx/jesd204_rx_lane.v
index b7598826..2911029a 100644
--- a/library/jesd204/jesd204_rx/jesd204_rx_lane.v
+++ b/library/jesd204/jesd204_rx/jesd204_rx_lane.v
@@ -73,11 +73,17 @@ module jesd204_rx_lane #(
   output [1:0] ilas_config_addr,
   output [DATA_PATH_WIDTH*8-1:0] ilas_config_data,
 
+  input ctrl_err_statistics_reset,
+  input [2:0]ctrl_err_statistics_mask,
+  output reg [31:0] status_err_statistics_cnt,
+
   output [1:0] status_cgs_state,
   output status_ifs_ready,
   output [1:0] status_frame_align
 );
 
+localparam MAX_DATA_PATH_WIDTH = 8;
+
 wire [7:0] char[0:DATA_PATH_WIDTH-1];
 wire [DATA_PATH_WIDTH-1:0] char_is_valid;
 reg [DATA_PATH_WIDTH-1:0] char_is_cgs = 1'b0;        // K28.5 /K/
@@ -99,6 +105,14 @@ wire [DATA_PATH_WIDTH*8-1:0] data_aligned;
 wire [DATA_PATH_WIDTH*8-1:0] data_scrambled_s;
 wire [DATA_PATH_WIDTH*8-1:0] data_scrambled;
 
+reg  [DATA_PATH_WIDTH-1:0] unexpected_char;
+reg  [3:0] phy_disperr_cnt;
+reg  [3:0] phy_notintable_cnt;
+reg  [3:0] phy_unexpectedk_cnt;
+wire [7:0] phy_disperr_s;
+wire [7:0] phy_notintable_s;
+wire [7:0] unexpected_char_s;
+
 wire ilas_monitor_reset_s;
 wire ilas_monitor_reset;
 wire buffer_ready_n_s;
@@ -109,6 +123,18 @@ assign status_frame_align = frame_align;
 genvar i;
 generate
 
+for (i = DATA_PATH_WIDTH; i < MAX_DATA_PATH_WIDTH; i = i + 1) begin: g_defaults
+  assign phy_disperr_s[i] = 'd0;
+  assign phy_notintable_s[i] = 'd0;
+  assign unexpected_char_s[i] = 'd0;
+end
+
+for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_err
+  assign phy_disperr_s[i] = phy_disperr[i];
+  assign phy_notintable_s[i] = phy_notintable[i];
+  assign unexpected_char_s[i] = unexpected_char[i];
+end
+
 for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char
   assign char[i] = phy_data[i*8+7:i*8];
   assign char_is_valid[i] = ~(phy_notintable[i] | phy_disperr[i]);
@@ -126,10 +152,42 @@ for (i = 0; i < DATA_PATH_WIDTH; i = i + 1) begin: gen_char
       end
     end
   end
+  always @(posedge clk) begin
+    if (char[i][4:0] != 'd28 && phy_charisk[i] && char_is_valid[i]) begin
+      unexpected_char[i] <= 1'b1;
+    end else begin
+      unexpected_char[i] <= 1'b0;
+    end
+  end
 end
-
 endgenerate
 
+  always @(posedge clk) begin
+    if (ctrl_err_statistics_mask[0] == 1'b0 && cgs_ready == 1'b1) begin
+      phy_disperr_cnt <= phy_disperr_s[0] + phy_disperr_s[1] + phy_disperr_s[2] + phy_disperr_s[3] + phy_disperr_s[4] + phy_disperr_s[5] + phy_disperr_s[6] + phy_disperr_s[7];
+    end else begin
+      phy_disperr_cnt <= 4'h0;
+    end
+    if (ctrl_err_statistics_mask[1] == 1'b0 && cgs_ready == 1'b1) begin
+      phy_notintable_cnt <= phy_notintable_s[0] +  phy_notintable_s[0] +  phy_notintable_s[1] +  phy_notintable_s[2] +  phy_notintable_s[3] +  phy_notintable_s[4] +  phy_notintable_s[5] +  phy_notintable_s[6] +  phy_notintable_s[7];
+    end else begin
+      phy_notintable_cnt <= 4'h0;
+    end
+    if (ctrl_err_statistics_mask[2] == 1'b0 && cgs_ready == 1'b1) begin
+      phy_unexpectedk_cnt <= unexpected_char_s[0] +  unexpected_char_s[1] + unexpected_char_s[2] + unexpected_char_s[3] + unexpected_char_s[4] + unexpected_char_s[5] + unexpected_char_s[6] + unexpected_char_s[7];
+    end else begin
+      phy_unexpectedk_cnt <= 4'h0;
+    end
+  end
+
+always @(posedge clk) begin
+  if (ctrl_err_statistics_reset == 1'b1) begin
+    status_err_statistics_cnt <= 32'h0;
+  end else if (status_err_statistics_cnt[31:5] != 27'h7ffffff) begin
+    status_err_statistics_cnt <= status_err_statistics_cnt + phy_notintable_cnt + phy_disperr_cnt + phy_unexpectedk_cnt;
+  end
+end
+
 always @(posedge clk) begin
   if (ifs_reset == 1'b1) begin
     ifs_ready <= 1'b0;