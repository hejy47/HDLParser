0c3f110bffb35e6a2d4f40ba10024daf22e08bcd
library: Fix broken parameters
diff --git a/library/util_cpack/util_cpack.v b/library/util_cpack/util_cpack.v
index a772ee20..39fe1515 100755
--- a/library/util_cpack/util_cpack.v
+++ b/library/util_cpack/util_cpack.v
@@ -1,9 +1,9 @@
 // ***************************************************************************
 // ***************************************************************************
 // Copyright 2011(c) Analog Devices, Inc.
-// 
+//
 // All rights reserved.
-// 
+//
 // Redistribution and use in source and binary forms, with or without modification,
 // are permitted provided that the following conditions are met:
 //     - Redistributions of source code must retain the above copyright
@@ -21,16 +21,16 @@
 //       patent holders to use this software.
 //     - Use of the software either in source or binary form, must be run
 //       on or directly connected to an Analog Devices Inc. component.
-//    
+//
 // THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 // INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
 // PARTICULAR PURPOSE ARE DISCLAIMED.
 //
 // IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 // EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, INTELLECTUAL PROPERTY
-// RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
+// RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 // BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 // THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 // ***************************************************************************
 // ***************************************************************************
@@ -76,91 +76,90 @@ module util_cpack (
 
   // parameters
 
-  parameter   CHANNEL_DATA_WIDTH     = 32;
-  parameter   NUM_OF_CHANNELS    = 8;
+  parameter   CHANNEL_DATA_WIDTH  = 32;
+  parameter   NUM_OF_CHANNELS     = 8;
 
-  localparam  CH_SCNT   = CHANNEL_DATA_WIDTH/16;
+  localparam  SAMPLES_PCHANNEL    = CHANNEL_DATA_WIDTH/16;
   localparam  NUM_OF_CHANNELS_M   = 8;
-  localparam  P_DW      = NUM_OF_CHANNELS*CHANNEL_DATA_WIDTH;
-  localparam  NUM_OF_CHANNELS_P     = NUM_OF_CHANNELS;
-  localparam  P_SCNT    = P_DW/16;
+  localparam  BUS_DATA_WIDTH      = NUM_OF_CHANNELS*CHANNEL_DATA_WIDTH;
+  localparam  NUM_OF_CHANNELS_P   = NUM_OF_CHANNELS;
 
   // adc interface
 
-  input                             adc_rst;
-  input                             adc_clk;
-  input                             adc_enable_0;
-  input                             adc_valid_0;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_0;
-  input                             adc_enable_1;
-  input                             adc_valid_1;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_1;
-  input                             adc_enable_2;
-  input                             adc_valid_2;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_2;
-  input                             adc_enable_3;
-  input                             adc_valid_3;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_3;
-  input                             adc_enable_4;
-  input                             adc_valid_4;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_4;
-  input                             adc_enable_5;
-  input                             adc_valid_5;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_5;
-  input                             adc_enable_6;
-  input                             adc_valid_6;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_6;
-  input                             adc_enable_7;
-  input                             adc_valid_7;
-  input   [(CHANNEL_DATA_WIDTH-1):0]             adc_data_7;
+  input                               adc_rst;
+  input                               adc_clk;
+  input                               adc_enable_0;
+  input                               adc_valid_0;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_0;
+  input                               adc_enable_1;
+  input                               adc_valid_1;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_1;
+  input                               adc_enable_2;
+  input                               adc_valid_2;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_2;
+  input                               adc_enable_3;
+  input                               adc_valid_3;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_3;
+  input                               adc_enable_4;
+  input                               adc_valid_4;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_4;
+  input                               adc_enable_5;
+  input                               adc_valid_5;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_5;
+  input                               adc_enable_6;
+  input                               adc_valid_6;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_6;
+  input                               adc_enable_7;
+  input                               adc_valid_7;
+  input   [(CHANNEL_DATA_WIDTH-1):0]  adc_data_7;
 
   // fifo interface
 
-  output                            adc_valid;
-  output                            adc_sync;
+  output                                                  adc_valid;
+  output                                                  adc_sync;
   output  [((NUM_OF_CHANNELS*CHANNEL_DATA_WIDTH)-1):0]    adc_data;
 
   // internal registers
 
-  reg                               adc_valid_d = 'd0;
-  reg     [((NUM_OF_CHANNELS_M*CHANNEL_DATA_WIDTH)-1):0]   adc_data_d = 'd0;
-  reg                               adc_mux_valid = 'd0;
-  reg     [(NUM_OF_CHANNELS_M-1):0]           adc_mux_enable = 'd0;
-  reg     [((CH_SCNT*16*79)-1):0]   adc_mux_data = 'd0;
-  reg                               adc_valid = 'd0;
-  reg                               adc_sync = 'd0;
+  reg                                                     adc_valid_d = 'd0;
+  reg     [((NUM_OF_CHANNELS_M*CHANNEL_DATA_WIDTH)-1):0]  adc_data_d = 'd0;
+  reg                                                     adc_mux_valid = 'd0;
+  reg     [(NUM_OF_CHANNELS_M-1):0]                       adc_mux_enable = 'd0;
+  reg     [((SAMPLES_PCHANNEL*16*79)-1):0]                         adc_mux_data = 'd0;
+  reg                                                     adc_valid = 'd0;
+  reg                                                     adc_sync = 'd0;
   reg     [((NUM_OF_CHANNELS*CHANNEL_DATA_WIDTH)-1):0]    adc_data = 'd0;
 
   // internal signals
 
-  wire    [(NUM_OF_CHANNELS_M-1):0]           adc_enable_s;
-  wire    [(NUM_OF_CHANNELS_M-1):0]           adc_valid_s;
-  wire    [((NUM_OF_CHANNELS_M*CHANNEL_DATA_WIDTH)-1):0]   adc_data_s;
-  wire    [((NUM_OF_CHANNELS_M*CHANNEL_DATA_WIDTH)-1):0]   adc_data_intlv_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_valid_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_0_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_1_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_2_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_3_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_4_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_5_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_6_s;
-  wire    [(CH_SCNT-1):0]           adc_mux_enable_7_s;
-  wire    [((CH_SCNT*16*1)-1):0]    adc_mux_data_0_s;
-  wire    [((CH_SCNT*16*2)-1):0]    adc_mux_data_1_s;
-  wire    [((CH_SCNT*16*3)-1):0]    adc_mux_data_2_s;
-  wire    [((CH_SCNT*16*4)-1):0]    adc_mux_data_3_s;
-  wire    [((CH_SCNT*16*5)-1):0]    adc_mux_data_4_s;
-  wire    [((CH_SCNT*16*6)-1):0]    adc_mux_data_5_s;
-  wire    [((CH_SCNT*16*7)-1):0]    adc_mux_data_6_s;
-  wire    [((CH_SCNT*16*8)-1):0]    adc_mux_data_7_s;
-  wire    [(NUM_OF_CHANNELS_M-1):0]           adc_dsf_valid_s;
-  wire    [(NUM_OF_CHANNELS_M-1):0]           adc_dsf_sync_s;
-  wire    [(P_DW-1):0]              adc_dsf_data_s[(NUM_OF_CHANNELS_M-1):0];
+  wire    [(NUM_OF_CHANNELS_M-1):0]                       adc_enable_s;
+  wire    [(NUM_OF_CHANNELS_M-1):0]                       adc_valid_s;
+  wire    [((NUM_OF_CHANNELS_M*CHANNEL_DATA_WIDTH)-1):0]  adc_data_s;
+  wire    [((NUM_OF_CHANNELS_M*CHANNEL_DATA_WIDTH)-1):0]  adc_data_intlv_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_valid_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_0_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_1_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_2_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_3_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_4_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_5_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_6_s;
+  wire    [(SAMPLES_PCHANNEL-1):0]                                 adc_mux_enable_7_s;
+  wire    [((SAMPLES_PCHANNEL*16*1)-1):0]                          adc_mux_data_0_s;
+  wire    [((SAMPLES_PCHANNEL*16*2)-1):0]                          adc_mux_data_1_s;
+  wire    [((SAMPLES_PCHANNEL*16*3)-1):0]                          adc_mux_data_2_s;
+  wire    [((SAMPLES_PCHANNEL*16*4)-1):0]                          adc_mux_data_3_s;
+  wire    [((SAMPLES_PCHANNEL*16*5)-1):0]                          adc_mux_data_4_s;
+  wire    [((SAMPLES_PCHANNEL*16*6)-1):0]                          adc_mux_data_5_s;
+  wire    [((SAMPLES_PCHANNEL*16*7)-1):0]                          adc_mux_data_6_s;
+  wire    [((SAMPLES_PCHANNEL*16*8)-1):0]                          adc_mux_data_7_s;
+  wire    [(NUM_OF_CHANNELS_M-1):0]                       adc_dsf_valid_s;
+  wire    [(NUM_OF_CHANNELS_M-1):0]                       adc_dsf_sync_s;
+  wire    [(BUS_DATA_WIDTH-1):0]                                    adc_dsf_data_s[(NUM_OF_CHANNELS_M-1):0];
 
   // loop variables
 
-  genvar                            n;
+  genvar  n;
 
   // making things a bit easier
 
@@ -199,7 +198,7 @@ module util_cpack (
   // interleave data
 
   generate
-  for (n = 0; n < CH_SCNT; n = n + 1) begin: g_intlv
+  for (n = 0; n < SAMPLES_PCHANNEL; n = n + 1) begin: g_intlv
   assign adc_data_intlv_s[((16*NUM_OF_CHANNELS_M*(n+1))-1):(16*NUM_OF_CHANNELS_M*n)] =
           { adc_data_d[(((CHANNEL_DATA_WIDTH*7)+(16*(n+1)))-1):((CHANNEL_DATA_WIDTH*7)+(16*n))],
             adc_data_d[(((CHANNEL_DATA_WIDTH*6)+(16*(n+1)))-1):((CHANNEL_DATA_WIDTH*6)+(16*n))],
@@ -215,7 +214,7 @@ module util_cpack (
   // mux
 
   generate
-  for (n = 0; n < CH_SCNT; n = n + 1) begin: g_mux
+  for (n = 0; n < SAMPLES_PCHANNEL; n = n + 1) begin: g_mux
   util_cpack_mux i_mux (
     .adc_clk (adc_clk),
     .adc_valid (adc_valid_d),
@@ -253,22 +252,22 @@ module util_cpack (
     adc_mux_enable[5] <= & adc_mux_enable_5_s;
     adc_mux_enable[6] <= & adc_mux_enable_6_s;
     adc_mux_enable[7] <= & adc_mux_enable_7_s;
-    adc_mux_data[((CH_SCNT*16* 9)-1):(CH_SCNT*16* 1)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16*19)-1):(CH_SCNT*16*12)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16*29)-1):(CH_SCNT*16*23)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16*39)-1):(CH_SCNT*16*34)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16*49)-1):(CH_SCNT*16*45)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16*59)-1):(CH_SCNT*16*56)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16*69)-1):(CH_SCNT*16*67)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16*79)-1):(CH_SCNT*16*78)] <= 'd0;
-    adc_mux_data[((CH_SCNT*16* 1)-1):(CH_SCNT*16* 0)] <= adc_mux_data_0_s;
-    adc_mux_data[((CH_SCNT*16*12)-1):(CH_SCNT*16*10)] <= adc_mux_data_1_s;
-    adc_mux_data[((CH_SCNT*16*23)-1):(CH_SCNT*16*20)] <= adc_mux_data_2_s;
-    adc_mux_data[((CH_SCNT*16*34)-1):(CH_SCNT*16*30)] <= adc_mux_data_3_s;
-    adc_mux_data[((CH_SCNT*16*45)-1):(CH_SCNT*16*40)] <= adc_mux_data_4_s;
-    adc_mux_data[((CH_SCNT*16*56)-1):(CH_SCNT*16*50)] <= adc_mux_data_5_s;
-    adc_mux_data[((CH_SCNT*16*67)-1):(CH_SCNT*16*60)] <= adc_mux_data_6_s;
-    adc_mux_data[((CH_SCNT*16*78)-1):(CH_SCNT*16*70)] <= adc_mux_data_7_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16* 9)-1):(SAMPLES_PCHANNEL*16* 1)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*19)-1):(SAMPLES_PCHANNEL*16*12)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*29)-1):(SAMPLES_PCHANNEL*16*23)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*39)-1):(SAMPLES_PCHANNEL*16*34)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*49)-1):(SAMPLES_PCHANNEL*16*45)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*59)-1):(SAMPLES_PCHANNEL*16*56)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*69)-1):(SAMPLES_PCHANNEL*16*67)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*79)-1):(SAMPLES_PCHANNEL*16*78)] <= 'd0;
+    adc_mux_data[((SAMPLES_PCHANNEL*16* 1)-1):(SAMPLES_PCHANNEL*16* 0)] <= adc_mux_data_0_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*12)-1):(SAMPLES_PCHANNEL*16*10)] <= adc_mux_data_1_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*23)-1):(SAMPLES_PCHANNEL*16*20)] <= adc_mux_data_2_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*34)-1):(SAMPLES_PCHANNEL*16*30)] <= adc_mux_data_3_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*45)-1):(SAMPLES_PCHANNEL*16*40)] <= adc_mux_data_4_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*56)-1):(SAMPLES_PCHANNEL*16*50)] <= adc_mux_data_5_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*67)-1):(SAMPLES_PCHANNEL*16*60)] <= adc_mux_data_6_s;
+    adc_mux_data[((SAMPLES_PCHANNEL*16*78)-1):(SAMPLES_PCHANNEL*16*70)] <= adc_mux_data_7_s;
   end
 
   // store & fwd
@@ -284,7 +283,7 @@ module util_cpack (
     .adc_clk (adc_clk),
     .adc_valid (adc_mux_valid),
     .adc_enable (adc_mux_enable[n]),
-    .adc_data (adc_mux_data[((CH_SCNT*16*((11*n)+1))-1):(CH_SCNT*16*10*n)]),
+    .adc_data (adc_mux_data[((SAMPLES_PCHANNEL*16*((11*n)+1))-1):(SAMPLES_PCHANNEL*16*10*n)]),
     .adc_dsf_valid (adc_dsf_valid_s[n]),
     .adc_dsf_sync (adc_dsf_sync_s[n]),
     .adc_dsf_data (adc_dsf_data_s[n]));