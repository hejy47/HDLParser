36febf8591b87f500bd07fcf28b1064e7b090c92
Merge branch 'master' into dev
diff --git a/library/common/ad_tdd_control.v b/library/common/ad_tdd_control.v
index 199997cc..328c9c6b 100644
--- a/library/common/ad_tdd_control.v
+++ b/library/common/ad_tdd_control.v
@@ -49,6 +49,7 @@ module ad_tdd_control(
   // TDD timming signals
 
   tdd_enable,
+  tdd_enable_synced,
   tdd_secondary,
   tdd_tx_only,
   tdd_rx_only,
@@ -75,6 +76,8 @@ module ad_tdd_control(
   tdd_tx_off_2,
   tdd_tx_dp_on_2,
   tdd_tx_dp_off_2,
+  tdd_sync,
+  tdd_sync_en,
 
   // TDD control signals
 
@@ -88,8 +91,11 @@ module ad_tdd_control(
 
   // parameters
 
-  localparam      ON = 1;
-  localparam      OFF = 0;
+  parameter   integer TX_DATA_PATH_DELAY = 0;     // internally eliminate the delay introduced by the TX data path
+  parameter   integer CONTROL_PATH_DELAY = 0;     // internally eliminate the delay introduced by the control path
+
+  localparam          ON = 1;
+  localparam          OFF = 0;
 
   // input/output signals
 
@@ -97,6 +103,7 @@ module ad_tdd_control(
   input           rst;
 
   input           tdd_enable;
+  output          tdd_enable_synced;
   input           tdd_secondary;
   input           tdd_tx_only;
   input           tdd_rx_only;
@@ -124,6 +131,9 @@ module ad_tdd_control(
   input  [23:0]   tdd_tx_dp_on_2;
   input  [23:0]   tdd_tx_dp_off_2;
 
+  input           tdd_sync;
+  output          tdd_sync_en;
+
   output          tdd_tx_dp_en;       // initiate vco tx2rx switch
   output          tdd_rx_vco_en;      // initiate vco rx2tx switch
   output          tdd_tx_vco_en;      // power up RF Rx
@@ -169,14 +179,37 @@ module ad_tdd_control(
   reg             counter_at_tdd_tx_dp_on_2 = 1'b0;
   reg             counter_at_tdd_tx_dp_off_2 = 1'b0;
 
-  reg             tdd_enable_d = 1'h0;
+  reg             tdd_enable_synced = 1'h0;
   reg             tdd_last_burst = 1'b0;
 
+  reg             tdd_sync_d1 = 1'b0;
+  reg             tdd_sync_d2 = 1'b0;
+  reg             tdd_sync_d3 = 1'b0;
+
+  reg             tdd_sync_en = 1'b0;
+
   // internal signals
 
+  wire   [23:0]   tdd_vco_rx_on_1_s;
+  wire   [23:0]   tdd_vco_rx_off_1_s;
+  wire   [23:0]   tdd_vco_tx_on_1_s;
+  wire   [23:0]   tdd_vco_tx_off_1_s;
+  wire   [23:0]   tdd_rx_on_1_s;
+  wire   [23:0]   tdd_rx_off_1_s;
+  wire   [23:0]   tdd_tx_on_1_s;
+  wire   [23:0]   tdd_tx_off_1_s;
   wire   [23:0]   tdd_tx_dp_on_1_s;
-  wire   [23:0]   tdd_tx_dp_on_2_s;
   wire   [23:0]   tdd_tx_dp_off_1_s;
+
+  wire   [23:0]   tdd_vco_rx_on_2_s;
+  wire   [23:0]   tdd_vco_rx_off_2_s;
+  wire   [23:0]   tdd_vco_tx_on_2_s;
+  wire   [23:0]   tdd_vco_tx_off_2_s;
+  wire   [23:0]   tdd_rx_on_2_s;
+  wire   [23:0]   tdd_rx_off_2_s;
+  wire   [23:0]   tdd_tx_on_2_s;
+  wire   [23:0]   tdd_tx_off_2_s;
+  wire   [23:0]   tdd_tx_dp_on_2_s;
   wire   [23:0]   tdd_tx_dp_off_2_s;
   wire            tdd_endof_frame;
   wire            tdd_endof_burst;
@@ -184,6 +217,29 @@ module ad_tdd_control(
 
   assign  tdd_counter_status = tdd_counter;
 
+  // synchronization of tdd_sync
+  always @(posedge clk) begin
+    if (rst == 1'b1) begin
+      tdd_sync_en <= 1'b0;
+      tdd_sync_d1 <= 1'b0;
+      tdd_sync_d2 <= 1'b0;
+      tdd_sync_d3 <= 1'b0;
+    end else begin
+      tdd_sync_en <= tdd_enable;
+      tdd_sync_d1 <= tdd_sync;
+      tdd_sync_d2 <= tdd_sync_d1;
+      tdd_sync_d3 <= tdd_sync_d2;
+    end
+  end
+
+  always @(posedge clk) begin
+    if (rst == 1'b1) begin
+      tdd_enable_synced <= 1'b0;
+    end else begin
+      tdd_enable_synced <= ((~tdd_sync_d3 & tdd_sync_d2) == 1'b1) ? tdd_enable : tdd_enable_synced;
+    end
+  end
+
   // ***************************************************************************
   // tdd counter (state machine)
   // ***************************************************************************
@@ -191,10 +247,8 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if (rst == 1'b1) begin
       tdd_cstate <= OFF;
-      tdd_enable_d <= 0;
     end else begin
       tdd_cstate <= tdd_cstate_next;
-      tdd_enable_d <= tdd_enable;
     end
   end
 
@@ -209,8 +263,8 @@ module ad_tdd_control(
       end
 
       OFF : begin
-        if((tdd_enable == 1'b1) && (tdd_enable_d == 1'b0)) begin
-          tdd_cstate_next <= ON;
+        if(tdd_enable == 1'b1) begin
+          tdd_cstate_next <= ((~tdd_sync_d3 & tdd_sync_d2) == 1'b1) ? ON : OFF;
         end
       end
     endcase
@@ -225,7 +279,11 @@ module ad_tdd_control(
       tdd_counter <= tdd_counter_init;
     end else begin
       if (tdd_cstate == ON) begin
-        tdd_counter <= (tdd_counter < tdd_frame_length) ? tdd_counter + 1 : 24'b0;
+        if ((~tdd_sync_d3 & tdd_sync_d2) == 1'b1) begin
+          tdd_counter <= 24'b0;
+        end else begin
+          tdd_counter <= (tdd_counter < tdd_frame_length) ? tdd_counter + 1 : 24'b0;
+        end
       end else begin
         tdd_counter <= tdd_counter_init;
       end
@@ -242,10 +300,13 @@ module ad_tdd_control(
       end else begin
         tdd_burst_counter <= tdd_burst_count;
       end
-      tdd_last_burst <= (tdd_burst_counter == 6'b1) ? 1'b1 : 1'b0;
     end
   end
 
+  always @(posedge clk) begin
+    tdd_last_burst <= (tdd_burst_counter == 6'b1) ? 1'b1 : 1'b0;
+  end
+
   // ***************************************************************************
   // generate control signals
   // ***************************************************************************
@@ -254,11 +315,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_rx_on_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_vco_rx_on_1) begin
+    end else if(tdd_counter == tdd_vco_rx_on_1_s) begin
       counter_at_tdd_vco_rx_on_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_rx_on_1 <= 1'b0;
     end
   end
@@ -266,11 +325,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_rx_on_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_rx_on_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_rx_on_2_s)) begin
       counter_at_tdd_vco_rx_on_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_rx_on_2 <= 1'b0;
     end
   end
@@ -278,11 +335,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_rx_off_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_vco_rx_off_1) begin
+    end else if(tdd_counter == tdd_vco_rx_off_1_s) begin
       counter_at_tdd_vco_rx_off_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_rx_off_1 <= 1'b0;
     end
   end
@@ -290,11 +345,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_rx_off_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_rx_off_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_rx_off_2_s)) begin
       counter_at_tdd_vco_rx_off_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_rx_off_2 <= 1'b0;
     end
   end
@@ -303,11 +356,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_tx_on_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_vco_tx_on_1) begin
+    end else if(tdd_counter == tdd_vco_tx_on_1_s) begin
       counter_at_tdd_vco_tx_on_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_tx_on_1 <= 1'b0;
     end
   end
@@ -315,11 +366,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_tx_on_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_tx_on_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_tx_on_2_s)) begin
       counter_at_tdd_vco_tx_on_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_tx_on_2 <= 1'b0;
     end
   end
@@ -327,11 +376,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_tx_off_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_vco_tx_off_1) begin
+    end else if(tdd_counter == tdd_vco_tx_off_1_s) begin
       counter_at_tdd_vco_tx_off_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_tx_off_1 <= 1'b0;
     end
   end
@@ -339,11 +386,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_vco_tx_off_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_tx_off_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_vco_tx_off_2_s)) begin
       counter_at_tdd_vco_tx_off_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_vco_tx_off_2 <= 1'b0;
     end
   end
@@ -352,11 +397,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_rx_on_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_rx_on_1) begin
+    end else if(tdd_counter == tdd_rx_on_1_s) begin
       counter_at_tdd_rx_on_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_rx_on_1 <= 1'b0;
     end
   end
@@ -364,11 +407,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_rx_on_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_rx_on_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_rx_on_2_s)) begin
       counter_at_tdd_rx_on_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_rx_on_2 <= 1'b0;
     end
   end
@@ -376,11 +417,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_rx_off_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_rx_off_1) begin
+    end else if(tdd_counter == tdd_rx_off_1_s) begin
       counter_at_tdd_rx_off_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_rx_off_1 <= 1'b0;
     end
   end
@@ -388,11 +427,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_rx_off_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_rx_off_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_rx_off_2_s)) begin
       counter_at_tdd_rx_off_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_rx_off_2 <= 1'b0;
     end
   end
@@ -401,11 +438,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_on_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_tx_on_1) begin
+    end else if(tdd_counter == tdd_tx_on_1_s) begin
       counter_at_tdd_tx_on_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_on_1 <= 1'b0;
     end
   end
@@ -413,11 +448,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_on_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_on_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_on_2_s)) begin
       counter_at_tdd_tx_on_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_on_2 <= 1'b0;
     end
   end
@@ -425,11 +458,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_off_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_tx_off_1) begin
+    end else if(tdd_counter == tdd_tx_off_1_s) begin
       counter_at_tdd_tx_off_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_off_1 <= 1'b0;
     end
   end
@@ -437,11 +468,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_off_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_off_2)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_off_2_s)) begin
       counter_at_tdd_tx_off_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_off_2 <= 1'b0;
     end
   end
@@ -450,11 +479,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_dp_on_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_tx_dp_on_1_s) begin
+    end else if(tdd_counter == tdd_tx_dp_on_1_s) begin
       counter_at_tdd_tx_dp_on_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_dp_on_1 <= 1'b0;
     end
   end
@@ -462,11 +489,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_dp_on_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_dp_on_2_s)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_dp_on_2_s)) begin
       counter_at_tdd_tx_dp_on_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_dp_on_2 <= 1'b0;
     end
   end
@@ -474,11 +499,9 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_dp_off_1 <= 1'b0;
-    end else
-    if(tdd_counter == tdd_tx_dp_off_1_s) begin
+    end else if(tdd_counter == tdd_tx_dp_off_1_s) begin
       counter_at_tdd_tx_dp_off_1 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_dp_off_1 <= 1'b0;
     end
   end
@@ -486,63 +509,255 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       counter_at_tdd_tx_dp_off_2 <= 1'b0;
-    end else
-    if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_dp_off_2_s)) begin
+    end else if((tdd_secondary == 1'b1) && (tdd_counter == tdd_tx_dp_off_2_s)) begin
       counter_at_tdd_tx_dp_off_2 <= 1'b1;
-    end
-    else begin
+    end else begin
       counter_at_tdd_tx_dp_off_2 <= 1'b0;
     end
   end
 
-  // internal datapath delay compensation
+  // control-path delay compensation
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_rx_on_1_comp (
+    .clk(clk),
+    .A(tdd_vco_rx_on_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_rx_on_1_s),
+    .CE(1'b1)
+  );
 
   ad_addsub #(
-    .A_WIDTH(24),
-    .CONST_VALUE(11),
-    .ADD_SUB(1)
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_rx_off_1_comp (
+    .clk(clk),
+    .A(tdd_vco_rx_off_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_rx_off_1_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_tx_on_1_comp (
+    .clk(clk),
+    .A(tdd_vco_tx_on_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_tx_on_1_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_tx_off_1_comp (
+    .clk(clk),
+    .A(tdd_vco_tx_off_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_tx_off_1_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_rx_on_1_comp (
+    .clk(clk),
+    .A(tdd_rx_on_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_rx_on_1_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_rx_off_1_comp (
+    .clk(clk),
+    .A(tdd_rx_off_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_rx_off_1_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_tx_on_1_comp (
+    .clk(clk),
+    .A(tdd_tx_on_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_tx_on_1_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_tx_off_1_comp (
+    .clk(clk),
+    .A(tdd_tx_off_1),
+    .Amax(tdd_frame_length),
+    .out(tdd_tx_off_1_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_rx_on_2_comp (
+    .clk(clk),
+    .A(tdd_vco_rx_on_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_rx_on_2_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_rx_off_2_comp (
+    .clk(clk),
+    .A(tdd_vco_rx_off_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_rx_off_2_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_tx_on_2_comp (
+    .clk(clk),
+    .A(tdd_vco_tx_on_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_tx_on_2_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_vco_tx_off_2_comp (
+    .clk(clk),
+    .A(tdd_vco_tx_off_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_vco_tx_off_2_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_rx_on_2_comp (
+    .clk(clk),
+    .A(tdd_rx_on_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_rx_on_2_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_rx_off_2_comp (
+    .clk(clk),
+    .A(tdd_rx_off_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_rx_off_2_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_tx_on_2_comp (
+    .clk(clk),
+    .A(tdd_tx_on_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_tx_on_2_s),
+    .CE(1'b1)
+  );
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(CONTROL_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
+  ) i_tx_off_2_comp (
+    .clk(clk),
+    .A(tdd_tx_off_2),
+    .Amax(tdd_frame_length),
+    .out(tdd_tx_off_2_s),
+    .CE(1'b1)
+  );
+
+  // internal data-path delay compensation
+
+  ad_addsub #(
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(TX_DATA_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
   ) i_tx_dp_on_1_comp (
     .clk(clk),
     .A(tdd_tx_dp_on_1),
     .Amax(tdd_frame_length),
     .out(tdd_tx_dp_on_1_s),
-    .CE(1)
+    .CE(1'b1)
   );
 
   ad_addsub #(
-    .A_WIDTH(24),
-    .CONST_VALUE(11),
-    .ADD_SUB(1)
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(TX_DATA_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
   ) i_tx_dp_on_2_comp (
     .clk(clk),
     .A(tdd_tx_dp_on_2),
     .Amax(tdd_frame_length),
     .out(tdd_tx_dp_on_2_s),
-    .CE(1)
+    .CE(1'b1)
   );
 
   ad_addsub #(
-    .A_WIDTH(24),
-    .CONST_VALUE(11),
-    .ADD_SUB(1)
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(TX_DATA_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
   ) i_tx_dp_off_1_comp (
     .clk(clk),
     .A(tdd_tx_dp_off_1),
     .Amax(tdd_frame_length),
     .out(tdd_tx_dp_off_1_s),
-    .CE(1)
+    .CE(1'b1)
   );
 
   ad_addsub #(
-    .A_WIDTH(24),
-    .CONST_VALUE(11),
-    .ADD_SUB(1)
+    .A_DATA_WIDTH(24),
+    .B_DATA_VALUE(TX_DATA_PATH_DELAY),
+    .ADD_OR_SUB_N(0)
   ) i_tx_dp_off_2_comp (
     .clk(clk),
     .A(tdd_tx_dp_off_2),
     .Amax(tdd_frame_length),
     .out(tdd_tx_dp_off_2_s),
-    .CE(1)
+    .CE(1'b1)
   );
 
   // output logic
@@ -552,17 +767,13 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       tdd_rx_vco_en <= 1'b0;
-    end
-    else if((tdd_cstate == OFF) || (counter_at_tdd_vco_rx_off_1 == 1'b1) || (counter_at_tdd_vco_rx_off_2 == 1'b1)) begin
+    end else if((tdd_cstate == OFF) || (counter_at_tdd_vco_rx_off_1 == 1'b1) || (counter_at_tdd_vco_rx_off_2 == 1'b1)) begin
       tdd_rx_vco_en <= 1'b0;
-    end
-    else if((tdd_cstate == ON) && ((counter_at_tdd_vco_rx_on_1 == 1'b1) || (counter_at_tdd_vco_rx_on_2 == 1'b1))) begin
+    end else if((tdd_cstate == ON) && ((counter_at_tdd_vco_rx_on_1 == 1'b1) || (counter_at_tdd_vco_rx_on_2 == 1'b1))) begin
       tdd_rx_vco_en <= 1'b1;
-    end
-    else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
+    end else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
       tdd_rx_vco_en <= tdd_rx_only;
-    end
-    else begin
+    end else begin
       tdd_rx_vco_en <= tdd_rx_vco_en;
     end
   end
@@ -570,17 +781,13 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       tdd_tx_vco_en <= 1'b0;
-    end
-    else if((tdd_cstate == OFF) || (counter_at_tdd_vco_tx_off_1 == 1'b1) || (counter_at_tdd_vco_tx_off_2 == 1'b1)) begin
+    end else if((tdd_cstate == OFF) || (counter_at_tdd_vco_tx_off_1 == 1'b1) || (counter_at_tdd_vco_tx_off_2 == 1'b1)) begin
       tdd_tx_vco_en <= 1'b0;
-    end
-    else if((tdd_cstate == ON) && ((counter_at_tdd_vco_tx_on_1 == 1'b1) || (counter_at_tdd_vco_tx_on_2 == 1'b1))) begin
+    end else if((tdd_cstate == ON) && ((counter_at_tdd_vco_tx_on_1 == 1'b1) || (counter_at_tdd_vco_tx_on_2 == 1'b1))) begin
       tdd_tx_vco_en <= 1'b1;
-    end
-    else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
+    end else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
       tdd_tx_vco_en <= tdd_tx_only;
-    end
-    else begin
+    end else begin
       tdd_tx_vco_en <= tdd_tx_vco_en;
     end
   end
@@ -588,17 +795,13 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       tdd_rx_rf_en <= 1'b0;
-    end
-    else if((tdd_cstate == OFF) || (counter_at_tdd_rx_off_1 == 1'b1) || (counter_at_tdd_rx_off_2 == 1'b1)) begin
+    end else if((tdd_cstate == OFF) || (counter_at_tdd_rx_off_1 == 1'b1) || (counter_at_tdd_rx_off_2 == 1'b1)) begin
       tdd_rx_rf_en <= 1'b0;
-    end
-    else if((tdd_cstate == ON) && ((counter_at_tdd_rx_on_1 == 1'b1) || (counter_at_tdd_rx_on_2 == 1'b1))) begin
+    end else if((tdd_cstate == ON) && ((counter_at_tdd_rx_on_1 == 1'b1) || (counter_at_tdd_rx_on_2 == 1'b1))) begin
       tdd_rx_rf_en <= 1'b1;
-    end
-    else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
+    end else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
       tdd_rx_rf_en <= tdd_rx_only;
-    end
-    else begin
+    end else begin
       tdd_rx_rf_en <= tdd_rx_rf_en;
     end
   end
@@ -606,17 +809,13 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       tdd_tx_rf_en <= 1'b0;
-    end
-    else if((tdd_cstate == OFF) || (counter_at_tdd_tx_off_1 == 1'b1) || (counter_at_tdd_tx_off_2 == 1'b1)) begin
+    end else if((tdd_cstate == OFF) || (counter_at_tdd_tx_off_1 == 1'b1) || (counter_at_tdd_tx_off_2 == 1'b1)) begin
       tdd_tx_rf_en <= 1'b0;
-    end
-    else if((tdd_cstate == ON) && ((counter_at_tdd_tx_on_1 == 1'b1) || (counter_at_tdd_tx_on_2 == 1'b1))) begin
+    end else if((tdd_cstate == ON) && ((counter_at_tdd_tx_on_1 == 1'b1) || (counter_at_tdd_tx_on_2 == 1'b1))) begin
       tdd_tx_rf_en <= 1'b1;
-    end
-    else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
+    end else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
       tdd_tx_rf_en <= tdd_tx_only;
-    end
-    else begin
+    end else begin
       tdd_tx_rf_en <= tdd_tx_rf_en;
     end
   end
@@ -624,17 +823,13 @@ module ad_tdd_control(
   always @(posedge clk) begin
     if(rst == 1'b1) begin
       tdd_tx_dp_en <= 1'b0;
-    end
-    else if((tdd_cstate == OFF) || (counter_at_tdd_tx_dp_off_1 == 1'b1) || (counter_at_tdd_tx_dp_off_2 == 1'b1)) begin
+    end else if((tdd_cstate == OFF) || (counter_at_tdd_tx_dp_off_1 == 1'b1) || (counter_at_tdd_tx_dp_off_2 == 1'b1)) begin
       tdd_tx_dp_en <= 1'b0;
-    end
-    else if((tdd_cstate == ON) && ((counter_at_tdd_tx_dp_on_1 == 1'b1) || (counter_at_tdd_tx_dp_on_2 == 1'b1))) begin
+    end else if((tdd_cstate == ON) && ((counter_at_tdd_tx_dp_on_1 == 1'b1) || (counter_at_tdd_tx_dp_on_2 == 1'b1))) begin
       tdd_tx_dp_en <= 1'b1;
-    end
-    else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
+    end else if((tdd_cstate == ON) && (tdd_txrx_only_en_s == 1'b1)) begin
       tdd_tx_dp_en <= tdd_tx_only;
-    end
-    else begin
+    end else begin
       tdd_tx_dp_en <= tdd_tx_dp_en;
     end
   end