eb40b42c889fcaf0ce4ea52fc299b1c11cb69f76
axi_dmac: preparation work for reporting length of partial transfers
diff --git a/library/axi_dmac/axi_dmac_burst_memory.v b/library/axi_dmac/axi_dmac_burst_memory.v
index f4039e9c..853fb078 100644
--- a/library/axi_dmac/axi_dmac_burst_memory.v
+++ b/library/axi_dmac/axi_dmac_burst_memory.v
@@ -39,6 +39,8 @@ module axi_dmac_burst_memory #(
   parameter ID_WIDTH = 3,
   parameter MAX_BYTES_PER_BURST = 128,
   parameter ASYNC_CLK = 1,
+  parameter BYTES_PER_BEAT_WIDTH_SRC = $clog2(DATA_WIDTH_SRC/8),
+  parameter BYTES_PER_BURST_WIDTH = $clog2(MAX_BYTES_PER_BURST),
   parameter ENABLE_DIAGNOSTICS_IF = 0
 ) (
   input src_clk,
@@ -47,6 +49,8 @@ module axi_dmac_burst_memory #(
   input src_data_valid,
   input [DATA_WIDTH_SRC-1:0] src_data,
   input src_data_last,
+  input [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_data_valid_bytes,
+  input src_data_partial_burst,
 
   output [ID_WIDTH-1:0] src_data_request_id,
 
@@ -58,6 +62,11 @@ module axi_dmac_burst_memory #(
   output [DATA_WIDTH_DEST-1:0] dest_data,
   output dest_data_last,
 
+  output [BYTES_PER_BURST_WIDTH-1:0] dest_burst_info_length,
+  output dest_burst_info_partial,
+  output [ID_WIDTH-1:0] dest_burst_info_id,
+  output reg dest_burst_info_write = 1'b0,
+
   output [ID_WIDTH-1:0] dest_request_id,
   input [ID_WIDTH-1:0] dest_data_request_id,
   output [ID_WIDTH-1:0] dest_data_response_id,
@@ -83,6 +92,16 @@ localparam ADDRESS_WIDTH = BURST_LEN_WIDTH + ID_WIDTH - 1;
 
 localparam AUX_FIFO_SIZE = 2**(ID_WIDTH-1);
 
+localparam DEST_SRC_RATIO = DATA_WIDTH_DEST/DATA_WIDTH_SRC;
+
+localparam DEST_SRC_RATIO_WIDTH = DEST_SRC_RATIO > 64 ? 7 :
+  DEST_SRC_RATIO > 32 ? 6 :
+  DEST_SRC_RATIO > 16 ? 5 :
+  DEST_SRC_RATIO > 8 ? 4 :
+  DEST_SRC_RATIO > 4 ? 3 :
+  DEST_SRC_RATIO > 2 ? 2 :
+  DEST_SRC_RATIO > 1 ? 1 : 0;
+
 /*
  * The burst memory is separated into 2**(ID_WIDTH-1) segments. Each segment can
  * hold up to BURST_LEN beats. The addresses that are used to access the memory
@@ -117,12 +136,15 @@ reg dest_id_reduced_msb_next = 1'b0;
 reg dest_id_reduced_msb = 1'b0;
 reg [ID_WIDTH-1:0] dest_id = 'h0;
 reg [BURST_LEN_WIDTH-1:0] dest_beat_counter = 'h00;
-reg [BURST_LEN_WIDTH-1:0] dest_burst_len = 'h00;
+wire [BURST_LEN_WIDTH-1:0] dest_burst_len;
 reg dest_valid = 1'b0;
 reg dest_mem_data_valid = 1'b0;
 reg dest_mem_data_last = 1'b0;
 
-reg [BURST_LEN_WIDTH-1:0] burst_len_mem[0:AUX_FIFO_SIZE-1];
+reg [BYTES_PER_BURST_WIDTH+1-1:0] burst_len_mem[0:AUX_FIFO_SIZE-1];
+
+wire [BYTES_PER_BURST_WIDTH+1-1:0] src_burst_len_data;
+reg [BYTES_PER_BURST_WIDTH+1-1:0] dest_burst_len_data = 'h00;
 
 wire src_beat;
 wire src_last_beat;
@@ -193,7 +215,7 @@ end
 
 always @(posedge src_clk) begin
   if (src_last_beat == 1'b1) begin
-    burst_len_mem[src_id_reduced] <= src_beat_counter;
+    burst_len_mem[src_id_reduced] <= src_burst_len_data;
   end
 end
 
@@ -271,7 +293,7 @@ end
 
 always @(posedge dest_clk) begin
   if (dest_burst_valid == 1'b1 && dest_burst_ready == 1'b1) begin
-    dest_burst_len <= burst_len_mem[dest_id_reduced_next];
+    dest_burst_len_data <= burst_len_mem[dest_id_reduced_next];
   end
 end
 
@@ -290,6 +312,58 @@ always @(posedge dest_clk) begin
   end
 end
 
+assign dest_burst_info_length = dest_burst_len_data[BYTES_PER_BURST_WIDTH-1:0];
+assign dest_burst_info_partial = dest_burst_len_data[BYTES_PER_BURST_WIDTH];
+assign dest_burst_info_id = dest_id;
+
+always @(posedge dest_clk) begin
+  dest_burst_info_write <= (dest_burst_valid == 1'b1 && dest_burst_ready == 1'b1);
+end
+
+// If destination is wider track the number of source beats in a destination
+// beat in case the stream is not destination width aligned.
+generate if (DATA_WIDTH_SRC < DATA_WIDTH_DEST) begin
+
+  reg [DEST_SRC_RATIO_WIDTH-1:0] src_num_beats = {DEST_SRC_RATIO_WIDTH{1'b1}};
+  reg [BYTES_PER_BEAT_WIDTH_SRC-1:0] src_data_valid_bytes_d = 'h00;
+  reg src_data_partial_burst_d = 'h0;
+
+  // This counter will hold the number of source beat in a destination beat
+  // minus one
+  always @(posedge src_clk) begin
+    if (src_mem_data_last == 1'b1 && src_mem_data_valid == 1'b1) begin
+      if (src_data_valid) begin
+        src_num_beats  <= {DEST_SRC_RATIO_WIDTH{1'b0}};
+      end else begin
+        src_num_beats  <= {DEST_SRC_RATIO_WIDTH{1'b1}};
+      end
+    end else if (src_data_valid) begin
+      src_num_beats <= src_num_beats + 1'b1;
+    end
+  end
+
+  // Compensate the delay through the resize block
+  always @(posedge src_clk) begin
+    if (src_data_valid == 1'b1) begin
+      src_data_valid_bytes_d <= src_data_valid_bytes;
+      src_data_partial_burst_d <= src_data_partial_burst;
+    end
+  end
+
+  assign src_burst_len_data = {src_data_partial_burst_d,
+                               src_beat_counter,
+                               src_num_beats,
+                               src_data_valid_bytes_d};
+end else begin
+
+  assign src_burst_len_data = {src_data_partial_burst,
+                               src_beat_counter,
+                               src_data_valid_bytes};
+end
+endgenerate
+
+assign dest_burst_len = dest_burst_len_data[BYTES_PER_BURST_WIDTH-1 -: BURST_LEN_WIDTH];
+
 axi_dmac_resize_src #(
   .DATA_WIDTH_SRC (DATA_WIDTH_SRC),
   .DATA_WIDTH_MEM (DATA_WIDTH)