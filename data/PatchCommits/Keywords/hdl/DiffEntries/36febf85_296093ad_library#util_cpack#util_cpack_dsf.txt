36febf8591b87f500bd07fcf28b1064e7b090c92
Merge branch 'master' into dev
diff --git a/library/util_cpack/util_cpack_dsf.v b/library/util_cpack/util_cpack_dsf.v
index aec94e9f..773fac4f 100755
--- a/library/util_cpack/util_cpack_dsf.v
+++ b/library/util_cpack/util_cpack_dsf.v
@@ -1,9 +1,9 @@
 // ***************************************************************************
 // ***************************************************************************
 // Copyright 2011(c) Analog Devices, Inc.
-// 
+//
 // All rights reserved.
-// 
+//
 // Redistribution and use in source and binary forms, with or without modification,
 // are permitted provided that the following conditions are met:
 //     - Redistributions of source code must retain the above copyright
@@ -21,16 +21,16 @@
 //       patent holders to use this software.
 //     - Use of the software either in source or binary form, must be run
 //       on or directly connected to an Analog Devices Inc. component.
-//    
+//
 // THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 // INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
 // PARTICULAR PURPOSE ARE DISCLAIMED.
 //
 // IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 // EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, INTELLECTUAL PROPERTY
-// RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
+// RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 // BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 // THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 // ***************************************************************************
 // ***************************************************************************
@@ -54,15 +54,15 @@ module util_cpack_dsf (
 
   // parameters
 
-  parameter   CH_DW   = 32;
-  parameter   CH_ICNT =  4;
-  parameter   CH_MCNT =  8;
-  parameter   P_CNT   =  4;
+  parameter   CHANNEL_DATA_WIDTH  = 32;
+  parameter   NUM_OF_CHANNELS_I   =  4;
+  parameter   NUM_OF_CHANNELS_M   =  8;
+  parameter   NUM_OF_CHANNELS_P   =  4;
 
-  localparam  CH_DCNT = P_CNT - CH_ICNT;
-  localparam  I_WIDTH = CH_DW*CH_ICNT;
-  localparam  P_WIDTH = CH_DW*P_CNT;
-  localparam  M_WIDTH = CH_DW*CH_MCNT;
+  localparam  CH_DCNT = NUM_OF_CHANNELS_P - NUM_OF_CHANNELS_I;
+  localparam  I_WIDTH = CHANNEL_DATA_WIDTH*NUM_OF_CHANNELS_I;
+  localparam  P_WIDTH = CHANNEL_DATA_WIDTH*NUM_OF_CHANNELS_P;
+  localparam  M_WIDTH = CHANNEL_DATA_WIDTH*NUM_OF_CHANNELS_M;
 
   // adc interface
 
@@ -93,10 +93,10 @@ module util_cpack_dsf (
 
   wire    [(M_WIDTH-1):0]   adc_data_s;
 
-  // bypass 
+  // bypass
 
   generate
-  if (CH_ICNT == P_CNT) begin
+  if (NUM_OF_CHANNELS_I == NUM_OF_CHANNELS_P) begin
   assign adc_data_s = 'd0;
 
   always @(posedge adc_clk) begin
@@ -122,7 +122,7 @@ module util_cpack_dsf (
   // data store & forward
 
   generate
-  if (P_CNT > CH_ICNT) begin
+  if (NUM_OF_CHANNELS_P > NUM_OF_CHANNELS_I) begin
   assign adc_data_s[(M_WIDTH-1):I_WIDTH] = 'd0;
   assign adc_data_s[(I_WIDTH-1):0] = adc_data;
 
@@ -131,7 +131,7 @@ module util_cpack_dsf (
       if (adc_samples_int >= CH_DCNT) begin
         adc_samples_int <= adc_samples_int - CH_DCNT;
       end else begin
-        adc_samples_int <= adc_samples_int + CH_ICNT;
+        adc_samples_int <= adc_samples_int + NUM_OF_CHANNELS_I;
       end
       adc_data_int <= {adc_data_s[(I_WIDTH-1):0],
         adc_data_int[(M_WIDTH-1):I_WIDTH]};
@@ -159,20 +159,20 @@ module util_cpack_dsf (
   always @(posedge adc_clk) begin
     if (adc_valid == 1'b1) begin
       case (adc_samples_int)
-        3'b111:  adc_dsf_data_int <= {adc_data_s[((CH_DW*1)-1):0],
-                    adc_data_int[((CH_DW*8)-1):(CH_DW*1)]};
-        3'b110:  adc_dsf_data_int <= {adc_data_s[((CH_DW*2)-1):0],
-                    adc_data_int[((CH_DW*8)-1):(CH_DW*2)]};
-        3'b101:  adc_dsf_data_int <= {adc_data_s[((CH_DW*3)-1):0],
-                    adc_data_int[((CH_DW*8)-1):(CH_DW*3)]};
-        3'b100:  adc_dsf_data_int <= {adc_data_s[((CH_DW*4)-1):0],
-                    adc_data_int[((CH_DW*8)-1):(CH_DW*4)]};
-        3'b011:  adc_dsf_data_int <= {adc_data_s[((CH_DW*5)-1):0],
-                    adc_data_int[((CH_DW*8)-1):(CH_DW*5)]};
-        3'b010:  adc_dsf_data_int <= {adc_data_s[((CH_DW*6)-1):0],
-                    adc_data_int[((CH_DW*8)-1):(CH_DW*6)]};
-        3'b001:  adc_dsf_data_int <= {adc_data_s[((CH_DW*7)-1):0],
-                    adc_data_int[((CH_DW*8)-1):(CH_DW*7)]};
+        3'b111:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*1)-1):0],
+                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*1)]};
+        3'b110:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*2)-1):0],
+                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*2)]};
+        3'b101:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*3)-1):0],
+                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*3)]};
+        3'b100:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*4)-1):0],
+                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*4)]};
+        3'b011:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*5)-1):0],
+                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*5)]};
+        3'b010:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*6)-1):0],
+                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*6)]};
+        3'b001:  adc_dsf_data_int <= {adc_data_s[((CHANNEL_DATA_WIDTH*7)-1):0],
+                    adc_data_int[((CHANNEL_DATA_WIDTH*8)-1):(CHANNEL_DATA_WIDTH*7)]};
         3'b000:  adc_dsf_data_int <= adc_data_s;
         default: adc_dsf_data_int <= 'd0;
       endcase