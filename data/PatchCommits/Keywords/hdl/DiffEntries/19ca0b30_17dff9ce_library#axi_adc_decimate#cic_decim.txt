19ca0b3073b9151e0e30e33d51f308dbb0f8bd6d
axi_adc_decimate: Gate unused filter parts
diff --git a/library/axi_adc_decimate/cic_decim.v b/library/axi_adc_decimate/cic_decim.v
index 90f6eb14..2f964370 100644
--- a/library/axi_adc_decimate/cic_decim.v
+++ b/library/axi_adc_decimate/cic_decim.v
@@ -40,10 +40,11 @@
 module cic_decim (
   input clk,
   input clk_enable,
+  input [4:0] filter_enable,
   input reset,
   input [11:0] filter_in,
   input [2:0] rate_sel,
-  output [105:0] filter_out,
+  output [11:0] filter_out,
   output ce_out
   );
 
@@ -58,10 +59,12 @@ module cic_decim (
   reg ce_comb = 1'b0;
 
   reg ce_out_reg = 1'b0;
-  reg [105:0] data_out = 'h00;
+  reg [11:0] data_out = 'h00;
 
   reg [15:0] rate;
 
+  wire [4:0] enable = filter_enable & {5{clk_enable}};
+
   always @(*) begin
     case (rate_sel)
     3'h1: rate <= 16'd5 - 1;
@@ -77,7 +80,7 @@ module cic_decim (
   always @(posedge clk) begin
     if (reset == 1'b1) begin
       counter <= {1'b1,16'h00};
-    end else if (clk_enable == 1'b1) begin
+    end else if (clk_enable == 1'b1 && enable[0] == 1'b1) begin
       counter <= counter_in - 1'b1;
     end
   end
@@ -86,12 +89,12 @@ module cic_decim (
     if (reset == 1'b1) begin
       ce_comb <= 1'b0;
     end else begin
-      ce_comb <= clk_enable & counter[16];
+      ce_comb <= enable[0] & counter[16];
     end
   end
 
   always @(posedge clk) begin
-    if (clk_enable == 1'b1) begin
+    if (enable[0] == 1'b1) begin
       filter_input_stage <= filter_in;
     end
   end
@@ -102,10 +105,12 @@ module cic_decim (
     genvar i;
     for (i = 0; i < NUM_STAGES; i = i + 1) begin
       cic_int #(
-        .DATA_WIDTH(DATA_WIDTH)
+        .DATA_WIDTH(DATA_WIDTH),
+        .NUM_STAGES(5),
+        .STAGE_WIDTH(20)
       ) i_int (
         .clk(clk),
-        .ce(clk_enable),
+        .ce(enable),
         .data_in(data_stage[i]),
         .data_out(data_stage[i+1])
       );
@@ -114,20 +119,26 @@ module cic_decim (
 
   cic_comb #(
     .DATA_WIDTH(DATA_WIDTH),
-    .SEQ(5)
+    .SEQ(5),
+    .NUM_STAGES(5),
+    .STAGE_WIDTH(20)
   ) i_comb0 (
     .clk(clk),
     .ce(ce_comb),
+    .enable(filter_enable),
     .data_in(data_stage[6]),
     .data_out(data_stage[11])
   );
 
   cic_comb #(
     .DATA_WIDTH(DATA_WIDTH),
-    .SEQ(1)
+    .SEQ(1),
+    .NUM_STAGES(5),
+    .STAGE_WIDTH(20)
   ) i_comb1 (
     .clk(clk),
     .ce(ce_comb),
+    .enable(filter_enable),
     .data_in(data_stage[11]),
     .data_out(data_stage[12])
   );
@@ -137,11 +148,11 @@ module cic_decim (
   always @(posedge clk) begin
     if (ce_comb == 1'b1) begin
       case (rate_sel)
-      'h1: data_out <= {{14{data_final_stage[105]}},data_final_stage[105:14]};
-      'h2: data_out <= {{34{data_final_stage[105]}},data_final_stage[105:34]};
-      'h3: data_out <= {{54{data_final_stage[105]}},data_final_stage[105:54]};
-      'h6: data_out <= {{74{data_final_stage[105]}},data_final_stage[105:74]};
-      default: data_out <= {{94{data_final_stage[105]}},data_final_stage[105:94]};
+      'h1: data_out <= data_final_stage[25:14];
+      'h2: data_out <= data_final_stage[45:34];
+      'h3: data_out <= data_final_stage[65:54];
+      'h6: data_out <= data_final_stage[85:74];
+      default: data_out <= data_final_stage[105:94];
       endcase
     end
     ce_out_reg <= ce_comb;