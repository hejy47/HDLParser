839ea23ac4166fd790fbb61a21bf1fcfcdb806ec
Fix arb mux header backpressure
diff --git a/rtl/ip_arb_mux.v b/rtl/ip_arb_mux.v
index 7e99ece..ec88c52 100644
--- a/rtl/ip_arb_mux.v
+++ b/rtl/ip_arb_mux.v
@@ -115,7 +115,7 @@ parameter CL_S_COUNT = $clog2(S_COUNT);
 
 reg frame_reg = 1'b0, frame_next;
 
-reg s_ip_hdr_ready_mask_reg = 1'b0, s_ip_hdr_ready_mask_next;
+reg [S_COUNT-1:0] s_ip_hdr_ready_reg = {S_COUNT{1'b0}}, s_ip_hdr_ready_next;
 
 reg m_ip_hdr_valid_reg = 1'b0, m_ip_hdr_valid_next;
 reg [47:0] m_eth_dest_mac_reg = 48'd0, m_eth_dest_mac_next;
@@ -152,7 +152,7 @@ reg  [DEST_WIDTH-1:0] m_ip_payload_axis_tdest_int;
 reg  [USER_WIDTH-1:0] m_ip_payload_axis_tuser_int;
 wire                  m_ip_payload_axis_tready_int_early;
 
-assign s_ip_hdr_ready = (!s_ip_hdr_ready_mask_reg && grant_valid) << grant_encoded;
+assign s_ip_hdr_ready = s_ip_hdr_ready_reg;
 
 assign s_ip_payload_axis_tready = (m_ip_payload_axis_tready_int_reg && grant_valid) << grant_encoded;
 
@@ -207,7 +207,7 @@ assign acknowledge = grant & s_ip_payload_axis_tvalid & s_ip_payload_axis_tready
 always @* begin
     frame_next = frame_reg;
 
-    s_ip_hdr_ready_mask_next = s_ip_hdr_ready_mask_reg;
+    s_ip_hdr_ready_next = {S_COUNT{1'b0}};
 
     m_ip_hdr_valid_next = m_ip_hdr_valid_reg && !m_ip_hdr_ready;
     m_eth_dest_mac_next = m_eth_dest_mac_reg;
@@ -231,15 +231,14 @@ always @* begin
         // end of frame detection
         if (s_ip_payload_axis_tlast[grant_encoded]) begin
             frame_next = 1'b0;
-            s_ip_hdr_ready_mask_next = 1'b0;
         end
     end
 
-    if (!frame_reg && grant_valid) begin
+    if (!frame_reg && grant_valid && (m_ip_hdr_ready || !m_ip_hdr_valid)) begin
         // start of frame
         frame_next = 1'b1;
 
-        s_ip_hdr_ready_mask_next = 1'b1;
+        s_ip_hdr_ready_next = grant;
 
         m_ip_hdr_valid_next = 1'b1;
         m_eth_dest_mac_next = s_eth_dest_mac[grant_encoded*48 +: 48];
@@ -271,16 +270,11 @@ always @* begin
 end
 
 always @(posedge clk) begin
-    if (rst) begin
-        frame_reg <= 1'b0;
-        s_ip_hdr_ready_mask_reg <= 1'b0;
-        m_ip_hdr_valid_reg <= 1'b0;
-    end else begin
-        frame_reg <= frame_next;
-        s_ip_hdr_ready_mask_reg <= s_ip_hdr_ready_mask_next;
-        m_ip_hdr_valid_reg <= m_ip_hdr_valid_next;
-    end
+    frame_reg <= frame_next;
+
+    s_ip_hdr_ready_reg <= s_ip_hdr_ready_next;
 
+    m_ip_hdr_valid_reg <= m_ip_hdr_valid_next;
     m_eth_dest_mac_reg <= m_eth_dest_mac_next;
     m_eth_src_mac_reg <= m_eth_src_mac_next;
     m_eth_type_reg <= m_eth_type_next;
@@ -297,6 +291,12 @@ always @(posedge clk) begin
     m_ip_header_checksum_reg <= m_ip_header_checksum_next;
     m_ip_source_ip_reg <= m_ip_source_ip_next;
     m_ip_dest_ip_reg <= m_ip_dest_ip_next;
+
+    if (rst) begin
+        frame_reg <= 1'b0;
+        s_ip_hdr_ready_reg <= {S_COUNT{1'b0}};
+        m_ip_hdr_valid_reg <= 1'b0;
+    end
 end
 
 // output datapath logic