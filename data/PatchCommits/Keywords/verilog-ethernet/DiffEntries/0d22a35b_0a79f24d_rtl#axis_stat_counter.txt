0d22a35bd855a7f08b34a3f1c24ebb143289d91d
Update output registers, remove extraneous resets, fix constant widths
diff --git a/rtl/axis_stat_counter.v b/rtl/axis_stat_counter.v
index 77b99e7..cabc984 100644
--- a/rtl/axis_stat_counter.v
+++ b/rtl/axis_stat_counter.v
@@ -1,6 +1,6 @@
 /*
 
-Copyright (c) 2014 Alex Forencich
+Copyright (c) 2014-2015 Alex Forencich
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
@@ -91,7 +91,7 @@ reg [1:0] state_reg = STATE_IDLE, state_next;
 reg [TICK_COUNT_WIDTH-1:0] tick_count_reg = 0, tick_count_next;
 reg [BYTE_COUNT_WIDTH-1:0] byte_count_reg = 0, byte_count_next;
 reg [FRAME_COUNT_WIDTH-1:0] frame_count_reg = 0, frame_count_next;
-reg frame_reg = 0, frame_next;
+reg frame_reg = 1'b0, frame_next;
 
 reg store_output;
 reg [$clog2(TOTAL_LENGTH)-1:0] frame_ptr_reg = 0, frame_ptr_next;
@@ -100,12 +100,12 @@ reg [TICK_COUNT_WIDTH-1:0] tick_count_output_reg = 0;
 reg [BYTE_COUNT_WIDTH-1:0] byte_count_output_reg = 0;
 reg [FRAME_COUNT_WIDTH-1:0] frame_count_output_reg = 0;
 
-reg busy_reg = 0;
+reg busy_reg = 1'b0;
 
 // internal datapath
 reg [7:0]  output_axis_tdata_int;
 reg        output_axis_tvalid_int;
-reg        output_axis_tready_int = 0;
+reg        output_axis_tready_int_reg = 1'b0;
 reg        output_axis_tlast_int;
 reg        output_axis_tuser_int;
 wire       output_axis_tready_int_early;
@@ -115,19 +115,19 @@ assign busy = busy_reg;
 integer offset, i, bit_cnt;
 
 always @* begin
-    state_next = 2'bz;
+    state_next = STATE_IDLE;
 
     tick_count_next = tick_count_reg;
     byte_count_next = byte_count_reg;
     frame_count_next = frame_count_reg;
     frame_next = frame_reg;
 
-    output_axis_tdata_int = 0;
-    output_axis_tvalid_int = 0;
-    output_axis_tlast_int = 0;
-    output_axis_tuser_int = 0;
+    output_axis_tdata_int = 8'd0;
+    output_axis_tvalid_int = 1'b0;
+    output_axis_tlast_int = 1'b0;
+    output_axis_tuser_int = 1'b0;
 
-    store_output = 0;
+    store_output = 1'b0;
 
     frame_ptr_next = frame_ptr_reg;
 
@@ -136,13 +136,13 @@ always @* begin
     case (state_reg)
         STATE_IDLE: begin
             if (trigger) begin
-                store_output = 1;
+                store_output = 1'b1;
                 tick_count_next = 0;
                 byte_count_next = 0;
                 frame_count_next = 0;
                 frame_ptr_next = 0;
 
-                if (output_axis_tready_int) begin
+                if (output_axis_tready_int_reg) begin
                     frame_ptr_next = 1;
                     if (TAG_ENABLE) begin
                         output_axis_tdata_int = tag[(TAG_BYTE_WIDTH-1)*8 +: 8];
@@ -153,7 +153,7 @@ always @* begin
                     end else if (FRAME_COUNT_ENABLE) begin
                         output_axis_tdata_int = frame_count_reg[(FRAME_COUNT_BYTE_WIDTH-1)*8 +: 8];
                     end
-                    output_axis_tvalid_int = 1;
+                    output_axis_tvalid_int = 1'b1;
                 end
 
                 state_next = STATE_OUTPUT_DATA;
@@ -162,10 +162,10 @@ always @* begin
             end
         end
         STATE_OUTPUT_DATA: begin
-            if (output_axis_tready_int) begin
+            if (output_axis_tready_int_reg) begin
                 state_next = STATE_OUTPUT_DATA;
                 frame_ptr_next = frame_ptr_reg + 1;
-                output_axis_tvalid_int = 1;
+                output_axis_tvalid_int = 1'b1;
 
                 offset = 0;
                 if (TAG_ENABLE) begin
@@ -201,7 +201,7 @@ always @* begin
                     end
                 end
                 if (frame_ptr_reg == offset-1) begin
-                    output_axis_tlast_int = 1;
+                    output_axis_tlast_int = 1'b1;
                     state_next = STATE_IDLE;
                 end
             end else begin
@@ -229,11 +229,11 @@ always @* begin
         // count frames
         if (monitor_axis_tlast) begin
             // end of frame
-            frame_next = 0;
+            frame_next = 1'b0;
         end else if (~frame_reg) begin
             // first word after end of frame
             frame_count_next = frame_count_next + 1;
-            frame_next = 1;
+            frame_next = 1'b1;
         end
     end
 end
@@ -244,12 +244,9 @@ always @(posedge clk) begin
         tick_count_reg <= 0;
         byte_count_reg <= 0;
         frame_count_reg <= 0;
-        frame_reg <= 0;
+        frame_reg <= 1'b0;
         frame_ptr_reg <= 0;
-        busy_reg <= 0;
-        tick_count_output_reg <= 0;
-        byte_count_output_reg <= 0;
-        frame_count_output_reg <= 0;
+        busy_reg <= 1'b0;
     end else begin
         state_reg <= state_next;
         tick_count_reg <= tick_count_next;
@@ -260,74 +257,93 @@ always @(posedge clk) begin
 
         busy_reg <= state_next != STATE_IDLE;
 
-        if (store_output) begin
-            tick_count_output_reg <= tick_count_reg;
-            byte_count_output_reg <= byte_count_reg;
-            frame_count_output_reg <= frame_count_reg;
-        end
+    end
+
+    if (store_output) begin
+        tick_count_output_reg <= tick_count_reg;
+        byte_count_output_reg <= byte_count_reg;
+        frame_count_output_reg <= frame_count_reg;
     end
 end
 
 // output datapath logic
-reg [7:0]  output_axis_tdata_reg = 0;
-reg        output_axis_tvalid_reg = 0;
-reg        output_axis_tlast_reg = 0;
-reg        output_axis_tuser_reg = 0;
+reg [7:0] output_axis_tdata_reg = 8'd0;
+reg       output_axis_tvalid_reg = 1'b0, output_axis_tvalid_next;
+reg       output_axis_tlast_reg = 1'b0;
+reg       output_axis_tuser_reg = 1'b0;
+
+reg [7:0] temp_axis_tdata_reg = 8'd0;
+reg       temp_axis_tvalid_reg = 1'b0, temp_axis_tvalid_next;
+reg       temp_axis_tlast_reg = 1'b0;
+reg       temp_axis_tuser_reg = 1'b0;
 
-reg [7:0]  temp_axis_tdata_reg = 0;
-reg        temp_axis_tvalid_reg = 0;
-reg        temp_axis_tlast_reg = 0;
-reg        temp_axis_tuser_reg = 0;
+// datapath control
+reg store_axis_int_to_output;
+reg store_axis_int_to_temp;
+reg store_axis_temp_to_output;
 
 assign output_axis_tdata = output_axis_tdata_reg;
 assign output_axis_tvalid = output_axis_tvalid_reg;
 assign output_axis_tlast = output_axis_tlast_reg;
 assign output_axis_tuser = output_axis_tuser_reg;
 
-// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle
-assign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);
+// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)
+assign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & (~output_axis_tvalid_reg | ~output_axis_tvalid_int));
+
+always @* begin
+    // transfer sink ready state to source
+    output_axis_tvalid_next = output_axis_tvalid_reg;
+    temp_axis_tvalid_next = temp_axis_tvalid_reg;
+
+    store_axis_int_to_output = 1'b0;
+    store_axis_int_to_temp = 1'b0;
+    store_axis_temp_to_output = 1'b0;
+    
+    if (output_axis_tready_int_reg) begin
+        // input is ready
+        if (output_axis_tready | ~output_axis_tvalid_reg) begin
+            // output is ready or currently not valid, transfer data to output
+            output_axis_tvalid_next = output_axis_tvalid_int;
+            store_axis_int_to_output = 1'b1;
+        end else begin
+            // output is not ready, store input in temp
+            temp_axis_tvalid_next = output_axis_tvalid_int;
+            store_axis_int_to_temp = 1'b1;
+        end
+    end else if (output_axis_tready) begin
+        // input is not ready, but output is ready
+        output_axis_tvalid_next = temp_axis_tvalid_reg;
+        temp_axis_tvalid_next = 1'b0;
+        store_axis_temp_to_output = 1'b1;
+    end
+end
 
 always @(posedge clk) begin
     if (rst) begin
-        output_axis_tdata_reg <= 0;
-        output_axis_tvalid_reg <= 0;
-        output_axis_tlast_reg <= 0;
-        output_axis_tuser_reg <= 0;
-        output_axis_tready_int <= 0;
-        temp_axis_tdata_reg <= 0;
-        temp_axis_tvalid_reg <= 0;
-        temp_axis_tlast_reg <= 0;
-        temp_axis_tuser_reg <= 0;
+        output_axis_tvalid_reg <= 1'b0;
+        output_axis_tready_int_reg <= 1'b0;
+        temp_axis_tvalid_reg <= 1'b0;
     end else begin
-        // transfer sink ready state to source
-        output_axis_tready_int <= output_axis_tready_int_early;
-
-        if (output_axis_tready_int) begin
-            // input is ready
-            if (output_axis_tready | ~output_axis_tvalid_reg) begin
-                // output is ready or currently not valid, transfer data to output
-                output_axis_tdata_reg <= output_axis_tdata_int;
-                output_axis_tvalid_reg <= output_axis_tvalid_int;
-                output_axis_tlast_reg <= output_axis_tlast_int;
-                output_axis_tuser_reg <= output_axis_tuser_int;
-            end else begin
-                // output is not ready, store input in temp
-                temp_axis_tdata_reg <= output_axis_tdata_int;
-                temp_axis_tvalid_reg <= output_axis_tvalid_int;
-                temp_axis_tlast_reg <= output_axis_tlast_int;
-                temp_axis_tuser_reg <= output_axis_tuser_int;
-            end
-        end else if (output_axis_tready) begin
-            // input is not ready, but output is ready
-            output_axis_tdata_reg <= temp_axis_tdata_reg;
-            output_axis_tvalid_reg <= temp_axis_tvalid_reg;
-            output_axis_tlast_reg <= temp_axis_tlast_reg;
-            output_axis_tuser_reg <= temp_axis_tuser_reg;
-            temp_axis_tdata_reg <= 0;
-            temp_axis_tvalid_reg <= 0;
-            temp_axis_tlast_reg <= 0;
-            temp_axis_tuser_reg <= 0;
-        end
+        output_axis_tvalid_reg <= output_axis_tvalid_next;
+        output_axis_tready_int_reg <= output_axis_tready_int_early;
+        temp_axis_tvalid_reg <= temp_axis_tvalid_next;
+    end
+
+    // datapath
+    if (store_axis_int_to_output) begin
+        output_axis_tdata_reg <= output_axis_tdata_int;
+        output_axis_tlast_reg <= output_axis_tlast_int;
+        output_axis_tuser_reg <= output_axis_tuser_int;
+    end else if (store_axis_temp_to_output) begin
+        output_axis_tdata_reg <= temp_axis_tdata_reg;
+        output_axis_tlast_reg <= temp_axis_tlast_reg;
+        output_axis_tuser_reg <= temp_axis_tuser_reg;
+    end
+
+    if (store_axis_int_to_temp) begin
+        temp_axis_tdata_reg <= output_axis_tdata_int;
+        temp_axis_tlast_reg <= output_axis_tlast_int;
+        temp_axis_tuser_reg <= output_axis_tuser_int;
     end
 end
 