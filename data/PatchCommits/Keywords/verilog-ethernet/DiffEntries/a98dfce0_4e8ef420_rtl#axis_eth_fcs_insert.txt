a98dfce09932572044adc6ae845a41643e2bcb2d
Update output registers, remove extraneous resets, fix constant widths
diff --git a/rtl/axis_eth_fcs_insert.v b/rtl/axis_eth_fcs_insert.v
index 7cc839f..347c3d3 100644
--- a/rtl/axis_eth_fcs_insert.v
+++ b/rtl/axis_eth_fcs_insert.v
@@ -74,22 +74,22 @@ reg [1:0] state_reg = STATE_IDLE, state_next;
 reg reset_crc;
 reg update_crc;
 
-reg [7:0] frame_ptr_reg = 0, frame_ptr_next;
+reg [15:0] frame_ptr_reg = 16'd0, frame_ptr_next;
 
-reg busy_reg = 0;
+reg busy_reg = 1'b0;
 
-reg input_axis_tready_reg = 0, input_axis_tready_next;
+reg input_axis_tready_reg = 1'b0, input_axis_tready_next;
 
 reg [31:0] crc_state = 32'hFFFFFFFF;
 wire [31:0] crc_next;
 
 // internal datapath
-reg [7:0]  output_axis_tdata_int;
-reg        output_axis_tvalid_int;
-reg        output_axis_tready_int = 0;
-reg        output_axis_tlast_int;
-reg        output_axis_tuser_int;
-wire       output_axis_tready_int_early;
+reg [7:0] output_axis_tdata_int;
+reg       output_axis_tvalid_int;
+reg       output_axis_tready_int_reg = 1'b0;
+reg       output_axis_tlast_int;
+reg       output_axis_tuser_int;
+wire      output_axis_tready_int_early;
 
 assign input_axis_tready = input_axis_tready_reg;
 
@@ -105,47 +105,47 @@ eth_crc_8_inst (
 always @* begin
     state_next = STATE_IDLE;
 
-    reset_crc = 0;
-    update_crc = 0;
+    reset_crc = 1'b0;
+    update_crc = 1'b0;
 
     frame_ptr_next = frame_ptr_reg;
 
-    input_axis_tready_next = 0;
+    input_axis_tready_next = 1'b0;
 
-    output_axis_tdata_int = 0;
-    output_axis_tvalid_int = 0;
-    output_axis_tlast_int = 0;
-    output_axis_tuser_int = 0;
+    output_axis_tdata_int = 8'd0;
+    output_axis_tvalid_int = 1'b0;
+    output_axis_tlast_int = 1'b0;
+    output_axis_tuser_int = 1'b0;
 
     case (state_reg)
         STATE_IDLE: begin
             // idle state - wait for data
             input_axis_tready_next = output_axis_tready_int_early;
-            frame_ptr_next = 0;
-            reset_crc = 1;
+            frame_ptr_next = 16'd0;
+            reset_crc = 1'b1;
 
             output_axis_tdata_int = input_axis_tdata;
             output_axis_tvalid_int = input_axis_tvalid;
-            output_axis_tlast_int = 0;
-            output_axis_tuser_int = 0;
+            output_axis_tlast_int = 1'b0;
+            output_axis_tuser_int = 1'b0;
 
             if (input_axis_tready & input_axis_tvalid) begin
-                frame_ptr_next = 1;
-                reset_crc = 0;
-                update_crc = 1;
+                frame_ptr_next = 16'd1;
+                reset_crc = 1'b0;
+                update_crc = 1'b1;
                 if (input_axis_tlast) begin
                     if (input_axis_tuser) begin
-                        output_axis_tlast_int = 1;
-                        output_axis_tuser_int = 1;
-                        reset_crc = 1;
-                        frame_ptr_next = 0;
+                        output_axis_tlast_int = 1'b1;
+                        output_axis_tuser_int = 1'b1;
+                        reset_crc = 1'b1;
+                        frame_ptr_next = 16'd0;
                         state_next = STATE_IDLE;
                     end else begin
-                        input_axis_tready_next = 0;
+                        input_axis_tready_next = 1'b0;
                         if (ENABLE_PADDING && frame_ptr_reg < MIN_FRAME_LENGTH-5) begin
                             state_next = STATE_PAD;
                         end else begin
-                            frame_ptr_next = 0;
+                            frame_ptr_next = 16'd0;
                             state_next = STATE_FCS;
                         end
                     end
@@ -162,25 +162,25 @@ always @* begin
 
             output_axis_tdata_int = input_axis_tdata;
             output_axis_tvalid_int = input_axis_tvalid;
-            output_axis_tlast_int = 0;
-            output_axis_tuser_int = 0;
+            output_axis_tlast_int = 1'b0;
+            output_axis_tuser_int = 1'b0;
 
             if (input_axis_tready & input_axis_tvalid) begin
-                frame_ptr_next = frame_ptr_reg + 1;
-                update_crc = 1;
+                frame_ptr_next = frame_ptr_reg + 16'd1;
+                update_crc = 1'b1;
                 if (input_axis_tlast) begin
                     if (input_axis_tuser) begin
-                        output_axis_tlast_int = 1;
-                        output_axis_tuser_int = 1;
-                        reset_crc = 1;
-                        frame_ptr_next = 0;
+                        output_axis_tlast_int = 1'b1;
+                        output_axis_tuser_int = 1'b1;
+                        reset_crc = 1'b1;
+                        frame_ptr_next = 16'd0;
                         state_next = STATE_IDLE;
                     end else begin
-                        input_axis_tready_next = 0;
+                        input_axis_tready_next = 1'b0;
                         if (ENABLE_PADDING && frame_ptr_reg < MIN_FRAME_LENGTH-5) begin
                             state_next = STATE_PAD;
                         end else begin
-                            frame_ptr_next = 0;
+                            frame_ptr_next = 16'd0;
                             state_next = STATE_FCS;
                         end
                     end
@@ -193,20 +193,20 @@ always @* begin
         end
         STATE_PAD: begin
             // insert padding
-            input_axis_tready_next = 0;
+            input_axis_tready_next = 1'b0;
 
-            output_axis_tdata_int = 0;
-            output_axis_tvalid_int = 1;
-            output_axis_tlast_int = 0;
-            output_axis_tuser_int = 0;
+            output_axis_tdata_int = 8'd0;
+            output_axis_tvalid_int = 1'b1;
+            output_axis_tlast_int = 1'b0;
+            output_axis_tuser_int = 1'b0;
 
-            if (output_axis_tready_int) begin
-                frame_ptr_next = frame_ptr_reg + 1;
-                update_crc = 1;
+            if (output_axis_tready_int_reg) begin
+                frame_ptr_next = frame_ptr_reg + 16'd1;
+                update_crc = 1'b1;
                 if (frame_ptr_reg < MIN_FRAME_LENGTH-5) begin
                     state_next = STATE_PAD;
                 end else begin
-                    frame_ptr_next = 0;
+                    frame_ptr_next = 16'd0;
                     state_next = STATE_FCS;
                 end
             end else begin
@@ -215,7 +215,7 @@ always @* begin
         end
         STATE_FCS: begin
             // send FCS
-            input_axis_tready_next = 0;
+            input_axis_tready_next = 1'b0;
 
             case (frame_ptr_reg)
                 2'd0: output_axis_tdata_int = ~crc_state[7:0];
@@ -223,19 +223,19 @@ always @* begin
                 2'd2: output_axis_tdata_int = ~crc_state[23:16];
                 2'd3: output_axis_tdata_int = ~crc_state[31:24];
             endcase
-            output_axis_tvalid_int = 1;
-            output_axis_tlast_int = 0;
-            output_axis_tuser_int = 0;
+            output_axis_tvalid_int = 1'b1;
+            output_axis_tlast_int = 1'b0;
+            output_axis_tuser_int = 1'b0;
 
-            if (output_axis_tready_int) begin
-                frame_ptr_next = frame_ptr_reg + 1;
+            if (output_axis_tready_int_reg) begin
+                frame_ptr_next = frame_ptr_reg + 16'd1;
 
-                if (frame_ptr_reg < 3) begin
+                if (frame_ptr_reg < 16'd3) begin
                     state_next = STATE_FCS;
                 end else begin
-                    reset_crc = 1;
-                    frame_ptr_next = 0;
-                    output_axis_tlast_int = 1;
+                    reset_crc = 1'b1;
+                    frame_ptr_next = 16'd0;
+                    output_axis_tlast_int = 1'b1;
                     input_axis_tready_next = output_axis_tready_int_early;
                     state_next = STATE_IDLE;
                 end
@@ -250,11 +250,11 @@ always @(posedge clk) begin
     if (rst) begin
         state_reg <= STATE_IDLE;
         
-        frame_ptr_reg <= 0;
+        frame_ptr_reg <= 1'b0;
         
-        input_axis_tready_reg <= 0;
+        input_axis_tready_reg <= 1'b0;
 
-        busy_reg <= 0;
+        busy_reg <= 1'b0;
 
         crc_state <= 32'hFFFFFFFF;
     end else begin
@@ -276,65 +276,83 @@ always @(posedge clk) begin
 end
 
 // output datapath logic
-reg [7:0]  output_axis_tdata_reg = 0;
-reg        output_axis_tvalid_reg = 0;
-reg        output_axis_tlast_reg = 0;
-reg        output_axis_tuser_reg = 0;
+reg [7:0] output_axis_tdata_reg = 8'd0;
+reg       output_axis_tvalid_reg = 1'b0, output_axis_tvalid_next;
+reg       output_axis_tlast_reg = 1'b0;
+reg       output_axis_tuser_reg = 1'b0;
 
-reg [7:0]  temp_axis_tdata_reg = 0;
-reg        temp_axis_tvalid_reg = 0;
-reg        temp_axis_tlast_reg = 0;
-reg        temp_axis_tuser_reg = 0;
+reg [7:0] temp_axis_tdata_reg = 8'd0;
+reg       temp_axis_tvalid_reg = 1'b0, temp_axis_tvalid_next;
+reg       temp_axis_tlast_reg = 1'b0;
+reg       temp_axis_tuser_reg = 1'b0;
+
+// datapath control
+reg store_axis_int_to_output;
+reg store_axis_int_to_temp;
+reg store_axis_temp_to_output;
 
 assign output_axis_tdata = output_axis_tdata_reg;
 assign output_axis_tvalid = output_axis_tvalid_reg;
 assign output_axis_tlast = output_axis_tlast_reg;
 assign output_axis_tuser = output_axis_tuser_reg;
 
-// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle
-assign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);
+// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)
+assign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & (~output_axis_tvalid_reg | ~output_axis_tvalid_int));
+
+always @* begin
+    // transfer sink ready state to source
+    output_axis_tvalid_next = output_axis_tvalid_reg;
+    temp_axis_tvalid_next = temp_axis_tvalid_reg;
+
+    store_axis_int_to_output = 1'b0;
+    store_axis_int_to_temp = 1'b0;
+    store_axis_temp_to_output = 1'b0;
+    
+    if (output_axis_tready_int_reg) begin
+        // input is ready
+        if (output_axis_tready | ~output_axis_tvalid_reg) begin
+            // output is ready or currently not valid, transfer data to output
+            output_axis_tvalid_next = output_axis_tvalid_int;
+            store_axis_int_to_output = 1'b1;
+        end else begin
+            // output is not ready, store input in temp
+            temp_axis_tvalid_next = output_axis_tvalid_int;
+            store_axis_int_to_temp = 1'b1;
+        end
+    end else if (output_axis_tready) begin
+        // input is not ready, but output is ready
+        output_axis_tvalid_next = temp_axis_tvalid_reg;
+        temp_axis_tvalid_next = 1'b0;
+        store_axis_temp_to_output = 1'b1;
+    end
+end
 
 always @(posedge clk) begin
     if (rst) begin
-        output_axis_tdata_reg <= 0;
-        output_axis_tvalid_reg <= 0;
-        output_axis_tlast_reg <= 0;
-        output_axis_tuser_reg <= 0;
-        output_axis_tready_int <= 0;
-        temp_axis_tdata_reg <= 0;
-        temp_axis_tvalid_reg <= 0;
-        temp_axis_tlast_reg <= 0;
-        temp_axis_tuser_reg <= 0;
+        output_axis_tvalid_reg <= 1'b0;
+        output_axis_tready_int_reg <= 1'b0;
+        temp_axis_tvalid_reg <= 1'b0;
     end else begin
-        // transfer sink ready state to source
-        output_axis_tready_int <= output_axis_tready_int_early;
-
-        if (output_axis_tready_int) begin
-            // input is ready
-            if (output_axis_tready | ~output_axis_tvalid_reg) begin
-                // output is ready or currently not valid, transfer data to output
-                output_axis_tdata_reg <= output_axis_tdata_int;
-                output_axis_tvalid_reg <= output_axis_tvalid_int;
-                output_axis_tlast_reg <= output_axis_tlast_int;
-                output_axis_tuser_reg <= output_axis_tuser_int;
-            end else begin
-                // output is not ready and currently valid, store input in temp
-                temp_axis_tdata_reg <= output_axis_tdata_int;
-                temp_axis_tvalid_reg <= output_axis_tvalid_int;
-                temp_axis_tlast_reg <= output_axis_tlast_int;
-                temp_axis_tuser_reg <= output_axis_tuser_int;
-            end
-        end else if (output_axis_tready) begin
-            // input is not ready, but output is ready
-            output_axis_tdata_reg <= temp_axis_tdata_reg;
-            output_axis_tvalid_reg <= temp_axis_tvalid_reg;
-            output_axis_tlast_reg <= temp_axis_tlast_reg;
-            output_axis_tuser_reg <= temp_axis_tuser_reg;
-            temp_axis_tdata_reg <= 0;
-            temp_axis_tvalid_reg <= 0;
-            temp_axis_tlast_reg <= 0;
-            temp_axis_tuser_reg <= 0;
-        end
+        output_axis_tvalid_reg <= output_axis_tvalid_next;
+        output_axis_tready_int_reg <= output_axis_tready_int_early;
+        temp_axis_tvalid_reg <= temp_axis_tvalid_next;
+    end
+
+    // datapath
+    if (store_axis_int_to_output) begin
+        output_axis_tdata_reg <= output_axis_tdata_int;
+        output_axis_tlast_reg <= output_axis_tlast_int;
+        output_axis_tuser_reg <= output_axis_tuser_int;
+    end else if (store_axis_temp_to_output) begin
+        output_axis_tdata_reg <= temp_axis_tdata_reg;
+        output_axis_tlast_reg <= temp_axis_tlast_reg;
+        output_axis_tuser_reg <= temp_axis_tuser_reg;
+    end
+
+    if (store_axis_int_to_temp) begin
+        temp_axis_tdata_reg <= output_axis_tdata_int;
+        temp_axis_tlast_reg <= output_axis_tlast_int;
+        temp_axis_tuser_reg <= output_axis_tuser_int;
     end
 end
 