a98dfce09932572044adc6ae845a41643e2bcb2d
Update output registers, remove extraneous resets, fix constant widths
diff --git a/rtl/eth_mux_64_2.v b/rtl/eth_mux_64_2.v
index e9b95d2..7281e7d 100644
--- a/rtl/eth_mux_64_2.v
+++ b/rtl/eth_mux_64_2.v
@@ -1,6 +1,6 @@
 /*
 
-Copyright (c) 2014 Alex Forencich
+Copyright (c) 2014-2015 Alex Forencich
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
@@ -83,25 +83,25 @@ module eth_mux_64_2
     input  wire [0:0]  select
 );
 
-reg [0:0] select_reg = 0, select_next;
-reg frame_reg = 0, frame_next;
+reg [0:0] select_reg = 1'd0, select_next;
+reg frame_reg = 1'b0, frame_next;
 
-reg input_0_eth_hdr_ready_reg = 0, input_0_eth_hdr_ready_next;
-reg input_1_eth_hdr_ready_reg = 0, input_1_eth_hdr_ready_next;
+reg input_0_eth_hdr_ready_reg = 1'b0, input_0_eth_hdr_ready_next;
+reg input_1_eth_hdr_ready_reg = 1'b0, input_1_eth_hdr_ready_next;
 
-reg input_0_eth_payload_tready_reg = 0, input_0_eth_payload_tready_next;
-reg input_1_eth_payload_tready_reg = 0, input_1_eth_payload_tready_next;
+reg input_0_eth_payload_tready_reg = 1'b0, input_0_eth_payload_tready_next;
+reg input_1_eth_payload_tready_reg = 1'b0, input_1_eth_payload_tready_next;
 
-reg output_eth_hdr_valid_reg = 0, output_eth_hdr_valid_next;
-reg [47:0] output_eth_dest_mac_reg = 0, output_eth_dest_mac_next;
-reg [47:0] output_eth_src_mac_reg = 0, output_eth_src_mac_next;
-reg [15:0] output_eth_type_reg = 0, output_eth_type_next;
+reg output_eth_hdr_valid_reg = 1'b0, output_eth_hdr_valid_next;
+reg [47:0] output_eth_dest_mac_reg = 48'd0, output_eth_dest_mac_next;
+reg [47:0] output_eth_src_mac_reg = 48'd0, output_eth_src_mac_next;
+reg [15:0] output_eth_type_reg = 16'd0, output_eth_type_next;
 
 // internal datapath
 reg [63:0] output_eth_payload_tdata_int;
 reg [7:0]  output_eth_payload_tkeep_int;
 reg        output_eth_payload_tvalid_int;
-reg        output_eth_payload_tready_int = 0;
+reg        output_eth_payload_tready_int_reg = 1'b0;
 reg        output_eth_payload_tlast_int;
 reg        output_eth_payload_tuser_int;
 wire       output_eth_payload_tready_int_early;
@@ -136,6 +136,12 @@ always @* begin
             selected_input_eth_src_mac = input_1_eth_src_mac;
             selected_input_eth_type = input_1_eth_type;
         end
+        default: begin
+            selected_input_eth_hdr_valid = 1'b0;
+            selected_input_eth_dest_mac = 48'd0;
+            selected_input_eth_src_mac = 48'd0;
+            selected_input_eth_type = 16'd0;
+        end
     endcase
 end
 
@@ -164,6 +170,14 @@ always @* begin
             current_input_tlast = input_1_eth_payload_tlast;
             current_input_tuser = input_1_eth_payload_tuser;
         end
+        default: begin
+            current_input_tdata = 64'd0;
+            current_input_tkeep = 8'd0;
+            current_input_tvalid = 1'b0;
+            current_input_tready = 1'b0;
+            current_input_tlast = 1'b0;
+            current_input_tuser = 1'b0;
+        end
     endcase
 end
 
@@ -174,8 +188,8 @@ always @* begin
     input_0_eth_hdr_ready_next = input_0_eth_hdr_ready_reg & ~input_0_eth_hdr_valid;
     input_1_eth_hdr_ready_next = input_1_eth_hdr_ready_reg & ~input_1_eth_hdr_valid;
 
-    input_0_eth_payload_tready_next = 0;
-    input_1_eth_payload_tready_next = 0;
+    input_0_eth_payload_tready_next = 1'b0;
+    input_1_eth_payload_tready_next = 1'b0;
 
     output_eth_hdr_valid_next = output_eth_hdr_valid_reg & ~output_eth_hdr_ready;
     output_eth_dest_mac_next = output_eth_dest_mac_reg;
@@ -189,15 +203,15 @@ always @* begin
         end
     end else if (enable & ~output_eth_hdr_valid & selected_input_eth_hdr_valid) begin
         // start of frame, grab select value
-        frame_next = 1;
+        frame_next = 1'b1;
         select_next = select;
 
         case (select_next)
-            1'd0: input_0_eth_hdr_ready_next = 1;
-            1'd1: input_1_eth_hdr_ready_next = 1;
+            1'd0: input_0_eth_hdr_ready_next = 1'b1;
+            1'd1: input_1_eth_hdr_ready_next = 1'b1;
         endcase
 
-        output_eth_hdr_valid_next = 1;
+        output_eth_hdr_valid_next = 1'b1;
         output_eth_dest_mac_next = selected_input_eth_dest_mac;
         output_eth_src_mac_next = selected_input_eth_src_mac;
         output_eth_type_next = selected_input_eth_type;
@@ -219,16 +233,13 @@ end
 
 always @(posedge clk) begin
     if (rst) begin
-        select_reg <= 0;
-        frame_reg <= 0;
-        input_0_eth_hdr_ready_reg <= 0;
-        input_1_eth_hdr_ready_reg <= 0;
-        input_0_eth_payload_tready_reg <= 0;
-        input_1_eth_payload_tready_reg <= 0;
-        output_eth_hdr_valid_reg <= 0;
-        output_eth_dest_mac_reg <= 0;
-        output_eth_src_mac_reg <= 0;
-        output_eth_type_reg <= 0;
+        select_reg <= 1'd0;
+        frame_reg <= 1'b0;
+        input_0_eth_hdr_ready_reg <= 1'b0;
+        input_1_eth_hdr_ready_reg <= 1'b0;
+        input_0_eth_payload_tready_reg <= 1'b0;
+        input_1_eth_payload_tready_reg <= 1'b0;
+        output_eth_hdr_valid_reg <= 1'b0;
     end else begin
         select_reg <= select_next;
         frame_reg <= frame_next;
@@ -237,24 +248,30 @@ always @(posedge clk) begin
         input_0_eth_payload_tready_reg <= input_0_eth_payload_tready_next;
         input_1_eth_payload_tready_reg <= input_1_eth_payload_tready_next;
         output_eth_hdr_valid_reg <= output_eth_hdr_valid_next;
-        output_eth_dest_mac_reg <= output_eth_dest_mac_next;
-        output_eth_src_mac_reg <= output_eth_src_mac_next;
-        output_eth_type_reg <= output_eth_type_next;
     end
+
+    output_eth_dest_mac_reg <= output_eth_dest_mac_next;
+    output_eth_src_mac_reg <= output_eth_src_mac_next;
+    output_eth_type_reg <= output_eth_type_next;
 end
 
 // output datapath logic
-reg [63:0] output_eth_payload_tdata_reg = 0;
-reg [7:0]  output_eth_payload_tkeep_reg = 0;
-reg        output_eth_payload_tvalid_reg = 0;
-reg        output_eth_payload_tlast_reg = 0;
-reg        output_eth_payload_tuser_reg = 0;
-
-reg [63:0] temp_eth_payload_tdata_reg = 0;
-reg [7:0]  temp_eth_payload_tkeep_reg = 0;
-reg        temp_eth_payload_tvalid_reg = 0;
-reg        temp_eth_payload_tlast_reg = 0;
-reg        temp_eth_payload_tuser_reg = 0;
+reg [63:0] output_eth_payload_tdata_reg = 64'd0;
+reg [7:0]  output_eth_payload_tkeep_reg = 8'd0;
+reg        output_eth_payload_tvalid_reg = 1'b0, output_eth_payload_tvalid_next;
+reg        output_eth_payload_tlast_reg = 1'b0;
+reg        output_eth_payload_tuser_reg = 1'b0;
+
+reg [63:0] temp_eth_payload_tdata_reg = 64'd0;
+reg [7:0]  temp_eth_payload_tkeep_reg = 8'd0;
+reg        temp_eth_payload_tvalid_reg = 1'b0, temp_eth_payload_tvalid_next;
+reg        temp_eth_payload_tlast_reg = 1'b0;
+reg        temp_eth_payload_tuser_reg = 1'b0;
+
+// datapath control
+reg store_eth_payload_int_to_output;
+reg store_eth_payload_int_to_temp;
+reg store_eth_payload_temp_to_output;
 
 assign output_eth_payload_tdata = output_eth_payload_tdata_reg;
 assign output_eth_payload_tkeep = output_eth_payload_tkeep_reg;
@@ -262,56 +279,66 @@ assign output_eth_payload_tvalid = output_eth_payload_tvalid_reg;
 assign output_eth_payload_tlast = output_eth_payload_tlast_reg;
 assign output_eth_payload_tuser = output_eth_payload_tuser_reg;
 
-// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle
-assign output_eth_payload_tready_int_early = output_eth_payload_tready | (~temp_eth_payload_tvalid_reg & ~output_eth_payload_tvalid_reg) | (~temp_eth_payload_tvalid_reg & ~output_eth_payload_tvalid_int);
+// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)
+assign output_eth_payload_tready_int_early = output_eth_payload_tready | (~temp_eth_payload_tvalid_reg & (~output_eth_payload_tvalid_reg | ~output_eth_payload_tvalid_int));
+
+always @* begin
+    // transfer sink ready state to source
+    output_eth_payload_tvalid_next = output_eth_payload_tvalid_reg;
+    temp_eth_payload_tvalid_next = temp_eth_payload_tvalid_reg;
+
+    store_eth_payload_int_to_output = 1'b0;
+    store_eth_payload_int_to_temp = 1'b0;
+    store_eth_payload_temp_to_output = 1'b0;
+    
+    if (output_eth_payload_tready_int_reg) begin
+        // input is ready
+        if (output_eth_payload_tready | ~output_eth_payload_tvalid_reg) begin
+            // output is ready or currently not valid, transfer data to output
+            output_eth_payload_tvalid_next = output_eth_payload_tvalid_int;
+            store_eth_payload_int_to_output = 1'b1;
+        end else begin
+            // output is not ready, store input in temp
+            temp_eth_payload_tvalid_next = output_eth_payload_tvalid_int;
+            store_eth_payload_int_to_temp = 1'b1;
+        end
+    end else if (output_eth_payload_tready) begin
+        // input is not ready, but output is ready
+        output_eth_payload_tvalid_next = temp_eth_payload_tvalid_reg;
+        temp_eth_payload_tvalid_next = 1'b0;
+        store_eth_payload_temp_to_output = 1'b1;
+    end
+end
 
 always @(posedge clk) begin
     if (rst) begin
-        output_eth_payload_tdata_reg <= 0;
-        output_eth_payload_tkeep_reg <= 0;
-        output_eth_payload_tvalid_reg <= 0;
-        output_eth_payload_tlast_reg <= 0;
-        output_eth_payload_tuser_reg <= 0;
-        output_eth_payload_tready_int <= 0;
-        temp_eth_payload_tdata_reg <= 0;
-        temp_eth_payload_tkeep_reg <= 0;
-        temp_eth_payload_tvalid_reg <= 0;
-        temp_eth_payload_tlast_reg <= 0;
-        temp_eth_payload_tuser_reg <= 0;
+        output_eth_payload_tvalid_reg <= 1'b0;
+        output_eth_payload_tready_int_reg <= 1'b0;
+        temp_eth_payload_tvalid_reg <= 1'b0;
     end else begin
-        // transfer sink ready state to source
-        output_eth_payload_tready_int <= output_eth_payload_tready_int_early;
-
-        if (output_eth_payload_tready_int) begin
-            // input is ready
-            if (output_eth_payload_tready | ~output_eth_payload_tvalid_reg) begin
-                // output is ready or currently not valid, transfer data to output
-                output_eth_payload_tdata_reg <= output_eth_payload_tdata_int;
-                output_eth_payload_tkeep_reg <= output_eth_payload_tkeep_int;
-                output_eth_payload_tvalid_reg <= output_eth_payload_tvalid_int;
-                output_eth_payload_tlast_reg <= output_eth_payload_tlast_int;
-                output_eth_payload_tuser_reg <= output_eth_payload_tuser_int;
-            end else begin
-                // output is not ready, store input in temp
-                temp_eth_payload_tdata_reg <= output_eth_payload_tdata_int;
-                temp_eth_payload_tkeep_reg <= output_eth_payload_tkeep_int;
-                temp_eth_payload_tvalid_reg <= output_eth_payload_tvalid_int;
-                temp_eth_payload_tlast_reg <= output_eth_payload_tlast_int;
-                temp_eth_payload_tuser_reg <= output_eth_payload_tuser_int;
-            end
-        end else if (output_eth_payload_tready) begin
-            // input is not ready, but output is ready
-            output_eth_payload_tdata_reg <= temp_eth_payload_tdata_reg;
-            output_eth_payload_tkeep_reg <= temp_eth_payload_tkeep_reg;
-            output_eth_payload_tvalid_reg <= temp_eth_payload_tvalid_reg;
-            output_eth_payload_tlast_reg <= temp_eth_payload_tlast_reg;
-            output_eth_payload_tuser_reg <= temp_eth_payload_tuser_reg;
-            temp_eth_payload_tdata_reg <= 0;
-            temp_eth_payload_tkeep_reg <= 0;
-            temp_eth_payload_tvalid_reg <= 0;
-            temp_eth_payload_tlast_reg <= 0;
-            temp_eth_payload_tuser_reg <= 0;
-        end
+        output_eth_payload_tvalid_reg <= output_eth_payload_tvalid_next;
+        output_eth_payload_tready_int_reg <= output_eth_payload_tready_int_early;
+        temp_eth_payload_tvalid_reg <= temp_eth_payload_tvalid_next;
+    end
+
+    // datapath
+    if (store_eth_payload_int_to_output) begin
+        output_eth_payload_tdata_reg <= output_eth_payload_tdata_int;
+        output_eth_payload_tkeep_reg <= output_eth_payload_tkeep_int;
+        output_eth_payload_tlast_reg <= output_eth_payload_tlast_int;
+        output_eth_payload_tuser_reg <= output_eth_payload_tuser_int;
+    end else if (store_eth_payload_temp_to_output) begin
+        output_eth_payload_tdata_reg <= temp_eth_payload_tdata_reg;
+        output_eth_payload_tkeep_reg <= temp_eth_payload_tkeep_reg;
+        output_eth_payload_tlast_reg <= temp_eth_payload_tlast_reg;
+        output_eth_payload_tuser_reg <= temp_eth_payload_tuser_reg;
+    end
+
+    if (store_eth_payload_int_to_temp) begin
+        temp_eth_payload_tdata_reg <= output_eth_payload_tdata_int;
+        temp_eth_payload_tkeep_reg <= output_eth_payload_tkeep_int;
+        temp_eth_payload_tlast_reg <= output_eth_payload_tlast_int;
+        temp_eth_payload_tuser_reg <= output_eth_payload_tuser_int;
     end
 end
 