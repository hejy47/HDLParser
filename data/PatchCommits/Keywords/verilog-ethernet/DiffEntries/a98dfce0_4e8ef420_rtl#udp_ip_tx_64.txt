a98dfce09932572044adc6ae845a41643e2bcb2d
Update output registers, remove extraneous resets, fix constant widths
diff --git a/rtl/udp_ip_tx_64.v b/rtl/udp_ip_tx_64.v
index 69b5ba4..aee1350 100644
--- a/rtl/udp_ip_tx_64.v
+++ b/rtl/udp_ip_tx_64.v
@@ -1,6 +1,6 @@
 /*
 
-Copyright (c) 2014 Alex Forencich
+Copyright (c) 2014-2015 Alex Forencich
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
@@ -149,45 +149,45 @@ reg [2:0] state_reg = STATE_IDLE, state_next;
 reg store_udp_hdr;
 reg store_last_word;
 
-reg [15:0] frame_ptr_reg = 0, frame_ptr_next;
-
-reg [63:0] last_word_data_reg = 0;
-reg [7:0] last_word_keep_reg = 0;
-
-reg [15:0] udp_source_port_reg = 0;
-reg [15:0] udp_dest_port_reg = 0;
-reg [15:0] udp_length_reg = 0;
-reg [15:0] udp_checksum_reg = 0;
-
-reg input_udp_hdr_ready_reg = 0, input_udp_hdr_ready_next;
-reg input_udp_payload_tready_reg = 0, input_udp_payload_tready_next;
-
-reg output_ip_hdr_valid_reg = 0, output_ip_hdr_valid_next;
-reg [47:0] output_eth_dest_mac_reg = 0;
-reg [47:0] output_eth_src_mac_reg = 0;
-reg [15:0] output_eth_type_reg = 0;
-reg [3:0] output_ip_version_reg = 0;
-reg [3:0] output_ip_ihl_reg = 0;
-reg [5:0] output_ip_dscp_reg = 0;
-reg [1:0] output_ip_ecn_reg = 0;
-reg [15:0] output_ip_length_reg = 0;
-reg [15:0] output_ip_identification_reg = 0;
-reg [2:0] output_ip_flags_reg = 0;
-reg [12:0] output_ip_fragment_offset_reg = 0;
-reg [7:0] output_ip_ttl_reg = 0;
-reg [7:0] output_ip_protocol_reg = 0;
-reg [15:0] output_ip_header_checksum_reg = 0;
-reg [31:0] output_ip_source_ip_reg = 0;
-reg [31:0] output_ip_dest_ip_reg = 0;
-
-reg busy_reg = 0;
-reg error_payload_early_termination_reg = 0, error_payload_early_termination_next;
+reg [15:0] frame_ptr_reg = 16'd0, frame_ptr_next;
+
+reg [63:0] last_word_data_reg = 64'd0;
+reg [7:0] last_word_keep_reg = 8'd0;
+
+reg [15:0] udp_source_port_reg = 16'd0;
+reg [15:0] udp_dest_port_reg = 16'd0;
+reg [15:0] udp_length_reg = 16'd0;
+reg [15:0] udp_checksum_reg = 16'd0;
+
+reg input_udp_hdr_ready_reg = 1'b0, input_udp_hdr_ready_next;
+reg input_udp_payload_tready_reg = 1'b0, input_udp_payload_tready_next;
+
+reg output_ip_hdr_valid_reg = 1'b0, output_ip_hdr_valid_next;
+reg [47:0] output_eth_dest_mac_reg = 48'd0;
+reg [47:0] output_eth_src_mac_reg = 48'd0;
+reg [15:0] output_eth_type_reg = 16'd0;
+reg [3:0] output_ip_version_reg = 4'd0;
+reg [3:0] output_ip_ihl_reg = 4'd0;
+reg [5:0] output_ip_dscp_reg = 6'd0;
+reg [1:0] output_ip_ecn_reg = 2'd0;
+reg [15:0] output_ip_length_reg = 16'd0;
+reg [15:0] output_ip_identification_reg = 16'd0;
+reg [2:0] output_ip_flags_reg = 3'd0;
+reg [12:0] output_ip_fragment_offset_reg = 13'd0;
+reg [7:0] output_ip_ttl_reg = 8'd0;
+reg [7:0] output_ip_protocol_reg = 8'd0;
+reg [15:0] output_ip_header_checksum_reg = 16'd0;
+reg [31:0] output_ip_source_ip_reg = 32'd0;
+reg [31:0] output_ip_dest_ip_reg = 32'd0;
+
+reg busy_reg = 1'b0;
+reg error_payload_early_termination_reg = 1'b0, error_payload_early_termination_next;
 
 // internal datapath
 reg [63:0] output_ip_payload_tdata_int;
 reg [7:0]  output_ip_payload_tkeep_int;
 reg        output_ip_payload_tvalid_int;
-reg        output_ip_payload_tready_int = 0;
+reg        output_ip_payload_tready_int_reg = 1'b0;
 reg        output_ip_payload_tlast_int;
 reg        output_ip_payload_tuser_int;
 wire       output_ip_payload_tready_int_early;
@@ -219,15 +219,15 @@ assign error_payload_early_termination = error_payload_early_termination_reg;
 function [3:0] keep2count;
     input [7:0] k;
     case (k)
-        8'b00000000: keep2count = 0;
-        8'b00000001: keep2count = 1;
-        8'b00000011: keep2count = 2;
-        8'b00000111: keep2count = 3;
-        8'b00001111: keep2count = 4;
-        8'b00011111: keep2count = 5;
-        8'b00111111: keep2count = 6;
-        8'b01111111: keep2count = 7;
-        8'b11111111: keep2count = 8;
+        8'b00000000: keep2count = 4'd0;
+        8'b00000001: keep2count = 4'd1;
+        8'b00000011: keep2count = 4'd2;
+        8'b00000111: keep2count = 4'd3;
+        8'b00001111: keep2count = 4'd4;
+        8'b00011111: keep2count = 4'd5;
+        8'b00111111: keep2count = 4'd6;
+        8'b01111111: keep2count = 4'd7;
+        8'b11111111: keep2count = 4'd8;
     endcase
 endfunction
 
@@ -249,38 +249,38 @@ endfunction
 always @* begin
     state_next = STATE_IDLE;
 
-    input_udp_hdr_ready_next = 0;
-    input_udp_payload_tready_next = 0;
+    input_udp_hdr_ready_next = 1'b0;
+    input_udp_payload_tready_next = 1'b0;
 
-    store_udp_hdr = 0;
+    store_udp_hdr = 1'b0;
 
-    store_last_word = 0;
+    store_last_word = 1'b0;
 
     frame_ptr_next = frame_ptr_reg;
 
     output_ip_hdr_valid_next = output_ip_hdr_valid_reg & ~output_ip_hdr_ready;
 
-    error_payload_early_termination_next = 0;
+    error_payload_early_termination_next = 1'b0;
 
-    output_ip_payload_tdata_int = 0;
-    output_ip_payload_tkeep_int = 0;
-    output_ip_payload_tvalid_int = 0;
-    output_ip_payload_tlast_int = 0;
-    output_ip_payload_tuser_int = 0;
+    output_ip_payload_tdata_int = 64'd0;
+    output_ip_payload_tkeep_int = 8'd0;
+    output_ip_payload_tvalid_int = 1'b0;
+    output_ip_payload_tlast_int = 1'b0;
+    output_ip_payload_tuser_int = 1'b0;
 
     case (state_reg)
         STATE_IDLE: begin
             // idle state - wait for data
-            frame_ptr_next = 0;
+            frame_ptr_next = 16'd0;
             input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;
 
             if (input_udp_hdr_ready & input_udp_hdr_valid) begin
-                store_udp_hdr = 1;
-                input_udp_hdr_ready_next = 0;
-                output_ip_hdr_valid_next = 1;
+                store_udp_hdr = 1'b1;
+                input_udp_hdr_ready_next = 1'b0;
+                output_ip_hdr_valid_next = 1'b1;
                 state_next = STATE_WRITE_HEADER;
-                if (output_ip_payload_tready_int) begin
-                    output_ip_payload_tvalid_int = 1;
+                if (output_ip_payload_tready_int_reg) begin
+                    output_ip_payload_tvalid_int = 1'b1;
                     output_ip_payload_tdata_int[ 7: 0] = input_udp_source_port[15: 8];
                     output_ip_payload_tdata_int[15: 8] = input_udp_source_port[ 7: 0];
                     output_ip_payload_tdata_int[23:16] = input_udp_dest_port[15: 8];
@@ -290,7 +290,7 @@ always @* begin
                     output_ip_payload_tdata_int[55:48] = input_udp_checksum[15: 8];
                     output_ip_payload_tdata_int[63:56] = input_udp_checksum[ 7: 0];
                     output_ip_payload_tkeep_int = 8'hff;
-                    frame_ptr_next = 8;
+                    frame_ptr_next = 16'd8;
                     input_udp_payload_tready_next = output_ip_payload_tready_int_early;
                     state_next = STATE_WRITE_PAYLOAD;
                 end
@@ -300,10 +300,10 @@ always @* begin
         end
         STATE_WRITE_HEADER: begin
             // write header state
-            if (output_ip_payload_tready_int) begin
+            if (output_ip_payload_tready_int_reg) begin
                 // word transfer out
-                frame_ptr_next = frame_ptr_reg+8;
-                output_ip_payload_tvalid_int = 1;
+                frame_ptr_next = frame_ptr_reg + 16'd8;
+                output_ip_payload_tvalid_int = 1'b1;
                 state_next = STATE_WRITE_HEADER;
                 case (frame_ptr_reg)
                     8'h00: begin
@@ -334,7 +334,7 @@ always @* begin
             output_ip_payload_tlast_int = input_udp_payload_tlast;
             output_ip_payload_tuser_int = input_udp_payload_tuser;
 
-            if (output_ip_payload_tready_int & input_udp_payload_tvalid) begin
+            if (output_ip_payload_tready_int_reg & input_udp_payload_tvalid) begin
                 // word transfer through
                 frame_ptr_next = frame_ptr_reg+keep2count(input_udp_payload_tkeep);
                 if (frame_ptr_next >= udp_length_reg) begin
@@ -342,20 +342,20 @@ always @* begin
                     frame_ptr_next = udp_length_reg;
                     output_ip_payload_tkeep_int = count2keep(udp_length_reg - frame_ptr_reg);
                     if (input_udp_payload_tlast) begin
-                        input_udp_payload_tready_next = 0;
+                        input_udp_payload_tready_next = 1'b0;
                         input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;
                         state_next = STATE_IDLE;
                     end else begin
-                        store_last_word = 1;
-                        output_ip_payload_tvalid_int = 0;
+                        store_last_word = 1'b1;
+                        output_ip_payload_tvalid_int = 1'b0;
                         state_next = STATE_WRITE_PAYLOAD_LAST;
                     end
                 end else begin
                     if (input_udp_payload_tlast) begin
                         // end of frame, but length does not match
-                        error_payload_early_termination_next = 1;
-                        output_ip_payload_tuser_int = 1;
-                        input_udp_payload_tready_next = 0;
+                        error_payload_early_termination_next = 1'b1;
+                        output_ip_payload_tuser_int = 1'b1;
+                        input_udp_payload_tready_next = 1'b0;
                         input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;
                         state_next = STATE_IDLE;
                     end else begin
@@ -379,7 +379,7 @@ always @* begin
             if (input_udp_payload_tready & input_udp_payload_tvalid) begin
                 if (input_udp_payload_tlast) begin
                     input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;
-                    input_udp_payload_tready_next = 0;
+                    input_udp_payload_tready_next = 1'b0;
                     state_next = STATE_IDLE;
                 end else begin
                     state_next = STATE_WRITE_PAYLOAD_LAST;
@@ -390,12 +390,12 @@ always @* begin
         end
         STATE_WAIT_LAST: begin
             // wait for end of frame; read and discard
-            input_udp_payload_tready_next = 1;
+            input_udp_payload_tready_next = 1'b1;
 
             if (input_udp_payload_tvalid) begin
                 if (input_udp_payload_tlast) begin
                     input_udp_hdr_ready_next = ~output_ip_hdr_valid_reg;
-                    input_udp_payload_tready_next = 0;
+                    input_udp_payload_tready_next = 1'b0;
                     state_next = STATE_IDLE;
                 end else begin
                     state_next = STATE_WAIT_LAST;
@@ -410,34 +410,12 @@ end
 always @(posedge clk) begin
     if (rst) begin
         state_reg <= STATE_IDLE;
-        frame_ptr_reg <= 0;
-        last_word_data_reg <= 0;
-        last_word_keep_reg <= 0;
-        input_udp_hdr_ready_reg <= 0;
-        input_udp_payload_tready_reg <= 0;
-        udp_source_port_reg <= 0;
-        udp_dest_port_reg <= 0;
-        udp_length_reg <= 0;
-        udp_checksum_reg <= 0;
-        output_ip_hdr_valid_reg <= 0;
-        output_eth_dest_mac_reg <= 0;
-        output_eth_src_mac_reg <= 0;
-        output_eth_type_reg <= 0;
-        output_ip_version_reg <= 0;
-        output_ip_ihl_reg <= 0;
-        output_ip_dscp_reg <= 0;
-        output_ip_ecn_reg <= 0;
-        output_ip_length_reg <= 0;
-        output_ip_identification_reg <= 0;
-        output_ip_flags_reg <= 0;
-        output_ip_fragment_offset_reg <= 0;
-        output_ip_ttl_reg <= 0;
-        output_ip_protocol_reg <= 0;
-        output_ip_header_checksum_reg <= 0;
-        output_ip_source_ip_reg <= 0;
-        output_ip_dest_ip_reg <= 0;
-        busy_reg <= 0;
-        error_payload_early_termination_reg <= 0;
+        frame_ptr_reg <= 16'd0;
+        input_udp_hdr_ready_reg <= 1'b0;
+        input_udp_payload_tready_reg <= 1'b0;
+        output_ip_hdr_valid_reg <= 1'b0;
+        busy_reg <= 1'b0;
+        error_payload_early_termination_reg <= 1'b0;
     end else begin
         state_reg <= state_next;
 
@@ -451,53 +429,55 @@ always @(posedge clk) begin
         busy_reg <= state_next != STATE_IDLE;
 
         error_payload_early_termination_reg <= error_payload_early_termination_next;
+    end
 
-        // datapath
-        if (store_udp_hdr) begin
-            output_eth_dest_mac_reg <= input_eth_dest_mac;
-            output_eth_src_mac_reg <= input_eth_src_mac;
-            output_eth_type_reg <= input_eth_type;
-            output_ip_version_reg <= input_ip_version;
-            output_ip_ihl_reg <= input_ip_ihl;
-            output_ip_dscp_reg <= input_ip_dscp;
-            output_ip_ecn_reg <= input_ip_ecn;
-            output_ip_length_reg <= input_udp_length + 20;
-            output_ip_identification_reg <= input_ip_identification;
-            output_ip_flags_reg <= input_ip_flags;
-            output_ip_fragment_offset_reg <= input_ip_fragment_offset;
-            output_ip_ttl_reg <= input_ip_ttl;
-            output_ip_protocol_reg <= input_ip_protocol;
-            output_ip_header_checksum_reg <= input_ip_header_checksum;
-            output_ip_source_ip_reg <= input_ip_source_ip;
-            output_ip_dest_ip_reg <= input_ip_dest_ip;
-            udp_source_port_reg <= input_udp_source_port;
-            udp_dest_port_reg <= input_udp_dest_port;
-            udp_length_reg <= input_udp_length;
-            udp_checksum_reg <= input_udp_checksum;
-        end
+    // datapath
+    if (store_udp_hdr) begin
+        output_eth_dest_mac_reg <= input_eth_dest_mac;
+        output_eth_src_mac_reg <= input_eth_src_mac;
+        output_eth_type_reg <= input_eth_type;
+        output_ip_version_reg <= input_ip_version;
+        output_ip_ihl_reg <= input_ip_ihl;
+        output_ip_dscp_reg <= input_ip_dscp;
+        output_ip_ecn_reg <= input_ip_ecn;
+        output_ip_length_reg <= input_udp_length + 20;
+        output_ip_identification_reg <= input_ip_identification;
+        output_ip_flags_reg <= input_ip_flags;
+        output_ip_fragment_offset_reg <= input_ip_fragment_offset;
+        output_ip_ttl_reg <= input_ip_ttl;
+        output_ip_protocol_reg <= input_ip_protocol;
+        output_ip_header_checksum_reg <= input_ip_header_checksum;
+        output_ip_source_ip_reg <= input_ip_source_ip;
+        output_ip_dest_ip_reg <= input_ip_dest_ip;
+        udp_source_port_reg <= input_udp_source_port;
+        udp_dest_port_reg <= input_udp_dest_port;
+        udp_length_reg <= input_udp_length;
+        udp_checksum_reg <= input_udp_checksum;
+    end
 
-        if (store_last_word) begin
-            last_word_data_reg <= output_ip_payload_tdata_int;
-            last_word_keep_reg <= output_ip_payload_tkeep_int;
-        end
+    if (store_last_word) begin
+        last_word_data_reg <= output_ip_payload_tdata_int;
+        last_word_keep_reg <= output_ip_payload_tkeep_int;
     end
 end
 
 // output datapath logic
-reg [63:0] output_ip_payload_tdata_reg = 0;
-reg [7:0]  output_ip_payload_tkeep_reg = 0;
-reg        output_ip_payload_tvalid_reg = 0;
-reg        output_ip_payload_tlast_reg = 0;
-reg        output_ip_payload_tuser_reg = 0;
-
-reg [63:0] temp_ip_payload_tdata_reg = 0;
-reg [7:0]  temp_ip_payload_tkeep_reg = 0;
-reg        temp_ip_payload_tvalid_reg = 0;
-reg        temp_ip_payload_tlast_reg = 0;
-reg        temp_ip_payload_tuser_reg = 0;
-
-// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle
-assign output_ip_payload_tready_int_early = output_ip_payload_tready | (~temp_ip_payload_tvalid_reg & ~output_ip_payload_tvalid_reg) | (~temp_ip_payload_tvalid_reg & ~output_ip_payload_tvalid_int);
+reg [63:0] output_ip_payload_tdata_reg = 64'd0;
+reg [7:0]  output_ip_payload_tkeep_reg = 8'd0;
+reg        output_ip_payload_tvalid_reg = 1'b0, output_ip_payload_tvalid_next;
+reg        output_ip_payload_tlast_reg = 1'b0;
+reg        output_ip_payload_tuser_reg = 1'b0;
+
+reg [63:0] temp_ip_payload_tdata_reg = 64'd0;
+reg [7:0]  temp_ip_payload_tkeep_reg = 8'd0;
+reg        temp_ip_payload_tvalid_reg = 1'b0, temp_ip_payload_tvalid_next;
+reg        temp_ip_payload_tlast_reg = 1'b0;
+reg        temp_ip_payload_tuser_reg = 1'b0;
+
+// datapath control
+reg store_ip_payload_int_to_output;
+reg store_ip_payload_int_to_temp;
+reg store_ip_payload_temp_to_output;
 
 assign output_ip_payload_tdata = output_ip_payload_tdata_reg;
 assign output_ip_payload_tkeep = output_ip_payload_tkeep_reg;
@@ -505,53 +485,66 @@ assign output_ip_payload_tvalid = output_ip_payload_tvalid_reg;
 assign output_ip_payload_tlast = output_ip_payload_tlast_reg;
 assign output_ip_payload_tuser = output_ip_payload_tuser_reg;
 
+// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)
+assign output_ip_payload_tready_int_early = output_ip_payload_tready | (~temp_ip_payload_tvalid_reg & (~output_ip_payload_tvalid_reg | ~output_ip_payload_tvalid_int));
+
+always @* begin
+    // transfer sink ready state to source
+    output_ip_payload_tvalid_next = output_ip_payload_tvalid_reg;
+    temp_ip_payload_tvalid_next = temp_ip_payload_tvalid_reg;
+
+    store_ip_payload_int_to_output = 1'b0;
+    store_ip_payload_int_to_temp = 1'b0;
+    store_ip_payload_temp_to_output = 1'b0;
+    
+    if (output_ip_payload_tready_int_reg) begin
+        // input is ready
+        if (output_ip_payload_tready | ~output_ip_payload_tvalid_reg) begin
+            // output is ready or currently not valid, transfer data to output
+            output_ip_payload_tvalid_next = output_ip_payload_tvalid_int;
+            store_ip_payload_int_to_output = 1'b1;
+        end else begin
+            // output is not ready, store input in temp
+            temp_ip_payload_tvalid_next = output_ip_payload_tvalid_int;
+            store_ip_payload_int_to_temp = 1'b1;
+        end
+    end else if (output_ip_payload_tready) begin
+        // input is not ready, but output is ready
+        output_ip_payload_tvalid_next = temp_ip_payload_tvalid_reg;
+        temp_ip_payload_tvalid_next = 1'b0;
+        store_ip_payload_temp_to_output = 1'b1;
+    end
+end
+
 always @(posedge clk) begin
     if (rst) begin
-        output_ip_payload_tdata_reg <= 0;
-        output_ip_payload_tkeep_reg <= 0;
-        output_ip_payload_tvalid_reg <= 0;
-        output_ip_payload_tlast_reg <= 0;
-        output_ip_payload_tuser_reg <= 0;
-        output_ip_payload_tready_int <= 0;
-        temp_ip_payload_tdata_reg <= 0;
-        temp_ip_payload_tkeep_reg <= 0;
-        temp_ip_payload_tvalid_reg <= 0;
-        temp_ip_payload_tlast_reg <= 0;
-        temp_ip_payload_tuser_reg <= 0;
+        output_ip_payload_tvalid_reg <= 1'b0;
+        output_ip_payload_tready_int_reg <= 1'b0;
+        temp_ip_payload_tvalid_reg <= 1'b0;
     end else begin
-        // transfer sink ready state to source
-        output_ip_payload_tready_int <= output_ip_payload_tready_int_early;
-
-        if (output_ip_payload_tready_int) begin
-            // input is ready
-            if (output_ip_payload_tready | ~output_ip_payload_tvalid_reg) begin
-                // output is ready or currently not valid, transfer data to output
-                output_ip_payload_tdata_reg <= output_ip_payload_tdata_int;
-                output_ip_payload_tkeep_reg <= output_ip_payload_tkeep_int;
-                output_ip_payload_tvalid_reg <= output_ip_payload_tvalid_int;
-                output_ip_payload_tlast_reg <= output_ip_payload_tlast_int;
-                output_ip_payload_tuser_reg <= output_ip_payload_tuser_int;
-            end else begin
-                // output is not ready and currently valid, store input in temp
-                temp_ip_payload_tdata_reg <= output_ip_payload_tdata_int;
-                temp_ip_payload_tkeep_reg <= output_ip_payload_tkeep_int;
-                temp_ip_payload_tvalid_reg <= output_ip_payload_tvalid_int;
-                temp_ip_payload_tlast_reg <= output_ip_payload_tlast_int;
-                temp_ip_payload_tuser_reg <= output_ip_payload_tuser_int;
-            end
-        end else if (output_ip_payload_tready) begin
-            // input is not ready, but output is ready
-            output_ip_payload_tdata_reg <= temp_ip_payload_tdata_reg;
-            output_ip_payload_tkeep_reg <= temp_ip_payload_tkeep_reg;
-            output_ip_payload_tvalid_reg <= temp_ip_payload_tvalid_reg;
-            output_ip_payload_tlast_reg <= temp_ip_payload_tlast_reg;
-            output_ip_payload_tuser_reg <= temp_ip_payload_tuser_reg;
-            temp_ip_payload_tdata_reg <= 0;
-            temp_ip_payload_tkeep_reg <= 0;
-            temp_ip_payload_tvalid_reg <= 0;
-            temp_ip_payload_tlast_reg <= 0;
-            temp_ip_payload_tuser_reg <= 0;
-        end
+        output_ip_payload_tvalid_reg <= output_ip_payload_tvalid_next;
+        output_ip_payload_tready_int_reg <= output_ip_payload_tready_int_early;
+        temp_ip_payload_tvalid_reg <= temp_ip_payload_tvalid_next;
+    end
+
+    // datapath
+    if (store_ip_payload_int_to_output) begin
+        output_ip_payload_tdata_reg <= output_ip_payload_tdata_int;
+        output_ip_payload_tkeep_reg <= output_ip_payload_tkeep_int;
+        output_ip_payload_tlast_reg <= output_ip_payload_tlast_int;
+        output_ip_payload_tuser_reg <= output_ip_payload_tuser_int;
+    end else if (store_ip_payload_temp_to_output) begin
+        output_ip_payload_tdata_reg <= temp_ip_payload_tdata_reg;
+        output_ip_payload_tkeep_reg <= temp_ip_payload_tkeep_reg;
+        output_ip_payload_tlast_reg <= temp_ip_payload_tlast_reg;
+        output_ip_payload_tuser_reg <= temp_ip_payload_tuser_reg;
+    end
+
+    if (store_ip_payload_int_to_temp) begin
+        temp_ip_payload_tdata_reg <= output_ip_payload_tdata_int;
+        temp_ip_payload_tkeep_reg <= output_ip_payload_tkeep_int;
+        temp_ip_payload_tlast_reg <= output_ip_payload_tlast_int;
+        temp_ip_payload_tuser_reg <= output_ip_payload_tuser_int;
     end
 end
 