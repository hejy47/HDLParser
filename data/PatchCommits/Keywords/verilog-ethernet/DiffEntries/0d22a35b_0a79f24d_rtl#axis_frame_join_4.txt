0d22a35bd855a7f08b34a3f1c24ebb143289d91d
Update output registers, remove extraneous resets, fix constant widths
diff --git a/rtl/axis_frame_join_4.v b/rtl/axis_frame_join_4.v
index d57acf7..82298e3 100644
--- a/rtl/axis_frame_join_4.v
+++ b/rtl/axis_frame_join_4.v
@@ -1,6 +1,6 @@
 /*
 
-Copyright (c) 2014 Alex Forencich
+Copyright (c) 2014-2015 Alex Forencich
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
@@ -95,27 +95,27 @@ localparam [1:0]
 
 reg [1:0] state_reg = STATE_IDLE, state_next;
 
-reg [2:0] frame_ptr_reg = 0, frame_ptr_next;
-reg [1:0] port_sel_reg = 0, port_sel_next;
+reg [2:0] frame_ptr_reg = 3'd0, frame_ptr_next;
+reg [1:0] port_sel_reg = 2'd0, port_sel_next;
 
-reg busy_reg = 0, busy_next;
+reg busy_reg = 1'b0, busy_next;
 
 reg [7:0] input_tdata;
 reg input_tvalid;
 reg input_tlast;
 reg input_tuser;
 
-reg output_tuser_reg = 0, output_tuser_next;
+reg output_tuser_reg = 1'b0, output_tuser_next;
 
-reg input_0_axis_tready_reg = 0, input_0_axis_tready_next;
-reg input_1_axis_tready_reg = 0, input_1_axis_tready_next;
-reg input_2_axis_tready_reg = 0, input_2_axis_tready_next;
-reg input_3_axis_tready_reg = 0, input_3_axis_tready_next;
+reg input_0_axis_tready_reg = 1'b0, input_0_axis_tready_next;
+reg input_1_axis_tready_reg = 1'b0, input_1_axis_tready_next;
+reg input_2_axis_tready_reg = 1'b0, input_2_axis_tready_next;
+reg input_3_axis_tready_reg = 1'b0, input_3_axis_tready_next;
 
 // internal datapath
 reg [7:0] output_axis_tdata_int;
 reg       output_axis_tvalid_int;
-reg       output_axis_tready_int = 0;
+reg       output_axis_tready_int_reg = 1'b0;
 reg       output_axis_tlast_int;
 reg       output_axis_tuser_int;
 wire      output_axis_tready_int_early;
@@ -160,33 +160,33 @@ end
 integer offset, i;
 
 always @* begin
-    state_next = 2'bz;
+    state_next = STATE_IDLE;
 
     frame_ptr_next = frame_ptr_reg;
     port_sel_next = port_sel_reg;
 
-    input_0_axis_tready_next = 0;
-    input_1_axis_tready_next = 0;
-    input_2_axis_tready_next = 0;
-    input_3_axis_tready_next = 0;
+    input_0_axis_tready_next = 1'b0;
+    input_1_axis_tready_next = 1'b0;
+    input_2_axis_tready_next = 1'b0;
+    input_3_axis_tready_next = 1'b0;
 
-    output_axis_tdata_int = 0;
-    output_axis_tvalid_int = 0;
-    output_axis_tlast_int = 0;
-    output_axis_tuser_int = 0;
+    output_axis_tdata_int = 8'd0;
+    output_axis_tvalid_int = 1'b0;
+    output_axis_tlast_int = 1'b0;
+    output_axis_tuser_int = 1'b0;
 
     output_tuser_next = output_tuser_reg;
 
     case (state_reg)
         STATE_IDLE: begin
             // idle state - wait for data
-            frame_ptr_next = 0;
-            port_sel_next = 0;
-            output_tuser_next = 0;
+            frame_ptr_next = 3'd0;
+            port_sel_next = 2'd0;
+            output_tuser_next = 1'b0;
 
             if (TAG_ENABLE) begin
                 // next cycle if started will send tag, so do not enable input
-                input_0_axis_tready_next = 0;
+                input_0_axis_tready_next = 1'b0;
             end else begin
                 // next cycle if started will send data, so enable input
                 input_0_axis_tready_next = output_axis_tready_int_early;
@@ -196,19 +196,19 @@ always @* begin
                 // input 0 valid; start transferring data
                 if (TAG_ENABLE) begin
                     // tag enabled, so transmit it
-                    if (output_axis_tready_int) begin
+                    if (output_axis_tready_int_reg) begin
                         // output is ready, so short-circuit first tag byte
-                        frame_ptr_next = 1;
+                        frame_ptr_next = 3'd1;
                         output_axis_tdata_int = tag[(TAG_BYTE_WIDTH-1)*8 +: 8];
-                        output_axis_tvalid_int = 1;
+                        output_axis_tvalid_int = 1'b1;
                     end
                     state_next = STATE_WRITE_TAG;
                 end else begin
                     // tag disabled, so transmit data
-                    if (output_axis_tready_int) begin
+                    if (output_axis_tready_int_reg) begin
                         // output is ready, so short-circuit first data byte
                         output_axis_tdata_int = input_0_axis_tdata;
-                        output_axis_tvalid_int = 1;
+                        output_axis_tvalid_int = 1'b1;
                     end
                     state_next = STATE_TRANSFER;
                 end
@@ -218,11 +218,11 @@ always @* begin
         end
         STATE_WRITE_TAG: begin
             // write tag data
-            if (output_axis_tready_int) begin
+            if (output_axis_tready_int_reg) begin
                 // output ready, so send tag byte
                 state_next = STATE_WRITE_TAG;
                 frame_ptr_next = frame_ptr_reg + 1;
-                output_axis_tvalid_int = 1;
+                output_axis_tvalid_int = 1'b1;
 
                 offset = 0;
                 if (TAG_ENABLE) begin
@@ -252,7 +252,7 @@ always @* begin
                 2'd3: input_3_axis_tready_next = output_axis_tready_int_early;
             endcase
 
-            if (input_tvalid & output_axis_tready_int) begin
+            if (input_tvalid & output_axis_tready_int_reg) begin
                 // output ready, transfer byte
                 state_next = STATE_TRANSFER;
                 output_axis_tdata_int = input_tdata;
@@ -264,14 +264,14 @@ always @* begin
                     // save tuser - assert tuser out if ANY tuser asserts received
                     output_tuser_next = output_tuser_next | input_tuser;
                     // disable input
-                    input_0_axis_tready_next = 0;
-                    input_1_axis_tready_next = 0;
-                    input_2_axis_tready_next = 0;
-                    input_3_axis_tready_next = 0;
+                    input_0_axis_tready_next = 1'b0;
+                    input_1_axis_tready_next = 1'b0;
+                    input_2_axis_tready_next = 1'b0;
+                    input_3_axis_tready_next = 1'b0;
 
-                    if (port_sel_reg == 3) begin
+                    if (port_sel_reg == 2'd3) begin
                         // last port - send tlast and tuser and revert to idle
-                        output_axis_tlast_int = 1;
+                        output_axis_tlast_int = 1'b1;
                         output_axis_tuser_int = output_tuser_next;
                         state_next = STATE_IDLE;
                     end else begin
@@ -294,14 +294,14 @@ end
 always @(posedge clk) begin
     if (rst) begin
         state_reg <= STATE_IDLE;
-        frame_ptr_reg <= 0;
-        port_sel_reg <= 0;
-        input_0_axis_tready_reg <= 0;
-        input_1_axis_tready_reg <= 0;
-        input_2_axis_tready_reg <= 0;
-        input_3_axis_tready_reg <= 0;
-        output_tuser_reg <= 0;
-        busy_reg <= 0;
+        frame_ptr_reg <= 3'd0;
+        port_sel_reg <= 2'd0;
+        input_0_axis_tready_reg <= 1'b0;
+        input_1_axis_tready_reg <= 1'b0;
+        input_2_axis_tready_reg <= 1'b0;
+        input_3_axis_tready_reg <= 1'b0;
+        output_tuser_reg <= 1'b0;
+        busy_reg <= 1'b0;
     end else begin
         state_reg <= state_next;
 
@@ -321,65 +321,83 @@ always @(posedge clk) begin
 end
 
 // output datapath logic
-reg [7:0] output_axis_tdata_reg = 0;
-reg       output_axis_tvalid_reg = 0;
-reg       output_axis_tlast_reg = 0;
-reg       output_axis_tuser_reg = 0;
+reg [7:0] output_axis_tdata_reg = 8'd0;
+reg       output_axis_tvalid_reg = 1'b0, output_axis_tvalid_next;
+reg       output_axis_tlast_reg = 1'b0;
+reg       output_axis_tuser_reg = 1'b0;
 
-reg [7:0] temp_axis_tdata_reg = 0;
-reg       temp_axis_tvalid_reg = 0;
-reg       temp_axis_tlast_reg = 0;
-reg       temp_axis_tuser_reg = 0;
+reg [7:0] temp_axis_tdata_reg = 8'd0;
+reg       temp_axis_tvalid_reg = 1'b0, temp_axis_tvalid_next;
+reg       temp_axis_tlast_reg = 1'b0;
+reg       temp_axis_tuser_reg = 1'b0;
+
+// datapath control
+reg store_axis_int_to_output;
+reg store_axis_int_to_temp;
+reg store_axis_temp_to_output;
 
 assign output_axis_tdata = output_axis_tdata_reg;
 assign output_axis_tvalid = output_axis_tvalid_reg;
 assign output_axis_tlast = output_axis_tlast_reg;
 assign output_axis_tuser = output_axis_tuser_reg;
 
-// enable ready input next cycle if output is ready or if there is space in both output registers or if there is space in the temp register that will not be filled next cycle
-assign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & ~output_axis_tvalid_reg) | (~temp_axis_tvalid_reg & ~output_axis_tvalid_int);
+// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)
+assign output_axis_tready_int_early = output_axis_tready | (~temp_axis_tvalid_reg & (~output_axis_tvalid_reg | ~output_axis_tvalid_int));
+
+always @* begin
+    // transfer sink ready state to source
+    output_axis_tvalid_next = output_axis_tvalid_reg;
+    temp_axis_tvalid_next = temp_axis_tvalid_reg;
+
+    store_axis_int_to_output = 1'b0;
+    store_axis_int_to_temp = 1'b0;
+    store_axis_temp_to_output = 1'b0;
+    
+    if (output_axis_tready_int_reg) begin
+        // input is ready
+        if (output_axis_tready | ~output_axis_tvalid_reg) begin
+            // output is ready or currently not valid, transfer data to output
+            output_axis_tvalid_next = output_axis_tvalid_int;
+            store_axis_int_to_output = 1'b1;
+        end else begin
+            // output is not ready, store input in temp
+            temp_axis_tvalid_next = output_axis_tvalid_int;
+            store_axis_int_to_temp = 1'b1;
+        end
+    end else if (output_axis_tready) begin
+        // input is not ready, but output is ready
+        output_axis_tvalid_next = temp_axis_tvalid_reg;
+        temp_axis_tvalid_next = 1'b0;
+        store_axis_temp_to_output = 1'b1;
+    end
+end
 
 always @(posedge clk) begin
     if (rst) begin
-        output_axis_tdata_reg <= 0;
-        output_axis_tvalid_reg <= 0;
-        output_axis_tlast_reg <= 0;
-        output_axis_tuser_reg <= 0;
-        output_axis_tready_int <= 0;
-        temp_axis_tdata_reg <= 0;
-        temp_axis_tvalid_reg <= 0;
-        temp_axis_tlast_reg <= 0;
-        temp_axis_tuser_reg <= 0;
+        output_axis_tvalid_reg <= 1'b0;
+        output_axis_tready_int_reg <= 1'b0;
+        temp_axis_tvalid_reg <= 1'b0;
     end else begin
-        // transfer sink ready state to source
-        output_axis_tready_int <= output_axis_tready_int_early;
-
-        if (output_axis_tready_int) begin
-            // input is ready
-            if (output_axis_tready | ~output_axis_tvalid_reg) begin
-                // output is ready or currently not valid, transfer data to output
-                output_axis_tdata_reg <= output_axis_tdata_int;
-                output_axis_tvalid_reg <= output_axis_tvalid_int;
-                output_axis_tlast_reg <= output_axis_tlast_int;
-                output_axis_tuser_reg <= output_axis_tuser_int;
-            end else begin
-                // output is not ready, store input in temp
-                temp_axis_tdata_reg <= output_axis_tdata_int;
-                temp_axis_tvalid_reg <= output_axis_tvalid_int;
-                temp_axis_tlast_reg <= output_axis_tlast_int;
-                temp_axis_tuser_reg <= output_axis_tuser_int;
-            end
-        end else if (output_axis_tready) begin
-            // input is not ready, but output is ready
-            output_axis_tdata_reg <= temp_axis_tdata_reg;
-            output_axis_tvalid_reg <= temp_axis_tvalid_reg;
-            output_axis_tlast_reg <= temp_axis_tlast_reg;
-            output_axis_tuser_reg <= temp_axis_tuser_reg;
-            temp_axis_tdata_reg <= 0;
-            temp_axis_tvalid_reg <= 0;
-            temp_axis_tlast_reg <= 0;
-            temp_axis_tuser_reg <= 0;
-        end
+        output_axis_tvalid_reg <= output_axis_tvalid_next;
+        output_axis_tready_int_reg <= output_axis_tready_int_early;
+        temp_axis_tvalid_reg <= temp_axis_tvalid_next;
+    end
+
+    // datapath
+    if (store_axis_int_to_output) begin
+        output_axis_tdata_reg <= output_axis_tdata_int;
+        output_axis_tlast_reg <= output_axis_tlast_int;
+        output_axis_tuser_reg <= output_axis_tuser_int;
+    end else if (store_axis_temp_to_output) begin
+        output_axis_tdata_reg <= temp_axis_tdata_reg;
+        output_axis_tlast_reg <= temp_axis_tlast_reg;
+        output_axis_tuser_reg <= temp_axis_tuser_reg;
+    end
+
+    if (store_axis_int_to_temp) begin
+        temp_axis_tdata_reg <= output_axis_tdata_int;
+        temp_axis_tlast_reg <= output_axis_tlast_int;
+        temp_axis_tuser_reg <= output_axis_tuser_int;
     end
 end
 