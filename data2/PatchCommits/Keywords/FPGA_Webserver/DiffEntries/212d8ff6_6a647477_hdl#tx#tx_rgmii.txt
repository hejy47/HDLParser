212d8ff66e3664ae4c47049c4c233b55a63cb1cc
Remove timing error from eth_tx interface
diff --git a/hdl/tx/tx_rgmii.vhd b/hdl/tx/tx_rgmii.vhd
index 6b379fc..6c51ed5 100644
--- a/hdl/tx/tx_rgmii.vhd
+++ b/hdl/tx/tx_rgmii.vhd
@@ -50,9 +50,12 @@ architecture Behavioral of tx_rgmii is
     signal second_quarter      : unsigned(6 downto 0) := (others => '0');
     signal third_quarter       : unsigned(6 downto 0) := (others => '0');
 
-    signal dout                : STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
-    signal doutctl             : STD_LOGIC_VECTOR (1 downto 0) := (others => '0');
-    signal doutclk             : STD_LOGIC_VECTOR (1 downto 0) := (others => '0');
+    signal dout1               : STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
+    signal doutctl1            : STD_LOGIC_VECTOR (1 downto 0) := (others => '0');
+    signal doutclk1            : STD_LOGIC_VECTOR (1 downto 0) := (others => '0');
+    signal dout0               : STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
+    signal doutctl0            : STD_LOGIC_VECTOR (1 downto 0) := (others => '0');
+    signal doutclk0            : STD_LOGIC_VECTOR (1 downto 0) := (others => '0');
     signal hold_data           : STD_LOGIC_VECTOR (7 downto 0);
     signal hold_valid          : STD_LOGIC;
     signal hold_error          : STD_LOGIC;
@@ -70,9 +73,20 @@ begin
     -- Map the data and control signals so that they
     -- can be sent via the DDR registers
     -------------------------------------------------
+process(clk90)
+    begin
+        if rising_edge(clk90) then
+            doutclk0 <= doutclk1;
+        end if;
+    end process;
+
 process(clk)
     begin
         if rising_edge(clk) then
+            -- one cycle delay to improve timing 
+            dout0    <= dout1;
+            doutctl0 <= doutctl1;
+
             first_quarter  <= "00" & enable_frequency(enable_frequency'high downto 2);
             second_quarter <= "0"  & enable_frequency(enable_frequency'high downto 1);
             third_quarter  <= times_3(times_3'high downto 2);
@@ -89,60 +103,60 @@ process(clk)
                 hold_error <= data_error;
                 if enable_frequency = 1 then
                     -- Double data rate transfer at full frequency
-                    dout(3 downto 0) <= data(3 downto 0); 
-                    dout(7 downto 4) <= data(7 downto 4); 
-                    doutctl(0) <= ok_to_send and data_valid;
-                    doutctl(1) <= ok_to_send and (data_valid XOR data_error);
-                    doutclk(0) <= '1';
-                    doutclk(1) <= '0';
+                    dout1(3 downto 0) <= data(3 downto 0); 
+                    dout1(7 downto 4) <= data(7 downto 4); 
+                    doutctl1(0) <= ok_to_send and data_valid;
+                    doutctl1(1) <= ok_to_send and (data_valid XOR data_error);
+                    doutclk1(0) <= '1';
+                    doutclk1(1) <= '0';
                 else
                     -- Send the low nibble
-                    dout(3 downto 0) <= data(3 downto 0); 
-                    dout(7 downto 4) <= data(3 downto 0); 
-                    doutctl(0) <= ok_to_send and data_valid;
-                    doutctl(1) <= ok_to_send and data_valid;
-                    doutclk(0) <= '1';
-                    doutclk(1) <= '1';
+                    dout1(3 downto 0) <= data(3 downto 0); 
+                    dout1(7 downto 4) <= data(3 downto 0); 
+                    doutctl1(0) <= ok_to_send and data_valid;
+                    doutctl1(1) <= ok_to_send and data_valid;
+                    doutclk1(0) <= '1';
+                    doutclk1(1) <= '1';
                 end if;
             elsif enable_count = first_quarter-1  then
                 if enable_frequency(1) = '1' then
                     -- Send the high nibble and valid signal for the last half of this cycle
-                    doutctl(1) <= ok_to_send and (hold_valid XOR hold_error);
-                    doutclk(1) <= '0';
+                    doutctl1(1) <= ok_to_send and (hold_valid XOR hold_error);
+                    doutclk1(1) <= '0';
                 else        
-                    doutctl(0) <= ok_to_send and (hold_valid XOR hold_error);
-                    doutctl(1) <= ok_to_send and (hold_valid XOR hold_error);
-                    doutclk(0) <= '0';
-                    doutclk(1) <= '0';
+                    doutctl1(0) <= ok_to_send and (hold_valid XOR hold_error);
+                    doutctl1(1) <= ok_to_send and (hold_valid XOR hold_error);
+                    doutclk1(0) <= '0';
+                    doutclk1(1) <= '0';
                 end if;
             elsif enable_count = first_quarter  then
-                doutctl(0) <= ok_to_send and (hold_valid XOR hold_error);
-                doutctl(1) <= ok_to_send and (hold_valid XOR hold_error);
-                doutclk(0) <= '0';
-                doutclk(1) <= '0';
+                doutctl1(0) <= ok_to_send and (hold_valid XOR hold_error);
+                doutctl1(1) <= ok_to_send and (hold_valid XOR hold_error);
+                doutclk1(0) <= '0';
+                doutclk1(1) <= '0';
             elsif enable_count = second_quarter-1  then
-                dout(3 downto 0) <= hold_data(7 downto 4); 
-                dout(7 downto 4) <= hold_data(7 downto 4); 
+                dout1(3 downto 0) <= hold_data(7 downto 4); 
+                dout1(7 downto 4) <= hold_data(7 downto 4); 
                -- Send the high nibble and valid signal for the last half of this cycle
-                doutclk(0) <= '1';        
-                doutclk(1) <= '1';        
-                doutctl(0) <= ok_to_send and hold_valid;
-                doutctl(1) <= ok_to_send and hold_valid;
+                doutclk1(0) <= '1';        
+                doutclk1(1) <= '1';        
+                doutctl1(0) <= ok_to_send and hold_valid;
+                doutctl1(1) <= ok_to_send and hold_valid;
             elsif enable_count = third_quarter-1  then
                 if enable_frequency(1) = '1' then
-                    doutctl(1) <= ok_to_send and (hold_valid XOR hold_error);
-                    doutclk(1) <= '0';
+                    doutctl1(1) <= ok_to_send and (hold_valid XOR hold_error);
+                    doutclk1(1) <= '0';
                 else        
-                    doutctl(0) <= ok_to_send and (hold_valid XOR hold_error);
-                    doutctl(1) <= ok_to_send and (hold_valid XOR hold_error);
-                    doutclk(0) <= '0';
-                    doutclk(1) <= '0';
+                    doutctl1(0) <= ok_to_send and (hold_valid XOR hold_error);
+                    doutctl1(1) <= ok_to_send and (hold_valid XOR hold_error);
+                    doutclk1(0) <= '0';
+                    doutclk1(1) <= '0';
                 end if;
             elsif enable_count = third_quarter  then
-                doutclk(0) <= '0';        
-                doutclk(1) <= '0';        
-                doutctl(0) <= ok_to_send and (hold_valid XOR hold_error);
-                doutctl(1) <= ok_to_send and (hold_valid XOR hold_error);
+                doutclk1(0) <= '0';        
+                doutclk1(1) <= '0';        
+                doutctl1(0) <= ok_to_send and (hold_valid XOR hold_error);
+                doutctl1(1) <= ok_to_send and (hold_valid XOR hold_error);
             end if;
         end if; 
     end process;
@@ -151,18 +165,18 @@ process(clk)
    -- DDR output registers 
    ----------------------------------------------------
 tx_d0  : ODDR generic map( DDR_CLK_EDGE => "SAME_EDGE", INIT         => '0', SRTYPE       => "SYNC")
-              port map (Q  => eth_txd(0), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout(0), D2 => dout(4));
+              port map (Q  => eth_txd(0), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout0(0), D2 => dout0(4));
 tx_d1  : ODDR generic map( DDR_CLK_EDGE => "SAME_EDGE", INIT         => '0', SRTYPE       => "SYNC")
-              port map (Q  => eth_txd(1), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout(1), D2 => dout(5));
+              port map (Q  => eth_txd(1), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout0(1), D2 => dout0(5));
 tx_d2  : ODDR generic map( DDR_CLK_EDGE => "SAME_EDGE", INIT         => '0', SRTYPE       => "SYNC")
-              port map (Q  => eth_txd(2), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout(2), D2 => dout(6));
+              port map (Q  => eth_txd(2), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout0(2), D2 => dout0(6));
 tx_d3  : ODDR generic map( DDR_CLK_EDGE => "SAME_EDGE", INIT         => '0', SRTYPE       => "SYNC")
-              port map (Q  => eth_txd(3), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout(3), D2 => dout(7));
+              port map (Q  => eth_txd(3), C  => clk, CE => '1', R  => '0', S  => '0', D1 => dout0(3), D2 => dout0(7));
 tx_ctl : ODDR generic map( DDR_CLK_EDGE => "SAME_EDGE", INIT         => '0', SRTYPE       => "SYNC")
-              port map (Q  => eth_txctl,   C  => clk, CE => '1', R  => '0', S  => '0', D1 => doutctl(0), D2 => doutctl(1));
+              port map (Q  => eth_txctl,   C  => clk, CE => '1', R  => '0', S  => '0', D1 => doutctl0(0), D2 => doutctl0(1));
 
 tx_c   : ODDR generic map( DDR_CLK_EDGE => "SAME_EDGE", INIT         => '0', SRTYPE       => "SYNC")
-              port map (Q  => eth_txck,  C  => clk90, CE => '1', R  => '0', S  => '0', D1 => doutclk(0), D2 => doutclk(1));
+              port map (Q  => eth_txck,  C  => clk90, CE => '1', R  => '0', S  => '0', D1 => doutclk0(0), D2 => doutclk0(1));
     
 monitor_reset_state: process(clk)
     begin