7ef5014884fce8d2dacc95f5a011311c243f5690
:warning: [rtl/core] mjor update
diff --git a/rtl/core/neorv32_cpu_control.vhd b/rtl/core/neorv32_cpu_control.vhd
index 4ba65f9..1145431 100644
--- a/rtl/core/neorv32_cpu_control.vhd
+++ b/rtl/core/neorv32_cpu_control.vhd
@@ -97,8 +97,6 @@ entity neorv32_cpu_control is
     fpu_flags_i   : in  std_ulogic_vector(04 downto 0); -- exception flags
     -- debug mode (halt) request --
     db_halt_req_i : in  std_ulogic;
-    -- non-maskable interrupt --
-    nm_irq_i      : in  std_ulogic;
     -- interrupts (risc-v compliant) --
     msw_irq_i     : in  std_ulogic; -- machine software interrupt
     mext_irq_i    : in  std_ulogic; -- machine external interrupt
@@ -358,7 +356,7 @@ architecture neorv32_cpu_control_rtl of neorv32_cpu_control is
     -- leave debug mode --
     dret         : std_ulogic; -- executed DRET instruction
     -- misc --
-    ext_halt_req : std_ulogic_vector(1 downto 0); -- rising edge detector for external halt request
+    ext_halt_req : std_ulogic; -- external halt request
   end record;
   signal debug_ctrl : debug_ctrl_t;
 
@@ -395,7 +393,7 @@ begin
       fetch_engine.state_prev <= fetch_engine.state;
       fetch_engine.restart    <= fetch_engine.restart_nxt;
       if (fetch_engine.restart = '1') then
-        fetch_engine.pc <= execute_engine.pc(data_width_c-1 downto 1) & '0'; -- initialize with "real" application PC
+        fetch_engine.pc <= execute_engine.pc; -- initialize with "real" application PC
       else
         fetch_engine.pc <= fetch_engine.pc_nxt;
       end if;
@@ -403,7 +401,7 @@ begin
   end process fetch_engine_fsm_sync;
 
   -- PC output --
-  fetch_pc_o <= fetch_engine.pc(data_width_c-1 downto 1) & '0'; -- half-word aligned
+  fetch_pc_o <= fetch_engine.pc;
 
 
   -- Fetch Engine FSM Comb ------------------------------------------------------------------
@@ -690,7 +688,7 @@ begin
   begin
     if (rstn_i = '0') then
       -- registers that DO require a specific reset state --
-      execute_engine.pc       <= CPU_BOOT_ADDR(data_width_c-1 downto 1) & '0';
+      execute_engine.pc       <= CPU_BOOT_ADDR;
       execute_engine.state    <= SYS_WAIT;
       execute_engine.sleep    <= '0';
       execute_engine.branched <= '1'; -- reset is a branch from "somewhere"
@@ -709,9 +707,9 @@ begin
       -- PC update --
       if (execute_engine.pc_we = '1') then
         if (execute_engine.pc_mux_sel = '0') then
-          execute_engine.pc <= execute_engine.next_pc(data_width_c-1 downto 1) & '0'; -- normal (linear) increment OR trap enter/exit
+          execute_engine.pc <= execute_engine.next_pc; -- normal (linear) increment OR trap enter/exit
         else
-          execute_engine.pc <= alu_add_i(data_width_c-1 downto 1) & '0'; -- jump/taken_branch
+          execute_engine.pc <= alu_add_i; -- jump/taken_branch
         end if;
       end if;
       --
@@ -733,21 +731,21 @@ begin
       case execute_engine.state is
         when TRAP_ENTER =>
           if (CPU_EXTENSION_RISCV_DEBUG = false) then -- normal trapping
-            execute_engine.next_pc <= csr.mtvec(data_width_c-1 downto 1) & '0'; -- trap enter
+            execute_engine.next_pc <= csr.mtvec; -- trap enter
           else -- DEBUG MODE enabled
             if (trap_ctrl.cause(5) = '1') then -- trap cause: debug mode (re-)entry
               execute_engine.next_pc <= CPU_DEBUG_ADDR; -- debug mode enter; start at "parking loop" <normal_entry>
             elsif (debug_ctrl.running = '1') then -- any other exception INSIDE debug mode
               execute_engine.next_pc <= std_ulogic_vector(unsigned(CPU_DEBUG_ADDR) + 4); -- execute at "parking loop" <exception_entry>
             else -- normal trapping
-              execute_engine.next_pc <= csr.mtvec(data_width_c-1 downto 1) & '0'; -- trap enter
+              execute_engine.next_pc <= csr.mtvec; -- trap enter
             end if;
           end if;
         when TRAP_EXIT =>
           if (CPU_EXTENSION_RISCV_DEBUG = false) or (debug_ctrl.running = '0') then -- normal end of trap
-            execute_engine.next_pc <= csr.mepc(data_width_c-1 downto 1) & '0'; -- trap exit
+            execute_engine.next_pc <= csr.mepc; -- trap exit
           else -- DEBUG MODE exiting
-            execute_engine.next_pc <= csr.dpc(data_width_c-1 downto 1) & '0'; -- debug mode exit
+            execute_engine.next_pc <= csr.dpc; -- debug mode exit
           end if;
         when EXECUTE =>
           execute_engine.next_pc <= std_ulogic_vector(unsigned(execute_engine.pc) + unsigned(execute_engine.next_pc_inc)); -- next linear PC
@@ -765,7 +763,7 @@ begin
   execute_engine.next_pc_inc <= x"00000004" when ((execute_engine.is_ci = '0') or (CPU_EXTENSION_RISCV_C = false)) else x"00000002";
 
   -- PC output --
-  curr_pc_o <= execute_engine.pc(data_width_c-1 downto 1) & '0'; -- PC for ALU ops
+  curr_pc_o <= execute_engine.pc; -- PC for ALU ops
 
   -- CSR access address --
   csr.addr <= execute_engine.i_reg(instr_csr_id_msb_c downto instr_csr_id_lsb_c);
@@ -799,13 +797,9 @@ begin
     ctrl_o(ctrl_ir_funct12_11_c downto ctrl_ir_funct12_0_c) <= execute_engine.i_reg(instr_funct12_msb_c downto instr_funct12_lsb_c);
     ctrl_o(ctrl_ir_funct3_2_c   downto ctrl_ir_funct3_0_c)  <= execute_engine.i_reg(instr_funct3_msb_c  downto instr_funct3_lsb_c);
     -- cpu status --
-    ctrl_o(ctrl_sleep_c) <= execute_engine.sleep; -- cpu is in sleep mode
-    ctrl_o(ctrl_trap_c)  <= trap_ctrl.env_start_ack; -- cpu is starting a trap handler
-    if (CPU_EXTENSION_RISCV_DEBUG = true) then
-      ctrl_o(ctrl_debug_running_c) <= debug_ctrl.running; -- cpu is currently in debug mode
-    else
-      ctrl_o(ctrl_debug_running_c) <= '0';
-    end if;
+    ctrl_o(ctrl_sleep_c)         <= execute_engine.sleep; -- cpu is in sleep mode
+    ctrl_o(ctrl_trap_c)          <= trap_ctrl.env_start_ack; -- cpu is starting a trap handler
+    ctrl_o(ctrl_debug_running_c) <= debug_ctrl.running; -- cpu is currently in debug mode
     -- FPU rounding mode --
     ctrl_o(ctrl_alu_frm2_c downto ctrl_alu_frm0_c) <= csr.frm;
   end process ctrl_output;
@@ -1658,10 +1652,7 @@ begin
   begin
     if (rstn_i = '0') then
       trap_ctrl.exc_buf   <= (others => '0');
-      trap_ctrl.irq_buf   <= (others => def_rst_val_c);
-      trap_ctrl.irq_buf(interrupt_nm_irq_c)   <= '0'; -- NMI
-      trap_ctrl.irq_buf(interrupt_db_halt_c)  <= '0'; -- enter debug mode
-      trap_ctrl.irq_buf(interrupt_db_step_c)  <= '0'; -- enter debug mode
+      trap_ctrl.irq_buf   <= (others => '0');
       trap_ctrl.exc_ack   <= '0';
       trap_ctrl.irq_ack   <= (others => '0');
       trap_ctrl.env_start <= '0';
@@ -1679,7 +1670,7 @@ begin
         trap_ctrl.exc_buf(exception_saccess_c) <= (trap_ctrl.exc_buf(exception_saccess_c) or be_store_i)         and (not trap_ctrl.exc_ack);
         trap_ctrl.exc_buf(exception_iaccess_c) <= (trap_ctrl.exc_buf(exception_iaccess_c) or trap_ctrl.instr_be) and (not trap_ctrl.exc_ack);
 
-        -- exception buffer: illegal instruction / env call / break point
+        -- exception buffer: illegal instruction / environment call / break point
         trap_ctrl.exc_buf(exception_m_envcall_c) <= (trap_ctrl.exc_buf(exception_m_envcall_c) or (trap_ctrl.env_call and csr.priv_m_mode)) and (not trap_ctrl.exc_ack);
         trap_ctrl.exc_buf(exception_u_envcall_c) <= (trap_ctrl.exc_buf(exception_u_envcall_c) or (trap_ctrl.env_call and csr.priv_u_mode)) and (not trap_ctrl.exc_ack);
         trap_ctrl.exc_buf(exception_iillegal_c)  <= (trap_ctrl.exc_buf(exception_iillegal_c)  or trap_ctrl.instr_il)                       and (not trap_ctrl.exc_ack);
@@ -1697,20 +1688,18 @@ begin
         -- enter debug mode --
         if (CPU_EXTENSION_RISCV_DEBUG = true) then
           trap_ctrl.exc_buf(exception_db_break_c) <= (trap_ctrl.exc_buf(exception_db_break_c) or debug_ctrl.trig_break) and (not trap_ctrl.exc_ack);
-          trap_ctrl.irq_buf(interrupt_db_halt_c)  <= (trap_ctrl.irq_buf(interrupt_db_halt_c)  or debug_ctrl.trig_halt)  and (not trap_ctrl.irq_ack(interrupt_db_halt_c));
-          trap_ctrl.irq_buf(interrupt_db_step_c)  <= (trap_ctrl.irq_buf(interrupt_db_step_c)  or debug_ctrl.trig_step)  and (not trap_ctrl.irq_ack(interrupt_db_step_c));
+          trap_ctrl.irq_buf(interrupt_db_halt_c)  <= debug_ctrl.trig_halt;
+          trap_ctrl.irq_buf(interrupt_db_step_c)  <= debug_ctrl.trig_step;
         else
           trap_ctrl.exc_buf(exception_db_break_c) <= '0';
           trap_ctrl.irq_buf(interrupt_db_halt_c)  <= '0';
           trap_ctrl.irq_buf(interrupt_db_step_c)  <= '0';
         end if;
 
-        -- interrupt buffer: non-maskable interrupt
-        trap_ctrl.irq_buf(interrupt_nm_irq_c)    <= (trap_ctrl.irq_buf(interrupt_nm_irq_c) or nm_irq_i) and (not trap_ctrl.irq_ack(interrupt_nm_irq_c));
         -- interrupt buffer: machine software/external/timer interrupt
-        trap_ctrl.irq_buf(interrupt_msw_irq_c)   <= csr.mie_msie and (trap_ctrl.irq_buf(interrupt_msw_irq_c)   or msw_irq_i)   and (not trap_ctrl.irq_ack(interrupt_msw_irq_c));
-        trap_ctrl.irq_buf(interrupt_mext_irq_c)  <= csr.mie_meie and (trap_ctrl.irq_buf(interrupt_mext_irq_c)  or mext_irq_i)  and (not trap_ctrl.irq_ack(interrupt_mext_irq_c));
-        trap_ctrl.irq_buf(interrupt_mtime_irq_c) <= csr.mie_mtie and (trap_ctrl.irq_buf(interrupt_mtime_irq_c) or mtime_irq_i) and (not trap_ctrl.irq_ack(interrupt_mtime_irq_c));
+        trap_ctrl.irq_buf(interrupt_msw_irq_c)   <= csr.mie_msie and msw_irq_i;
+        trap_ctrl.irq_buf(interrupt_mext_irq_c)  <= csr.mie_meie and mext_irq_i;
+        trap_ctrl.irq_buf(interrupt_mtime_irq_c) <= csr.mie_mtie and mtime_irq_i;
         -- interrupt buffer: NEORV32-specific fast interrupts
         for i in 0 to 15 loop
           trap_ctrl.irq_buf(interrupt_firq_0_c+i) <= csr.mie_firqe(i) and (trap_ctrl.irq_buf(interrupt_firq_0_c+i) or firq_i(i)) and (not trap_ctrl.irq_ack(interrupt_firq_0_c+i));
@@ -1721,7 +1710,7 @@ begin
           if (trap_ctrl.exc_fire = '1') or ((trap_ctrl.irq_fire = '1') and -- trap triggered!
              ((execute_engine.state = EXECUTE) or (execute_engine.state = TRAP_ENTER))) then -- fire IRQs in EXECUTE or TRAP state only to continue execution even on permanent IRQ
             trap_ctrl.cause     <= trap_ctrl.cause_nxt;   -- capture source ID for program (for mcause csr)
-            trap_ctrl.exc_ack   <= '1';                   -- clear exception
+            trap_ctrl.exc_ack   <= '1';                   -- clear exceptions (no ack mask: these have highest priority and are always evaluated first!)
             trap_ctrl.irq_ack   <= trap_ctrl.irq_ack_nxt; -- clear interrupt with interrupt ACK mask
             trap_ctrl.env_start <= '1';                   -- now execute engine can start trap handler
           end if;
@@ -1751,51 +1740,82 @@ begin
   begin
     -- defaults --
     trap_ctrl.cause_nxt   <= (others => '0');
-    trap_ctrl.irq_ack_nxt <= (others => '0');
+    trap_ctrl.irq_ack_nxt <= (others => '0'); -- used for FIRQs only
+
+    -- NOTE: Synchronous exceptions (from trap_ctrl.exc_buf) have higher priority than asynchronous
+    -- exceptions (from trap_ctrl.irq_buf).
+
+    -- ----------------------------------------------------------------------------------------
+    -- the following traps are caused by *synchronous* exceptions; here we do not need a
+    -- specific acknowledge mask since only _one_ exception (the one with highest priority)
+    -- is allowed to kick in at once
+    -- ----------------------------------------------------------------------------------------
+
+    -- exception: 0.0 instruction address misaligned --
+    if (trap_ctrl.exc_buf(exception_ialign_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_ima_c;
+
+    -- exception: 0.1 instruction access fault --
+    elsif (trap_ctrl.exc_buf(exception_iaccess_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_iba_c;
+
+    -- exception: 0.2 illegal instruction --
+    elsif (trap_ctrl.exc_buf(exception_iillegal_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_iil_c;
+
+
+    -- exception: 0.11 environment call from M-mode --
+    elsif (trap_ctrl.exc_buf(exception_m_envcall_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_menv_c;
+
+    -- exception: 0.8 environment call from U-mode --
+    elsif (trap_ctrl.exc_buf(exception_u_envcall_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_uenv_c;
+
+    -- exception: 0.3 breakpoint --
+    elsif (trap_ctrl.exc_buf(exception_break_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_brk_c;
+
+
+    -- exception: 0.6 store address misaligned -
+    elsif (trap_ctrl.exc_buf(exception_salign_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_sma_c;
+
+    -- exception: 0.4 load address misaligned --
+    elsif (trap_ctrl.exc_buf(exception_lalign_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_lma_c;
+
+    -- exception: 0.7 store access fault --
+    elsif (trap_ctrl.exc_buf(exception_saccess_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_sbe_c;
+
+    -- exception: 0.5 load access fault --
+    elsif (trap_ctrl.exc_buf(exception_laccess_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_lbe_c;
+
 
     -- ----------------------------------------------------------------------------------------
-    -- enter debug mode requests; basically, these are standard interrupt that have some
+    -- enter debug mode requests; basically, these are standard traps that have some
     -- special handling - they have the highest priority in order to go to debug when requested
     -- even if other traps are pending right now; the <trap_ctrl.cause_nxt> value will be
     -- written to csr.dcsr_cause instead of mcause
     -- ----------------------------------------------------------------------------------------
 
     -- break instruction --
-    if (CPU_EXTENSION_RISCV_DEBUG = true) and (trap_ctrl.exc_buf(exception_db_break_c) = '1') then
+    elsif (CPU_EXTENSION_RISCV_DEBUG = true) and (trap_ctrl.exc_buf(exception_db_break_c) = '1') then
       trap_ctrl.cause_nxt <= trap_db_break_c;
 
     -- external halt request --
     elsif (CPU_EXTENSION_RISCV_DEBUG = true) and (trap_ctrl.irq_buf(interrupt_db_halt_c) = '1') then
       trap_ctrl.cause_nxt <= trap_db_halt_c;
-      trap_ctrl.irq_ack_nxt(interrupt_db_halt_c) <= '1';
 
 
     -- ----------------------------------------------------------------------------------------
     -- the following traps are caused by *asynchronous* exceptions (= interrupts)
-    -- here we do need a specific acknowledge mask since several sources can trigger at once
     -- ----------------------------------------------------------------------------------------
 
-    -- interrupt: 1.0 non-maskable interrupt --
-    elsif (trap_ctrl.irq_buf(interrupt_nm_irq_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_nmi_c;
-      trap_ctrl.irq_ack_nxt(interrupt_nm_irq_c) <= '1';
-
-
-    -- interrupt: 1.11 machine external interrupt --
-    elsif (trap_ctrl.irq_buf(interrupt_mext_irq_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_mei_c;
-      trap_ctrl.irq_ack_nxt(interrupt_mext_irq_c) <= '1';
-
-    -- interrupt: 1.3 machine SW interrupt --
-    elsif (trap_ctrl.irq_buf(interrupt_msw_irq_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_msi_c;
-      trap_ctrl.irq_ack_nxt(interrupt_msw_irq_c) <= '1';
-
-    -- interrupt: 1.7 machine timer interrupt --
-    elsif (trap_ctrl.irq_buf(interrupt_mtime_irq_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_mti_c;
-      trap_ctrl.irq_ack_nxt(interrupt_mtime_irq_c) <= '1';
-
+    -- custom FAST interrupt requests --
+    -- here we do need a specific acknowledge mask for the FIRQs only since they are edge-triggered and internally buffered
 
     -- interrupt: 1.16 fast interrupt channel 0 --
     elsif (trap_ctrl.irq_buf(interrupt_firq_0_c) = '1') then
@@ -1878,53 +1898,19 @@ begin
       trap_ctrl.irq_ack_nxt(interrupt_firq_15_c) <= '1';
 
 
-    -- ----------------------------------------------------------------------------------------
-    -- the following traps are caused by *synchronous* exceptions (= 'classic' exceptions)
-    -- here we do not need a specific acknowledge mask since only one exception (the one
-    -- with highest priority) is evaluated at once
-    -- ----------------------------------------------------------------------------------------
-
-    -- exception: 0.1 instruction access fault --
-    elsif (trap_ctrl.exc_buf(exception_iaccess_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_iba_c;
-
-    -- exception: 0.2 illegal instruction --
-    elsif (trap_ctrl.exc_buf(exception_iillegal_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_iil_c;
-
-    -- exception: 0.0 instruction address misaligned --
-    elsif (trap_ctrl.exc_buf(exception_ialign_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_ima_c;
-
-
-    -- exception: 0.11 environment call from M-mode --
-    elsif (trap_ctrl.exc_buf(exception_m_envcall_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_menv_c;
-
-    -- exception: 0.8 environment call from U-mode --
-    elsif (trap_ctrl.exc_buf(exception_u_envcall_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_uenv_c;
-
-    -- exception: 0.3 breakpoint --
-    elsif (trap_ctrl.exc_buf(exception_break_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_brk_c;
-
-
-    -- exception: 0.6 store address misaligned -
-    elsif (trap_ctrl.exc_buf(exception_salign_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_sma_c;
+    -- standard RISC-V interrupts --
 
-    -- exception: 0.4 load address misaligned --
-    elsif (trap_ctrl.exc_buf(exception_lalign_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_lma_c;
+    -- interrupt: 1.11 machine external interrupt --
+    elsif (trap_ctrl.irq_buf(interrupt_mext_irq_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_mei_c;
 
-    -- exception: 0.7 store access fault --
-    elsif (trap_ctrl.exc_buf(exception_saccess_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_sbe_c;
+    -- interrupt: 1.3 machine SW interrupt --
+    elsif (trap_ctrl.irq_buf(interrupt_msw_irq_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_msi_c;
 
-    -- exception: 0.5 load access fault --
-    elsif (trap_ctrl.exc_buf(exception_laccess_c) = '1') then
-      trap_ctrl.cause_nxt <= trap_lbe_c;
+    -- interrupt: 1.7 machine timer interrupt --
+    elsif (trap_ctrl.irq_buf(interrupt_mtime_irq_c) = '1') then
+      trap_ctrl.cause_nxt <= trap_mti_c;
 
 
     -- ----------------------------------------------------------------------------------------
@@ -1935,7 +1921,7 @@ begin
     -- single stepping --
     elsif (CPU_EXTENSION_RISCV_DEBUG = true) and (trap_ctrl.irq_buf(interrupt_db_step_c) = '1') then
       trap_ctrl.cause_nxt <= trap_db_step_c;
-      trap_ctrl.irq_ack_nxt(interrupt_db_step_c) <= '1';
+
     end if;
   end process trap_priority;
   
@@ -2079,17 +2065,17 @@ begin
 
           -- machine trap handling --
           -- --------------------------------------------------------------------
-          if (csr.addr(11 downto 3) = csr_class_trap_c) then -- machine trap handling CSR class
+          if (csr.addr(11 downto 4) = csr_class_trap_c) then -- machine trap handling CSR class
             -- R/W: mscratch - machine scratch register --
-            if (csr.addr(2 downto 0) = csr_mscratch_c(2 downto 0)) then
+            if (csr.addr(3 downto 0) = csr_mscratch_c(3 downto 0)) then
               csr.mscratch <= csr.wdata;
             end if;
             -- R/W: mepc - machine exception program counter --
-            if (csr.addr(2 downto 0) = csr_mepc_c(2 downto 0)) then
-              csr.mepc <= csr.wdata(data_width_c-1 downto 1) & '0';
+            if (csr.addr(3 downto 0) = csr_mepc_c(3 downto 0)) then
+              csr.mepc <= csr.wdata;
             end if;
             -- R/W: mcause - machine trap cause --
-            if (csr.addr(2 downto 0) = csr_mcause_c(2 downto 0)) then
+            if (csr.addr(3 downto 0) = csr_mcause_c(3 downto 0)) then
               csr.mcause(csr.mcause'left) <= csr.wdata(31); -- 1: interrupt, 0: exception
               csr.mcause(4 downto 0)      <= csr.wdata(4 downto 0); -- identifier
             end if;
@@ -2203,17 +2189,17 @@ begin
 
               -- trap PC --
               if (trap_ctrl.cause(trap_ctrl.cause'left) = '1') then -- for INTERRUPTS (async source)
-                csr.mepc <= execute_engine.pc(data_width_c-1 downto 1) & '0'; -- this is the CURRENT pc = interrupted instruction
+                csr.mepc <= execute_engine.pc; -- this is the CURRENT pc = interrupted instruction
               else -- for sync. EXCEPTIONS (sync source)
-                csr.mepc <= execute_engine.last_pc(data_width_c-1 downto 1) & '0'; -- this is the LAST pc = last executed instruction
+                csr.mepc <= execute_engine.last_pc; -- this is the LAST pc = last executed instruction
               end if;
 
               -- trap value --
               case trap_ctrl.cause is
                 when trap_ima_c | trap_iba_c => -- misaligned instruction address OR instruction access error
-                  csr.mtval <= execute_engine.pc(data_width_c-1 downto 1) & '0'; -- address of faulting instruction
+                  csr.mtval <= execute_engine.pc; -- address of faulting instruction
                 when trap_brk_c => -- breakpoint
-                  csr.mtval <= execute_engine.last_pc(data_width_c-1 downto 1) & '0'; -- address of breakpoint instruction
+                  csr.mtval <= execute_engine.last_pc; -- address of breakpoint instruction
                 when trap_lma_c | trap_lbe_c | trap_sma_c | trap_sbe_c => -- misaligned load/store address OR load/store access error
                   csr.mtval <= mar_i; -- faulting data access address
                 when trap_iil_c => -- illegal instruction
@@ -2235,9 +2221,9 @@ begin
 
               -- trap PC --
               if (trap_ctrl.cause(trap_ctrl.cause'left) = '1') then -- for INTERRUPTS (async source)
-                csr.dpc <= execute_engine.pc(data_width_c-1 downto 1) & '0'; -- this is the CURRENT pc = interrupted instruction
+                csr.dpc <= execute_engine.pc; -- this is the CURRENT pc = interrupted instruction
               else -- for sync. EXCEPTIONS (sync source)
-                csr.dpc <= execute_engine.last_pc(data_width_c-1 downto 1) & '0'; -- this is the LAST pc = last executed instruction
+                csr.dpc <= execute_engine.last_pc; -- this is the LAST pc = last executed instruction
               end if;
 
             end if;
@@ -2596,7 +2582,7 @@ begin
           when csr_mscratch_c => -- mscratch (r/w): machine scratch register
             csr.rdata <= csr.mscratch;
           when csr_mepc_c => -- mepc (r/w): machine exception program counter
-            csr.rdata <= csr.mepc(data_width_c-1 downto 1) & '0';
+            csr.rdata <= csr.mepc;
           when csr_mcause_c => -- mcause (r/w): machine trap cause
             csr.rdata(31) <= csr.mcause(csr.mcause'left);
             csr.rdata(csr.mcause'left-1 downto 0) <= csr.mcause(csr.mcause'left-1 downto 0);
@@ -2849,12 +2835,12 @@ begin
   begin
     if (rstn_i = '0') then
       debug_ctrl.state        <= DEBUG_OFFLINE;
-      debug_ctrl.ext_halt_req <= "00";
+      debug_ctrl.ext_halt_req <= '0';
     elsif rising_edge(clk_i) then
       if (CPU_EXTENSION_RISCV_DEBUG = true) then
 
         -- rising edge detector --
-        debug_ctrl.ext_halt_req <= debug_ctrl.ext_halt_req(0) & db_halt_req_i;
+        debug_ctrl.ext_halt_req <= db_halt_req_i;
 
         -- state machine --
         case debug_ctrl.state is
@@ -2887,7 +2873,7 @@ begin
         end case;
       else -- debug mode NOT implemented
         debug_ctrl.state        <= DEBUG_OFFLINE;
-        debug_ctrl.ext_halt_req <= "00";
+        debug_ctrl.ext_halt_req <= '0';
       end if;
     end if;
   end process debug_control;
@@ -2900,7 +2886,7 @@ begin
   debug_ctrl.trig_break <= trap_ctrl.break_point and (debug_ctrl.running or -- we are in debug mode: re-enter debug mode
                            (csr.priv_m_mode and csr.dcsr_ebreakm and (not debug_ctrl.running)) or -- enabled goto-debug-mode in machine mode on "ebreak"
                            (csr.priv_u_mode and csr.dcsr_ebreaku and (not debug_ctrl.running))); -- enabled goto-debug-mode in user mode on "ebreak"
-  debug_ctrl.trig_halt <= (not debug_ctrl.ext_halt_req(1)) and debug_ctrl.ext_halt_req(0) and (not debug_ctrl.running); -- rising edge detector from external halt request (if not halted already)
+  debug_ctrl.trig_halt <= debug_ctrl.ext_halt_req and (not debug_ctrl.running); -- external halt request (if not halted already)
   debug_ctrl.trig_step <= csr.dcsr_step and (not debug_ctrl.running); -- single-step mode (trigger when NOT CURRENTLY in debug mode)
 
 
@@ -2925,7 +2911,7 @@ begin
     csr.dcsr_rd(08 downto 06) <= csr.dcsr_cause; -- debug mode entry cause
     csr.dcsr_rd(05) <= '0'; -- reserved
     csr.dcsr_rd(04) <= '0'; -- mprven: mstatus.mprv is ignored in debug mode
-    csr.dcsr_rd(03) <= trap_ctrl.irq_buf(interrupt_nm_irq_c); -- nmip: pending non-maskable interrupt
+    csr.dcsr_rd(03) <= '0'; -- nmip: pending non-maskable interrupt
     csr.dcsr_rd(02) <= csr.dcsr_step; -- step: single-step mode
     csr.dcsr_rd(01 downto 00) <= csr.dcsr_prv; -- prv: privilege mode when debug mode was entered
   end generate;