4b043d71f3fa62bc4b150ac1922321c508435583
:warning: [rtl/cpu] fixed bug in ALU's co-processor interface - CPU might have permanently stalled when executing an instruction from a disabled ISA extension
diff --git a/rtl/core/neorv32_cpu.vhd b/rtl/core/neorv32_cpu.vhd
index bbeeaa4..d77f35d 100644
--- a/rtl/core/neorv32_cpu.vhd
+++ b/rtl/core/neorv32_cpu.vhd
@@ -317,25 +317,30 @@ begin
   neorv32_cpu_cp_muldiv_inst_false:
   if (CPU_EXTENSION_RISCV_M = false) generate
     cp0_data  <= (others => '0');
-    cp0_valid <= '0';
+    cp0_valid <= cp0_start; -- to make sure CPU does not get stalled if there is an accidental access
   end generate;
 
 
   -- Co-Processor 1: Atomic Memory Access (SC - store-conditional) --------------------------
   -- -------------------------------------------------------------------------------------------
-  atomic_op_cp: process(ctrl, cp1_start)
+  atomic_op_cp: process(cp1_start, ctrl)
   begin
     -- "fake" co-processor for atomic operations
     -- used to get the result of a store-conditional operation into the data path
-    if (CPU_EXTENSION_RISCV_A = true) and (cp1_start = '1') then
-      cp1_data    <= (others => '0');
-      cp1_data(0) <= not ctrl(ctrl_bus_lock_c);
-      cp1_valid   <= '1';
+    if (CPU_EXTENSION_RISCV_A = true) then
+      if (cp1_start = '1') then
+        cp1_data    <= (others => '0');
+        cp1_data(0) <= not ctrl(ctrl_bus_lock_c);
+        cp1_valid   <= '1';
+      else
+        cp1_data  <= (others => '0');
+        cp1_valid <= '0';
+      end if;
     else
       cp1_data  <= (others => '0');
-      cp1_valid <= '0';
+      cp1_valid <= cp1_start; -- to make sure CPU does not get stalled if there is an accidental access
     end if;
-  end process;
+  end process atomic_op_cp;
 
 
   -- Co-Processor 2: Not implemented (yet) --------------------------------------------------
@@ -343,7 +348,7 @@ begin
   -- control: ctrl cp2_start
   -- inputs:  rs1 rs2 alu_cmp alu_opb
   cp2_data  <= (others => '0');
-  cp2_valid <= '0';
+  cp2_valid <= cp2_start; -- to make sure CPU does not get stalled if there is an accidental access
 
 
   -- Co-Processor 3: Not implemented (yet) --------------------------------------------------
@@ -351,7 +356,7 @@ begin
   -- control: ctrl cp3_start
   -- inputs:  rs1 rs2 alu_cmp alu_opb
   cp3_data  <= (others => '0');
-  cp3_valid <= '0';
+  cp3_valid <= cp3_start; -- to make sure CPU does not get stalled if there is an accidental access
 
 
   -- Bus Interface Unit ---------------------------------------------------------------------