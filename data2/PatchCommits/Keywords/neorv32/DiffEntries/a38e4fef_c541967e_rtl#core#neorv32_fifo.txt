a38e4fefca9ca84972b4b4cfc1e471f36f1a809d
:bug: [rtl] fixed minor bug in FIFO component
diff --git a/rtl/core/neorv32_fifo.vhd b/rtl/core/neorv32_fifo.vhd
index 5e516d0..5f45840 100644
--- a/rtl/core/neorv32_fifo.vhd
+++ b/rtl/core/neorv32_fifo.vhd
@@ -44,7 +44,7 @@ entity neorv32_fifo is
     FIFO_DEPTH : natural := 4;     -- number of fifo entries; has to be a power of two; min 1
     FIFO_WIDTH : natural := 32;    -- size of data elements in fifo
     FIFO_RSYNC : boolean := false; -- false = async read; true = sync read
-    FIFO_SAFE  : boolean := false  -- true = allow read/write only if data available
+    FIFO_SAFE  : boolean := false  -- true = allow read/write only if entry available
   );
   port (
     -- control --
@@ -72,6 +72,7 @@ architecture neorv32_fifo_rtl of neorv32_fifo is
     w_pnt : std_ulogic_vector(index_size_f(FIFO_DEPTH) downto 0); -- write pointer
     r_pnt : std_ulogic_vector(index_size_f(FIFO_DEPTH) downto 0); -- read pointer
     data  : fifo_data_t; -- fifo memory
+    datas : std_ulogic_vector(FIFO_WIDTH-1 downto 0);
     match : std_ulogic;
     empty : std_ulogic;
     full  : std_ulogic;
@@ -118,7 +119,7 @@ begin
   end process fifo_control;
 
   -- status --
-  fifo.match <= '1' when (fifo.r_pnt(fifo.r_pnt'left-1 downto 0) = fifo.w_pnt(fifo.w_pnt'left-1 downto 0))  else '0';
+  fifo.match <= '1' when (fifo.r_pnt(fifo.r_pnt'left-1 downto 0) = fifo.w_pnt(fifo.w_pnt'left-1 downto 0)) or (FIFO_DEPTH = 1) else '0';
   fifo.full  <= '1' when (fifo.r_pnt(fifo.r_pnt'left) /= fifo.w_pnt(fifo.w_pnt'left)) and (fifo.match = '1') else '0';
   fifo.empty <= '1' when (fifo.r_pnt(fifo.r_pnt'left)  = fifo.w_pnt(fifo.w_pnt'left)) and (fifo.match = '1') else '0';
   fifo.free  <= not fifo.full;
@@ -135,7 +136,11 @@ begin
   begin
     if rising_edge(clk_i) then
       if (fifo.we = '1') then
-        fifo.data(to_integer(unsigned(fifo.w_pnt(fifo.w_pnt'left-1 downto 0)))) <= wdata_i;
+        if (FIFO_DEPTH = 1) then
+          fifo.datas <= wdata_i;
+        else
+          fifo.data(to_integer(unsigned(fifo.w_pnt(fifo.w_pnt'left-1 downto 0)))) <= wdata_i;
+        end if;
       end if;
     end if;
   end process fifo_memory_write;
@@ -143,7 +148,7 @@ begin
   -- asynchronous read --
   fifo_read_async:
   if (FIFO_RSYNC = false) generate
-    rdata_o <= fifo.data(to_integer(unsigned(fifo.r_pnt(fifo.r_pnt'left-1 downto 0))));
+    rdata_o <= fifo.datas when (FIFO_DEPTH = 1) else fifo.data(to_integer(unsigned(fifo.r_pnt(fifo.r_pnt'left-1 downto 0))));
   end generate;
 
   -- synchronous read --
@@ -153,7 +158,11 @@ begin
     begin
       if rising_edge(clk_i) then
         if (fifo.re = '1') then
-          rdata_o <= fifo.data(to_integer(unsigned(fifo.r_pnt(fifo.r_pnt'left-1 downto 0))));
+          if (FIFO_DEPTH = 1) then
+            rdata_o <= fifo.datas;
+          else
+            rdata_o <= fifo.data(to_integer(unsigned(fifo.r_pnt(fifo.r_pnt'left-1 downto 0))));
+          end if;
         end if;
       end if;
     end process fifo_memory_read;