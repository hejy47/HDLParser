61326e80d6eff19fed0caa30557b56f88ebbb0d1
:bug: :warning: [rtl/core] reworked "atomic memory access" system of CPU due to conceptual design errors
diff --git a/rtl/core/neorv32_cpu_bus.vhd b/rtl/core/neorv32_cpu_bus.vhd
index da85c70..6d33a7b 100644
--- a/rtl/core/neorv32_cpu_bus.vhd
+++ b/rtl/core/neorv32_cpu_bus.vhd
@@ -70,7 +70,7 @@ entity neorv32_cpu_bus is
     mar_o          : out std_ulogic_vector(data_width_c-1 downto 0); -- current memory address register
     d_wait_o       : out std_ulogic; -- wait for access to complete
     --
-    bus_excl_ok_o  : out std_ulogic; -- bus exclusive access successful
+    excl_state_o   : out std_ulogic; -- atomic/exclusive access status
     ma_load_o      : out std_ulogic; -- misaligned load data address
     ma_store_o     : out std_ulogic; -- misaligned store data address
     be_load_o      : out std_ulogic; -- bus error on load data access
@@ -86,6 +86,7 @@ entity neorv32_cpu_bus is
     i_bus_we_o     : out std_ulogic; -- write enable
     i_bus_re_o     : out std_ulogic; -- read enable
     i_bus_cancel_o : out std_ulogic; -- cancel current bus transaction
+    i_bus_lock_o   : out std_ulogic; -- exclusive access request
     i_bus_ack_i    : in  std_ulogic; -- bus transfer acknowledge
     i_bus_err_i    : in  std_ulogic; -- bus transfer error
     i_bus_fence_o  : out std_ulogic; -- fence operation
@@ -97,11 +98,10 @@ entity neorv32_cpu_bus is
     d_bus_we_o     : out std_ulogic; -- write enable
     d_bus_re_o     : out std_ulogic; -- read enable
     d_bus_cancel_o : out std_ulogic; -- cancel current bus transaction
+    d_bus_lock_o   : out std_ulogic; -- exclusive access request
     d_bus_ack_i    : in  std_ulogic; -- bus transfer acknowledge
     d_bus_err_i    : in  std_ulogic; -- bus transfer error
-    d_bus_fence_o  : out std_ulogic; -- fence operation
-    d_bus_excl_o   : out std_ulogic; -- exclusive access request
-    d_bus_excl_i   : in  std_ulogic  -- state of exclusiv access (set if success)
+    d_bus_fence_o  : out std_ulogic  -- fence operation
   );
 end neorv32_cpu_bus;
 
@@ -130,6 +130,7 @@ architecture neorv32_cpu_bus_rtl of neorv32_cpu_bus is
   -- data access --
   signal d_bus_wdata : std_ulogic_vector(data_width_c-1 downto 0); -- write data
   signal d_bus_rdata : std_ulogic_vector(data_width_c-1 downto 0); -- read data
+  signal rdata_align : std_ulogic_vector(data_width_c-1 downto 0); -- read-data alignment
   signal d_bus_ben   : std_ulogic_vector(3 downto 0); -- write data byte enable
 
   -- misaligned access? --
@@ -145,6 +146,10 @@ architecture neorv32_cpu_bus_rtl of neorv32_cpu_bus is
   end record;
   signal i_arbiter, d_arbiter : bus_arbiter_t;
 
+  -- atomic/exclusive access - reservation controller --
+  signal exclusive_lock        : std_ulogic;
+  signal exclusive_lock_status : std_ulogic_vector(data_width_c-1 downto 0); -- read data
+
   -- physical memory protection --
   type pmp_addr_t is array (0 to PMP_NUM_REGIONS-1) of std_ulogic_vector(data_width_c-1 downto 0);
   type pmp_t is record
@@ -258,7 +263,7 @@ begin
 
   -- Data Interface: Read Data --------------------------------------------------------------
   -- -------------------------------------------------------------------------------------------
-  mem_out_buf: process(rstn_i, clk_i)
+  mem_di_reg: process(rstn_i, clk_i)
   begin
     if (rstn_i = '0') then
       mdi <= (others => def_rst_val_c);
@@ -267,7 +272,7 @@ begin
         mdi <= d_bus_rdata; -- memory data input register (MDI)
       end if;
     end if;
-  end process mem_out_buf;
+  end process mem_di_reg;
 
   -- input data alignment and sign extension --
   read_align: process(mdi, mar, ctrl_i)
@@ -284,16 +289,19 @@ begin
     -- actual data size --
     case ctrl_i(ctrl_bus_size_msb_c downto ctrl_bus_size_lsb_c) is
       when "00" => -- byte
-        rdata_o(31 downto 08) <= (others => ((not ctrl_i(ctrl_bus_unsigned_c)) and byte_in_v(7))); -- sign extension
-        rdata_o(07 downto 00) <= byte_in_v;
+        rdata_align(31 downto 08) <= (others => ((not ctrl_i(ctrl_bus_unsigned_c)) and byte_in_v(7))); -- sign extension
+        rdata_align(07 downto 00) <= byte_in_v;
       when "01" => -- half-word
-        rdata_o(31 downto 16) <= (others => ((not ctrl_i(ctrl_bus_unsigned_c)) and hword_in_v(15))); -- sign extension
-        rdata_o(15 downto 00) <= hword_in_v; -- high half-word
+        rdata_align(31 downto 16) <= (others => ((not ctrl_i(ctrl_bus_unsigned_c)) and hword_in_v(15))); -- sign extension
+        rdata_align(15 downto 00) <= hword_in_v; -- high half-word
       when others => -- word
-        rdata_o <= mdi; -- full word
+        rdata_align <= mdi; -- full word
     end case;
   end process read_align;
 
+  -- insert exclusive lock status for SC operations only --
+  rdata_o <= exclusive_lock_status when (CPU_EXTENSION_RISCV_A = true) and (ctrl_i(ctrl_bus_ch_lock_c) = '1') else rdata_align;
+
 
   -- Data Access Arbiter --------------------------------------------------------------------
   -- -------------------------------------------------------------------------------------------
@@ -348,7 +356,6 @@ begin
   d_bus_re_o    <= d_bus_re_buf when (PMP_NUM_REGIONS > pmp_num_regions_critical_c) else d_bus_re;
   d_bus_fence_o <= ctrl_i(ctrl_bus_fence_c);
   d_bus_rdata   <= d_bus_rdata_i;
-  d_bus_excl_o  <= ctrl_i(ctrl_bus_excl_c);
 
   -- additional register stage for control signals if using PMP_NUM_REGIONS > pmp_num_regions_critical_c --
   pmp_dbus_buffer: process(rstn_i, clk_i)
@@ -362,23 +369,36 @@ begin
     end if;
   end process pmp_dbus_buffer;
 
-  -- Atomic memory access - status buffer --
-  atomic_access_status: process(rstn_i, clk_i)
+
+  -- Reservation Controller (LR/SC [A extension]) -------------------------------------------
+  -- -------------------------------------------------------------------------------------------
+  exclusive_access_controller: process(rstn_i, clk_i)
   begin
     if (rstn_i = '0') then
-      bus_excl_ok_o <= '0';
+      exclusive_lock <= '0';
     elsif rising_edge(clk_i) then
       if (CPU_EXTENSION_RISCV_A = true) then
-        if (d_bus_ack_i = '1') then
-          bus_excl_ok_o <= d_bus_excl_i; -- set if access was exclusive
-        elsif (d_arbiter.rd_req = '0') and (d_arbiter.wr_req = '0') then -- bus access done
-          bus_excl_ok_o <= '0';
+        if (ctrl_i(ctrl_trap_c) = '1') or (ctrl_i(ctrl_bus_de_lock_c) = '1') then -- remove lock if entering a trap or executing a non-load-reservate memory access
+          exclusive_lock <= '0';
+        elsif (ctrl_i(ctrl_bus_lock_c) = '1') then -- set new lock
+          exclusive_lock <= '1';
         end if;
       else
-        bus_excl_ok_o <= '0';
+        exclusive_lock <= '0';
       end if;
     end if;
-  end process atomic_access_status;
+  end process exclusive_access_controller;
+
+  -- lock status for SC operation --
+  exclusive_lock_status(data_width_c-1 downto 1) <= (others => '0');
+  exclusive_lock_status(0) <= not exclusive_lock;
+
+  -- output reservation status to control unit (to check if SC should write at all) --
+  excl_state_o <= exclusive_lock;
+
+  -- output to memory system --
+  i_bus_lock_o <= '0'; -- instruction fetches cannot be lockes
+  d_bus_lock_o <= exclusive_lock;
 
 
   -- Instruction Fetch Arbiter --------------------------------------------------------------