1a1923390afef703c5f3ac580836021fc8a8e3ec
Merge pull request #434 from bradleyharden/test_modelsim_fixup
diff --git a/vunit/vhdl/verification_components/src/bus_master_pkg.vhd b/vunit/vhdl/verification_components/src/bus_master_pkg.vhd
index e4f3bc20..12a21378 100644
--- a/vunit/vhdl/verification_components/src/bus_master_pkg.vhd
+++ b/vunit/vhdl/verification_components/src/bus_master_pkg.vhd
@@ -12,6 +12,7 @@ use ieee.std_logic_1164.all;
 use work.logger_pkg.all;
 context work.com_context;
 use work.sync_pkg.all;
+use work.queue_pkg.all;
 
 package bus_master_pkg is
 
@@ -70,6 +71,20 @@ package bus_master_pkg is
                       constant data : std_logic_vector;
                       -- default byte enable is all bytes
                       constant byte_enable : std_logic_vector := "");
+  -- Procedures for burst bus write: Caller is responsible for allocation and
+  -- deallocation of data queue. Procedure cunsumes burst_length data words
+  -- from data queue. If data queue has less data words, all data
+  -- words are consumed and pop from empty queue error is raised.
+  procedure burst_write_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : std_logic_vector;
+                      constant burst_length : positive;
+                      constant data : queue_t);
+  procedure burst_write_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : natural;
+                      constant burst_length : positive;
+                      constant data : queue_t);
 
   -- Non blocking: Read the bus returning a reference to the future reply
   procedure read_bus(signal net : inout network_t;
@@ -80,11 +95,28 @@ package bus_master_pkg is
                      constant bus_handle : bus_master_t;
                      constant address : natural;
                      variable reference : inout bus_reference_t);
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : std_logic_vector;
+                      constant burst_length : positive;
+                      variable reference : inout bus_reference_t);
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : natural;
+                      constant burst_length : positive;
+                      variable reference : inout bus_reference_t);
 
   -- Blocking: Await read bus reply data
   procedure await_read_bus_reply(signal net : inout network_t;
                                  variable reference : inout bus_reference_t;
                                  variable data : inout std_logic_vector);
+  -- Procedure for burst read reply: Caller is responsible for allocation and
+  -- deallocation of data queue. Procedure pushes burst_length data words
+  -- into data queue.
+  procedure await_burst_read_bus_reply(signal net : inout network_t;
+                                 constant bus_handle : bus_master_t;
+                                 constant data : queue_t;
+                                 variable reference : inout bus_reference_t);
 
   -- Blocking: Read bus and check result against expected data
   procedure check_bus(signal net : inout network_t;
@@ -107,6 +139,19 @@ package bus_master_pkg is
                      constant bus_handle : bus_master_t;
                      constant address : natural;
                      variable data : inout std_logic_vector);
+  -- Procedure for burst bus read: Caller is responsible for allocation and
+  -- deallocation of data queue. Procedure pushes burst_length data words
+  -- into data queue.
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : std_logic_vector;
+                      constant burst_length : positive;
+                      constant data : queue_t);
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : natural;
+                      constant burst_length : positive;
+                      constant data : queue_t);
 
   -- Blocking: Wait until a read from address equals the value using
   -- std_match If timeout is reached error with msg
@@ -139,4 +184,6 @@ package bus_master_pkg is
   -- Message type definitions, used by VC-instances
   constant bus_write_msg : msg_type_t := new_msg_type("write bus");
   constant bus_read_msg : msg_type_t := new_msg_type("read bus");
+  constant bus_burst_write_msg : msg_type_t := new_msg_type("burst write bus");
+  constant bus_burst_read_msg : msg_type_t := new_msg_type("burst read bus");
 end package;