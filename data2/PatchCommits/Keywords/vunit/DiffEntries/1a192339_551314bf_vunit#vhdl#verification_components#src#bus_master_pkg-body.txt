1a1923390afef703c5f3ac580836021fc8a8e3ec
Merge pull request #434 from bradleyharden/test_modelsim_fixup
diff --git a/vunit/vhdl/verification_components/src/bus_master_pkg-body.vhd b/vunit/vhdl/verification_components/src/bus_master_pkg-body.vhd
index e96cb029..ac728d80 100644
--- a/vunit/vhdl/verification_components/src/bus_master_pkg-body.vhd
+++ b/vunit/vhdl/verification_components/src/bus_master_pkg-body.vhd
@@ -10,6 +10,8 @@ use ieee.numeric_std.all;
 
 use work.queue_pkg.all;
 use work.sync_pkg.all;
+use work.queue_pkg.all;
+use work.check_pkg.all;
 
 package body bus_master_pkg is
 
@@ -96,6 +98,34 @@ package body bus_master_pkg is
     write_bus(net, bus_handle, to_address(bus_handle, address), data, byte_enable);
   end;
 
+  procedure burst_write_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : std_logic_vector;
+                      constant burst_length : positive;
+                      constant data : queue_t) is
+    variable request_msg : msg_t := new_msg(bus_burst_write_msg);
+    variable full_address : std_logic_vector(bus_handle.p_address_length-1 downto 0) := (others => '0');
+    variable full_data : std_logic_vector(bus_handle.p_data_length-1 downto 0) := (others => '0');
+  begin
+    full_address(address'length-1 downto 0) := address;
+    push_std_ulogic_vector(request_msg, full_address);
+    push_integer(request_msg, burst_length);
+    for i in 0 to burst_length-1 loop
+      full_data(bus_handle.p_data_length-1 downto 0) := pop(data);
+      push_std_ulogic_vector(request_msg, full_data);
+    end loop;
+    send(net, bus_handle.p_actor, request_msg);
+  end procedure;
+
+  procedure burst_write_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : natural;
+                      constant burst_length : positive;
+                      constant data : queue_t) is
+  begin
+    burst_write_bus(net, bus_handle, to_address(bus_handle, address), burst_length, data);
+  end procedure;
+
   procedure check_bus(signal net : inout network_t;
                       constant bus_handle : bus_master_t;
                       constant address : std_logic_vector;
@@ -158,6 +188,30 @@ package body bus_master_pkg is
     read_bus(net, bus_handle, to_address(bus_handle, address), reference);
   end;
 
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : std_logic_vector;
+                      constant burst_length : positive;
+                      variable reference : inout bus_reference_t) is
+    variable full_address : std_logic_vector(bus_handle.p_address_length-1 downto 0) := (others => '0');
+    alias request_msg : msg_t is reference;
+  begin
+    request_msg := new_msg(bus_burst_read_msg);
+    full_address(address'length-1 downto 0) := address;
+    push_std_ulogic_vector(request_msg, full_address);
+    push_integer(request_msg, burst_length);
+    send(net, bus_handle.p_actor, request_msg);
+  end procedure;
+
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : natural;
+                      constant burst_length : positive;
+                      variable reference : inout bus_reference_t) is
+  begin
+    burst_read_bus(net, bus_handle, to_address(bus_handle, address), burst_length, reference);
+  end procedure;
+
   -- Await read bus reply
   procedure await_read_bus_reply(signal net : inout network_t;
                                  variable reference : inout bus_reference_t;
@@ -171,6 +225,25 @@ package body bus_master_pkg is
     delete(reply_msg);
   end procedure;
 
+  procedure await_burst_read_bus_reply(signal net : inout network_t;
+                                 constant bus_handle : bus_master_t;
+                                 constant data : queue_t;
+                                 variable reference : inout bus_reference_t) is
+    variable reply_msg : msg_t;
+    alias request_msg : msg_t is reference;
+    variable d : std_logic_vector(bus_handle.p_data_length-1 downto 0);
+    variable burst_length : positive;
+  begin
+    receive_reply(net, request_msg, reply_msg);
+    burst_length := pop_integer(reply_msg);
+    for i in 0 to burst_length-1 loop
+      d := pop_std_ulogic_vector(reply_msg)(d'range);
+      push(data, d);
+    end loop;
+    delete(request_msg);
+    delete(reply_msg);
+  end procedure;
+
   -- Blocking read with immediate reply
   procedure read_bus(signal net : inout network_t;
                      constant bus_handle : bus_master_t;
@@ -191,6 +264,26 @@ package body bus_master_pkg is
     read_bus(net, bus_handle, to_address(bus_handle, address), data);
   end;
 
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : std_logic_vector;
+                      constant burst_length : positive;
+                      constant data : queue_t) is
+    variable reference : bus_reference_t;
+  begin
+    burst_read_bus(net, bus_handle, address, burst_length, reference);
+    await_burst_read_bus_reply(net, bus_handle, data, reference);
+  end procedure;
+
+  procedure burst_read_bus(signal net : inout network_t;
+                      constant bus_handle : bus_master_t;
+                      constant address : natural;
+                      constant burst_length : positive;
+                      constant data : queue_t) is
+  begin
+    burst_read_bus(net, bus_handle, to_address(bus_handle, address), burst_length, data);
+  end procedure;
+
   procedure wait_until_read_equals(
     signal net : inout network_t;
     bus_handle   : bus_master_t;