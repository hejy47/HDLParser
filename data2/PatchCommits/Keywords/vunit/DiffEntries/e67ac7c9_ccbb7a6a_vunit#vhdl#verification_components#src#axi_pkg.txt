e67ac7c9ca4a463d0cc8d4de927d67567c3ebbde
Add stall probability to all axi slave channels.
diff --git a/vunit/vhdl/verification_components/src/axi_pkg.vhd b/vunit/vhdl/verification_components/src/axi_pkg.vhd
index ebabb5f1..8d0074f9 100644
--- a/vunit/vhdl/verification_components/src/axi_pkg.vhd
+++ b/vunit/vhdl/verification_components/src/axi_pkg.vhd
@@ -27,29 +27,48 @@ package axi_pkg is
   subtype axi4_len_t is std_logic_vector(7 downto 0);
   subtype axi4_size_t is std_logic_vector(2 downto 0);
 
+  subtype probability_t is real range 0.0 to 1.0;
+
   type axi_slave_t is record
     -- Private
-    p_initial_address_channel_fifo_depth : positive;
+    p_initial_address_fifo_depth : positive;
+    p_initial_write_response_fifo_depth : positive;
     p_initial_check_4kbyte_boundary : boolean;
+    p_initial_address_stall_probability : probability_t;
+    p_initial_data_stall_probability : probability_t;
+    p_initial_write_response_stall_probability : probability_t;
     p_actor : actor_t;
     p_memory : memory_t;
     p_logger : logger_t;
   end record;
 
   constant axi_slave_logger : logger_t := get_logger("vunit_lib:axi_slave_pkg");
-  impure function new_axi_slave(address_channel_fifo_depth : positive := 1;
+  impure function new_axi_slave(memory : memory_t;
+                                address_fifo_depth : positive := 1;
+                                write_response_fifo_depth : positive := 1;
                                 check_4kbyte_boundary : boolean := true;
-                                memory : memory_t;
+                                address_stall_probability : probability_t := 0.0;
+                                data_stall_probability : probability_t := 0.0;
+                                write_response_stall_probability : probability_t := 0.0;
                                 logger : logger_t := axi_slave_logger) return axi_slave_t;
 
   -- Set the maximum number address channel tokens that can be queued
-  procedure set_address_channel_fifo_depth(signal net : inout network_t; axi_slave : axi_slave_t; depth : positive);
+  procedure set_address_fifo_depth(signal net : inout network_t; axi_slave : axi_slave_t; depth : positive);
 
   -- Set the maximum number write responses that can be queued
   procedure set_write_response_fifo_depth(signal net : inout network_t; axi_slave : axi_slave_t; depth : positive);
 
   -- Set the address channel stall probability
-  procedure set_address_channel_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t; probability : real);
+  procedure set_address_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t;
+                                          probability : probability_t);
+
+  -- Set the data channel stall probability
+  procedure set_data_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t;
+                                       probability : probability_t);
+
+  -- Set the write response stall probability
+  procedure set_write_response_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t;
+                                                 probability : probability_t);
 
   procedure enable_4kbyte_boundary_check(signal net : inout network_t; axi_slave : axi_slave_t);
   procedure disable_4kbyte_boundary_check(signal net : inout network_t; axi_slave : axi_slave_t);
@@ -68,35 +87,45 @@ package axi_pkg is
   -- 2. uses max arsize supported by data width
   procedure enable_well_behaved_check(signal net : inout network_t; axi_slave : axi_slave_t);
 
-  constant axi_slave_set_address_channel_fifo_depth_msg : msg_type_t := new_msg_type("axi slave set address channel fifo depth");
+  constant axi_slave_set_address_fifo_depth_msg : msg_type_t := new_msg_type("axi slave set address channel fifo depth");
   constant axi_slave_set_write_response_fifo_depth_msg : msg_type_t := new_msg_type("set write response fifo depth");
-  constant axi_slave_set_address_channel_stall_probability_msg : msg_type_t := new_msg_type("axi slave set address channel stall probability");
+  constant axi_slave_set_address_stall_probability_msg : msg_type_t := new_msg_type("axi slave set address channel stall probability");
+  constant axi_slave_set_data_stall_probability_msg : msg_type_t := new_msg_type("axi slave set data stall probability");
+  constant axi_slave_set_write_response_stall_probability_msg : msg_type_t := new_msg_type("axi slave set write response stall probability");
   constant axi_slave_configure_4kbyte_boundary_check_msg : msg_type_t := new_msg_type("axi slave configure 4kbyte boundary check");
   constant axi_slave_enable_well_behaved_check_msg : msg_type_t := new_msg_type("axi slave enable well behaved check");
 
 end package;
 
 package body axi_pkg is
-  impure function new_axi_slave(address_channel_fifo_depth : positive := 1;
+  impure function new_axi_slave(memory : memory_t;
+                                address_fifo_depth : positive := 1;
+                                write_response_fifo_depth : positive := 1;
                                 check_4kbyte_boundary : boolean := true;
-                                memory : memory_t;
+                                address_stall_probability : probability_t := 0.0;
+                                data_stall_probability : probability_t := 0.0;
+                                write_response_stall_probability : probability_t := 0.0;
                                 logger : logger_t := axi_slave_logger) return axi_slave_t is
   begin
     return (p_actor => new_actor,
-            p_initial_address_channel_fifo_depth => address_channel_fifo_depth,
+            p_initial_address_fifo_depth => address_fifo_depth,
+            p_initial_write_response_fifo_depth => write_response_fifo_depth,
             p_initial_check_4kbyte_boundary => check_4kbyte_boundary,
+            p_initial_address_stall_probability => address_stall_probability,
+            p_initial_data_stall_probability => data_stall_probability,
+            p_initial_write_response_stall_probability => write_response_stall_probability,
             p_memory => to_vc_interface(memory, logger),
             p_logger => logger);
   end;
 
-  procedure set_address_channel_fifo_depth(signal net : inout network_t; axi_slave : axi_slave_t; depth : positive) is
+  procedure set_address_fifo_depth(signal net : inout network_t; axi_slave : axi_slave_t; depth : positive) is
     variable request_msg : msg_t;
     variable ack : boolean;
   begin
-    request_msg := new_msg(axi_slave_set_address_channel_fifo_depth_msg);
+    request_msg := new_msg(axi_slave_set_address_fifo_depth_msg);
     push(request_msg, depth);
     request(net, axi_slave.p_actor, request_msg, ack);
-    assert ack report "Failed on set_address_channel_fifo_depth command";
+    assert ack report "Failed on set_address_fifo_depth command";
   end;
 
   procedure set_write_response_fifo_depth(signal net : inout network_t; axi_slave : axi_slave_t; depth : positive) is
@@ -109,14 +138,37 @@ package body axi_pkg is
     assert ack report "Failed on set_write_response_fifo_depth command";
   end;
 
-  procedure set_address_channel_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t; probability : real) is
+  procedure set_address_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t;
+                                          probability : probability_t) is
+    variable request_msg : msg_t;
+    variable ack : boolean;
+  begin
+    request_msg := new_msg(axi_slave_set_address_stall_probability_msg);
+    push_real(request_msg, probability);
+    request(net, axi_slave.p_actor, request_msg, ack);
+    assert ack report "Failed on set_address_stall_probability command";
+  end;
+
+  procedure set_data_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t;
+                                       probability : probability_t) is
+    variable request_msg : msg_t;
+    variable ack : boolean;
+  begin
+    request_msg := new_msg(axi_slave_set_data_stall_probability_msg);
+    push_real(request_msg, probability);
+    request(net, axi_slave.p_actor, request_msg, ack);
+    assert ack report "Failed on set_data_stall_probability command";
+  end;
+
+  procedure set_write_response_stall_probability(signal net : inout network_t; axi_slave : axi_slave_t;
+                                                 probability : probability_t) is
     variable request_msg : msg_t;
     variable ack : boolean;
   begin
-    request_msg := new_msg(axi_slave_set_address_channel_stall_probability_msg);
+    request_msg := new_msg(axi_slave_set_write_response_stall_probability_msg);
     push_real(request_msg, probability);
     request(net, axi_slave.p_actor, request_msg, ack);
-    assert ack report "Failed on set_address_channel_stall_probability command";
+    assert ack report "Failed on set_write_response_stall_probability command";
   end;
 
   procedure configure_4kbyte_boundary_check(signal net : inout network_t;