f6537bb85d5ef051583d49253de4b01f859c3e51
Update com.
diff --git a/vunit/vhdl/com/src/com_api.vhd b/vunit/vhdl/com/src/com_api.vhd
index daad92b4..ea3ae2ee 100644
--- a/vunit/vhdl/com/src/com_api.vhd
+++ b/vunit/vhdl/com/src/com_api.vhd
@@ -5,169 +5,108 @@
 -- License, v. 2.0. If a copy of the MPL was not distributed with this file,
 -- You can obtain one at http://mozilla.org/MPL/2.0/.
 --
--- Copyright (c) 2015-2016, Lars Asplund lars.anders.asplund@gmail.com
+-- Copyright (c) 2015-2017, Lars Asplund lars.anders.asplund@gmail.com
 
 use work.com_types_pkg.all;
+use work.queue_pkg.all;
 
 package com_pkg is
   signal net : network_t := idle_network;
+  alias event is net;
 
-  type messenger_t is protected
-    -----------------------------------------------------------------------------
-    -- Handling of actors
-    -----------------------------------------------------------------------------
-    impure function create (
-      constant name       :    string   := "";
-      constant inbox_size : in positive := positive'high)
-      return actor_t;
-    impure function find (
-      constant name                     : string;
-      constant enable_deferred_creation : boolean := true)
-      return actor_t;
-    procedure destroy (
-      variable actor  : inout actor_t;
-      variable status : out   com_status_t);
-    procedure reset_messenger;
-    impure function num_of_actors
-      return natural;
-    impure function num_of_deferred_creations
-      return natural;
-    impure function unknown_actor (
-      constant actor : actor_t)
-      return boolean;
-    impure function deferred (
-      constant actor : actor_t)
-      return boolean;
-    impure function inbox_is_full (
-      constant actor : actor_t)
-      return boolean;
-    impure function inbox_size (
-      constant actor : actor_t)
-      return natural;
-
-    -----------------------------------------------------------------------------
-    -- Send related subprograms
-    -----------------------------------------------------------------------------
-    procedure send (
-      constant sender     : in  actor_t;
-      constant receiver   : in  actor_t;
-      constant request_id : in  message_id_t;
-      constant payload    : in  string;
-      variable receipt    : out receipt_t);
-    procedure publish (
-      constant sender  : in  actor_t;
-      constant payload : in  string;
-      variable status  : out com_status_t);
+  -----------------------------------------------------------------------------
+  -- Handling of actors
+  -----------------------------------------------------------------------------
+  impure function create (name : string := ""; inbox_size : positive := positive'high) return actor_t;  --
+  impure function find (name  : string; enable_deferred_creation : boolean := true) return actor_t;
+  impure function name (actor : actor_t) return string;
 
-    -----------------------------------------------------------------------------
-    -- Receive related subprograms
-    -----------------------------------------------------------------------------
-    impure function has_messages (
-      constant actor : actor_t)
-      return boolean;
-    impure function get_first_message_payload (
-      constant actor : actor_t)
-      return string;
-    impure function get_first_message_sender (
-      constant actor : actor_t)
-      return actor_t;
-    impure function get_first_message_id (
-      constant actor : actor_t)
-      return message_id_t;
-    impure function get_first_message_request_id (
-      constant actor : actor_t)
-      return message_id_t;
-    procedure delete_first_envelope (
-      constant actor : in actor_t);
-    impure function has_reply_stash_message (
-      constant actor      : actor_t;
-      constant request_id : message_id_t := no_message_id_c)
-      return boolean;
-    impure function get_reply_stash_message_payload (
-      constant actor : actor_t)
-      return string;
-    impure function get_reply_stash_message_sender (
-      constant actor : actor_t)
-      return actor_t;
-    impure function get_reply_stash_message_id (
-      constant actor : actor_t)
-      return message_id_t;
-    impure function get_reply_stash_message_request_id (
-      constant actor : actor_t)
-      return message_id_t;
-    impure function find_and_stash_reply_message (
-      constant actor      : actor_t;
-      constant request_id : message_id_t)
-      return boolean;
-    procedure clear_reply_stash (
-      constant actor : actor_t);
-    procedure subscribe (
-      constant subscriber : in  actor_t;
-      constant publisher  : in  actor_t;
-      variable status     : out com_status_t);
-    procedure unsubscribe (
-      constant subscriber : in  actor_t;
-      constant publisher  : in  actor_t;
-      variable status     : out com_status_t);
-    impure function num_of_missed_messages (
-      constant actor : actor_t)
-      return natural;
+  procedure destroy (actor : inout actor_t);
+  procedure reset_messenger;
 
-  end protected;
+  impure function num_of_actors return natural;
+  impure function num_of_deferred_creations return natural;
+  impure function inbox_size (actor      : actor_t) return natural;
+  -- Think more about the use cases for this API
+  impure function num_of_messages (actor : actor_t) return natural;
+  procedure resize_inbox (actor          : actor_t; new_size : natural);
 
   -----------------------------------------------------------------------------
-  -- Handling of actors
+  -- Message related subprograms
   -----------------------------------------------------------------------------
-  impure function create (
-    constant name       :    string   := "";
-    constant inbox_size : in positive := positive'high)
-    return actor_t;
-  impure function find (
-    constant name                     : string;
-    constant enable_deferred_creation : boolean := true)
-    return actor_t;
-  procedure destroy (
-    variable actor  : inout actor_t;
-    variable status : out   com_status_t);
-  procedure reset_messenger;
-  impure function num_of_actors
-    return natural;
-  impure function num_of_deferred_creations
-    return natural;
-  impure function inbox_size (
-    constant actor : actor_t)
-    return natural;
+  impure function new_message (sender : actor_t := null_actor_c) return message_ptr_t;
+  impure function compose (
+    payload    : string       := "";
+    sender     : actor_t      := null_actor_c;
+    request_id : message_id_t := no_message_id_c)
+    return message_ptr_t;
+  procedure copy (src       : inout message_ptr_t; dst : inout message_ptr_t);
+  procedure delete (message : inout message_ptr_t);
+
+  impure function create (sender :       actor_t := null_actor_c) return msg_t;
+  procedure delete (msg          : inout msg_t);
 
   -----------------------------------------------------------------------------
-  -- Send related subprograms
+  -- Primary send and receive related subprograms
   -----------------------------------------------------------------------------
   procedure send (
-    signal net        : inout network_t;
-    constant sender   : in    actor_t;
-    constant receiver : in    actor_t;
-    constant payload  : in    string := "";
-    variable receipt  : out   receipt_t;
-    constant timeout  : in    time   := max_timeout_c);
-  procedure send (
+    signal net            : inout network_t;
+    constant receiver     : in    actor_t;
+    variable message      : inout message_ptr_t;
+    constant timeout      : in    time    := max_timeout_c;
+    constant keep_message : in    boolean := true);
+  procedure receive (
     signal net        : inout network_t;
     constant receiver : in    actor_t;
-    constant payload  : in    string := "";
-    variable receipt  : out   receipt_t;
-    constant timeout  : in    time   := max_timeout_c);
-  procedure send (
+    variable message  : inout message_ptr_t;
+    constant timeout  : in    time := max_timeout_c);
+  procedure reply (
     signal net            : inout network_t;
-    constant receiver     : in    actor_t;
+    variable request      : inout message_ptr_t;
     variable message      : inout message_ptr_t;
-    variable receipt      : out   receipt_t;
     constant timeout      : in    time    := max_timeout_c;
-    constant keep_message : in    boolean := false);
-  procedure request (
-    signal net               : inout network_t;
-    constant sender          : in    actor_t;
-    constant receiver        : in    actor_t;
-    constant request_payload : in    string := "";
-    variable reply_message   : inout message_ptr_t;
-    constant timeout         : in    time   := max_timeout_c);
+    constant keep_message : in    boolean := true);
+  procedure receive_reply (
+    signal net       : inout network_t;
+    variable request : inout message_ptr_t;
+    variable message : inout message_ptr_t;
+    constant timeout : in    time := max_timeout_c);
+  procedure publish (
+    signal net            : inout network_t;
+    constant sender       : in    actor_t;
+    variable message      : inout message_ptr_t;
+    constant timeout      : in    time    := max_timeout_c;
+    constant keep_message : in    boolean := true);
+
+  procedure send (
+    signal net        : inout network_t;
+    constant receiver : in    actor_t;
+    variable msg      : inout msg_t;
+    constant timeout  : in    time := max_timeout_c);
+  procedure receive (
+    signal net        : inout network_t;
+    constant receiver : in    actor_t;
+    variable msg      : inout msg_t;
+    constant timeout  : in    time := max_timeout_c);
+  procedure reply (
+    signal net           : inout network_t;
+    variable request_msg : inout msg_t;
+    variable reply_msg   : inout msg_t;
+    constant timeout     : in    time := max_timeout_c);
+  procedure receive_reply (
+    signal net           : inout network_t;
+    variable request_msg : inout msg_t;
+    variable reply_msg   : inout msg_t;
+    constant timeout     : in    time := max_timeout_c);
+  procedure publish (
+    signal net       : inout network_t;
+    constant sender  : in    actor_t;
+    variable msg     : inout msg_t;
+    constant timeout : in    time := max_timeout_c);
+
+  -----------------------------------------------------------------------------
+  -- Secondary send and receive related subprograms
+  -----------------------------------------------------------------------------
   procedure request (
     signal net               : inout network_t;
     constant receiver        : in    actor_t;
@@ -175,123 +114,115 @@ package com_pkg is
     variable reply_message   : inout message_ptr_t;
     constant timeout         : in    time    := max_timeout_c;
     constant keep_message    : in    boolean := false);
-  procedure request (
-    signal net               : inout network_t;
-    constant sender          : in    actor_t;
-    constant receiver        : in    actor_t;
-    constant request_payload : in    string := "";
-    variable positive_ack    : out   boolean;
-    variable status          : out   com_status_t;
-    constant timeout         : in    time   := max_timeout_c);
   procedure request (
     signal net               : inout network_t;
     constant receiver        : in    actor_t;
     variable request_message : inout message_ptr_t;
     variable positive_ack    : out   boolean;
-    variable status          : out   com_status_t;
     constant timeout         : in    time    := max_timeout_c;
     constant keep_message    : in    boolean := false);
-  procedure reply (
-    signal net          : inout network_t;
-    constant sender     : in    actor_t;
-    constant receiver   : in    actor_t;
-    constant request_id : in    message_id_t;
-    constant payload    : in    string := "";
-    variable receipt    : out   receipt_t;
-    constant timeout    : in    time   := max_timeout_c);
-  procedure reply (
-    signal net          : inout network_t;
-    constant receiver   : in    actor_t;
-    constant request_id : in    message_id_t;
-    constant payload    : in    string := "";
-    variable receipt    : out   receipt_t;
-    constant timeout    : in    time   := max_timeout_c);
-  procedure reply (
+  procedure publish (
     signal net            : inout network_t;
-    constant receiver     : in    actor_t;
     variable message      : inout message_ptr_t;
-    variable receipt      : out   receipt_t;
     constant timeout      : in    time    := max_timeout_c;
     constant keep_message : in    boolean := false);
   procedure acknowledge (
     signal net            : inout network_t;
-    constant sender       : in    actor_t;
-    constant receiver     : in    actor_t;
-    constant request_id   : in    message_id_t;
+    variable request      : inout message_ptr_t;
     constant positive_ack : in    boolean := true;
-    variable receipt      : out   receipt_t;
     constant timeout      : in    time    := max_timeout_c);
+  procedure receive_reply (
+    signal net            : inout network_t;
+    variable request      : inout message_ptr_t;
+    variable positive_ack : out   boolean;
+    constant timeout      : in    time := max_timeout_c);
+
+
+  procedure request (
+    signal net               : inout network_t;
+    constant receiver        : in    actor_t;
+    variable request_msg : inout msg_t;
+    variable reply_msg   : inout msg_t;
+    constant timeout         : in    time    := max_timeout_c);
+  procedure request (
+    signal net               : inout network_t;
+    constant receiver        : in    actor_t;
+    variable request_msg : inout msg_t;
+    variable positive_ack    : out   boolean;
+    constant timeout         : in    time    := max_timeout_c);
   procedure acknowledge (
     signal net            : inout network_t;
-    constant receiver     : in    actor_t;
-    constant request_id   : in    message_id_t;
+    variable request_msg      : inout msg_t;
     constant positive_ack : in    boolean := true;
-    variable receipt      : out   receipt_t;
     constant timeout      : in    time    := max_timeout_c);
-  procedure publish (
-    signal net       : inout network_t;
-    constant sender  : in    actor_t;
-    constant payload : in    string := "";
-    variable status  : out   com_status_t);
-  procedure publish (
+  procedure receive_reply (
     signal net            : inout network_t;
-    variable message      : inout message_ptr_t;
-    variable status       : out   com_status_t;
-    constant keep_message : in    boolean := false);
+    variable request_msg      : inout msg_t;
+    variable positive_ack : out   boolean;
+    constant timeout      : in    time := max_timeout_c);
 
   -----------------------------------------------------------------------------
-  -- Receive related subprograms
+  -- Low-level subprograms primarily used for handling timeout wihout error
   -----------------------------------------------------------------------------
-  procedure wait_for_messages (
-    signal net               : in  network_t;
-    constant receiver        : in  actor_t;
-    variable status          : out com_status_t;
-    constant receive_timeout : in  time := max_timeout_c);
-  impure function has_messages (
-    constant actor : actor_t)
-    return boolean;
-  impure function get_message (
-    constant receiver          :    actor_t;
-    constant delete_from_inbox : in boolean := true)
-    return message_ptr_t;
-  procedure receive (
+  procedure wait_for_message (
+    signal net        : in  network_t;
+    constant receiver : in  actor_t;
+    variable status   : out com_status_t;
+    constant timeout  : in  time := max_timeout_c);
+  procedure wait_for_reply (
+    signal net       : inout network_t;
+    variable request : inout message_ptr_t;
+    variable status  : out   com_status_t;
+    constant timeout : in    time := max_timeout_c);
+  procedure wait_for_reply (
     signal net        : inout network_t;
-    constant receiver :       actor_t;
-    variable message  : inout message_ptr_t;
+    constant receiver : in    actor_t;
+    constant receipt  : in    receipt_t;
+    variable status   : out   com_status_t;
     constant timeout  : in    time := max_timeout_c);
-  procedure receive_reply (
-    signal net          : inout network_t;
-    constant receiver   :       actor_t;
-    constant request_id : in    message_id_t;
-    variable message    : inout message_ptr_t;
-    constant timeout    : in    time := max_timeout_c);
-  procedure receive_reply (
-    signal net            : inout network_t;
-    constant receiver     :       actor_t;
-    constant request_id   : in    message_id_t;
-    variable positive_ack : out   boolean;
-    variable status       : out   com_status_t;
-    constant timeout      : in    time := max_timeout_c);
+  impure function has_message (actor    : actor_t) return boolean;
+  impure function get_message (receiver : actor_t; delete_from_inbox : boolean := true) return message_ptr_t;
+  impure function get_reply (
+    receiver          : actor_t;
+    receipt           : receipt_t;
+    delete_from_inbox : boolean := true)
+    return message_ptr_t;
+  procedure get_reply (
+    variable request           : inout message_ptr_t;
+    variable reply             : inout message_ptr_t;
+    constant delete_from_inbox : in    boolean := true);
+
+
+  procedure wait_for_reply (
+    signal net       : inout network_t;
+    variable request_msg : inout msg_t;
+    variable status  : out   com_status_t;
+    constant timeout : in    time := max_timeout_c);
+  impure function get_message (receiver : actor_t) return msg_t;
+  procedure get_reply (variable request_msg : inout msg_t; variable reply_msg : inout msg_t);
+
+
+
+  -----------------------------------------------------------------------------
+  -- Subscriptions
+  -----------------------------------------------------------------------------
   procedure subscribe (
-    constant subscriber : in  actor_t;
-    constant publisher  : in  actor_t;
-    variable status     : out com_status_t);
+    subscriber : actor_t;
+    publisher : actor_t;
+    traffic_type : subscription_traffic_type_t := published);
   procedure unsubscribe (
-    constant subscriber : in  actor_t;
-    constant publisher  : in  actor_t;
-    variable status     : out com_status_t);
-  impure function num_of_missed_messages (
-    constant actor : actor_t)
-    return natural;
+    subscriber : actor_t;
+    publisher : actor_t;
+    traffic_type : subscription_traffic_type_t := published);
+
 
   -----------------------------------------------------------------------------
-  -- Message related subprograms
+  -- Misc
   -----------------------------------------------------------------------------
-  impure function compose (
-    constant payload    :    string       := "";
-    constant sender     :    actor_t      := null_actor_c;
-    constant request_id : in message_id_t := no_message_id_c)
-    return message_ptr_t;
-  procedure delete (
-    variable message : inout message_ptr_t);
+
+  procedure allow_timeout;
+  procedure allow_deprecated;
+  procedure deprecated (msg : string);
+  procedure push(queue : queue_t; variable value : inout msg_t);
+  impure function pop(queue : queue_t) return msg_t;
 end package;