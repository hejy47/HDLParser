bcdabe4ae13e5e49614f9572232f97c516ca261d
Fix "prefix of array attribute must be an object name"
diff --git a/vunit/vhdl/data_types/src/codec.vhd b/vunit/vhdl/data_types/src/codec.vhd
index 2b0e2587..f441b18d 100644
--- a/vunit/vhdl/data_types/src/codec.vhd
+++ b/vunit/vhdl/data_types/src/codec.vhd
@@ -517,7 +517,8 @@ package body codec_pkg is
   function decode (
     constant code : string)
     return string is
-    variable ret_val : string(get_range(code)'range) := (others => NUL);
+    constant ret_range : range_t := get_range(code);
+    variable ret_val : string(ret_range'range) := (others => NUL);
     variable index   : positive := code'left;
   begin
     decode(code, index, ret_val);
@@ -542,7 +543,8 @@ package body codec_pkg is
   function decode (
     constant code : string)
     return bit_vector is
-    variable ret_val : bit_vector(get_range(code)'range) := (others => '0');
+    constant ret_range : range_t := get_range(code);
+    variable ret_val : bit_vector(ret_range'range) := (others => '0');
     variable index   : positive := code'left;
   begin
     decode(code, index, ret_val);
@@ -560,7 +562,8 @@ package body codec_pkg is
   function decode (
     constant code : string)
     return std_ulogic_vector is
-    variable ret_val : std_ulogic_vector(get_range(code)'range) := (others => 'U');
+    constant ret_range : range_t := get_range(code);
+    variable ret_val : std_ulogic_vector(ret_range'range) := (others => 'U');
     variable index   : positive := code'left;
   begin
     decode(code, index, ret_val);
@@ -614,7 +617,8 @@ package body codec_pkg is
   function decode (
     constant code : string)
     return ieee.numeric_bit.unsigned is
-    variable ret_val : ieee.numeric_bit.unsigned(get_range(code)'range) := (others => '0');
+    constant ret_range : range_t := get_range(code);
+    variable ret_val : ieee.numeric_bit.unsigned(ret_range'range) := (others => '0');
     variable index   : positive := code'left;
   begin
     decode(code, index, ret_val);
@@ -632,7 +636,8 @@ package body codec_pkg is
   function decode (
     constant code : string)
     return ieee.numeric_bit.signed is
-    variable ret_val : ieee.numeric_bit.signed(get_range(code)'range) := (others => '0');
+    constant ret_range : range_t := get_range(code);
+    variable ret_val : ieee.numeric_bit.signed(ret_range'range) := (others => '0');
     variable index   : positive := code'left;
   begin
     decode(code, index, ret_val);
@@ -650,7 +655,8 @@ package body codec_pkg is
   function decode (
     constant code : string)
     return ieee.numeric_std.unsigned is
-    variable ret_val : ieee.numeric_std.unsigned(get_range(code)'range) := (others => 'U');
+    constant ret_range : range_t := get_range(code);
+    variable ret_val : ieee.numeric_std.unsigned(ret_range'range) := (others => 'U');
     variable index   : positive := code'left;
   begin
     decode(code, index, ret_val);
@@ -668,7 +674,8 @@ package body codec_pkg is
   function decode (
     constant code : string)
     return ieee.numeric_std.signed is
-    variable ret_val : ieee.numeric_std.signed(get_range(code)'range) := (others => 'U');
+    constant ret_range : range_t := get_range(code);
+    variable ret_val : ieee.numeric_std.signed(ret_range'range) := (others => 'U');
     variable index   : positive := code'left;
   begin
     decode(code, index, ret_val);