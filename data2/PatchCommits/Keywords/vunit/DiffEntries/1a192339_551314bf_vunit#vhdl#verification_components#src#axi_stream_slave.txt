1a1923390afef703c5f3ac580836021fc8a8e3ec
Merge pull request #434 from bradleyharden/test_modelsim_fixup
diff --git a/vunit/vhdl/verification_components/src/axi_stream_slave.vhd b/vunit/vhdl/verification_components/src/axi_stream_slave.vhd
index 091f7f9a..0d18ae30 100644
--- a/vunit/vhdl/verification_components/src/axi_stream_slave.vhd
+++ b/vunit/vhdl/verification_components/src/axi_stream_slave.vhd
@@ -17,22 +17,51 @@ entity axi_stream_slave is
   generic (
     slave : axi_stream_slave_t);
   port (
-    aclk   : in std_logic;
-    tvalid : in std_logic;
-    tready : out std_logic := '0';
-    tdata  : in std_logic_vector(data_length(slave)-1 downto 0);
-    tlast  : in std_logic                                         := '1';
-    tkeep  : in std_logic_vector(data_length(slave)/8-1 downto 0) := (others => '0');
-    tstrb  : in std_logic_vector(data_length(slave)/8-1 downto 0) := (others => '0');
-    tid    : in std_logic_vector(id_length(slave)-1 downto 0)     := (others => '0');
-    tdest  : in std_logic_vector(dest_length(slave)-1 downto 0)   := (others => '0');
-    tuser  : in std_logic_vector(user_length(slave)-1 downto 0)   := (others => '0')
+    aclk     : in std_logic;
+    areset_n : in std_logic  := '1';
+    tvalid   : in std_logic;
+    tready   : out std_logic := '0';
+    tdata    : in std_logic_vector(data_length(slave)-1 downto 0);
+    tlast    : in std_logic                                         := '1';
+    tkeep    : in std_logic_vector(data_length(slave)/8-1 downto 0) := (others => '0');
+    tstrb    : in std_logic_vector(data_length(slave)/8-1 downto 0) := (others => '0');
+    tid      : in std_logic_vector(id_length(slave)-1 downto 0)     := (others => '0');
+    tdest    : in std_logic_vector(dest_length(slave)-1 downto 0)   := (others => '0');
+    tuser    : in std_logic_vector(user_length(slave)-1 downto 0)   := (others => '0')
  );
 end entity;
 
 architecture a of axi_stream_slave is
+
+  constant notify_request_msg      : msg_type_t := new_msg_type("notify request");
+  constant message_queue           : queue_t    := new_queue;
+  signal   notify_bus_process_done : std_logic  := '0';
+
 begin
+
   main : process
+    variable request_msg    : msg_t;
+    variable notify_msg     : msg_t;
+    variable msg_type       : msg_type_t;
+  begin
+    receive(net, slave.p_actor, request_msg);
+    msg_type := message_type(request_msg);
+
+    if msg_type = stream_pop_msg or msg_type = pop_axi_stream_msg then
+      push(message_queue, request_msg);
+    elsif msg_type = wait_for_time_msg then
+      push(message_queue, request_msg);
+    elsif msg_type = wait_until_idle_msg then
+      notify_msg := new_msg(notify_request_msg);
+      push(message_queue, notify_msg);
+      wait on notify_bus_process_done until is_empty(message_queue);
+      handle_wait_until_idle(net, msg_type, request_msg);
+    else
+      unexpected_msg_type(msg_type);
+    end if;
+  end process;
+
+  bus_process : process
     variable reply_msg, msg : msg_t;
     variable msg_type : msg_type_t;
     variable axi_stream_transaction : axi_stream_transaction_t(
@@ -44,32 +73,43 @@ begin
       tuser(tuser'range)
     );
   begin
-    receive(net, slave.p_actor, msg);
-    msg_type := message_type(msg);
+      -- Wait for messages to arrive on the queue, posted by the process above
+    wait until rising_edge(aclk) and (not is_empty(message_queue));
 
-    handle_sync_message(net, msg_type, msg);
+    while not is_empty(message_queue) loop
+      msg := pop(message_queue);
+      msg_type := message_type(msg);
 
-    if msg_type = stream_pop_msg or msg_type = pop_axi_stream_msg then
-      tready <= '1';
-      wait until (tvalid and tready) = '1' and rising_edge(aclk);
-      tready <= '0';
-
-      axi_stream_transaction := (
-        tdata => tdata,
-        tlast => tlast = '1',
-        tkeep => tkeep,
-        tstrb => tstrb,
-        tid   => tid,
-        tdest => tdest,
-        tuser => tuser
-      );
+      if msg_type = wait_for_time_msg then
+        handle_sync_message(net, msg_type, msg);
+        wait until rising_edge(aclk);
+      elsif msg_type = notify_request_msg then
+        -- Ignore this message, but expect it
+      elsif msg_type = stream_pop_msg or msg_type = pop_axi_stream_msg then
+        tready <= '1';
+        wait until (tvalid and tready) = '1' and rising_edge(aclk);
+        tready <= '0';
 
-      reply_msg := new_axi_stream_transaction_msg(axi_stream_transaction);
-      reply(net, msg, reply_msg);
+        axi_stream_transaction := (
+          tdata => tdata,
+          tlast => tlast = '1',
+          tkeep => tkeep,
+          tstrb => tstrb,
+          tid   => tid,
+          tdest => tdest,
+          tuser => tuser
+        );
 
-    else
-      unexpected_msg_type(msg_type);
-    end if;
+        reply_msg := new_axi_stream_transaction_msg(axi_stream_transaction);
+        reply(net, msg, reply_msg);
+      else
+        unexpected_msg_type(msg_type);
+      end if;
+    end loop;
+
+    notify_bus_process_done <= '1';
+    wait until notify_bus_process_done = '1';
+    notify_bus_process_done <= '0';
 
   end process;
 
@@ -98,7 +138,7 @@ begin
         protocol_checker => slave.p_protocol_checker)
       port map (
         aclk     => aclk,
-        areset_n => open,
+        areset_n => areset_n,
         tvalid   => tvalid,
         tready   => tready,
         tdata    => tdata,