ada8fafb52390e3ecde0ac2ed790b24cf056ae05
A few modifications to udif's patch. Moved testing to a separate testbench. Created a testbenches folder with the first testbench in it. Tested udif's patch and it works for all LOOP_LOG2 settings from 0 to 5. Added golden_nonce adjustment code so the mining script no longer has to make the adjustments. Mining script updated with TODOs and removed the golden_nonce adjustments.
diff --git a/src/sha256_transform.v b/src/sha256_transform.v
index 392754f..df52af5 100644
--- a/src/sha256_transform.v
+++ b/src/sha256_transform.v
@@ -19,23 +19,34 @@
 * 
 */
 
+
+`timescale 1ns/1ps
+
 // A quick define to help index 32-bit words inside a larger register.
 `define IDX(x) (((x)+1)*(32)-1):((x)*(32))
 
 
 // Perform a SHA-256 transformation on the given 512-bit data, and 256-bit
 // initial state,
-// Outputs one 256-bit hash every 1 cycle.
+// Outputs one 256-bit hash every LOOP cycle(s).
+//
+// The LOOP parameter determines both the size and speed of this module.
+// A value of 1 implies a fully unrolled SHA-256 calculation spanning 64 round
+// modules and calculating a full SHA-256 hash every clock cycle. A value of
+// 2 implies a half-unrolled loop, with 32 round modules and calculating
+// a full hash in 2 clock cycles. And so forth.
 module sha256_transform #(
 	parameter LOOP = 6'd4
 ) (
 	input clk,
 	input feedback,
-	input [5:0]cnt,
+	input [5:0] cnt,
 	input [255:0] rx_state,
 	input [511:0] rx_input,
 	output reg [255:0] tx_hash
 );
+
+	// Constants defined by the SHA-2 standard.
 	localparam Ks = {
 		32'h428a2f98, 32'h71374491, 32'hb5c0fbcf, 32'he9b5dba5,
 		32'h3956c25b, 32'h59f111f1, 32'h923f82a4, 32'hab1c5ed5,
@@ -53,9 +64,7 @@ module sha256_transform #(
 		32'h391c0cb3, 32'h4ed8aa4a, 32'h5b9cca4f, 32'h682e6ff3,
 		32'h748f82ee, 32'h78a5636f, 32'h84c87814, 32'h8cc70208,
 		32'h90befffa, 32'ha4506ceb, 32'hbef9a3f7, 32'hc67178f2};
-	// How many time to loop on the same logic before advancing to next pipe stage
-	// At this point please keep this 2^N. We may fix this in the future to allow
-	// finer granularity in controlling design size
+
 
 	genvar i;
 
@@ -89,14 +98,17 @@ module sha256_transform #(
 
 	always @ (posedge clk)
 	begin
-		tx_hash[`IDX(0)] <= feedback ? tx_hash[`IDX(0)] : (rx_state[`IDX(0)] + HASHERS[64/LOOP-6'd1].state[`IDX(0)]);
-		tx_hash[`IDX(1)] <= feedback ? tx_hash[`IDX(1)] : (rx_state[`IDX(1)] + HASHERS[64/LOOP-6'd1].state[`IDX(1)]);
-		tx_hash[`IDX(2)] <= feedback ? tx_hash[`IDX(2)] : (rx_state[`IDX(2)] + HASHERS[64/LOOP-6'd1].state[`IDX(2)]);
-		tx_hash[`IDX(3)] <= feedback ? tx_hash[`IDX(3)] : (rx_state[`IDX(3)] + HASHERS[64/LOOP-6'd1].state[`IDX(3)]);
-		tx_hash[`IDX(4)] <= feedback ? tx_hash[`IDX(4)] : (rx_state[`IDX(4)] + HASHERS[64/LOOP-6'd1].state[`IDX(4)]);
-		tx_hash[`IDX(5)] <= feedback ? tx_hash[`IDX(5)] : (rx_state[`IDX(5)] + HASHERS[64/LOOP-6'd1].state[`IDX(5)]);
-		tx_hash[`IDX(6)] <= feedback ? tx_hash[`IDX(6)] : (rx_state[`IDX(6)] + HASHERS[64/LOOP-6'd1].state[`IDX(6)]);
-		tx_hash[`IDX(7)] <= feedback ? tx_hash[`IDX(7)] : (rx_state[`IDX(7)] + HASHERS[64/LOOP-6'd1].state[`IDX(7)]);
+		if (!feedback)
+		begin
+			tx_hash[`IDX(0)] <= rx_state[`IDX(0)] + HASHERS[64/LOOP-6'd1].state[`IDX(0)];
+			tx_hash[`IDX(1)] <= rx_state[`IDX(1)] + HASHERS[64/LOOP-6'd1].state[`IDX(1)];
+			tx_hash[`IDX(2)] <= rx_state[`IDX(2)] + HASHERS[64/LOOP-6'd1].state[`IDX(2)];
+			tx_hash[`IDX(3)] <= rx_state[`IDX(3)] + HASHERS[64/LOOP-6'd1].state[`IDX(3)];
+			tx_hash[`IDX(4)] <= rx_state[`IDX(4)] + HASHERS[64/LOOP-6'd1].state[`IDX(4)];
+			tx_hash[`IDX(5)] <= rx_state[`IDX(5)] + HASHERS[64/LOOP-6'd1].state[`IDX(5)];
+			tx_hash[`IDX(6)] <= rx_state[`IDX(6)] + HASHERS[64/LOOP-6'd1].state[`IDX(6)];
+			tx_hash[`IDX(7)] <= rx_state[`IDX(7)] + HASHERS[64/LOOP-6'd1].state[`IDX(7)];
+		end
 	end
 
 
@@ -106,7 +118,7 @@ endmodule
 module sha256_digester (clk, k, rx_w, rx_state, tx_w, tx_state);
 
 	input clk;
-	input  [31:0] k;
+	input [31:0] k;
 	input [511:0] rx_w;
 	input [255:0] rx_state;
 