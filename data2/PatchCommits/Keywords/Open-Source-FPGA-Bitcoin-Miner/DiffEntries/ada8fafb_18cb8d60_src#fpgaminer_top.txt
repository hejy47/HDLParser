ada8fafb52390e3ecde0ac2ed790b24cf056ae05
A few modifications to udif's patch. Moved testing to a separate testbench. Created a testbenches folder with the first testbench in it. Tested udif's patch and it works for all LOOP_LOG2 settings from 0 to 5. Added golden_nonce adjustment code so the mining script no longer has to make the adjustments. Mining script updated with TODOs and removed the golden_nonce adjustments.
diff --git a/src/fpgaminer_top.v b/src/fpgaminer_top.v
index bce4385..1cfa81f 100644
--- a/src/fpgaminer_top.v
+++ b/src/fpgaminer_top.v
@@ -24,8 +24,26 @@
 
 module fpgaminer_top (osc_clk);
 
-	localparam LOOP_LOG2 = 3;
-	localparam [5:0]LOOP = (6'd1 << LOOP_LOG2);
+	// The LOOP_LOG2 parameter determines how unrolled the SHA-256
+	// calculations are. For example, a setting of 1 will completely
+	// unroll the calculations, resulting in 128 rounds and a large, fast
+	// design.
+	//
+	// A setting of 2 will result in 64 rounds, with half the size and
+	// half the speed. 3 will be 32 rounds, with 1/4th the size and speed.
+	// And so on.
+	//
+	// Valid range: [0, 5]
+	parameter LOOP_LOG2 = 0;
+
+	// No need to adjust these parameters
+	localparam [5:0] LOOP = (6'd1 << LOOP_LOG2);
+	// The nonce will always be larger at the time we discover a valid
+	// hash. This is its offset from the nonce that gave rise to the valid
+	// hash (except when LOOP_LOG2 == 0 or 1, where the offset is 131 or
+	// 66 respectively).
+	localparam [31:0] GOLDEN_NONCE_OFFSET = (32'd1 << (7 - LOOP_LOG2)) + 32'd1;
+
 	input osc_clk;
 
 
@@ -34,29 +52,23 @@ module fpgaminer_top (osc_clk);
 	reg [511:0] data = 0;
 	reg [31:0] nonce = 32'h00000000;
 
+
 	//// PLL
 	wire hash_clk;
 	`ifndef SIM
-	//main_pll pll_blk (osc_clk, hash_clk);
-	assign hash_clk = osc_clk;
-	`endif
-
-
-	//// Simulation Timer
-	`ifdef SIM
-		reg gen_clk = 0;
-		wire clk = gen_clk;
+		main_pll pll_blk (osc_clk, hash_clk);
 	`else
-		wire clk = hash_clk;
+		assign hash_clk = osc_clk;
 	`endif
 
 
 	//// Hashers
 	wire [255:0] hash, hash2;
-	reg is_golden_ticket = 0;
+	reg [5:0] cnt = 6'd0;
+	reg feedback = 1'b0;
 
 	sha256_transform #(.LOOP(LOOP)) uut (
-		.clk(clk),
+		.clk(hash_clk),
 		.feedback(feedback),
 		.cnt(cnt),
 		.rx_state(state),
@@ -64,7 +76,7 @@ module fpgaminer_top (osc_clk);
 		.tx_hash(hash)
 	);
 	sha256_transform #(.LOOP(LOOP)) uut2 (
-		.clk(clk),
+		.clk(hash_clk),
 		.feedback(feedback),
 		.cnt(cnt),
 		.rx_state(256'h5be0cd191f83d9ab9b05688c510e527fa54ff53a3c6ef372bb67ae856a09e667),
@@ -76,35 +88,34 @@ module fpgaminer_top (osc_clk);
 	//// Virtual Wire Control
 	reg [255:0] midstate_buf = 0, data_buf = 0;
 	wire [255:0] midstate_vw, data2_vw;
-`ifndef SIM
-	virtual_wire # (.PROBE_WIDTH(0), .WIDTH(256), .INSTANCE_ID("STAT")) midstate_vw_blk(.probe(), .source(midstate_vw));
-	virtual_wire # (.PROBE_WIDTH(0), .WIDTH(256), .INSTANCE_ID("DAT2")) data2_vw_blk(.probe(), .source(data2_vw));
-`endif
+
+	`ifndef SIM
+		virtual_wire # (.PROBE_WIDTH(0), .WIDTH(256), .INSTANCE_ID("STAT")) midstate_vw_blk(.probe(), .source(midstate_vw));
+		virtual_wire # (.PROBE_WIDTH(0), .WIDTH(256), .INSTANCE_ID("DAT2")) data2_vw_blk(.probe(), .source(data2_vw));
+	`endif
+
 
 	//// Virtual Wire Output
 	reg [31:0] golden_nonce = 0;
+	
+	`ifndef SIM
+		virtual_wire # (.PROBE_WIDTH(32), .WIDTH(0), .INSTANCE_ID("GNON")) golden_nonce_vw_blk (.probe(golden_nonce), .source());
+		virtual_wire # (.PROBE_WIDTH(32), .WIDTH(0), .INSTANCE_ID("NONC")) nonce_vw_blk (.probe(nonce), .source());
+	`endif
+
 
-	reg [5:0]cnt;
-	reg feedback, feedback_d1;
-	wire [5:0]cnt_next;
-	wire [31:0]nonce_next;
+	//// Control Unit
+	reg is_golden_ticket = 1'b0;
+	reg feedback_d1 = 1'b1;
+	wire [5:0] cnt_next;
+	wire [31:0] nonce_next;
 	wire feedback_next;
-`ifndef SIM
-	wire reset;
-	assign reset = 1'b0;
-`else
-	reg reset;
-`endif
-	
-	// Note that the nonce reported to the external world will always be
-	// larger than the real nonce. Currently it is 132 bigger. So an
-	// external controller (like scripts/mine.tcl) needs to do:
-	// golden_nonce = golden_nonce - 132
-	// to get the real nonce.
-`ifndef SIM
-	virtual_wire # (.PROBE_WIDTH(32), .WIDTH(0), .INSTANCE_ID("GNON")) golden_nonce_vw_blk (.probe(golden_nonce), .source());
-	virtual_wire # (.PROBE_WIDTH(32), .WIDTH(0), .INSTANCE_ID("NONC")) nonce_vw_blk (.probe(nonce), .source());
-`endif
+	`ifndef SIM
+		wire reset;
+		assign reset = 1'b0;
+	`else
+		reg reset = 1'b0;	// NOTE: Reset is not currently used in the actual FPGA; for simulation only.
+	`endif
 
 	assign cnt_next =  reset ? 6'd0 : (LOOP == 1) ? 6'd0 : (cnt + 6'd1) & (LOOP-1);
 	// On the first count (cnt==0), load data from previous stage (no feedback)
@@ -116,12 +127,11 @@ module fpgaminer_top (osc_clk);
 		feedback_next ? nonce : (nonce + 32'd1);
 
 	
-	//// Control Unit
-	always @ (posedge clk)
+	always @ (posedge hash_clk)
 	begin
 		`ifdef SIM
-			midstate_buf <= 256'h2b3f81261b3cfd001db436cfd4c8f3f9c7450c9a0d049bee71cba0ea2619c0b5;
-			data_buf <= 256'h00000000000000000000000080000000_00000000_39f3001b6b7b8d4dc14bfc31;
+			//midstate_buf <= 256'h2b3f81261b3cfd001db436cfd4c8f3f9c7450c9a0d049bee71cba0ea2619c0b5;
+			//data_buf <= 256'h00000000000000000000000080000000_00000000_39f3001b6b7b8d4dc14bfc31;
 			//nonce <= 30411740;
 		`else
 			midstate_buf <= midstate_vw;
@@ -138,38 +148,23 @@ module fpgaminer_top (osc_clk);
 		nonce <= nonce_next;
 
 
-
 		// Check to see if the last hash generated is valid.
 		is_golden_ticket <= (hash2[255:224] == 32'h00000000) && !feedback_d1;
 		if(is_golden_ticket)
 		begin
-			golden_nonce <= nonce;
+			// TODO: Find a more compact calculation for this
+			if (LOOP == 1)
+				golden_nonce <= nonce - 32'd131;
+			else if (LOOP == 2)
+				golden_nonce <= nonce - 32'd66;
+			else
+				golden_nonce <= nonce - GOLDEN_NONCE_OFFSET;
 		end
 `ifdef SIM
 		if (!feedback_d1)
-			$display ("nonce: %8x\nhash2: %54x\n", nonce, hash2);
+			$display ("nonce: %8x\nhash2: %64x\n", nonce, hash2);
 `endif
 	end
 
-
-	//// Simulation Clock
-`ifdef SIM
-	initial begin
-		$dumpfile("test.vcd");
-		$dumpvars(0,fpgaminer_top);
- 		reset = 1;
-		#100
-		#5 gen_clk = 1; #5 gen_clk = 0;
-		#5 gen_clk = 1; #5 gen_clk = 0;
-		reset = 0;
-		#100
-		
-		repeat(500)
-		begin
-			#5 gen_clk = 1; #5 gen_clk = 0;
-		end
-	end
-`endif
-
 endmodule
 